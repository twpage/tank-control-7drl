/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/start.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/lodash/lodash.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/lodash.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, module) {var __WEBPACK_AMD_DEFINE_RESULT__;/**\n * @license\n * Lodash <https://lodash.com/>\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n;(function() {\n\n  /** Used as a safe reference for `undefined` in pre-ES5 environments. */\n  var undefined;\n\n  /** Used as the semantic version number. */\n  var VERSION = '4.17.5';\n\n  /** Used as the size to enable large array optimizations. */\n  var LARGE_ARRAY_SIZE = 200;\n\n  /** Error message constants. */\n  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',\n      FUNC_ERROR_TEXT = 'Expected a function';\n\n  /** Used to stand-in for `undefined` hash values. */\n  var HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n  /** Used as the maximum memoize cache size. */\n  var MAX_MEMOIZE_SIZE = 500;\n\n  /** Used as the internal argument placeholder. */\n  var PLACEHOLDER = '__lodash_placeholder__';\n\n  /** Used to compose bitmasks for cloning. */\n  var CLONE_DEEP_FLAG = 1,\n      CLONE_FLAT_FLAG = 2,\n      CLONE_SYMBOLS_FLAG = 4;\n\n  /** Used to compose bitmasks for value comparisons. */\n  var COMPARE_PARTIAL_FLAG = 1,\n      COMPARE_UNORDERED_FLAG = 2;\n\n  /** Used to compose bitmasks for function metadata. */\n  var WRAP_BIND_FLAG = 1,\n      WRAP_BIND_KEY_FLAG = 2,\n      WRAP_CURRY_BOUND_FLAG = 4,\n      WRAP_CURRY_FLAG = 8,\n      WRAP_CURRY_RIGHT_FLAG = 16,\n      WRAP_PARTIAL_FLAG = 32,\n      WRAP_PARTIAL_RIGHT_FLAG = 64,\n      WRAP_ARY_FLAG = 128,\n      WRAP_REARG_FLAG = 256,\n      WRAP_FLIP_FLAG = 512;\n\n  /** Used as default options for `_.truncate`. */\n  var DEFAULT_TRUNC_LENGTH = 30,\n      DEFAULT_TRUNC_OMISSION = '...';\n\n  /** Used to detect hot functions by number of calls within a span of milliseconds. */\n  var HOT_COUNT = 800,\n      HOT_SPAN = 16;\n\n  /** Used to indicate the type of lazy iteratees. */\n  var LAZY_FILTER_FLAG = 1,\n      LAZY_MAP_FLAG = 2,\n      LAZY_WHILE_FLAG = 3;\n\n  /** Used as references for various `Number` constants. */\n  var INFINITY = 1 / 0,\n      MAX_SAFE_INTEGER = 9007199254740991,\n      MAX_INTEGER = 1.7976931348623157e+308,\n      NAN = 0 / 0;\n\n  /** Used as references for the maximum length and index of an array. */\n  var MAX_ARRAY_LENGTH = 4294967295,\n      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,\n      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n\n  /** Used to associate wrap methods with their bit flags. */\n  var wrapFlags = [\n    ['ary', WRAP_ARY_FLAG],\n    ['bind', WRAP_BIND_FLAG],\n    ['bindKey', WRAP_BIND_KEY_FLAG],\n    ['curry', WRAP_CURRY_FLAG],\n    ['curryRight', WRAP_CURRY_RIGHT_FLAG],\n    ['flip', WRAP_FLIP_FLAG],\n    ['partial', WRAP_PARTIAL_FLAG],\n    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],\n    ['rearg', WRAP_REARG_FLAG]\n  ];\n\n  /** `Object#toString` result references. */\n  var argsTag = '[object Arguments]',\n      arrayTag = '[object Array]',\n      asyncTag = '[object AsyncFunction]',\n      boolTag = '[object Boolean]',\n      dateTag = '[object Date]',\n      domExcTag = '[object DOMException]',\n      errorTag = '[object Error]',\n      funcTag = '[object Function]',\n      genTag = '[object GeneratorFunction]',\n      mapTag = '[object Map]',\n      numberTag = '[object Number]',\n      nullTag = '[object Null]',\n      objectTag = '[object Object]',\n      promiseTag = '[object Promise]',\n      proxyTag = '[object Proxy]',\n      regexpTag = '[object RegExp]',\n      setTag = '[object Set]',\n      stringTag = '[object String]',\n      symbolTag = '[object Symbol]',\n      undefinedTag = '[object Undefined]',\n      weakMapTag = '[object WeakMap]',\n      weakSetTag = '[object WeakSet]';\n\n  var arrayBufferTag = '[object ArrayBuffer]',\n      dataViewTag = '[object DataView]',\n      float32Tag = '[object Float32Array]',\n      float64Tag = '[object Float64Array]',\n      int8Tag = '[object Int8Array]',\n      int16Tag = '[object Int16Array]',\n      int32Tag = '[object Int32Array]',\n      uint8Tag = '[object Uint8Array]',\n      uint8ClampedTag = '[object Uint8ClampedArray]',\n      uint16Tag = '[object Uint16Array]',\n      uint32Tag = '[object Uint32Array]';\n\n  /** Used to match empty string literals in compiled template source. */\n  var reEmptyStringLeading = /\\b__p \\+= '';/g,\n      reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\n      reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n\n  /** Used to match HTML entities and HTML characters. */\n  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,\n      reUnescapedHtml = /[&<>\"']/g,\n      reHasEscapedHtml = RegExp(reEscapedHtml.source),\n      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n\n  /** Used to match template delimiters. */\n  var reEscape = /<%-([\\s\\S]+?)%>/g,\n      reEvaluate = /<%([\\s\\S]+?)%>/g,\n      reInterpolate = /<%=([\\s\\S]+?)%>/g;\n\n  /** Used to match property names within property paths. */\n  var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n      reIsPlainProp = /^\\w*$/,\n      rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n  /**\n   * Used to match `RegExp`\n   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n   */\n  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g,\n      reHasRegExpChar = RegExp(reRegExpChar.source);\n\n  /** Used to match leading and trailing whitespace. */\n  var reTrim = /^\\s+|\\s+$/g,\n      reTrimStart = /^\\s+/,\n      reTrimEnd = /\\s+$/;\n\n  /** Used to match wrap detail comments. */\n  var reWrapComment = /\\{(?:\\n\\/\\* \\[wrapped with .+\\] \\*\\/)?\\n?/,\n      reWrapDetails = /\\{\\n\\/\\* \\[wrapped with (.+)\\] \\*/,\n      reSplitDetails = /,? & /;\n\n  /** Used to match words composed of alphanumeric characters. */\n  var reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n\n  /** Used to match backslashes in property paths. */\n  var reEscapeChar = /\\\\(\\\\)?/g;\n\n  /**\n   * Used to match\n   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).\n   */\n  var reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\n\n  /** Used to match `RegExp` flags from their coerced string values. */\n  var reFlags = /\\w*$/;\n\n  /** Used to detect bad signed hexadecimal string values. */\n  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n  /** Used to detect binary string values. */\n  var reIsBinary = /^0b[01]+$/i;\n\n  /** Used to detect host constructors (Safari). */\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n  /** Used to detect octal string values. */\n  var reIsOctal = /^0o[0-7]+$/i;\n\n  /** Used to detect unsigned integer values. */\n  var reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n  /** Used to match Latin Unicode letters (excluding mathematical operators). */\n  var reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\n\n  /** Used to ensure capturing order of template delimiters. */\n  var reNoMatch = /($^)/;\n\n  /** Used to match unescaped characters in compiled string literals. */\n  var reUnescapedString = /['\\n\\r\\u2028\\u2029\\\\]/g;\n\n  /** Used to compose unicode character classes. */\n  var rsAstralRange = '\\\\ud800-\\\\udfff',\n      rsComboMarksRange = '\\\\u0300-\\\\u036f',\n      reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n      rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n      rsDingbatRange = '\\\\u2700-\\\\u27bf',\n      rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n      rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n      rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n      rsPunctuationRange = '\\\\u2000-\\\\u206f',\n      rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n      rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n      rsVarRange = '\\\\ufe0e\\\\ufe0f',\n      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n\n  /** Used to compose unicode capture groups. */\n  var rsApos = \"['\\u2019]\",\n      rsAstral = '[' + rsAstralRange + ']',\n      rsBreak = '[' + rsBreakRange + ']',\n      rsCombo = '[' + rsComboRange + ']',\n      rsDigits = '\\\\d+',\n      rsDingbat = '[' + rsDingbatRange + ']',\n      rsLower = '[' + rsLowerRange + ']',\n      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n      rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n      rsNonAstral = '[^' + rsAstralRange + ']',\n      rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n      rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n      rsUpper = '[' + rsUpperRange + ']',\n      rsZWJ = '\\\\u200d';\n\n  /** Used to compose unicode regexes. */\n  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',\n      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',\n      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n      reOptMod = rsModifier + '?',\n      rsOptVar = '[' + rsVarRange + ']?',\n      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n      rsOrdLower = '\\\\d*(?:1st|2nd|3rd|(?![123])\\\\dth)(?=\\\\b|[A-Z_])',\n      rsOrdUpper = '\\\\d*(?:1ST|2ND|3RD|(?![123])\\\\dTH)(?=\\\\b|[a-z_])',\n      rsSeq = rsOptVar + reOptMod + rsOptJoin,\n      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,\n      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n  /** Used to match apostrophes. */\n  var reApos = RegExp(rsApos, 'g');\n\n  /**\n   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n   */\n  var reComboMark = RegExp(rsCombo, 'g');\n\n  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\n  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n  /** Used to match complex or compound words. */\n  var reUnicodeWord = RegExp([\n    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',\n    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,\n    rsUpper + '+' + rsOptContrUpper,\n    rsOrdUpper,\n    rsOrdLower,\n    rsDigits,\n    rsEmoji\n  ].join('|'), 'g');\n\n  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\n  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n  /** Used to detect strings that need a more robust regexp to match words. */\n  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n\n  /** Used to assign default `context` object properties. */\n  var contextProps = [\n    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',\n    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',\n    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',\n    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',\n    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'\n  ];\n\n  /** Used to make template sourceURLs easier to identify. */\n  var templateCounter = -1;\n\n  /** Used to identify `toStringTag` values of typed arrays. */\n  var typedArrayTags = {};\n  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\n  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\n  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\n  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\n  typedArrayTags[uint32Tag] = true;\n  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =\n  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\n  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\n  typedArrayTags[errorTag] = typedArrayTags[funcTag] =\n  typedArrayTags[mapTag] = typedArrayTags[numberTag] =\n  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =\n  typedArrayTags[setTag] = typedArrayTags[stringTag] =\n  typedArrayTags[weakMapTag] = false;\n\n  /** Used to identify `toStringTag` values supported by `_.clone`. */\n  var cloneableTags = {};\n  cloneableTags[argsTag] = cloneableTags[arrayTag] =\n  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\n  cloneableTags[boolTag] = cloneableTags[dateTag] =\n  cloneableTags[float32Tag] = cloneableTags[float64Tag] =\n  cloneableTags[int8Tag] = cloneableTags[int16Tag] =\n  cloneableTags[int32Tag] = cloneableTags[mapTag] =\n  cloneableTags[numberTag] = cloneableTags[objectTag] =\n  cloneableTags[regexpTag] = cloneableTags[setTag] =\n  cloneableTags[stringTag] = cloneableTags[symbolTag] =\n  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\n  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\n  cloneableTags[errorTag] = cloneableTags[funcTag] =\n  cloneableTags[weakMapTag] = false;\n\n  /** Used to map Latin Unicode letters to basic Latin letters. */\n  var deburredLetters = {\n    // Latin-1 Supplement block.\n    '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',\n    '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',\n    '\\xc7': 'C',  '\\xe7': 'c',\n    '\\xd0': 'D',  '\\xf0': 'd',\n    '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',\n    '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',\n    '\\xcc': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',\n    '\\xec': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',\n    '\\xd1': 'N',  '\\xf1': 'n',\n    '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',\n    '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',\n    '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',\n    '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',\n    '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',\n    '\\xc6': 'Ae', '\\xe6': 'ae',\n    '\\xde': 'Th', '\\xfe': 'th',\n    '\\xdf': 'ss',\n    // Latin Extended-A block.\n    '\\u0100': 'A',  '\\u0102': 'A', '\\u0104': 'A',\n    '\\u0101': 'a',  '\\u0103': 'a', '\\u0105': 'a',\n    '\\u0106': 'C',  '\\u0108': 'C', '\\u010a': 'C', '\\u010c': 'C',\n    '\\u0107': 'c',  '\\u0109': 'c', '\\u010b': 'c', '\\u010d': 'c',\n    '\\u010e': 'D',  '\\u0110': 'D', '\\u010f': 'd', '\\u0111': 'd',\n    '\\u0112': 'E',  '\\u0114': 'E', '\\u0116': 'E', '\\u0118': 'E', '\\u011a': 'E',\n    '\\u0113': 'e',  '\\u0115': 'e', '\\u0117': 'e', '\\u0119': 'e', '\\u011b': 'e',\n    '\\u011c': 'G',  '\\u011e': 'G', '\\u0120': 'G', '\\u0122': 'G',\n    '\\u011d': 'g',  '\\u011f': 'g', '\\u0121': 'g', '\\u0123': 'g',\n    '\\u0124': 'H',  '\\u0126': 'H', '\\u0125': 'h', '\\u0127': 'h',\n    '\\u0128': 'I',  '\\u012a': 'I', '\\u012c': 'I', '\\u012e': 'I', '\\u0130': 'I',\n    '\\u0129': 'i',  '\\u012b': 'i', '\\u012d': 'i', '\\u012f': 'i', '\\u0131': 'i',\n    '\\u0134': 'J',  '\\u0135': 'j',\n    '\\u0136': 'K',  '\\u0137': 'k', '\\u0138': 'k',\n    '\\u0139': 'L',  '\\u013b': 'L', '\\u013d': 'L', '\\u013f': 'L', '\\u0141': 'L',\n    '\\u013a': 'l',  '\\u013c': 'l', '\\u013e': 'l', '\\u0140': 'l', '\\u0142': 'l',\n    '\\u0143': 'N',  '\\u0145': 'N', '\\u0147': 'N', '\\u014a': 'N',\n    '\\u0144': 'n',  '\\u0146': 'n', '\\u0148': 'n', '\\u014b': 'n',\n    '\\u014c': 'O',  '\\u014e': 'O', '\\u0150': 'O',\n    '\\u014d': 'o',  '\\u014f': 'o', '\\u0151': 'o',\n    '\\u0154': 'R',  '\\u0156': 'R', '\\u0158': 'R',\n    '\\u0155': 'r',  '\\u0157': 'r', '\\u0159': 'r',\n    '\\u015a': 'S',  '\\u015c': 'S', '\\u015e': 'S', '\\u0160': 'S',\n    '\\u015b': 's',  '\\u015d': 's', '\\u015f': 's', '\\u0161': 's',\n    '\\u0162': 'T',  '\\u0164': 'T', '\\u0166': 'T',\n    '\\u0163': 't',  '\\u0165': 't', '\\u0167': 't',\n    '\\u0168': 'U',  '\\u016a': 'U', '\\u016c': 'U', '\\u016e': 'U', '\\u0170': 'U', '\\u0172': 'U',\n    '\\u0169': 'u',  '\\u016b': 'u', '\\u016d': 'u', '\\u016f': 'u', '\\u0171': 'u', '\\u0173': 'u',\n    '\\u0174': 'W',  '\\u0175': 'w',\n    '\\u0176': 'Y',  '\\u0177': 'y', '\\u0178': 'Y',\n    '\\u0179': 'Z',  '\\u017b': 'Z', '\\u017d': 'Z',\n    '\\u017a': 'z',  '\\u017c': 'z', '\\u017e': 'z',\n    '\\u0132': 'IJ', '\\u0133': 'ij',\n    '\\u0152': 'Oe', '\\u0153': 'oe',\n    '\\u0149': \"'n\", '\\u017f': 's'\n  };\n\n  /** Used to map characters to HTML entities. */\n  var htmlEscapes = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n  };\n\n  /** Used to map HTML entities to characters. */\n  var htmlUnescapes = {\n    '&amp;': '&',\n    '&lt;': '<',\n    '&gt;': '>',\n    '&quot;': '\"',\n    '&#39;': \"'\"\n  };\n\n  /** Used to escape characters for inclusion in compiled string literals. */\n  var stringEscapes = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    '\\n': 'n',\n    '\\r': 'r',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  /** Built-in method references without a dependency on `root`. */\n  var freeParseFloat = parseFloat,\n      freeParseInt = parseInt;\n\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n  /** Detect free variable `self`. */\n  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n  /** Used as a reference to the global object. */\n  var root = freeGlobal || freeSelf || Function('return this')();\n\n  /** Detect free variable `exports`. */\n  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n  /** Detect free variable `module`. */\n  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n  /** Detect the popular CommonJS extension `module.exports`. */\n  var moduleExports = freeModule && freeModule.exports === freeExports;\n\n  /** Detect free variable `process` from Node.js. */\n  var freeProcess = moduleExports && freeGlobal.process;\n\n  /** Used to access faster Node.js helpers. */\n  var nodeUtil = (function() {\n    try {\n      return freeProcess && freeProcess.binding && freeProcess.binding('util');\n    } catch (e) {}\n  }());\n\n  /* Node.js helper references. */\n  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,\n      nodeIsDate = nodeUtil && nodeUtil.isDate,\n      nodeIsMap = nodeUtil && nodeUtil.isMap,\n      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,\n      nodeIsSet = nodeUtil && nodeUtil.isSet,\n      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * A faster alternative to `Function#apply`, this function invokes `func`\n   * with the `this` binding of `thisArg` and the arguments of `args`.\n   *\n   * @private\n   * @param {Function} func The function to invoke.\n   * @param {*} thisArg The `this` binding of `func`.\n   * @param {Array} args The arguments to invoke `func` with.\n   * @returns {*} Returns the result of `func`.\n   */\n  function apply(func, thisArg, args) {\n    switch (args.length) {\n      case 0: return func.call(thisArg);\n      case 1: return func.call(thisArg, args[0]);\n      case 2: return func.call(thisArg, args[0], args[1]);\n      case 3: return func.call(thisArg, args[0], args[1], args[2]);\n    }\n    return func.apply(thisArg, args);\n  }\n\n  /**\n   * A specialized version of `baseAggregator` for arrays.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} setter The function to set `accumulator` values.\n   * @param {Function} iteratee The iteratee to transform keys.\n   * @param {Object} accumulator The initial aggregated object.\n   * @returns {Function} Returns `accumulator`.\n   */\n  function arrayAggregator(array, setter, iteratee, accumulator) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      var value = array[index];\n      setter(accumulator, value, iteratee(value), array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.forEach` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEach(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (iteratee(array[index], index, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.forEachRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEachRight(array, iteratee) {\n    var length = array == null ? 0 : array.length;\n\n    while (length--) {\n      if (iteratee(array[length], length, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.every` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if all elements pass the predicate check,\n   *  else `false`.\n   */\n  function arrayEvery(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (!predicate(array[index], index, array)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * A specialized version of `_.filter` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {Array} Returns the new filtered array.\n   */\n  function arrayFilter(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (predicate(value, index, array)) {\n        result[resIndex++] = value;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * A specialized version of `_.includes` for arrays without support for\n   * specifying an index to search from.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludes(array, value) {\n    var length = array == null ? 0 : array.length;\n    return !!length && baseIndexOf(array, value, 0) > -1;\n  }\n\n  /**\n   * This function is like `arrayIncludes` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludesWith(array, value, comparator) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (comparator(value, array[index])) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * A specialized version of `_.map` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the new mapped array.\n   */\n  function arrayMap(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = iteratee(array[index], index, array);\n    }\n    return result;\n  }\n\n  /**\n   * Appends the elements of `values` to `array`.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {Array} values The values to append.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayPush(array, values) {\n    var index = -1,\n        length = values.length,\n        offset = array.length;\n\n    while (++index < length) {\n      array[offset + index] = values[index];\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.reduce` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the first element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduce(array, iteratee, accumulator, initAccum) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    if (initAccum && length) {\n      accumulator = array[++index];\n    }\n    while (++index < length) {\n      accumulator = iteratee(accumulator, array[index], index, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.reduceRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the last element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduceRight(array, iteratee, accumulator, initAccum) {\n    var length = array == null ? 0 : array.length;\n    if (initAccum && length) {\n      accumulator = array[--length];\n    }\n    while (length--) {\n      accumulator = iteratee(accumulator, array[length], length, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.some` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if any element passes the predicate check,\n   *  else `false`.\n   */\n  function arraySome(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (predicate(array[index], index, array)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Gets the size of an ASCII `string`.\n   *\n   * @private\n   * @param {string} string The string inspect.\n   * @returns {number} Returns the string size.\n   */\n  var asciiSize = baseProperty('length');\n\n  /**\n   * Converts an ASCII `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function asciiToArray(string) {\n    return string.split('');\n  }\n\n  /**\n   * Splits an ASCII `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */\n  function asciiWords(string) {\n    return string.match(reAsciiWord) || [];\n  }\n\n  /**\n   * The base implementation of methods like `_.findKey` and `_.findLastKey`,\n   * without support for iteratee shorthands, which iterates over `collection`\n   * using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the found element or its key, else `undefined`.\n   */\n  function baseFindKey(collection, predicate, eachFunc) {\n    var result;\n    eachFunc(collection, function(value, key, collection) {\n      if (predicate(value, key, collection)) {\n        result = key;\n        return false;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.findIndex` and `_.findLastIndex` without\n   * support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {number} fromIndex The index to search from.\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseFindIndex(array, predicate, fromIndex, fromRight) {\n    var length = array.length,\n        index = fromIndex + (fromRight ? 1 : -1);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (predicate(array[index], index, array)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOf(array, value, fromIndex) {\n    return value === value\n      ? strictIndexOf(array, value, fromIndex)\n      : baseFindIndex(array, baseIsNaN, fromIndex);\n  }\n\n  /**\n   * This function is like `baseIndexOf` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOfWith(array, value, fromIndex, comparator) {\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (comparator(array[index], value)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.isNaN` without support for number objects.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n   */\n  function baseIsNaN(value) {\n    return value !== value;\n  }\n\n  /**\n   * The base implementation of `_.mean` and `_.meanBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the mean.\n   */\n  function baseMean(array, iteratee) {\n    var length = array == null ? 0 : array.length;\n    return length ? (baseSum(array, iteratee) / length) : NAN;\n  }\n\n  /**\n   * The base implementation of `_.property` without support for deep paths.\n   *\n   * @private\n   * @param {string} key The key of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function baseProperty(key) {\n    return function(object) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * The base implementation of `_.propertyOf` without support for deep paths.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function basePropertyOf(object) {\n    return function(key) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * The base implementation of `_.reduce` and `_.reduceRight`, without support\n   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} accumulator The initial value.\n   * @param {boolean} initAccum Specify using the first or last element of\n   *  `collection` as the initial value.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the accumulated value.\n   */\n  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {\n    eachFunc(collection, function(value, index, collection) {\n      accumulator = initAccum\n        ? (initAccum = false, value)\n        : iteratee(accumulator, value, index, collection);\n    });\n    return accumulator;\n  }\n\n  /**\n   * The base implementation of `_.sortBy` which uses `comparer` to define the\n   * sort order of `array` and replaces criteria objects with their corresponding\n   * values.\n   *\n   * @private\n   * @param {Array} array The array to sort.\n   * @param {Function} comparer The function to define sort order.\n   * @returns {Array} Returns `array`.\n   */\n  function baseSortBy(array, comparer) {\n    var length = array.length;\n\n    array.sort(comparer);\n    while (length--) {\n      array[length] = array[length].value;\n    }\n    return array;\n  }\n\n  /**\n   * The base implementation of `_.sum` and `_.sumBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the sum.\n   */\n  function baseSum(array, iteratee) {\n    var result,\n        index = -1,\n        length = array.length;\n\n    while (++index < length) {\n      var current = iteratee(array[index]);\n      if (current !== undefined) {\n        result = result === undefined ? current : (result + current);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.times` without support for iteratee shorthands\n   * or max array length checks.\n   *\n   * @private\n   * @param {number} n The number of times to invoke `iteratee`.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the array of results.\n   */\n  function baseTimes(n, iteratee) {\n    var index = -1,\n        result = Array(n);\n\n    while (++index < n) {\n      result[index] = iteratee(index);\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array\n   * of key-value pairs for `object` corresponding to the property names of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the key-value pairs.\n   */\n  function baseToPairs(object, props) {\n    return arrayMap(props, function(key) {\n      return [key, object[key]];\n    });\n  }\n\n  /**\n   * The base implementation of `_.unary` without support for storing metadata.\n   *\n   * @private\n   * @param {Function} func The function to cap arguments for.\n   * @returns {Function} Returns the new capped function.\n   */\n  function baseUnary(func) {\n    return function(value) {\n      return func(value);\n    };\n  }\n\n  /**\n   * The base implementation of `_.values` and `_.valuesIn` which creates an\n   * array of `object` property values corresponding to the property names\n   * of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the array of property values.\n   */\n  function baseValues(object, props) {\n    return arrayMap(props, function(key) {\n      return object[key];\n    });\n  }\n\n  /**\n   * Checks if a `cache` value for `key` exists.\n   *\n   * @private\n   * @param {Object} cache The cache to query.\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function cacheHas(cache, key) {\n    return cache.has(key);\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the first unmatched string symbol.\n   */\n  function charsStartIndex(strSymbols, chrSymbols) {\n    var index = -1,\n        length = strSymbols.length;\n\n    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n    return index;\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the last unmatched string symbol.\n   */\n  function charsEndIndex(strSymbols, chrSymbols) {\n    var index = strSymbols.length;\n\n    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n    return index;\n  }\n\n  /**\n   * Gets the number of `placeholder` occurrences in `array`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} placeholder The placeholder to search for.\n   * @returns {number} Returns the placeholder count.\n   */\n  function countHolders(array, placeholder) {\n    var length = array.length,\n        result = 0;\n\n    while (length--) {\n      if (array[length] === placeholder) {\n        ++result;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A\n   * letters to basic Latin letters.\n   *\n   * @private\n   * @param {string} letter The matched letter to deburr.\n   * @returns {string} Returns the deburred letter.\n   */\n  var deburrLetter = basePropertyOf(deburredLetters);\n\n  /**\n   * Used by `_.escape` to convert characters to HTML entities.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  var escapeHtmlChar = basePropertyOf(htmlEscapes);\n\n  /**\n   * Used by `_.template` to escape characters for inclusion in compiled string literals.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  function escapeStringChar(chr) {\n    return '\\\\' + stringEscapes[chr];\n  }\n\n  /**\n   * Gets the value at `key` of `object`.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {string} key The key of the property to get.\n   * @returns {*} Returns the property value.\n   */\n  function getValue(object, key) {\n    return object == null ? undefined : object[key];\n  }\n\n  /**\n   * Checks if `string` contains Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n   */\n  function hasUnicode(string) {\n    return reHasUnicode.test(string);\n  }\n\n  /**\n   * Checks if `string` contains a word composed of Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a word is found, else `false`.\n   */\n  function hasUnicodeWord(string) {\n    return reHasUnicodeWord.test(string);\n  }\n\n  /**\n   * Converts `iterator` to an array.\n   *\n   * @private\n   * @param {Object} iterator The iterator to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function iteratorToArray(iterator) {\n    var data,\n        result = [];\n\n    while (!(data = iterator.next()).done) {\n      result.push(data.value);\n    }\n    return result;\n  }\n\n  /**\n   * Converts `map` to its key-value pairs.\n   *\n   * @private\n   * @param {Object} map The map to convert.\n   * @returns {Array} Returns the key-value pairs.\n   */\n  function mapToArray(map) {\n    var index = -1,\n        result = Array(map.size);\n\n    map.forEach(function(value, key) {\n      result[++index] = [key, value];\n    });\n    return result;\n  }\n\n  /**\n   * Creates a unary function that invokes `func` with its argument transformed.\n   *\n   * @private\n   * @param {Function} func The function to wrap.\n   * @param {Function} transform The argument transform.\n   * @returns {Function} Returns the new function.\n   */\n  function overArg(func, transform) {\n    return function(arg) {\n      return func(transform(arg));\n    };\n  }\n\n  /**\n   * Replaces all `placeholder` elements in `array` with an internal placeholder\n   * and returns an array of their indexes.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {*} placeholder The placeholder to replace.\n   * @returns {Array} Returns the new array of placeholder indexes.\n   */\n  function replaceHolders(array, placeholder) {\n    var index = -1,\n        length = array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (value === placeholder || value === PLACEHOLDER) {\n        array[index] = PLACEHOLDER;\n        result[resIndex++] = index;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Gets the value at `key`, unless `key` is \"__proto__\".\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {string} key The key of the property to get.\n   * @returns {*} Returns the property value.\n   */\n  function safeGet(object, key) {\n    return key == '__proto__'\n      ? undefined\n      : object[key];\n  }\n\n  /**\n   * Converts `set` to an array of its values.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the values.\n   */\n  function setToArray(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = value;\n    });\n    return result;\n  }\n\n  /**\n   * Converts `set` to its value-value pairs.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the value-value pairs.\n   */\n  function setToPairs(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = [value, value];\n    });\n    return result;\n  }\n\n  /**\n   * A specialized version of `_.indexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function strictIndexOf(array, value, fromIndex) {\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * A specialized version of `_.lastIndexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function strictLastIndexOf(array, value, fromIndex) {\n    var index = fromIndex + 1;\n    while (index--) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return index;\n  }\n\n  /**\n   * Gets the number of symbols in `string`.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {number} Returns the string size.\n   */\n  function stringSize(string) {\n    return hasUnicode(string)\n      ? unicodeSize(string)\n      : asciiSize(string);\n  }\n\n  /**\n   * Converts `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function stringToArray(string) {\n    return hasUnicode(string)\n      ? unicodeToArray(string)\n      : asciiToArray(string);\n  }\n\n  /**\n   * Used by `_.unescape` to convert HTML entities to characters.\n   *\n   * @private\n   * @param {string} chr The matched character to unescape.\n   * @returns {string} Returns the unescaped character.\n   */\n  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);\n\n  /**\n   * Gets the size of a Unicode `string`.\n   *\n   * @private\n   * @param {string} string The string inspect.\n   * @returns {number} Returns the string size.\n   */\n  function unicodeSize(string) {\n    var result = reUnicode.lastIndex = 0;\n    while (reUnicode.test(string)) {\n      ++result;\n    }\n    return result;\n  }\n\n  /**\n   * Converts a Unicode `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function unicodeToArray(string) {\n    return string.match(reUnicode) || [];\n  }\n\n  /**\n   * Splits a Unicode `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */\n  function unicodeWords(string) {\n    return string.match(reUnicodeWord) || [];\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Create a new pristine `lodash` function using the `context` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 1.1.0\n   * @category Util\n   * @param {Object} [context=root] The context object.\n   * @returns {Function} Returns a new `lodash` function.\n   * @example\n   *\n   * _.mixin({ 'foo': _.constant('foo') });\n   *\n   * var lodash = _.runInContext();\n   * lodash.mixin({ 'bar': lodash.constant('bar') });\n   *\n   * _.isFunction(_.foo);\n   * // => true\n   * _.isFunction(_.bar);\n   * // => false\n   *\n   * lodash.isFunction(lodash.foo);\n   * // => false\n   * lodash.isFunction(lodash.bar);\n   * // => true\n   *\n   * // Create a suped-up `defer` in Node.js.\n   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;\n   */\n  var runInContext = (function runInContext(context) {\n    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));\n\n    /** Built-in constructor references. */\n    var Array = context.Array,\n        Date = context.Date,\n        Error = context.Error,\n        Function = context.Function,\n        Math = context.Math,\n        Object = context.Object,\n        RegExp = context.RegExp,\n        String = context.String,\n        TypeError = context.TypeError;\n\n    /** Used for built-in method references. */\n    var arrayProto = Array.prototype,\n        funcProto = Function.prototype,\n        objectProto = Object.prototype;\n\n    /** Used to detect overreaching core-js shims. */\n    var coreJsData = context['__core-js_shared__'];\n\n    /** Used to resolve the decompiled source of functions. */\n    var funcToString = funcProto.toString;\n\n    /** Used to check objects for own properties. */\n    var hasOwnProperty = objectProto.hasOwnProperty;\n\n    /** Used to generate unique IDs. */\n    var idCounter = 0;\n\n    /** Used to detect methods masquerading as native. */\n    var maskSrcKey = (function() {\n      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n      return uid ? ('Symbol(src)_1.' + uid) : '';\n    }());\n\n    /**\n     * Used to resolve the\n     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n     * of values.\n     */\n    var nativeObjectToString = objectProto.toString;\n\n    /** Used to infer the `Object` constructor. */\n    var objectCtorString = funcToString.call(Object);\n\n    /** Used to restore the original `_` reference in `_.noConflict`. */\n    var oldDash = root._;\n\n    /** Used to detect if a method is native. */\n    var reIsNative = RegExp('^' +\n      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n      .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n    );\n\n    /** Built-in value references. */\n    var Buffer = moduleExports ? context.Buffer : undefined,\n        Symbol = context.Symbol,\n        Uint8Array = context.Uint8Array,\n        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,\n        getPrototype = overArg(Object.getPrototypeOf, Object),\n        objectCreate = Object.create,\n        propertyIsEnumerable = objectProto.propertyIsEnumerable,\n        splice = arrayProto.splice,\n        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,\n        symIterator = Symbol ? Symbol.iterator : undefined,\n        symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n    var defineProperty = (function() {\n      try {\n        var func = getNative(Object, 'defineProperty');\n        func({}, '', {});\n        return func;\n      } catch (e) {}\n    }());\n\n    /** Mocked built-ins. */\n    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,\n        ctxNow = Date && Date.now !== root.Date.now && Date.now,\n        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;\n\n    /* Built-in method references for those with the same name as other `lodash` methods. */\n    var nativeCeil = Math.ceil,\n        nativeFloor = Math.floor,\n        nativeGetSymbols = Object.getOwnPropertySymbols,\n        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n        nativeIsFinite = context.isFinite,\n        nativeJoin = arrayProto.join,\n        nativeKeys = overArg(Object.keys, Object),\n        nativeMax = Math.max,\n        nativeMin = Math.min,\n        nativeNow = Date.now,\n        nativeParseInt = context.parseInt,\n        nativeRandom = Math.random,\n        nativeReverse = arrayProto.reverse;\n\n    /* Built-in method references that are verified to be native. */\n    var DataView = getNative(context, 'DataView'),\n        Map = getNative(context, 'Map'),\n        Promise = getNative(context, 'Promise'),\n        Set = getNative(context, 'Set'),\n        WeakMap = getNative(context, 'WeakMap'),\n        nativeCreate = getNative(Object, 'create');\n\n    /** Used to store function metadata. */\n    var metaMap = WeakMap && new WeakMap;\n\n    /** Used to lookup unminified function names. */\n    var realNames = {};\n\n    /** Used to detect maps, sets, and weakmaps. */\n    var dataViewCtorString = toSource(DataView),\n        mapCtorString = toSource(Map),\n        promiseCtorString = toSource(Promise),\n        setCtorString = toSource(Set),\n        weakMapCtorString = toSource(WeakMap);\n\n    /** Used to convert symbols to primitives and strings. */\n    var symbolProto = Symbol ? Symbol.prototype : undefined,\n        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n        symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` object which wraps `value` to enable implicit method\n     * chain sequences. Methods that operate on and return arrays, collections,\n     * and functions can be chained together. Methods that retrieve a single value\n     * or may return a primitive value will automatically end the chain sequence\n     * and return the unwrapped value. Otherwise, the value must be unwrapped\n     * with `_#value`.\n     *\n     * Explicit chain sequences, which must be unwrapped with `_#value`, may be\n     * enabled using `_.chain`.\n     *\n     * The execution of chained methods is lazy, that is, it's deferred until\n     * `_#value` is implicitly or explicitly called.\n     *\n     * Lazy evaluation allows several methods to support shortcut fusion.\n     * Shortcut fusion is an optimization to merge iteratee calls; this avoids\n     * the creation of intermediate arrays and can greatly reduce the number of\n     * iteratee executions. Sections of a chain sequence qualify for shortcut\n     * fusion if the section is applied to an array and iteratees accept only\n     * one argument. The heuristic for whether a section qualifies for shortcut\n     * fusion is subject to change.\n     *\n     * Chaining is supported in custom builds as long as the `_#value` method is\n     * directly or indirectly included in the build.\n     *\n     * In addition to lodash methods, wrappers have `Array` and `String` methods.\n     *\n     * The wrapper `Array` methods are:\n     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`\n     *\n     * The wrapper `String` methods are:\n     * `replace` and `split`\n     *\n     * The wrapper methods that support shortcut fusion are:\n     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,\n     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,\n     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`\n     *\n     * The chainable wrapper methods are:\n     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,\n     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,\n     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,\n     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,\n     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,\n     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,\n     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,\n     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,\n     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,\n     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,\n     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,\n     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,\n     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,\n     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,\n     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,\n     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,\n     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,\n     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,\n     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,\n     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,\n     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,\n     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,\n     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,\n     * `zipObject`, `zipObjectDeep`, and `zipWith`\n     *\n     * The wrapper methods that are **not** chainable by default are:\n     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,\n     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,\n     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,\n     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,\n     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,\n     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,\n     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,\n     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,\n     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,\n     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,\n     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,\n     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,\n     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,\n     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,\n     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,\n     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,\n     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,\n     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,\n     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,\n     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,\n     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,\n     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,\n     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,\n     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,\n     * `upperFirst`, `value`, and `words`\n     *\n     * @name _\n     * @constructor\n     * @category Seq\n     * @param {*} value The value to wrap in a `lodash` instance.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2, 3]);\n     *\n     * // Returns an unwrapped value.\n     * wrapped.reduce(_.add);\n     * // => 6\n     *\n     * // Returns a wrapped value.\n     * var squares = wrapped.map(square);\n     *\n     * _.isArray(squares);\n     * // => false\n     *\n     * _.isArray(squares.value());\n     * // => true\n     */\n    function lodash(value) {\n      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {\n        if (value instanceof LodashWrapper) {\n          return value;\n        }\n        if (hasOwnProperty.call(value, '__wrapped__')) {\n          return wrapperClone(value);\n        }\n      }\n      return new LodashWrapper(value);\n    }\n\n    /**\n     * The base implementation of `_.create` without support for assigning\n     * properties to the created object.\n     *\n     * @private\n     * @param {Object} proto The object to inherit from.\n     * @returns {Object} Returns the new object.\n     */\n    var baseCreate = (function() {\n      function object() {}\n      return function(proto) {\n        if (!isObject(proto)) {\n          return {};\n        }\n        if (objectCreate) {\n          return objectCreate(proto);\n        }\n        object.prototype = proto;\n        var result = new object;\n        object.prototype = undefined;\n        return result;\n      };\n    }());\n\n    /**\n     * The function whose prototype chain sequence wrappers inherit from.\n     *\n     * @private\n     */\n    function baseLodash() {\n      // No operation performed.\n    }\n\n    /**\n     * The base constructor for creating `lodash` wrapper objects.\n     *\n     * @private\n     * @param {*} value The value to wrap.\n     * @param {boolean} [chainAll] Enable explicit method chain sequences.\n     */\n    function LodashWrapper(value, chainAll) {\n      this.__wrapped__ = value;\n      this.__actions__ = [];\n      this.__chain__ = !!chainAll;\n      this.__index__ = 0;\n      this.__values__ = undefined;\n    }\n\n    /**\n     * By default, the template delimiters used by lodash are like those in\n     * embedded Ruby (ERB) as well as ES2015 template strings. Change the\n     * following template settings to use alternative delimiters.\n     *\n     * @static\n     * @memberOf _\n     * @type {Object}\n     */\n    lodash.templateSettings = {\n\n      /**\n       * Used to detect `data` property values to be HTML-escaped.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'escape': reEscape,\n\n      /**\n       * Used to detect code to be evaluated.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'evaluate': reEvaluate,\n\n      /**\n       * Used to detect `data` property values to inject.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'interpolate': reInterpolate,\n\n      /**\n       * Used to reference the data object in the template text.\n       *\n       * @memberOf _.templateSettings\n       * @type {string}\n       */\n      'variable': '',\n\n      /**\n       * Used to import variables into the compiled template.\n       *\n       * @memberOf _.templateSettings\n       * @type {Object}\n       */\n      'imports': {\n\n        /**\n         * A reference to the `lodash` function.\n         *\n         * @memberOf _.templateSettings.imports\n         * @type {Function}\n         */\n        '_': lodash\n      }\n    };\n\n    // Ensure wrappers are instances of `baseLodash`.\n    lodash.prototype = baseLodash.prototype;\n    lodash.prototype.constructor = lodash;\n\n    LodashWrapper.prototype = baseCreate(baseLodash.prototype);\n    LodashWrapper.prototype.constructor = LodashWrapper;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.\n     *\n     * @private\n     * @constructor\n     * @param {*} value The value to wrap.\n     */\n    function LazyWrapper(value) {\n      this.__wrapped__ = value;\n      this.__actions__ = [];\n      this.__dir__ = 1;\n      this.__filtered__ = false;\n      this.__iteratees__ = [];\n      this.__takeCount__ = MAX_ARRAY_LENGTH;\n      this.__views__ = [];\n    }\n\n    /**\n     * Creates a clone of the lazy wrapper object.\n     *\n     * @private\n     * @name clone\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the cloned `LazyWrapper` object.\n     */\n    function lazyClone() {\n      var result = new LazyWrapper(this.__wrapped__);\n      result.__actions__ = copyArray(this.__actions__);\n      result.__dir__ = this.__dir__;\n      result.__filtered__ = this.__filtered__;\n      result.__iteratees__ = copyArray(this.__iteratees__);\n      result.__takeCount__ = this.__takeCount__;\n      result.__views__ = copyArray(this.__views__);\n      return result;\n    }\n\n    /**\n     * Reverses the direction of lazy iteration.\n     *\n     * @private\n     * @name reverse\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the new reversed `LazyWrapper` object.\n     */\n    function lazyReverse() {\n      if (this.__filtered__) {\n        var result = new LazyWrapper(this);\n        result.__dir__ = -1;\n        result.__filtered__ = true;\n      } else {\n        result = this.clone();\n        result.__dir__ *= -1;\n      }\n      return result;\n    }\n\n    /**\n     * Extracts the unwrapped value from its lazy wrapper.\n     *\n     * @private\n     * @name value\n     * @memberOf LazyWrapper\n     * @returns {*} Returns the unwrapped value.\n     */\n    function lazyValue() {\n      var array = this.__wrapped__.value(),\n          dir = this.__dir__,\n          isArr = isArray(array),\n          isRight = dir < 0,\n          arrLength = isArr ? array.length : 0,\n          view = getView(0, arrLength, this.__views__),\n          start = view.start,\n          end = view.end,\n          length = end - start,\n          index = isRight ? end : (start - 1),\n          iteratees = this.__iteratees__,\n          iterLength = iteratees.length,\n          resIndex = 0,\n          takeCount = nativeMin(length, this.__takeCount__);\n\n      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {\n        return baseWrapperValue(array, this.__actions__);\n      }\n      var result = [];\n\n      outer:\n      while (length-- && resIndex < takeCount) {\n        index += dir;\n\n        var iterIndex = -1,\n            value = array[index];\n\n        while (++iterIndex < iterLength) {\n          var data = iteratees[iterIndex],\n              iteratee = data.iteratee,\n              type = data.type,\n              computed = iteratee(value);\n\n          if (type == LAZY_MAP_FLAG) {\n            value = computed;\n          } else if (!computed) {\n            if (type == LAZY_FILTER_FLAG) {\n              continue outer;\n            } else {\n              break outer;\n            }\n          }\n        }\n        result[resIndex++] = value;\n      }\n      return result;\n    }\n\n    // Ensure `LazyWrapper` is an instance of `baseLodash`.\n    LazyWrapper.prototype = baseCreate(baseLodash.prototype);\n    LazyWrapper.prototype.constructor = LazyWrapper;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a hash object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function Hash(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the hash.\n     *\n     * @private\n     * @name clear\n     * @memberOf Hash\n     */\n    function hashClear() {\n      this.__data__ = nativeCreate ? nativeCreate(null) : {};\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the hash.\n     *\n     * @private\n     * @name delete\n     * @memberOf Hash\n     * @param {Object} hash The hash to modify.\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function hashDelete(key) {\n      var result = this.has(key) && delete this.__data__[key];\n      this.size -= result ? 1 : 0;\n      return result;\n    }\n\n    /**\n     * Gets the hash value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Hash\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function hashGet(key) {\n      var data = this.__data__;\n      if (nativeCreate) {\n        var result = data[key];\n        return result === HASH_UNDEFINED ? undefined : result;\n      }\n      return hasOwnProperty.call(data, key) ? data[key] : undefined;\n    }\n\n    /**\n     * Checks if a hash value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Hash\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function hashHas(key) {\n      var data = this.__data__;\n      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n    }\n\n    /**\n     * Sets the hash `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Hash\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the hash instance.\n     */\n    function hashSet(key, value) {\n      var data = this.__data__;\n      this.size += this.has(key) ? 0 : 1;\n      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n      return this;\n    }\n\n    // Add methods to `Hash`.\n    Hash.prototype.clear = hashClear;\n    Hash.prototype['delete'] = hashDelete;\n    Hash.prototype.get = hashGet;\n    Hash.prototype.has = hashHas;\n    Hash.prototype.set = hashSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an list cache object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function ListCache(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the list cache.\n     *\n     * @private\n     * @name clear\n     * @memberOf ListCache\n     */\n    function listCacheClear() {\n      this.__data__ = [];\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the list cache.\n     *\n     * @private\n     * @name delete\n     * @memberOf ListCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function listCacheDelete(key) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      if (index < 0) {\n        return false;\n      }\n      var lastIndex = data.length - 1;\n      if (index == lastIndex) {\n        data.pop();\n      } else {\n        splice.call(data, index, 1);\n      }\n      --this.size;\n      return true;\n    }\n\n    /**\n     * Gets the list cache value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf ListCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function listCacheGet(key) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      return index < 0 ? undefined : data[index][1];\n    }\n\n    /**\n     * Checks if a list cache value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf ListCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function listCacheHas(key) {\n      return assocIndexOf(this.__data__, key) > -1;\n    }\n\n    /**\n     * Sets the list cache `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf ListCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the list cache instance.\n     */\n    function listCacheSet(key, value) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      if (index < 0) {\n        ++this.size;\n        data.push([key, value]);\n      } else {\n        data[index][1] = value;\n      }\n      return this;\n    }\n\n    // Add methods to `ListCache`.\n    ListCache.prototype.clear = listCacheClear;\n    ListCache.prototype['delete'] = listCacheDelete;\n    ListCache.prototype.get = listCacheGet;\n    ListCache.prototype.has = listCacheHas;\n    ListCache.prototype.set = listCacheSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a map cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function MapCache(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the map.\n     *\n     * @private\n     * @name clear\n     * @memberOf MapCache\n     */\n    function mapCacheClear() {\n      this.size = 0;\n      this.__data__ = {\n        'hash': new Hash,\n        'map': new (Map || ListCache),\n        'string': new Hash\n      };\n    }\n\n    /**\n     * Removes `key` and its value from the map.\n     *\n     * @private\n     * @name delete\n     * @memberOf MapCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function mapCacheDelete(key) {\n      var result = getMapData(this, key)['delete'](key);\n      this.size -= result ? 1 : 0;\n      return result;\n    }\n\n    /**\n     * Gets the map value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf MapCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function mapCacheGet(key) {\n      return getMapData(this, key).get(key);\n    }\n\n    /**\n     * Checks if a map value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf MapCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function mapCacheHas(key) {\n      return getMapData(this, key).has(key);\n    }\n\n    /**\n     * Sets the map `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf MapCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the map cache instance.\n     */\n    function mapCacheSet(key, value) {\n      var data = getMapData(this, key),\n          size = data.size;\n\n      data.set(key, value);\n      this.size += data.size == size ? 0 : 1;\n      return this;\n    }\n\n    // Add methods to `MapCache`.\n    MapCache.prototype.clear = mapCacheClear;\n    MapCache.prototype['delete'] = mapCacheDelete;\n    MapCache.prototype.get = mapCacheGet;\n    MapCache.prototype.has = mapCacheHas;\n    MapCache.prototype.set = mapCacheSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     *\n     * Creates an array cache object to store unique values.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [values] The values to cache.\n     */\n    function SetCache(values) {\n      var index = -1,\n          length = values == null ? 0 : values.length;\n\n      this.__data__ = new MapCache;\n      while (++index < length) {\n        this.add(values[index]);\n      }\n    }\n\n    /**\n     * Adds `value` to the array cache.\n     *\n     * @private\n     * @name add\n     * @memberOf SetCache\n     * @alias push\n     * @param {*} value The value to cache.\n     * @returns {Object} Returns the cache instance.\n     */\n    function setCacheAdd(value) {\n      this.__data__.set(value, HASH_UNDEFINED);\n      return this;\n    }\n\n    /**\n     * Checks if `value` is in the array cache.\n     *\n     * @private\n     * @name has\n     * @memberOf SetCache\n     * @param {*} value The value to search for.\n     * @returns {number} Returns `true` if `value` is found, else `false`.\n     */\n    function setCacheHas(value) {\n      return this.__data__.has(value);\n    }\n\n    // Add methods to `SetCache`.\n    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\n    SetCache.prototype.has = setCacheHas;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a stack cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function Stack(entries) {\n      var data = this.__data__ = new ListCache(entries);\n      this.size = data.size;\n    }\n\n    /**\n     * Removes all key-value entries from the stack.\n     *\n     * @private\n     * @name clear\n     * @memberOf Stack\n     */\n    function stackClear() {\n      this.__data__ = new ListCache;\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the stack.\n     *\n     * @private\n     * @name delete\n     * @memberOf Stack\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function stackDelete(key) {\n      var data = this.__data__,\n          result = data['delete'](key);\n\n      this.size = data.size;\n      return result;\n    }\n\n    /**\n     * Gets the stack value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Stack\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function stackGet(key) {\n      return this.__data__.get(key);\n    }\n\n    /**\n     * Checks if a stack value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Stack\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function stackHas(key) {\n      return this.__data__.has(key);\n    }\n\n    /**\n     * Sets the stack `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Stack\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the stack cache instance.\n     */\n    function stackSet(key, value) {\n      var data = this.__data__;\n      if (data instanceof ListCache) {\n        var pairs = data.__data__;\n        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n          pairs.push([key, value]);\n          this.size = ++data.size;\n          return this;\n        }\n        data = this.__data__ = new MapCache(pairs);\n      }\n      data.set(key, value);\n      this.size = data.size;\n      return this;\n    }\n\n    // Add methods to `Stack`.\n    Stack.prototype.clear = stackClear;\n    Stack.prototype['delete'] = stackDelete;\n    Stack.prototype.get = stackGet;\n    Stack.prototype.has = stackHas;\n    Stack.prototype.set = stackSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of the enumerable property names of the array-like `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @param {boolean} inherited Specify returning inherited property names.\n     * @returns {Array} Returns the array of property names.\n     */\n    function arrayLikeKeys(value, inherited) {\n      var isArr = isArray(value),\n          isArg = !isArr && isArguments(value),\n          isBuff = !isArr && !isArg && isBuffer(value),\n          isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n          skipIndexes = isArr || isArg || isBuff || isType,\n          result = skipIndexes ? baseTimes(value.length, String) : [],\n          length = result.length;\n\n      for (var key in value) {\n        if ((inherited || hasOwnProperty.call(value, key)) &&\n            !(skipIndexes && (\n               // Safari 9 has enumerable `arguments.length` in strict mode.\n               key == 'length' ||\n               // Node.js 0.10 has enumerable non-index properties on buffers.\n               (isBuff && (key == 'offset' || key == 'parent')) ||\n               // PhantomJS 2 has enumerable non-index properties on typed arrays.\n               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n               // Skip index properties.\n               isIndex(key, length)\n            ))) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `_.sample` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to sample.\n     * @returns {*} Returns the random element.\n     */\n    function arraySample(array) {\n      var length = array.length;\n      return length ? array[baseRandom(0, length - 1)] : undefined;\n    }\n\n    /**\n     * A specialized version of `_.sampleSize` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to sample.\n     * @param {number} n The number of elements to sample.\n     * @returns {Array} Returns the random elements.\n     */\n    function arraySampleSize(array, n) {\n      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));\n    }\n\n    /**\n     * A specialized version of `_.shuffle` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     */\n    function arrayShuffle(array) {\n      return shuffleSelf(copyArray(array));\n    }\n\n    /**\n     * This function is like `assignValue` except that it doesn't assign\n     * `undefined` values.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function assignMergeValue(object, key, value) {\n      if ((value !== undefined && !eq(object[key], value)) ||\n          (value === undefined && !(key in object))) {\n        baseAssignValue(object, key, value);\n      }\n    }\n\n    /**\n     * Assigns `value` to `key` of `object` if the existing value is not equivalent\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function assignValue(object, key, value) {\n      var objValue = object[key];\n      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n          (value === undefined && !(key in object))) {\n        baseAssignValue(object, key, value);\n      }\n    }\n\n    /**\n     * Gets the index at which the `key` is found in `array` of key-value pairs.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {*} key The key to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     */\n    function assocIndexOf(array, key) {\n      var length = array.length;\n      while (length--) {\n        if (eq(array[length][0], key)) {\n          return length;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * Aggregates elements of `collection` on `accumulator` with keys transformed\n     * by `iteratee` and values set by `setter`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform keys.\n     * @param {Object} accumulator The initial aggregated object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function baseAggregator(collection, setter, iteratee, accumulator) {\n      baseEach(collection, function(value, key, collection) {\n        setter(accumulator, value, iteratee(value), collection);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The base implementation of `_.assign` without support for multiple sources\n     * or `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @returns {Object} Returns `object`.\n     */\n    function baseAssign(object, source) {\n      return object && copyObject(source, keys(source), object);\n    }\n\n    /**\n     * The base implementation of `_.assignIn` without support for multiple sources\n     * or `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @returns {Object} Returns `object`.\n     */\n    function baseAssignIn(object, source) {\n      return object && copyObject(source, keysIn(source), object);\n    }\n\n    /**\n     * The base implementation of `assignValue` and `assignMergeValue` without\n     * value checks.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function baseAssignValue(object, key, value) {\n      if (key == '__proto__' && defineProperty) {\n        defineProperty(object, key, {\n          'configurable': true,\n          'enumerable': true,\n          'value': value,\n          'writable': true\n        });\n      } else {\n        object[key] = value;\n      }\n    }\n\n    /**\n     * The base implementation of `_.at` without support for individual paths.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {string[]} paths The property paths to pick.\n     * @returns {Array} Returns the picked elements.\n     */\n    function baseAt(object, paths) {\n      var index = -1,\n          length = paths.length,\n          result = Array(length),\n          skip = object == null;\n\n      while (++index < length) {\n        result[index] = skip ? undefined : get(object, paths[index]);\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.clamp` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     */\n    function baseClamp(number, lower, upper) {\n      if (number === number) {\n        if (upper !== undefined) {\n          number = number <= upper ? number : upper;\n        }\n        if (lower !== undefined) {\n          number = number >= lower ? number : lower;\n        }\n      }\n      return number;\n    }\n\n    /**\n     * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n     * traversed objects.\n     *\n     * @private\n     * @param {*} value The value to clone.\n     * @param {boolean} bitmask The bitmask flags.\n     *  1 - Deep clone\n     *  2 - Flatten inherited properties\n     *  4 - Clone symbols\n     * @param {Function} [customizer] The function to customize cloning.\n     * @param {string} [key] The key of `value`.\n     * @param {Object} [object] The parent object of `value`.\n     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n     * @returns {*} Returns the cloned value.\n     */\n    function baseClone(value, bitmask, customizer, key, object, stack) {\n      var result,\n          isDeep = bitmask & CLONE_DEEP_FLAG,\n          isFlat = bitmask & CLONE_FLAT_FLAG,\n          isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n      if (customizer) {\n        result = object ? customizer(value, key, object, stack) : customizer(value);\n      }\n      if (result !== undefined) {\n        return result;\n      }\n      if (!isObject(value)) {\n        return value;\n      }\n      var isArr = isArray(value);\n      if (isArr) {\n        result = initCloneArray(value);\n        if (!isDeep) {\n          return copyArray(value, result);\n        }\n      } else {\n        var tag = getTag(value),\n            isFunc = tag == funcTag || tag == genTag;\n\n        if (isBuffer(value)) {\n          return cloneBuffer(value, isDeep);\n        }\n        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n          result = (isFlat || isFunc) ? {} : initCloneObject(value);\n          if (!isDeep) {\n            return isFlat\n              ? copySymbolsIn(value, baseAssignIn(result, value))\n              : copySymbols(value, baseAssign(result, value));\n          }\n        } else {\n          if (!cloneableTags[tag]) {\n            return object ? value : {};\n          }\n          result = initCloneByTag(value, tag, isDeep);\n        }\n      }\n      // Check for circular references and return its corresponding clone.\n      stack || (stack = new Stack);\n      var stacked = stack.get(value);\n      if (stacked) {\n        return stacked;\n      }\n      stack.set(value, result);\n\n      if (isSet(value)) {\n        value.forEach(function(subValue) {\n          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n        });\n\n        return result;\n      }\n\n      if (isMap(value)) {\n        value.forEach(function(subValue, key) {\n          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n        });\n\n        return result;\n      }\n\n      var keysFunc = isFull\n        ? (isFlat ? getAllKeysIn : getAllKeys)\n        : (isFlat ? keysIn : keys);\n\n      var props = isArr ? undefined : keysFunc(value);\n      arrayEach(props || value, function(subValue, key) {\n        if (props) {\n          key = subValue;\n          subValue = value[key];\n        }\n        // Recursively populate clone (susceptible to call stack limits).\n        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.conforms` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseConforms(source) {\n      var props = keys(source);\n      return function(object) {\n        return baseConformsTo(object, source, props);\n      };\n    }\n\n    /**\n     * The base implementation of `_.conformsTo` which accepts `props` to check.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     */\n    function baseConformsTo(object, source, props) {\n      var length = props.length;\n      if (object == null) {\n        return !length;\n      }\n      object = Object(object);\n      while (length--) {\n        var key = props[length],\n            predicate = source[key],\n            value = object[key];\n\n        if ((value === undefined && !(key in object)) || !predicate(value)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * The base implementation of `_.delay` and `_.defer` which accepts `args`\n     * to provide to `func`.\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {Array} args The arguments to provide to `func`.\n     * @returns {number|Object} Returns the timer id or timeout object.\n     */\n    function baseDelay(func, wait, args) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return setTimeout(function() { func.apply(undefined, args); }, wait);\n    }\n\n    /**\n     * The base implementation of methods like `_.difference` without support\n     * for excluding multiple arrays or iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Array} values The values to exclude.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     */\n    function baseDifference(array, values, iteratee, comparator) {\n      var index = -1,\n          includes = arrayIncludes,\n          isCommon = true,\n          length = array.length,\n          result = [],\n          valuesLength = values.length;\n\n      if (!length) {\n        return result;\n      }\n      if (iteratee) {\n        values = arrayMap(values, baseUnary(iteratee));\n      }\n      if (comparator) {\n        includes = arrayIncludesWith;\n        isCommon = false;\n      }\n      else if (values.length >= LARGE_ARRAY_SIZE) {\n        includes = cacheHas;\n        isCommon = false;\n        values = new SetCache(values);\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee == null ? value : iteratee(value);\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (isCommon && computed === computed) {\n          var valuesIndex = valuesLength;\n          while (valuesIndex--) {\n            if (values[valuesIndex] === computed) {\n              continue outer;\n            }\n          }\n          result.push(value);\n        }\n        else if (!includes(values, computed, comparator)) {\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.forEach` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */\n    var baseEach = createBaseEach(baseForOwn);\n\n    /**\n     * The base implementation of `_.forEachRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */\n    var baseEachRight = createBaseEach(baseForOwnRight, true);\n\n    /**\n     * The base implementation of `_.every` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`\n     */\n    function baseEvery(collection, predicate) {\n      var result = true;\n      baseEach(collection, function(value, index, collection) {\n        result = !!predicate(value, index, collection);\n        return result;\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of methods like `_.max` and `_.min` which accepts a\n     * `comparator` to determine the extremum value.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The iteratee invoked per iteration.\n     * @param {Function} comparator The comparator used to compare values.\n     * @returns {*} Returns the extremum value.\n     */\n    function baseExtremum(array, iteratee, comparator) {\n      var index = -1,\n          length = array.length;\n\n      while (++index < length) {\n        var value = array[index],\n            current = iteratee(value);\n\n        if (current != null && (computed === undefined\n              ? (current === current && !isSymbol(current))\n              : comparator(current, computed)\n            )) {\n          var computed = current,\n              result = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.fill` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     */\n    function baseFill(array, value, start, end) {\n      var length = array.length;\n\n      start = toInteger(start);\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = (end === undefined || end > length) ? length : toInteger(end);\n      if (end < 0) {\n        end += length;\n      }\n      end = start > end ? 0 : toLength(end);\n      while (start < end) {\n        array[start++] = value;\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.filter` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     */\n    function baseFilter(collection, predicate) {\n      var result = [];\n      baseEach(collection, function(value, index, collection) {\n        if (predicate(value, index, collection)) {\n          result.push(value);\n        }\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.flatten` with support for restricting flattening.\n     *\n     * @private\n     * @param {Array} array The array to flatten.\n     * @param {number} depth The maximum recursion depth.\n     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n     * @param {Array} [result=[]] The initial result value.\n     * @returns {Array} Returns the new flattened array.\n     */\n    function baseFlatten(array, depth, predicate, isStrict, result) {\n      var index = -1,\n          length = array.length;\n\n      predicate || (predicate = isFlattenable);\n      result || (result = []);\n\n      while (++index < length) {\n        var value = array[index];\n        if (depth > 0 && predicate(value)) {\n          if (depth > 1) {\n            // Recursively flatten arrays (susceptible to call stack limits).\n            baseFlatten(value, depth - 1, predicate, isStrict, result);\n          } else {\n            arrayPush(result, value);\n          }\n        } else if (!isStrict) {\n          result[result.length] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `baseForOwn` which iterates over `object`\n     * properties returned by `keysFunc` and invokes `iteratee` for each property.\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseFor = createBaseFor();\n\n    /**\n     * This function is like `baseFor` except that it iterates over properties\n     * in the opposite order.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseForRight = createBaseFor(true);\n\n    /**\n     * The base implementation of `_.forOwn` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwn(object, iteratee) {\n      return object && baseFor(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwnRight(object, iteratee) {\n      return object && baseForRight(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.functions` which creates an array of\n     * `object` function property names filtered from `props`.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Array} props The property names to filter.\n     * @returns {Array} Returns the function names.\n     */\n    function baseFunctions(object, props) {\n      return arrayFilter(props, function(key) {\n        return isFunction(object[key]);\n      });\n    }\n\n    /**\n     * The base implementation of `_.get` without support for default values.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseGet(object, path) {\n      path = castPath(path, object);\n\n      var index = 0,\n          length = path.length;\n\n      while (object != null && index < length) {\n        object = object[toKey(path[index++])];\n      }\n      return (index && index == length) ? object : undefined;\n    }\n\n    /**\n     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n     * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @param {Function} symbolsFunc The function to get the symbols of `object`.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function baseGetAllKeys(object, keysFunc, symbolsFunc) {\n      var result = keysFunc(object);\n      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n    }\n\n    /**\n     * The base implementation of `getTag` without fallbacks for buggy environments.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */\n    function baseGetTag(value) {\n      if (value == null) {\n        return value === undefined ? undefinedTag : nullTag;\n      }\n      return (symToStringTag && symToStringTag in Object(value))\n        ? getRawTag(value)\n        : objectToString(value);\n    }\n\n    /**\n     * The base implementation of `_.gt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     */\n    function baseGt(value, other) {\n      return value > other;\n    }\n\n    /**\n     * The base implementation of `_.has` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */\n    function baseHas(object, key) {\n      return object != null && hasOwnProperty.call(object, key);\n    }\n\n    /**\n     * The base implementation of `_.hasIn` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */\n    function baseHasIn(object, key) {\n      return object != null && key in Object(object);\n    }\n\n    /**\n     * The base implementation of `_.inRange` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to check.\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     */\n    function baseInRange(number, start, end) {\n      return number >= nativeMin(start, end) && number < nativeMax(start, end);\n    }\n\n    /**\n     * The base implementation of methods like `_.intersection`, without support\n     * for iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of shared values.\n     */\n    function baseIntersection(arrays, iteratee, comparator) {\n      var includes = comparator ? arrayIncludesWith : arrayIncludes,\n          length = arrays[0].length,\n          othLength = arrays.length,\n          othIndex = othLength,\n          caches = Array(othLength),\n          maxLength = Infinity,\n          result = [];\n\n      while (othIndex--) {\n        var array = arrays[othIndex];\n        if (othIndex && iteratee) {\n          array = arrayMap(array, baseUnary(iteratee));\n        }\n        maxLength = nativeMin(array.length, maxLength);\n        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))\n          ? new SetCache(othIndex && array)\n          : undefined;\n      }\n      array = arrays[0];\n\n      var index = -1,\n          seen = caches[0];\n\n      outer:\n      while (++index < length && result.length < maxLength) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (!(seen\n              ? cacheHas(seen, computed)\n              : includes(result, computed, comparator)\n            )) {\n          othIndex = othLength;\n          while (--othIndex) {\n            var cache = caches[othIndex];\n            if (!(cache\n                  ? cacheHas(cache, computed)\n                  : includes(arrays[othIndex], computed, comparator))\n                ) {\n              continue outer;\n            }\n          }\n          if (seen) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.invert` and `_.invertBy` which inverts\n     * `object` with values transformed by `iteratee` and set by `setter`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform values.\n     * @param {Object} accumulator The initial inverted object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function baseInverter(object, setter, iteratee, accumulator) {\n      baseForOwn(object, function(value, key, object) {\n        setter(accumulator, iteratee(value), key, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The base implementation of `_.invoke` without support for individual\n     * method arguments.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {Array} args The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     */\n    function baseInvoke(object, path, args) {\n      path = castPath(path, object);\n      object = parent(object, path);\n      var func = object == null ? object : object[toKey(last(path))];\n      return func == null ? undefined : apply(func, object, args);\n    }\n\n    /**\n     * The base implementation of `_.isArguments`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     */\n    function baseIsArguments(value) {\n      return isObjectLike(value) && baseGetTag(value) == argsTag;\n    }\n\n    /**\n     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     */\n    function baseIsArrayBuffer(value) {\n      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;\n    }\n\n    /**\n     * The base implementation of `_.isDate` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     */\n    function baseIsDate(value) {\n      return isObjectLike(value) && baseGetTag(value) == dateTag;\n    }\n\n    /**\n     * The base implementation of `_.isEqual` which supports partial comparisons\n     * and tracks traversed objects.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {boolean} bitmask The bitmask flags.\n     *  1 - Unordered comparison\n     *  2 - Partial comparison\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     */\n    function baseIsEqual(value, other, bitmask, customizer, stack) {\n      if (value === other) {\n        return true;\n      }\n      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n        return value !== value && other !== other;\n      }\n      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n    }\n\n    /**\n     * A specialized version of `baseIsEqual` for arrays and objects which performs\n     * deep comparisons and tracks traversed objects enabling objects with circular\n     * references to be compared.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n      var objIsArr = isArray(object),\n          othIsArr = isArray(other),\n          objTag = objIsArr ? arrayTag : getTag(object),\n          othTag = othIsArr ? arrayTag : getTag(other);\n\n      objTag = objTag == argsTag ? objectTag : objTag;\n      othTag = othTag == argsTag ? objectTag : othTag;\n\n      var objIsObj = objTag == objectTag,\n          othIsObj = othTag == objectTag,\n          isSameTag = objTag == othTag;\n\n      if (isSameTag && isBuffer(object)) {\n        if (!isBuffer(other)) {\n          return false;\n        }\n        objIsArr = true;\n        objIsObj = false;\n      }\n      if (isSameTag && !objIsObj) {\n        stack || (stack = new Stack);\n        return (objIsArr || isTypedArray(object))\n          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n      }\n      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n        if (objIsWrapped || othIsWrapped) {\n          var objUnwrapped = objIsWrapped ? object.value() : object,\n              othUnwrapped = othIsWrapped ? other.value() : other;\n\n          stack || (stack = new Stack);\n          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n        }\n      }\n      if (!isSameTag) {\n        return false;\n      }\n      stack || (stack = new Stack);\n      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n    }\n\n    /**\n     * The base implementation of `_.isMap` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     */\n    function baseIsMap(value) {\n      return isObjectLike(value) && getTag(value) == mapTag;\n    }\n\n    /**\n     * The base implementation of `_.isMatch` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Array} matchData The property names, values, and compare flags to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     */\n    function baseIsMatch(object, source, matchData, customizer) {\n      var index = matchData.length,\n          length = index,\n          noCustomizer = !customizer;\n\n      if (object == null) {\n        return !length;\n      }\n      object = Object(object);\n      while (index--) {\n        var data = matchData[index];\n        if ((noCustomizer && data[2])\n              ? data[1] !== object[data[0]]\n              : !(data[0] in object)\n            ) {\n          return false;\n        }\n      }\n      while (++index < length) {\n        data = matchData[index];\n        var key = data[0],\n            objValue = object[key],\n            srcValue = data[1];\n\n        if (noCustomizer && data[2]) {\n          if (objValue === undefined && !(key in object)) {\n            return false;\n          }\n        } else {\n          var stack = new Stack;\n          if (customizer) {\n            var result = customizer(objValue, srcValue, key, object, source, stack);\n          }\n          if (!(result === undefined\n                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n                : result\n              )) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n\n    /**\n     * The base implementation of `_.isNative` without bad shim checks.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     */\n    function baseIsNative(value) {\n      if (!isObject(value) || isMasked(value)) {\n        return false;\n      }\n      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n      return pattern.test(toSource(value));\n    }\n\n    /**\n     * The base implementation of `_.isRegExp` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     */\n    function baseIsRegExp(value) {\n      return isObjectLike(value) && baseGetTag(value) == regexpTag;\n    }\n\n    /**\n     * The base implementation of `_.isSet` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     */\n    function baseIsSet(value) {\n      return isObjectLike(value) && getTag(value) == setTag;\n    }\n\n    /**\n     * The base implementation of `_.isTypedArray` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     */\n    function baseIsTypedArray(value) {\n      return isObjectLike(value) &&\n        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n    }\n\n    /**\n     * The base implementation of `_.iteratee`.\n     *\n     * @private\n     * @param {*} [value=_.identity] The value to convert to an iteratee.\n     * @returns {Function} Returns the iteratee.\n     */\n    function baseIteratee(value) {\n      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n      if (typeof value == 'function') {\n        return value;\n      }\n      if (value == null) {\n        return identity;\n      }\n      if (typeof value == 'object') {\n        return isArray(value)\n          ? baseMatchesProperty(value[0], value[1])\n          : baseMatches(value);\n      }\n      return property(value);\n    }\n\n    /**\n     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function baseKeys(object) {\n      if (!isPrototype(object)) {\n        return nativeKeys(object);\n      }\n      var result = [];\n      for (var key in Object(object)) {\n        if (hasOwnProperty.call(object, key) && key != 'constructor') {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function baseKeysIn(object) {\n      if (!isObject(object)) {\n        return nativeKeysIn(object);\n      }\n      var isProto = isPrototype(object),\n          result = [];\n\n      for (var key in object) {\n        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.lt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     */\n    function baseLt(value, other) {\n      return value < other;\n    }\n\n    /**\n     * The base implementation of `_.map` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     */\n    function baseMap(collection, iteratee) {\n      var index = -1,\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value, key, collection) {\n        result[++index] = iteratee(value, key, collection);\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.matches` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseMatches(source) {\n      var matchData = getMatchData(source);\n      if (matchData.length == 1 && matchData[0][2]) {\n        return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n      }\n      return function(object) {\n        return object === source || baseIsMatch(object, source, matchData);\n      };\n    }\n\n    /**\n     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n     *\n     * @private\n     * @param {string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseMatchesProperty(path, srcValue) {\n      if (isKey(path) && isStrictComparable(srcValue)) {\n        return matchesStrictComparable(toKey(path), srcValue);\n      }\n      return function(object) {\n        var objValue = get(object, path);\n        return (objValue === undefined && objValue === srcValue)\n          ? hasIn(object, path)\n          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n      };\n    }\n\n    /**\n     * The base implementation of `_.merge` without support for multiple sources.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} [customizer] The function to customize merged values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */\n    function baseMerge(object, source, srcIndex, customizer, stack) {\n      if (object === source) {\n        return;\n      }\n      baseFor(source, function(srcValue, key) {\n        if (isObject(srcValue)) {\n          stack || (stack = new Stack);\n          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n        }\n        else {\n          var newValue = customizer\n            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)\n            : undefined;\n\n          if (newValue === undefined) {\n            newValue = srcValue;\n          }\n          assignMergeValue(object, key, newValue);\n        }\n      }, keysIn);\n    }\n\n    /**\n     * A specialized version of `baseMerge` for arrays and objects which performs\n     * deep merges and tracks traversed objects enabling objects with circular\n     * references to be merged.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {string} key The key of the value to merge.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} mergeFunc The function to merge values.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */\n    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n      var objValue = safeGet(object, key),\n          srcValue = safeGet(source, key),\n          stacked = stack.get(srcValue);\n\n      if (stacked) {\n        assignMergeValue(object, key, stacked);\n        return;\n      }\n      var newValue = customizer\n        ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n        : undefined;\n\n      var isCommon = newValue === undefined;\n\n      if (isCommon) {\n        var isArr = isArray(srcValue),\n            isBuff = !isArr && isBuffer(srcValue),\n            isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n        newValue = srcValue;\n        if (isArr || isBuff || isTyped) {\n          if (isArray(objValue)) {\n            newValue = objValue;\n          }\n          else if (isArrayLikeObject(objValue)) {\n            newValue = copyArray(objValue);\n          }\n          else if (isBuff) {\n            isCommon = false;\n            newValue = cloneBuffer(srcValue, true);\n          }\n          else if (isTyped) {\n            isCommon = false;\n            newValue = cloneTypedArray(srcValue, true);\n          }\n          else {\n            newValue = [];\n          }\n        }\n        else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n          newValue = objValue;\n          if (isArguments(objValue)) {\n            newValue = toPlainObject(objValue);\n          }\n          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {\n            newValue = initCloneObject(srcValue);\n          }\n        }\n        else {\n          isCommon = false;\n        }\n      }\n      if (isCommon) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, newValue);\n        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n        stack['delete'](srcValue);\n      }\n      assignMergeValue(object, key, newValue);\n    }\n\n    /**\n     * The base implementation of `_.nth` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {number} n The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     */\n    function baseNth(array, n) {\n      var length = array.length;\n      if (!length) {\n        return;\n      }\n      n += n < 0 ? length : 0;\n      return isIndex(n, length) ? array[n] : undefined;\n    }\n\n    /**\n     * The base implementation of `_.orderBy` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n     * @param {string[]} orders The sort orders of `iteratees`.\n     * @returns {Array} Returns the new sorted array.\n     */\n    function baseOrderBy(collection, iteratees, orders) {\n      var index = -1;\n      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));\n\n      var result = baseMap(collection, function(value, key, collection) {\n        var criteria = arrayMap(iteratees, function(iteratee) {\n          return iteratee(value);\n        });\n        return { 'criteria': criteria, 'index': ++index, 'value': value };\n      });\n\n      return baseSortBy(result, function(object, other) {\n        return compareMultiple(object, other, orders);\n      });\n    }\n\n    /**\n     * The base implementation of `_.pick` without support for individual\n     * property identifiers.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} paths The property paths to pick.\n     * @returns {Object} Returns the new object.\n     */\n    function basePick(object, paths) {\n      return basePickBy(object, paths, function(value, path) {\n        return hasIn(object, path);\n      });\n    }\n\n    /**\n     * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} paths The property paths to pick.\n     * @param {Function} predicate The function invoked per property.\n     * @returns {Object} Returns the new object.\n     */\n    function basePickBy(object, paths, predicate) {\n      var index = -1,\n          length = paths.length,\n          result = {};\n\n      while (++index < length) {\n        var path = paths[index],\n            value = baseGet(object, path);\n\n        if (predicate(value, path)) {\n          baseSet(result, castPath(path, object), value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseProperty` which supports deep paths.\n     *\n     * @private\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     */\n    function basePropertyDeep(path) {\n      return function(object) {\n        return baseGet(object, path);\n      };\n    }\n\n    /**\n     * The base implementation of `_.pullAllBy` without support for iteratee\n     * shorthands.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     */\n    function basePullAll(array, values, iteratee, comparator) {\n      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,\n          index = -1,\n          length = values.length,\n          seen = array;\n\n      if (array === values) {\n        values = copyArray(values);\n      }\n      if (iteratee) {\n        seen = arrayMap(array, baseUnary(iteratee));\n      }\n      while (++index < length) {\n        var fromIndex = 0,\n            value = values[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {\n          if (seen !== array) {\n            splice.call(seen, fromIndex, 1);\n          }\n          splice.call(array, fromIndex, 1);\n        }\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.pullAt` without support for individual\n     * indexes or capturing the removed elements.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {number[]} indexes The indexes of elements to remove.\n     * @returns {Array} Returns `array`.\n     */\n    function basePullAt(array, indexes) {\n      var length = array ? indexes.length : 0,\n          lastIndex = length - 1;\n\n      while (length--) {\n        var index = indexes[length];\n        if (length == lastIndex || index !== previous) {\n          var previous = index;\n          if (isIndex(index)) {\n            splice.call(array, index, 1);\n          } else {\n            baseUnset(array, index);\n          }\n        }\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.random` without support for returning\n     * floating-point numbers.\n     *\n     * @private\n     * @param {number} lower The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the random number.\n     */\n    function baseRandom(lower, upper) {\n      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n    }\n\n    /**\n     * The base implementation of `_.range` and `_.rangeRight` which doesn't\n     * coerce arguments.\n     *\n     * @private\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} step The value to increment or decrement by.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the range of numbers.\n     */\n    function baseRange(start, end, step, fromRight) {\n      var index = -1,\n          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n          result = Array(length);\n\n      while (length--) {\n        result[fromRight ? length : ++index] = start;\n        start += step;\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.repeat` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {string} string The string to repeat.\n     * @param {number} n The number of times to repeat the string.\n     * @returns {string} Returns the repeated string.\n     */\n    function baseRepeat(string, n) {\n      var result = '';\n      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {\n        return result;\n      }\n      // Leverage the exponentiation by squaring algorithm for a faster repeat.\n      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.\n      do {\n        if (n % 2) {\n          result += string;\n        }\n        n = nativeFloor(n / 2);\n        if (n) {\n          string += string;\n        }\n      } while (n);\n\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     */\n    function baseRest(func, start) {\n      return setToString(overRest(func, start, identity), func + '');\n    }\n\n    /**\n     * The base implementation of `_.sample`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     */\n    function baseSample(collection) {\n      return arraySample(values(collection));\n    }\n\n    /**\n     * The base implementation of `_.sampleSize` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} n The number of elements to sample.\n     * @returns {Array} Returns the random elements.\n     */\n    function baseSampleSize(collection, n) {\n      var array = values(collection);\n      return shuffleSelf(array, baseClamp(n, 0, array.length));\n    }\n\n    /**\n     * The base implementation of `_.set`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */\n    function baseSet(object, path, value, customizer) {\n      if (!isObject(object)) {\n        return object;\n      }\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length,\n          lastIndex = length - 1,\n          nested = object;\n\n      while (nested != null && ++index < length) {\n        var key = toKey(path[index]),\n            newValue = value;\n\n        if (index != lastIndex) {\n          var objValue = nested[key];\n          newValue = customizer ? customizer(objValue, key, nested) : undefined;\n          if (newValue === undefined) {\n            newValue = isObject(objValue)\n              ? objValue\n              : (isIndex(path[index + 1]) ? [] : {});\n          }\n        }\n        assignValue(nested, key, newValue);\n        nested = nested[key];\n      }\n      return object;\n    }\n\n    /**\n     * The base implementation of `setData` without support for hot loop shorting.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var baseSetData = !metaMap ? identity : function(func, data) {\n      metaMap.set(func, data);\n      return func;\n    };\n\n    /**\n     * The base implementation of `setToString` without support for hot loop shorting.\n     *\n     * @private\n     * @param {Function} func The function to modify.\n     * @param {Function} string The `toString` result.\n     * @returns {Function} Returns `func`.\n     */\n    var baseSetToString = !defineProperty ? identity : function(func, string) {\n      return defineProperty(func, 'toString', {\n        'configurable': true,\n        'enumerable': false,\n        'value': constant(string),\n        'writable': true\n      });\n    };\n\n    /**\n     * The base implementation of `_.shuffle`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     */\n    function baseShuffle(collection) {\n      return shuffleSelf(values(collection));\n    }\n\n    /**\n     * The base implementation of `_.slice` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseSlice(array, start, end) {\n      var index = -1,\n          length = array.length;\n\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = end > length ? length : end;\n      if (end < 0) {\n        end += length;\n      }\n      length = start > end ? 0 : ((end - start) >>> 0);\n      start >>>= 0;\n\n      var result = Array(length);\n      while (++index < length) {\n        result[index] = array[index + start];\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.some` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     */\n    function baseSome(collection, predicate) {\n      var result;\n\n      baseEach(collection, function(value, index, collection) {\n        result = predicate(value, index, collection);\n        return !result;\n      });\n      return !!result;\n    }\n\n    /**\n     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\n     * performs a binary search of `array` to determine the index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function baseSortedIndex(array, value, retHighest) {\n      var low = 0,\n          high = array == null ? low : array.length;\n\n      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n        while (low < high) {\n          var mid = (low + high) >>> 1,\n              computed = array[mid];\n\n          if (computed !== null && !isSymbol(computed) &&\n              (retHighest ? (computed <= value) : (computed < value))) {\n            low = mid + 1;\n          } else {\n            high = mid;\n          }\n        }\n        return high;\n      }\n      return baseSortedIndexBy(array, value, identity, retHighest);\n    }\n\n    /**\n     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`\n     * which invokes `iteratee` for `value` and each element of `array` to compute\n     * their sort ranking. The iteratee is invoked with one argument; (value).\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} iteratee The iteratee invoked per element.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function baseSortedIndexBy(array, value, iteratee, retHighest) {\n      value = iteratee(value);\n\n      var low = 0,\n          high = array == null ? 0 : array.length,\n          valIsNaN = value !== value,\n          valIsNull = value === null,\n          valIsSymbol = isSymbol(value),\n          valIsUndefined = value === undefined;\n\n      while (low < high) {\n        var mid = nativeFloor((low + high) / 2),\n            computed = iteratee(array[mid]),\n            othIsDefined = computed !== undefined,\n            othIsNull = computed === null,\n            othIsReflexive = computed === computed,\n            othIsSymbol = isSymbol(computed);\n\n        if (valIsNaN) {\n          var setLow = retHighest || othIsReflexive;\n        } else if (valIsUndefined) {\n          setLow = othIsReflexive && (retHighest || othIsDefined);\n        } else if (valIsNull) {\n          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);\n        } else if (valIsSymbol) {\n          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);\n        } else if (othIsNull || othIsSymbol) {\n          setLow = false;\n        } else {\n          setLow = retHighest ? (computed <= value) : (computed < value);\n        }\n        if (setLow) {\n          low = mid + 1;\n        } else {\n          high = mid;\n        }\n      }\n      return nativeMin(high, MAX_ARRAY_INDEX);\n    }\n\n    /**\n     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without\n     * support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */\n    function baseSortedUniq(array, iteratee) {\n      var index = -1,\n          length = array.length,\n          resIndex = 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        if (!index || !eq(computed, seen)) {\n          var seen = computed;\n          result[resIndex++] = value === 0 ? 0 : value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.toNumber` which doesn't ensure correct\n     * conversions of binary, hexadecimal, or octal string values.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     */\n    function baseToNumber(value) {\n      if (typeof value == 'number') {\n        return value;\n      }\n      if (isSymbol(value)) {\n        return NAN;\n      }\n      return +value;\n    }\n\n    /**\n     * The base implementation of `_.toString` which doesn't convert nullish\n     * values to empty strings.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {string} Returns the string.\n     */\n    function baseToString(value) {\n      // Exit early for strings to avoid a performance hit in some environments.\n      if (typeof value == 'string') {\n        return value;\n      }\n      if (isArray(value)) {\n        // Recursively convert values (susceptible to call stack limits).\n        return arrayMap(value, baseToString) + '';\n      }\n      if (isSymbol(value)) {\n        return symbolToString ? symbolToString.call(value) : '';\n      }\n      var result = (value + '');\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n    }\n\n    /**\n     * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */\n    function baseUniq(array, iteratee, comparator) {\n      var index = -1,\n          includes = arrayIncludes,\n          length = array.length,\n          isCommon = true,\n          result = [],\n          seen = result;\n\n      if (comparator) {\n        isCommon = false;\n        includes = arrayIncludesWith;\n      }\n      else if (length >= LARGE_ARRAY_SIZE) {\n        var set = iteratee ? null : createSet(array);\n        if (set) {\n          return setToArray(set);\n        }\n        isCommon = false;\n        includes = cacheHas;\n        seen = new SetCache;\n      }\n      else {\n        seen = iteratee ? [] : result;\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (isCommon && computed === computed) {\n          var seenIndex = seen.length;\n          while (seenIndex--) {\n            if (seen[seenIndex] === computed) {\n              continue outer;\n            }\n          }\n          if (iteratee) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n        else if (!includes(seen, computed, comparator)) {\n          if (seen !== result) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.unset`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The property path to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     */\n    function baseUnset(object, path) {\n      path = castPath(path, object);\n      object = parent(object, path);\n      return object == null || delete object[toKey(last(path))];\n    }\n\n    /**\n     * The base implementation of `_.update`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to update.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */\n    function baseUpdate(object, path, updater, customizer) {\n      return baseSet(object, path, updater(baseGet(object, path)), customizer);\n    }\n\n    /**\n     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`\n     * without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {Function} predicate The function invoked per iteration.\n     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseWhile(array, predicate, isDrop, fromRight) {\n      var length = array.length,\n          index = fromRight ? length : -1;\n\n      while ((fromRight ? index-- : ++index < length) &&\n        predicate(array[index], index, array)) {}\n\n      return isDrop\n        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))\n        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));\n    }\n\n    /**\n     * The base implementation of `wrapperValue` which returns the result of\n     * performing a sequence of actions on the unwrapped `value`, where each\n     * successive action is supplied the return value of the previous.\n     *\n     * @private\n     * @param {*} value The unwrapped value.\n     * @param {Array} actions Actions to perform to resolve the unwrapped value.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseWrapperValue(value, actions) {\n      var result = value;\n      if (result instanceof LazyWrapper) {\n        result = result.value();\n      }\n      return arrayReduce(actions, function(result, action) {\n        return action.func.apply(action.thisArg, arrayPush([result], action.args));\n      }, result);\n    }\n\n    /**\n     * The base implementation of methods like `_.xor`, without support for\n     * iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of values.\n     */\n    function baseXor(arrays, iteratee, comparator) {\n      var length = arrays.length;\n      if (length < 2) {\n        return length ? baseUniq(arrays[0]) : [];\n      }\n      var index = -1,\n          result = Array(length);\n\n      while (++index < length) {\n        var array = arrays[index],\n            othIndex = -1;\n\n        while (++othIndex < length) {\n          if (othIndex != index) {\n            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);\n          }\n        }\n      }\n      return baseUniq(baseFlatten(result, 1), iteratee, comparator);\n    }\n\n    /**\n     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n     *\n     * @private\n     * @param {Array} props The property identifiers.\n     * @param {Array} values The property values.\n     * @param {Function} assignFunc The function to assign values.\n     * @returns {Object} Returns the new object.\n     */\n    function baseZipObject(props, values, assignFunc) {\n      var index = -1,\n          length = props.length,\n          valsLength = values.length,\n          result = {};\n\n      while (++index < length) {\n        var value = index < valsLength ? values[index] : undefined;\n        assignFunc(result, props[index], value);\n      }\n      return result;\n    }\n\n    /**\n     * Casts `value` to an empty array if it's not an array like object.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Array|Object} Returns the cast array-like object.\n     */\n    function castArrayLikeObject(value) {\n      return isArrayLikeObject(value) ? value : [];\n    }\n\n    /**\n     * Casts `value` to `identity` if it's not a function.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Function} Returns cast function.\n     */\n    function castFunction(value) {\n      return typeof value == 'function' ? value : identity;\n    }\n\n    /**\n     * Casts `value` to a path array if it's not one.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @param {Object} [object] The object to query keys on.\n     * @returns {Array} Returns the cast property path array.\n     */\n    function castPath(value, object) {\n      if (isArray(value)) {\n        return value;\n      }\n      return isKey(value, object) ? [value] : stringToPath(toString(value));\n    }\n\n    /**\n     * A `baseRest` alias which can be replaced with `identity` by module\n     * replacement plugins.\n     *\n     * @private\n     * @type {Function}\n     * @param {Function} func The function to apply a rest parameter to.\n     * @returns {Function} Returns the new function.\n     */\n    var castRest = baseRest;\n\n    /**\n     * Casts `array` to a slice if it's needed.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {number} start The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the cast slice.\n     */\n    function castSlice(array, start, end) {\n      var length = array.length;\n      end = end === undefined ? length : end;\n      return (!start && end >= length) ? array : baseSlice(array, start, end);\n    }\n\n    /**\n     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).\n     *\n     * @private\n     * @param {number|Object} id The timer id or timeout object of the timer to clear.\n     */\n    var clearTimeout = ctxClearTimeout || function(id) {\n      return root.clearTimeout(id);\n    };\n\n    /**\n     * Creates a clone of  `buffer`.\n     *\n     * @private\n     * @param {Buffer} buffer The buffer to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Buffer} Returns the cloned buffer.\n     */\n    function cloneBuffer(buffer, isDeep) {\n      if (isDeep) {\n        return buffer.slice();\n      }\n      var length = buffer.length,\n          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n      buffer.copy(result);\n      return result;\n    }\n\n    /**\n     * Creates a clone of `arrayBuffer`.\n     *\n     * @private\n     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n     * @returns {ArrayBuffer} Returns the cloned array buffer.\n     */\n    function cloneArrayBuffer(arrayBuffer) {\n      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n      new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n      return result;\n    }\n\n    /**\n     * Creates a clone of `dataView`.\n     *\n     * @private\n     * @param {Object} dataView The data view to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned data view.\n     */\n    function cloneDataView(dataView, isDeep) {\n      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n    }\n\n    /**\n     * Creates a clone of `regexp`.\n     *\n     * @private\n     * @param {Object} regexp The regexp to clone.\n     * @returns {Object} Returns the cloned regexp.\n     */\n    function cloneRegExp(regexp) {\n      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n      result.lastIndex = regexp.lastIndex;\n      return result;\n    }\n\n    /**\n     * Creates a clone of the `symbol` object.\n     *\n     * @private\n     * @param {Object} symbol The symbol object to clone.\n     * @returns {Object} Returns the cloned symbol object.\n     */\n    function cloneSymbol(symbol) {\n      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n    }\n\n    /**\n     * Creates a clone of `typedArray`.\n     *\n     * @private\n     * @param {Object} typedArray The typed array to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned typed array.\n     */\n    function cloneTypedArray(typedArray, isDeep) {\n      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n    }\n\n    /**\n     * Compares values to sort them in ascending order.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {number} Returns the sort order indicator for `value`.\n     */\n    function compareAscending(value, other) {\n      if (value !== other) {\n        var valIsDefined = value !== undefined,\n            valIsNull = value === null,\n            valIsReflexive = value === value,\n            valIsSymbol = isSymbol(value);\n\n        var othIsDefined = other !== undefined,\n            othIsNull = other === null,\n            othIsReflexive = other === other,\n            othIsSymbol = isSymbol(other);\n\n        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n            (valIsNull && othIsDefined && othIsReflexive) ||\n            (!valIsDefined && othIsReflexive) ||\n            !valIsReflexive) {\n          return 1;\n        }\n        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n            (othIsNull && valIsDefined && valIsReflexive) ||\n            (!othIsDefined && valIsReflexive) ||\n            !othIsReflexive) {\n          return -1;\n        }\n      }\n      return 0;\n    }\n\n    /**\n     * Used by `_.orderBy` to compare multiple properties of a value to another\n     * and stable sort them.\n     *\n     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n     * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n     * of corresponding values.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\n     * @returns {number} Returns the sort order indicator for `object`.\n     */\n    function compareMultiple(object, other, orders) {\n      var index = -1,\n          objCriteria = object.criteria,\n          othCriteria = other.criteria,\n          length = objCriteria.length,\n          ordersLength = orders.length;\n\n      while (++index < length) {\n        var result = compareAscending(objCriteria[index], othCriteria[index]);\n        if (result) {\n          if (index >= ordersLength) {\n            return result;\n          }\n          var order = orders[index];\n          return result * (order == 'desc' ? -1 : 1);\n        }\n      }\n      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n      // that causes it, under certain circumstances, to provide the same value for\n      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n      // for more details.\n      //\n      // This also ensures a stable sort in V8 and other engines.\n      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n      return object.index - other.index;\n    }\n\n    /**\n     * Creates an array that is the composition of partially applied arguments,\n     * placeholders, and provided arguments into a single array of arguments.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to prepend to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgs(args, partials, holders, isCurried) {\n      var argsIndex = -1,\n          argsLength = args.length,\n          holdersLength = holders.length,\n          leftIndex = -1,\n          leftLength = partials.length,\n          rangeLength = nativeMax(argsLength - holdersLength, 0),\n          result = Array(leftLength + rangeLength),\n          isUncurried = !isCurried;\n\n      while (++leftIndex < leftLength) {\n        result[leftIndex] = partials[leftIndex];\n      }\n      while (++argsIndex < holdersLength) {\n        if (isUncurried || argsIndex < argsLength) {\n          result[holders[argsIndex]] = args[argsIndex];\n        }\n      }\n      while (rangeLength--) {\n        result[leftIndex++] = args[argsIndex++];\n      }\n      return result;\n    }\n\n    /**\n     * This function is like `composeArgs` except that the arguments composition\n     * is tailored for `_.partialRight`.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to append to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgsRight(args, partials, holders, isCurried) {\n      var argsIndex = -1,\n          argsLength = args.length,\n          holdersIndex = -1,\n          holdersLength = holders.length,\n          rightIndex = -1,\n          rightLength = partials.length,\n          rangeLength = nativeMax(argsLength - holdersLength, 0),\n          result = Array(rangeLength + rightLength),\n          isUncurried = !isCurried;\n\n      while (++argsIndex < rangeLength) {\n        result[argsIndex] = args[argsIndex];\n      }\n      var offset = argsIndex;\n      while (++rightIndex < rightLength) {\n        result[offset + rightIndex] = partials[rightIndex];\n      }\n      while (++holdersIndex < holdersLength) {\n        if (isUncurried || argsIndex < argsLength) {\n          result[offset + holders[holdersIndex]] = args[argsIndex++];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Copies the values of `source` to `array`.\n     *\n     * @private\n     * @param {Array} source The array to copy values from.\n     * @param {Array} [array=[]] The array to copy values to.\n     * @returns {Array} Returns `array`.\n     */\n    function copyArray(source, array) {\n      var index = -1,\n          length = source.length;\n\n      array || (array = Array(length));\n      while (++index < length) {\n        array[index] = source[index];\n      }\n      return array;\n    }\n\n    /**\n     * Copies properties of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy properties from.\n     * @param {Array} props The property identifiers to copy.\n     * @param {Object} [object={}] The object to copy properties to.\n     * @param {Function} [customizer] The function to customize copied values.\n     * @returns {Object} Returns `object`.\n     */\n    function copyObject(source, props, object, customizer) {\n      var isNew = !object;\n      object || (object = {});\n\n      var index = -1,\n          length = props.length;\n\n      while (++index < length) {\n        var key = props[index];\n\n        var newValue = customizer\n          ? customizer(object[key], source[key], key, object, source)\n          : undefined;\n\n        if (newValue === undefined) {\n          newValue = source[key];\n        }\n        if (isNew) {\n          baseAssignValue(object, key, newValue);\n        } else {\n          assignValue(object, key, newValue);\n        }\n      }\n      return object;\n    }\n\n    /**\n     * Copies own symbols of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy symbols from.\n     * @param {Object} [object={}] The object to copy symbols to.\n     * @returns {Object} Returns `object`.\n     */\n    function copySymbols(source, object) {\n      return copyObject(source, getSymbols(source), object);\n    }\n\n    /**\n     * Copies own and inherited symbols of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy symbols from.\n     * @param {Object} [object={}] The object to copy symbols to.\n     * @returns {Object} Returns `object`.\n     */\n    function copySymbolsIn(source, object) {\n      return copyObject(source, getSymbolsIn(source), object);\n    }\n\n    /**\n     * Creates a function like `_.groupBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} [initializer] The accumulator object initializer.\n     * @returns {Function} Returns the new aggregator function.\n     */\n    function createAggregator(setter, initializer) {\n      return function(collection, iteratee) {\n        var func = isArray(collection) ? arrayAggregator : baseAggregator,\n            accumulator = initializer ? initializer() : {};\n\n        return func(collection, setter, getIteratee(iteratee, 2), accumulator);\n      };\n    }\n\n    /**\n     * Creates a function like `_.assign`.\n     *\n     * @private\n     * @param {Function} assigner The function to assign values.\n     * @returns {Function} Returns the new assigner function.\n     */\n    function createAssigner(assigner) {\n      return baseRest(function(object, sources) {\n        var index = -1,\n            length = sources.length,\n            customizer = length > 1 ? sources[length - 1] : undefined,\n            guard = length > 2 ? sources[2] : undefined;\n\n        customizer = (assigner.length > 3 && typeof customizer == 'function')\n          ? (length--, customizer)\n          : undefined;\n\n        if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n          customizer = length < 3 ? undefined : customizer;\n          length = 1;\n        }\n        object = Object(object);\n        while (++index < length) {\n          var source = sources[index];\n          if (source) {\n            assigner(object, source, index, customizer);\n          }\n        }\n        return object;\n      });\n    }\n\n    /**\n     * Creates a `baseEach` or `baseEachRight` function.\n     *\n     * @private\n     * @param {Function} eachFunc The function to iterate over a collection.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseEach(eachFunc, fromRight) {\n      return function(collection, iteratee) {\n        if (collection == null) {\n          return collection;\n        }\n        if (!isArrayLike(collection)) {\n          return eachFunc(collection, iteratee);\n        }\n        var length = collection.length,\n            index = fromRight ? length : -1,\n            iterable = Object(collection);\n\n        while ((fromRight ? index-- : ++index < length)) {\n          if (iteratee(iterable[index], index, iterable) === false) {\n            break;\n          }\n        }\n        return collection;\n      };\n    }\n\n    /**\n     * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseFor(fromRight) {\n      return function(object, iteratee, keysFunc) {\n        var index = -1,\n            iterable = Object(object),\n            props = keysFunc(object),\n            length = props.length;\n\n        while (length--) {\n          var key = props[fromRight ? length : ++index];\n          if (iteratee(iterable[key], key, iterable) === false) {\n            break;\n          }\n        }\n        return object;\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with the optional `this`\n     * binding of `thisArg`.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createBind(func, bitmask, thisArg) {\n      var isBind = bitmask & WRAP_BIND_FLAG,\n          Ctor = createCtor(func);\n\n      function wrapper() {\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return fn.apply(isBind ? thisArg : this, arguments);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a function like `_.lowerFirst`.\n     *\n     * @private\n     * @param {string} methodName The name of the `String` case method to use.\n     * @returns {Function} Returns the new case function.\n     */\n    function createCaseFirst(methodName) {\n      return function(string) {\n        string = toString(string);\n\n        var strSymbols = hasUnicode(string)\n          ? stringToArray(string)\n          : undefined;\n\n        var chr = strSymbols\n          ? strSymbols[0]\n          : string.charAt(0);\n\n        var trailing = strSymbols\n          ? castSlice(strSymbols, 1).join('')\n          : string.slice(1);\n\n        return chr[methodName]() + trailing;\n      };\n    }\n\n    /**\n     * Creates a function like `_.camelCase`.\n     *\n     * @private\n     * @param {Function} callback The function to combine each word.\n     * @returns {Function} Returns the new compounder function.\n     */\n    function createCompounder(callback) {\n      return function(string) {\n        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n      };\n    }\n\n    /**\n     * Creates a function that produces an instance of `Ctor` regardless of\n     * whether it was invoked as part of a `new` expression or by `call` or `apply`.\n     *\n     * @private\n     * @param {Function} Ctor The constructor to wrap.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createCtor(Ctor) {\n      return function() {\n        // Use a `switch` statement to work with class constructors. See\n        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist\n        // for more details.\n        var args = arguments;\n        switch (args.length) {\n          case 0: return new Ctor;\n          case 1: return new Ctor(args[0]);\n          case 2: return new Ctor(args[0], args[1]);\n          case 3: return new Ctor(args[0], args[1], args[2]);\n          case 4: return new Ctor(args[0], args[1], args[2], args[3]);\n          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);\n          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);\n          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\n        }\n        var thisBinding = baseCreate(Ctor.prototype),\n            result = Ctor.apply(thisBinding, args);\n\n        // Mimic the constructor's `return` behavior.\n        // See https://es5.github.io/#x13.2.2 for more details.\n        return isObject(result) ? result : thisBinding;\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to enable currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {number} arity The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createCurry(func, bitmask, arity) {\n      var Ctor = createCtor(func);\n\n      function wrapper() {\n        var length = arguments.length,\n            args = Array(length),\n            index = length,\n            placeholder = getHolder(wrapper);\n\n        while (index--) {\n          args[index] = arguments[index];\n        }\n        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)\n          ? []\n          : replaceHolders(args, placeholder);\n\n        length -= holders.length;\n        if (length < arity) {\n          return createRecurry(\n            func, bitmask, createHybrid, wrapper.placeholder, undefined,\n            args, holders, undefined, undefined, arity - length);\n        }\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return apply(fn, this, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `_.find` or `_.findLast` function.\n     *\n     * @private\n     * @param {Function} findIndexFunc The function to find the collection index.\n     * @returns {Function} Returns the new find function.\n     */\n    function createFind(findIndexFunc) {\n      return function(collection, predicate, fromIndex) {\n        var iterable = Object(collection);\n        if (!isArrayLike(collection)) {\n          var iteratee = getIteratee(predicate, 3);\n          collection = keys(collection);\n          predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n        }\n        var index = findIndexFunc(collection, predicate, fromIndex);\n        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n      };\n    }\n\n    /**\n     * Creates a `_.flow` or `_.flowRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new flow function.\n     */\n    function createFlow(fromRight) {\n      return flatRest(function(funcs) {\n        var length = funcs.length,\n            index = length,\n            prereq = LodashWrapper.prototype.thru;\n\n        if (fromRight) {\n          funcs.reverse();\n        }\n        while (index--) {\n          var func = funcs[index];\n          if (typeof func != 'function') {\n            throw new TypeError(FUNC_ERROR_TEXT);\n          }\n          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {\n            var wrapper = new LodashWrapper([], true);\n          }\n        }\n        index = wrapper ? index : length;\n        while (++index < length) {\n          func = funcs[index];\n\n          var funcName = getFuncName(func),\n              data = funcName == 'wrapper' ? getData(func) : undefined;\n\n          if (data && isLaziable(data[0]) &&\n                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&\n                !data[4].length && data[9] == 1\n              ) {\n            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);\n          } else {\n            wrapper = (func.length == 1 && isLaziable(func))\n              ? wrapper[funcName]()\n              : wrapper.thru(func);\n          }\n        }\n        return function() {\n          var args = arguments,\n              value = args[0];\n\n          if (wrapper && args.length == 1 && isArray(value)) {\n            return wrapper.plant(value).value();\n          }\n          var index = 0,\n              result = length ? funcs[index].apply(this, args) : value;\n\n          while (++index < length) {\n            result = funcs[index].call(this, result);\n          }\n          return result;\n        };\n      });\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with optional `this`\n     * binding of `thisArg`, partial application, and currying.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [partialsRight] The arguments to append to those provided\n     *  to the new function.\n     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {\n      var isAry = bitmask & WRAP_ARY_FLAG,\n          isBind = bitmask & WRAP_BIND_FLAG,\n          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,\n          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),\n          isFlip = bitmask & WRAP_FLIP_FLAG,\n          Ctor = isBindKey ? undefined : createCtor(func);\n\n      function wrapper() {\n        var length = arguments.length,\n            args = Array(length),\n            index = length;\n\n        while (index--) {\n          args[index] = arguments[index];\n        }\n        if (isCurried) {\n          var placeholder = getHolder(wrapper),\n              holdersCount = countHolders(args, placeholder);\n        }\n        if (partials) {\n          args = composeArgs(args, partials, holders, isCurried);\n        }\n        if (partialsRight) {\n          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);\n        }\n        length -= holdersCount;\n        if (isCurried && length < arity) {\n          var newHolders = replaceHolders(args, placeholder);\n          return createRecurry(\n            func, bitmask, createHybrid, wrapper.placeholder, thisArg,\n            args, newHolders, argPos, ary, arity - length\n          );\n        }\n        var thisBinding = isBind ? thisArg : this,\n            fn = isBindKey ? thisBinding[func] : func;\n\n        length = args.length;\n        if (argPos) {\n          args = reorder(args, argPos);\n        } else if (isFlip && length > 1) {\n          args.reverse();\n        }\n        if (isAry && ary < length) {\n          args.length = ary;\n        }\n        if (this && this !== root && this instanceof wrapper) {\n          fn = Ctor || createCtor(fn);\n        }\n        return fn.apply(thisBinding, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a function like `_.invertBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} toIteratee The function to resolve iteratees.\n     * @returns {Function} Returns the new inverter function.\n     */\n    function createInverter(setter, toIteratee) {\n      return function(object, iteratee) {\n        return baseInverter(object, setter, toIteratee(iteratee), {});\n      };\n    }\n\n    /**\n     * Creates a function that performs a mathematical operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @param {number} [defaultValue] The value used for `undefined` arguments.\n     * @returns {Function} Returns the new mathematical operation function.\n     */\n    function createMathOperation(operator, defaultValue) {\n      return function(value, other) {\n        var result;\n        if (value === undefined && other === undefined) {\n          return defaultValue;\n        }\n        if (value !== undefined) {\n          result = value;\n        }\n        if (other !== undefined) {\n          if (result === undefined) {\n            return other;\n          }\n          if (typeof value == 'string' || typeof other == 'string') {\n            value = baseToString(value);\n            other = baseToString(other);\n          } else {\n            value = baseToNumber(value);\n            other = baseToNumber(other);\n          }\n          result = operator(value, other);\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function like `_.over`.\n     *\n     * @private\n     * @param {Function} arrayFunc The function to iterate over iteratees.\n     * @returns {Function} Returns the new over function.\n     */\n    function createOver(arrayFunc) {\n      return flatRest(function(iteratees) {\n        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));\n        return baseRest(function(args) {\n          var thisArg = this;\n          return arrayFunc(iteratees, function(iteratee) {\n            return apply(iteratee, thisArg, args);\n          });\n        });\n      });\n    }\n\n    /**\n     * Creates the padding for `string` based on `length`. The `chars` string\n     * is truncated if the number of characters exceeds `length`.\n     *\n     * @private\n     * @param {number} length The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padding for `string`.\n     */\n    function createPadding(length, chars) {\n      chars = chars === undefined ? ' ' : baseToString(chars);\n\n      var charsLength = chars.length;\n      if (charsLength < 2) {\n        return charsLength ? baseRepeat(chars, length) : chars;\n      }\n      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));\n      return hasUnicode(chars)\n        ? castSlice(stringToArray(result), 0, length).join('')\n        : result.slice(0, length);\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with the `this` binding\n     * of `thisArg` and `partials` prepended to the arguments it receives.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {Array} partials The arguments to prepend to those provided to\n     *  the new function.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createPartial(func, bitmask, thisArg, partials) {\n      var isBind = bitmask & WRAP_BIND_FLAG,\n          Ctor = createCtor(func);\n\n      function wrapper() {\n        var argsIndex = -1,\n            argsLength = arguments.length,\n            leftIndex = -1,\n            leftLength = partials.length,\n            args = Array(leftLength + argsLength),\n            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n\n        while (++leftIndex < leftLength) {\n          args[leftIndex] = partials[leftIndex];\n        }\n        while (argsLength--) {\n          args[leftIndex++] = arguments[++argsIndex];\n        }\n        return apply(fn, isBind ? thisArg : this, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `_.range` or `_.rangeRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new range function.\n     */\n    function createRange(fromRight) {\n      return function(start, end, step) {\n        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {\n          end = step = undefined;\n        }\n        // Ensure the sign of `-0` is preserved.\n        start = toFinite(start);\n        if (end === undefined) {\n          end = start;\n          start = 0;\n        } else {\n          end = toFinite(end);\n        }\n        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);\n        return baseRange(start, end, step, fromRight);\n      };\n    }\n\n    /**\n     * Creates a function that performs a relational operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @returns {Function} Returns the new relational operation function.\n     */\n    function createRelationalOperation(operator) {\n      return function(value, other) {\n        if (!(typeof value == 'string' && typeof other == 'string')) {\n          value = toNumber(value);\n          other = toNumber(other);\n        }\n        return operator(value, other);\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to continue currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {Function} wrapFunc The function to create the `func` wrapper.\n     * @param {*} placeholder The placeholder value.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {\n      var isCurry = bitmask & WRAP_CURRY_FLAG,\n          newHolders = isCurry ? holders : undefined,\n          newHoldersRight = isCurry ? undefined : holders,\n          newPartials = isCurry ? partials : undefined,\n          newPartialsRight = isCurry ? undefined : partials;\n\n      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);\n      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);\n\n      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {\n        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);\n      }\n      var newData = [\n        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,\n        newHoldersRight, argPos, ary, arity\n      ];\n\n      var result = wrapFunc.apply(undefined, newData);\n      if (isLaziable(func)) {\n        setData(result, newData);\n      }\n      result.placeholder = placeholder;\n      return setWrapToString(result, func, bitmask);\n    }\n\n    /**\n     * Creates a function like `_.round`.\n     *\n     * @private\n     * @param {string} methodName The name of the `Math` method to use when rounding.\n     * @returns {Function} Returns the new round function.\n     */\n    function createRound(methodName) {\n      var func = Math[methodName];\n      return function(number, precision) {\n        number = toNumber(number);\n        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);\n        if (precision) {\n          // Shift with exponential notation to avoid floating-point issues.\n          // See [MDN](https://mdn.io/round#Examples) for more details.\n          var pair = (toString(number) + 'e').split('e'),\n              value = func(pair[0] + 'e' + (+pair[1] + precision));\n\n          pair = (toString(value) + 'e').split('e');\n          return +(pair[0] + 'e' + (+pair[1] - precision));\n        }\n        return func(number);\n      };\n    }\n\n    /**\n     * Creates a set object of `values`.\n     *\n     * @private\n     * @param {Array} values The values to add to the set.\n     * @returns {Object} Returns the new set.\n     */\n    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\n      return new Set(values);\n    };\n\n    /**\n     * Creates a `_.toPairs` or `_.toPairsIn` function.\n     *\n     * @private\n     * @param {Function} keysFunc The function to get the keys of a given object.\n     * @returns {Function} Returns the new pairs function.\n     */\n    function createToPairs(keysFunc) {\n      return function(object) {\n        var tag = getTag(object);\n        if (tag == mapTag) {\n          return mapToArray(object);\n        }\n        if (tag == setTag) {\n          return setToPairs(object);\n        }\n        return baseToPairs(object, keysFunc(object));\n      };\n    }\n\n    /**\n     * Creates a function that either curries or invokes `func` with optional\n     * `this` binding and partially applied arguments.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags.\n     *    1 - `_.bind`\n     *    2 - `_.bindKey`\n     *    4 - `_.curry` or `_.curryRight` of a bound function\n     *    8 - `_.curry`\n     *   16 - `_.curryRight`\n     *   32 - `_.partial`\n     *   64 - `_.partialRight`\n     *  128 - `_.rearg`\n     *  256 - `_.ary`\n     *  512 - `_.flip`\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to be partially applied.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\n      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;\n      if (!isBindKey && typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var length = partials ? partials.length : 0;\n      if (!length) {\n        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);\n        partials = holders = undefined;\n      }\n      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);\n      arity = arity === undefined ? arity : toInteger(arity);\n      length -= holders ? holders.length : 0;\n\n      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {\n        var partialsRight = partials,\n            holdersRight = holders;\n\n        partials = holders = undefined;\n      }\n      var data = isBindKey ? undefined : getData(func);\n\n      var newData = [\n        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,\n        argPos, ary, arity\n      ];\n\n      if (data) {\n        mergeData(newData, data);\n      }\n      func = newData[0];\n      bitmask = newData[1];\n      thisArg = newData[2];\n      partials = newData[3];\n      holders = newData[4];\n      arity = newData[9] = newData[9] === undefined\n        ? (isBindKey ? 0 : func.length)\n        : nativeMax(newData[9] - length, 0);\n\n      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {\n        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);\n      }\n      if (!bitmask || bitmask == WRAP_BIND_FLAG) {\n        var result = createBind(func, bitmask, thisArg);\n      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {\n        result = createCurry(func, bitmask, arity);\n      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {\n        result = createPartial(func, bitmask, thisArg, partials);\n      } else {\n        result = createHybrid.apply(undefined, newData);\n      }\n      var setter = data ? baseSetData : setData;\n      return setWrapToString(setter(result, newData), func, bitmask);\n    }\n\n    /**\n     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties\n     * of source objects to the destination object for all destination properties\n     * that resolve to `undefined`.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to assign.\n     * @param {Object} object The parent object of `objValue`.\n     * @returns {*} Returns the value to assign.\n     */\n    function customDefaultsAssignIn(objValue, srcValue, key, object) {\n      if (objValue === undefined ||\n          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        return srcValue;\n      }\n      return objValue;\n    }\n\n    /**\n     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source\n     * objects into destination objects that are passed thru.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to merge.\n     * @param {Object} object The parent object of `objValue`.\n     * @param {Object} source The parent object of `srcValue`.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     * @returns {*} Returns the value to assign.\n     */\n    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {\n      if (isObject(objValue) && isObject(srcValue)) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, objValue);\n        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);\n        stack['delete'](srcValue);\n      }\n      return objValue;\n    }\n\n    /**\n     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain\n     * objects.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @param {string} key The key of the property to inspect.\n     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.\n     */\n    function customOmitClone(value) {\n      return isPlainObject(value) ? undefined : value;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for arrays with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Array} array The array to compare.\n     * @param {Array} other The other array to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `array` and `other` objects.\n     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n     */\n    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n          arrLength = array.length,\n          othLength = other.length;\n\n      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(array);\n      if (stacked && stack.get(other)) {\n        return stacked == other;\n      }\n      var index = -1,\n          result = true,\n          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n      stack.set(array, other);\n      stack.set(other, array);\n\n      // Ignore non-index properties.\n      while (++index < arrLength) {\n        var arrValue = array[index],\n            othValue = other[index];\n\n        if (customizer) {\n          var compared = isPartial\n            ? customizer(othValue, arrValue, index, other, array, stack)\n            : customizer(arrValue, othValue, index, array, other, stack);\n        }\n        if (compared !== undefined) {\n          if (compared) {\n            continue;\n          }\n          result = false;\n          break;\n        }\n        // Recursively compare arrays (susceptible to call stack limits).\n        if (seen) {\n          if (!arraySome(other, function(othValue, othIndex) {\n                if (!cacheHas(seen, othIndex) &&\n                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n                  return seen.push(othIndex);\n                }\n              })) {\n            result = false;\n            break;\n          }\n        } else if (!(\n              arrValue === othValue ||\n                equalFunc(arrValue, othValue, bitmask, customizer, stack)\n            )) {\n          result = false;\n          break;\n        }\n      }\n      stack['delete'](array);\n      stack['delete'](other);\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for comparing objects of\n     * the same `toStringTag`.\n     *\n     * **Note:** This function only supports comparing values with tags of\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {string} tag The `toStringTag` of the objects to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n      switch (tag) {\n        case dataViewTag:\n          if ((object.byteLength != other.byteLength) ||\n              (object.byteOffset != other.byteOffset)) {\n            return false;\n          }\n          object = object.buffer;\n          other = other.buffer;\n\n        case arrayBufferTag:\n          if ((object.byteLength != other.byteLength) ||\n              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n            return false;\n          }\n          return true;\n\n        case boolTag:\n        case dateTag:\n        case numberTag:\n          // Coerce booleans to `1` or `0` and dates to milliseconds.\n          // Invalid dates are coerced to `NaN`.\n          return eq(+object, +other);\n\n        case errorTag:\n          return object.name == other.name && object.message == other.message;\n\n        case regexpTag:\n        case stringTag:\n          // Coerce regexes to strings and treat strings, primitives and objects,\n          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n          // for more details.\n          return object == (other + '');\n\n        case mapTag:\n          var convert = mapToArray;\n\n        case setTag:\n          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n          convert || (convert = setToArray);\n\n          if (object.size != other.size && !isPartial) {\n            return false;\n          }\n          // Assume cyclic values are equal.\n          var stacked = stack.get(object);\n          if (stacked) {\n            return stacked == other;\n          }\n          bitmask |= COMPARE_UNORDERED_FLAG;\n\n          // Recursively compare objects (susceptible to call stack limits).\n          stack.set(object, other);\n          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n          stack['delete'](object);\n          return result;\n\n        case symbolTag:\n          if (symbolValueOf) {\n            return symbolValueOf.call(object) == symbolValueOf.call(other);\n          }\n      }\n      return false;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for objects with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n          objProps = getAllKeys(object),\n          objLength = objProps.length,\n          othProps = getAllKeys(other),\n          othLength = othProps.length;\n\n      if (objLength != othLength && !isPartial) {\n        return false;\n      }\n      var index = objLength;\n      while (index--) {\n        var key = objProps[index];\n        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n          return false;\n        }\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked && stack.get(other)) {\n        return stacked == other;\n      }\n      var result = true;\n      stack.set(object, other);\n      stack.set(other, object);\n\n      var skipCtor = isPartial;\n      while (++index < objLength) {\n        key = objProps[index];\n        var objValue = object[key],\n            othValue = other[key];\n\n        if (customizer) {\n          var compared = isPartial\n            ? customizer(othValue, objValue, key, other, object, stack)\n            : customizer(objValue, othValue, key, object, other, stack);\n        }\n        // Recursively compare objects (susceptible to call stack limits).\n        if (!(compared === undefined\n              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n              : compared\n            )) {\n          result = false;\n          break;\n        }\n        skipCtor || (skipCtor = key == 'constructor');\n      }\n      if (result && !skipCtor) {\n        var objCtor = object.constructor,\n            othCtor = other.constructor;\n\n        // Non `Object` object instances with different constructors are not equal.\n        if (objCtor != othCtor &&\n            ('constructor' in object && 'constructor' in other) &&\n            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n              typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n          result = false;\n        }\n      }\n      stack['delete'](object);\n      stack['delete'](other);\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseRest` which flattens the rest array.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @returns {Function} Returns the new function.\n     */\n    function flatRest(func) {\n      return setToString(overRest(func, undefined, flatten), func + '');\n    }\n\n    /**\n     * Creates an array of own enumerable property names and symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function getAllKeys(object) {\n      return baseGetAllKeys(object, keys, getSymbols);\n    }\n\n    /**\n     * Creates an array of own and inherited enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function getAllKeysIn(object) {\n      return baseGetAllKeys(object, keysIn, getSymbolsIn);\n    }\n\n    /**\n     * Gets metadata for `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {*} Returns the metadata for `func`.\n     */\n    var getData = !metaMap ? noop : function(func) {\n      return metaMap.get(func);\n    };\n\n    /**\n     * Gets the name of `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {string} Returns the function name.\n     */\n    function getFuncName(func) {\n      var result = (func.name + ''),\n          array = realNames[result],\n          length = hasOwnProperty.call(realNames, result) ? array.length : 0;\n\n      while (length--) {\n        var data = array[length],\n            otherFunc = data.func;\n        if (otherFunc == null || otherFunc == func) {\n          return data.name;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Gets the argument placeholder value for `func`.\n     *\n     * @private\n     * @param {Function} func The function to inspect.\n     * @returns {*} Returns the placeholder value.\n     */\n    function getHolder(func) {\n      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;\n      return object.placeholder;\n    }\n\n    /**\n     * Gets the appropriate \"iteratee\" function. If `_.iteratee` is customized,\n     * this function returns the custom method, otherwise it returns `baseIteratee`.\n     * If arguments are provided, the chosen function is invoked with them and\n     * its result is returned.\n     *\n     * @private\n     * @param {*} [value] The value to convert to an iteratee.\n     * @param {number} [arity] The arity of the created iteratee.\n     * @returns {Function} Returns the chosen function or its result.\n     */\n    function getIteratee() {\n      var result = lodash.iteratee || iteratee;\n      result = result === iteratee ? baseIteratee : result;\n      return arguments.length ? result(arguments[0], arguments[1]) : result;\n    }\n\n    /**\n     * Gets the data for `map`.\n     *\n     * @private\n     * @param {Object} map The map to query.\n     * @param {string} key The reference key.\n     * @returns {*} Returns the map data.\n     */\n    function getMapData(map, key) {\n      var data = map.__data__;\n      return isKeyable(key)\n        ? data[typeof key == 'string' ? 'string' : 'hash']\n        : data.map;\n    }\n\n    /**\n     * Gets the property names, values, and compare flags of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the match data of `object`.\n     */\n    function getMatchData(object) {\n      var result = keys(object),\n          length = result.length;\n\n      while (length--) {\n        var key = result[length],\n            value = object[key];\n\n        result[length] = [key, value, isStrictComparable(value)];\n      }\n      return result;\n    }\n\n    /**\n     * Gets the native function at `key` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {string} key The key of the method to get.\n     * @returns {*} Returns the function if it's native, else `undefined`.\n     */\n    function getNative(object, key) {\n      var value = getValue(object, key);\n      return baseIsNative(value) ? value : undefined;\n    }\n\n    /**\n     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the raw `toStringTag`.\n     */\n    function getRawTag(value) {\n      var isOwn = hasOwnProperty.call(value, symToStringTag),\n          tag = value[symToStringTag];\n\n      try {\n        value[symToStringTag] = undefined;\n        var unmasked = true;\n      } catch (e) {}\n\n      var result = nativeObjectToString.call(value);\n      if (unmasked) {\n        if (isOwn) {\n          value[symToStringTag] = tag;\n        } else {\n          delete value[symToStringTag];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array of the own enumerable symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */\n    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n      if (object == null) {\n        return [];\n      }\n      object = Object(object);\n      return arrayFilter(nativeGetSymbols(object), function(symbol) {\n        return propertyIsEnumerable.call(object, symbol);\n      });\n    };\n\n    /**\n     * Creates an array of the own and inherited enumerable symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */\n    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n      var result = [];\n      while (object) {\n        arrayPush(result, getSymbols(object));\n        object = getPrototype(object);\n      }\n      return result;\n    };\n\n    /**\n     * Gets the `toStringTag` of `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */\n    var getTag = baseGetTag;\n\n    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\n    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n        (Map && getTag(new Map) != mapTag) ||\n        (Promise && getTag(Promise.resolve()) != promiseTag) ||\n        (Set && getTag(new Set) != setTag) ||\n        (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n      getTag = function(value) {\n        var result = baseGetTag(value),\n            Ctor = result == objectTag ? value.constructor : undefined,\n            ctorString = Ctor ? toSource(Ctor) : '';\n\n        if (ctorString) {\n          switch (ctorString) {\n            case dataViewCtorString: return dataViewTag;\n            case mapCtorString: return mapTag;\n            case promiseCtorString: return promiseTag;\n            case setCtorString: return setTag;\n            case weakMapCtorString: return weakMapTag;\n          }\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Gets the view, applying any `transforms` to the `start` and `end` positions.\n     *\n     * @private\n     * @param {number} start The start of the view.\n     * @param {number} end The end of the view.\n     * @param {Array} transforms The transformations to apply to the view.\n     * @returns {Object} Returns an object containing the `start` and `end`\n     *  positions of the view.\n     */\n    function getView(start, end, transforms) {\n      var index = -1,\n          length = transforms.length;\n\n      while (++index < length) {\n        var data = transforms[index],\n            size = data.size;\n\n        switch (data.type) {\n          case 'drop':      start += size; break;\n          case 'dropRight': end -= size; break;\n          case 'take':      end = nativeMin(end, start + size); break;\n          case 'takeRight': start = nativeMax(start, end - size); break;\n        }\n      }\n      return { 'start': start, 'end': end };\n    }\n\n    /**\n     * Extracts wrapper details from the `source` body comment.\n     *\n     * @private\n     * @param {string} source The source to inspect.\n     * @returns {Array} Returns the wrapper details.\n     */\n    function getWrapDetails(source) {\n      var match = source.match(reWrapDetails);\n      return match ? match[1].split(reSplitDetails) : [];\n    }\n\n    /**\n     * Checks if `path` exists on `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @param {Function} hasFunc The function to check properties.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     */\n    function hasPath(object, path, hasFunc) {\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length,\n          result = false;\n\n      while (++index < length) {\n        var key = toKey(path[index]);\n        if (!(result = object != null && hasFunc(object, key))) {\n          break;\n        }\n        object = object[key];\n      }\n      if (result || ++index != length) {\n        return result;\n      }\n      length = object == null ? 0 : object.length;\n      return !!length && isLength(length) && isIndex(key, length) &&\n        (isArray(object) || isArguments(object));\n    }\n\n    /**\n     * Initializes an array clone.\n     *\n     * @private\n     * @param {Array} array The array to clone.\n     * @returns {Array} Returns the initialized clone.\n     */\n    function initCloneArray(array) {\n      var length = array.length,\n          result = new array.constructor(length);\n\n      // Add properties assigned by `RegExp#exec`.\n      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n        result.index = array.index;\n        result.input = array.input;\n      }\n      return result;\n    }\n\n    /**\n     * Initializes an object clone.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneObject(object) {\n      return (typeof object.constructor == 'function' && !isPrototype(object))\n        ? baseCreate(getPrototype(object))\n        : {};\n    }\n\n    /**\n     * Initializes an object clone based on its `toStringTag`.\n     *\n     * **Note:** This function only supports cloning values with tags of\n     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @param {string} tag The `toStringTag` of the object to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneByTag(object, tag, isDeep) {\n      var Ctor = object.constructor;\n      switch (tag) {\n        case arrayBufferTag:\n          return cloneArrayBuffer(object);\n\n        case boolTag:\n        case dateTag:\n          return new Ctor(+object);\n\n        case dataViewTag:\n          return cloneDataView(object, isDeep);\n\n        case float32Tag: case float64Tag:\n        case int8Tag: case int16Tag: case int32Tag:\n        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n          return cloneTypedArray(object, isDeep);\n\n        case mapTag:\n          return new Ctor;\n\n        case numberTag:\n        case stringTag:\n          return new Ctor(object);\n\n        case regexpTag:\n          return cloneRegExp(object);\n\n        case setTag:\n          return new Ctor;\n\n        case symbolTag:\n          return cloneSymbol(object);\n      }\n    }\n\n    /**\n     * Inserts wrapper `details` in a comment at the top of the `source` body.\n     *\n     * @private\n     * @param {string} source The source to modify.\n     * @returns {Array} details The details to insert.\n     * @returns {string} Returns the modified source.\n     */\n    function insertWrapDetails(source, details) {\n      var length = details.length;\n      if (!length) {\n        return source;\n      }\n      var lastIndex = length - 1;\n      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];\n      details = details.join(length > 2 ? ', ' : ' ');\n      return source.replace(reWrapComment, '{\\n/* [wrapped with ' + details + '] */\\n');\n    }\n\n    /**\n     * Checks if `value` is a flattenable `arguments` object or array.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n     */\n    function isFlattenable(value) {\n      return isArray(value) || isArguments(value) ||\n        !!(spreadableSymbol && value && value[spreadableSymbol]);\n    }\n\n    /**\n     * Checks if `value` is a valid array-like index.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n     */\n    function isIndex(value, length) {\n      var type = typeof value;\n      length = length == null ? MAX_SAFE_INTEGER : length;\n\n      return !!length &&\n        (type == 'number' ||\n          (type != 'symbol' && reIsUint.test(value))) &&\n            (value > -1 && value % 1 == 0 && value < length);\n    }\n\n    /**\n     * Checks if the given arguments are from an iteratee call.\n     *\n     * @private\n     * @param {*} value The potential iteratee value argument.\n     * @param {*} index The potential iteratee index or key argument.\n     * @param {*} object The potential iteratee object argument.\n     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n     *  else `false`.\n     */\n    function isIterateeCall(value, index, object) {\n      if (!isObject(object)) {\n        return false;\n      }\n      var type = typeof index;\n      if (type == 'number'\n            ? (isArrayLike(object) && isIndex(index, object.length))\n            : (type == 'string' && index in object)\n          ) {\n        return eq(object[index], value);\n      }\n      return false;\n    }\n\n    /**\n     * Checks if `value` is a property name and not a property path.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {Object} [object] The object to query keys on.\n     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n     */\n    function isKey(value, object) {\n      if (isArray(value)) {\n        return false;\n      }\n      var type = typeof value;\n      if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n          value == null || isSymbol(value)) {\n        return true;\n      }\n      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n        (object != null && value in Object(object));\n    }\n\n    /**\n     * Checks if `value` is suitable for use as unique object key.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n     */\n    function isKeyable(value) {\n      var type = typeof value;\n      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n        ? (value !== '__proto__')\n        : (value === null);\n    }\n\n    /**\n     * Checks if `func` has a lazy counterpart.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,\n     *  else `false`.\n     */\n    function isLaziable(func) {\n      var funcName = getFuncName(func),\n          other = lodash[funcName];\n\n      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {\n        return false;\n      }\n      if (func === other) {\n        return true;\n      }\n      var data = getData(other);\n      return !!data && func === data[0];\n    }\n\n    /**\n     * Checks if `func` has its source masked.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n     */\n    function isMasked(func) {\n      return !!maskSrcKey && (maskSrcKey in func);\n    }\n\n    /**\n     * Checks if `func` is capable of being masked.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.\n     */\n    var isMaskable = coreJsData ? isFunction : stubFalse;\n\n    /**\n     * Checks if `value` is likely a prototype object.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n     */\n    function isPrototype(value) {\n      var Ctor = value && value.constructor,\n          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n      return value === proto;\n    }\n\n    /**\n     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` if suitable for strict\n     *  equality comparisons, else `false`.\n     */\n    function isStrictComparable(value) {\n      return value === value && !isObject(value);\n    }\n\n    /**\n     * A specialized version of `matchesProperty` for source values suitable\n     * for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {string} key The key of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function matchesStrictComparable(key, srcValue) {\n      return function(object) {\n        if (object == null) {\n          return false;\n        }\n        return object[key] === srcValue &&\n          (srcValue !== undefined || (key in Object(object)));\n      };\n    }\n\n    /**\n     * A specialized version of `_.memoize` which clears the memoized function's\n     * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n     *\n     * @private\n     * @param {Function} func The function to have its output memoized.\n     * @returns {Function} Returns the new memoized function.\n     */\n    function memoizeCapped(func) {\n      var result = memoize(func, function(key) {\n        if (cache.size === MAX_MEMOIZE_SIZE) {\n          cache.clear();\n        }\n        return key;\n      });\n\n      var cache = result.cache;\n      return result;\n    }\n\n    /**\n     * Merges the function metadata of `source` into `data`.\n     *\n     * Merging metadata reduces the number of wrappers used to invoke a function.\n     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n     * may be applied regardless of execution order. Methods like `_.ary` and\n     * `_.rearg` modify function arguments, making the order in which they are\n     * executed important, preventing the merging of metadata. However, we make\n     * an exception for a safe combined case where curried functions have `_.ary`\n     * and or `_.rearg` applied.\n     *\n     * @private\n     * @param {Array} data The destination metadata.\n     * @param {Array} source The source metadata.\n     * @returns {Array} Returns `data`.\n     */\n    function mergeData(data, source) {\n      var bitmask = data[1],\n          srcBitmask = source[1],\n          newBitmask = bitmask | srcBitmask,\n          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);\n\n      var isCombo =\n        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||\n        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||\n        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));\n\n      // Exit early if metadata can't be merged.\n      if (!(isCommon || isCombo)) {\n        return data;\n      }\n      // Use source `thisArg` if available.\n      if (srcBitmask & WRAP_BIND_FLAG) {\n        data[2] = source[2];\n        // Set when currying a bound function.\n        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;\n      }\n      // Compose partial arguments.\n      var value = source[3];\n      if (value) {\n        var partials = data[3];\n        data[3] = partials ? composeArgs(partials, value, source[4]) : value;\n        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];\n      }\n      // Compose partial right arguments.\n      value = source[5];\n      if (value) {\n        partials = data[5];\n        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;\n        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];\n      }\n      // Use source `argPos` if available.\n      value = source[7];\n      if (value) {\n        data[7] = value;\n      }\n      // Use source `ary` if it's smaller.\n      if (srcBitmask & WRAP_ARY_FLAG) {\n        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n      }\n      // Use source `arity` if one is not provided.\n      if (data[9] == null) {\n        data[9] = source[9];\n      }\n      // Use source `func` and merge bitmasks.\n      data[0] = source[0];\n      data[1] = newBitmask;\n\n      return data;\n    }\n\n    /**\n     * This function is like\n     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n     * except that it includes inherited enumerable properties.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function nativeKeysIn(object) {\n      var result = [];\n      if (object != null) {\n        for (var key in Object(object)) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Converts `value` to a string using `Object.prototype.toString`.\n     *\n     * @private\n     * @param {*} value The value to convert.\n     * @returns {string} Returns the converted string.\n     */\n    function objectToString(value) {\n      return nativeObjectToString.call(value);\n    }\n\n    /**\n     * A specialized version of `baseRest` which transforms the rest array.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @param {Function} transform The rest array transform.\n     * @returns {Function} Returns the new function.\n     */\n    function overRest(func, start, transform) {\n      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n      return function() {\n        var args = arguments,\n            index = -1,\n            length = nativeMax(args.length - start, 0),\n            array = Array(length);\n\n        while (++index < length) {\n          array[index] = args[start + index];\n        }\n        index = -1;\n        var otherArgs = Array(start + 1);\n        while (++index < start) {\n          otherArgs[index] = args[index];\n        }\n        otherArgs[start] = transform(array);\n        return apply(func, this, otherArgs);\n      };\n    }\n\n    /**\n     * Gets the parent value at `path` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array} path The path to get the parent value of.\n     * @returns {*} Returns the parent value.\n     */\n    function parent(object, path) {\n      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));\n    }\n\n    /**\n     * Reorder `array` according to the specified indexes where the element at\n     * the first index is assigned as the first element, the element at\n     * the second index is assigned as the second element, and so on.\n     *\n     * @private\n     * @param {Array} array The array to reorder.\n     * @param {Array} indexes The arranged array indexes.\n     * @returns {Array} Returns `array`.\n     */\n    function reorder(array, indexes) {\n      var arrLength = array.length,\n          length = nativeMin(indexes.length, arrLength),\n          oldArray = copyArray(array);\n\n      while (length--) {\n        var index = indexes[length];\n        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\n      }\n      return array;\n    }\n\n    /**\n     * Sets metadata for `func`.\n     *\n     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short\n     * period of time, it will trip its breaker and transition to an identity\n     * function to avoid garbage collection pauses in V8. See\n     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)\n     * for more details.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var setData = shortOut(baseSetData);\n\n    /**\n     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @returns {number|Object} Returns the timer id or timeout object.\n     */\n    var setTimeout = ctxSetTimeout || function(func, wait) {\n      return root.setTimeout(func, wait);\n    };\n\n    /**\n     * Sets the `toString` method of `func` to return `string`.\n     *\n     * @private\n     * @param {Function} func The function to modify.\n     * @param {Function} string The `toString` result.\n     * @returns {Function} Returns `func`.\n     */\n    var setToString = shortOut(baseSetToString);\n\n    /**\n     * Sets the `toString` method of `wrapper` to mimic the source of `reference`\n     * with wrapper details in a comment at the top of the source body.\n     *\n     * @private\n     * @param {Function} wrapper The function to modify.\n     * @param {Function} reference The reference function.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Function} Returns `wrapper`.\n     */\n    function setWrapToString(wrapper, reference, bitmask) {\n      var source = (reference + '');\n      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));\n    }\n\n    /**\n     * Creates a function that'll short out and invoke `identity` instead\n     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n     * milliseconds.\n     *\n     * @private\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new shortable function.\n     */\n    function shortOut(func) {\n      var count = 0,\n          lastCalled = 0;\n\n      return function() {\n        var stamp = nativeNow(),\n            remaining = HOT_SPAN - (stamp - lastCalled);\n\n        lastCalled = stamp;\n        if (remaining > 0) {\n          if (++count >= HOT_COUNT) {\n            return arguments[0];\n          }\n        } else {\n          count = 0;\n        }\n        return func.apply(undefined, arguments);\n      };\n    }\n\n    /**\n     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n     *\n     * @private\n     * @param {Array} array The array to shuffle.\n     * @param {number} [size=array.length] The size of `array`.\n     * @returns {Array} Returns `array`.\n     */\n    function shuffleSelf(array, size) {\n      var index = -1,\n          length = array.length,\n          lastIndex = length - 1;\n\n      size = size === undefined ? length : size;\n      while (++index < size) {\n        var rand = baseRandom(index, lastIndex),\n            value = array[rand];\n\n        array[rand] = array[index];\n        array[index] = value;\n      }\n      array.length = size;\n      return array;\n    }\n\n    /**\n     * Converts `string` to a property path array.\n     *\n     * @private\n     * @param {string} string The string to convert.\n     * @returns {Array} Returns the property path array.\n     */\n    var stringToPath = memoizeCapped(function(string) {\n      var result = [];\n      if (string.charCodeAt(0) === 46 /* . */) {\n        result.push('');\n      }\n      string.replace(rePropName, function(match, number, quote, subString) {\n        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n      });\n      return result;\n    });\n\n    /**\n     * Converts `value` to a string key if it's not a string or symbol.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {string|symbol} Returns the key.\n     */\n    function toKey(value) {\n      if (typeof value == 'string' || isSymbol(value)) {\n        return value;\n      }\n      var result = (value + '');\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n    }\n\n    /**\n     * Converts `func` to its source code.\n     *\n     * @private\n     * @param {Function} func The function to convert.\n     * @returns {string} Returns the source code.\n     */\n    function toSource(func) {\n      if (func != null) {\n        try {\n          return funcToString.call(func);\n        } catch (e) {}\n        try {\n          return (func + '');\n        } catch (e) {}\n      }\n      return '';\n    }\n\n    /**\n     * Updates wrapper `details` based on `bitmask` flags.\n     *\n     * @private\n     * @returns {Array} details The details to modify.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Array} Returns `details`.\n     */\n    function updateWrapDetails(details, bitmask) {\n      arrayEach(wrapFlags, function(pair) {\n        var value = '_.' + pair[0];\n        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {\n          details.push(value);\n        }\n      });\n      return details.sort();\n    }\n\n    /**\n     * Creates a clone of `wrapper`.\n     *\n     * @private\n     * @param {Object} wrapper The wrapper to clone.\n     * @returns {Object} Returns the cloned wrapper.\n     */\n    function wrapperClone(wrapper) {\n      if (wrapper instanceof LazyWrapper) {\n        return wrapper.clone();\n      }\n      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);\n      result.__actions__ = copyArray(wrapper.__actions__);\n      result.__index__  = wrapper.__index__;\n      result.__values__ = wrapper.__values__;\n      return result;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of elements split into groups the length of `size`.\n     * If `array` can't be split evenly, the final chunk will be the remaining\n     * elements.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to process.\n     * @param {number} [size=1] The length of each chunk\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the new array of chunks.\n     * @example\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 2);\n     * // => [['a', 'b'], ['c', 'd']]\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 3);\n     * // => [['a', 'b', 'c'], ['d']]\n     */\n    function chunk(array, size, guard) {\n      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {\n        size = 1;\n      } else {\n        size = nativeMax(toInteger(size), 0);\n      }\n      var length = array == null ? 0 : array.length;\n      if (!length || size < 1) {\n        return [];\n      }\n      var index = 0,\n          resIndex = 0,\n          result = Array(nativeCeil(length / size));\n\n      while (index < length) {\n        result[resIndex++] = baseSlice(array, index, (index += size));\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array with all falsey values removed. The values `false`, `null`,\n     * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to compact.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.compact([0, 1, false, 2, '', 3]);\n     * // => [1, 2, 3]\n     */\n    function compact(array) {\n      var index = -1,\n          length = array == null ? 0 : array.length,\n          resIndex = 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index];\n        if (value) {\n          result[resIndex++] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates a new array concatenating `array` with any additional arrays\n     * and/or values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to concatenate.\n     * @param {...*} [values] The values to concatenate.\n     * @returns {Array} Returns the new concatenated array.\n     * @example\n     *\n     * var array = [1];\n     * var other = _.concat(array, 2, [3], [[4]]);\n     *\n     * console.log(other);\n     * // => [1, 2, 3, [4]]\n     *\n     * console.log(array);\n     * // => [1]\n     */\n    function concat() {\n      var length = arguments.length;\n      if (!length) {\n        return [];\n      }\n      var args = Array(length - 1),\n          array = arguments[0],\n          index = length;\n\n      while (index--) {\n        args[index - 1] = arguments[index];\n      }\n      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));\n    }\n\n    /**\n     * Creates an array of `array` values not included in the other given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. The order and references of result values are\n     * determined by the first array.\n     *\n     * **Note:** Unlike `_.pullAll`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.without, _.xor\n     * @example\n     *\n     * _.difference([2, 1], [2, 3]);\n     * // => [1]\n     */\n    var difference = baseRest(function(array, values) {\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\n        : [];\n    });\n\n    /**\n     * This method is like `_.difference` except that it accepts `iteratee` which\n     * is invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The order and references of result values are\n     * determined by the first array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */\n    var differenceBy = baseRest(function(array, values) {\n      var iteratee = last(values);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))\n        : [];\n    });\n\n    /**\n     * This method is like `_.difference` except that it accepts `comparator`\n     * which is invoked to compare elements of `array` to `values`. The order and\n     * references of result values are determined by the first array. The comparator\n     * is invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     *\n     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }]\n     */\n    var differenceWith = baseRest(function(array, values) {\n      var comparator = last(values);\n      if (isArrayLikeObject(comparator)) {\n        comparator = undefined;\n      }\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)\n        : [];\n    });\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.drop([1, 2, 3]);\n     * // => [2, 3]\n     *\n     * _.drop([1, 2, 3], 2);\n     * // => [3]\n     *\n     * _.drop([1, 2, 3], 5);\n     * // => []\n     *\n     * _.drop([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function drop(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      return baseSlice(array, n < 0 ? 0 : n, length);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.dropRight([1, 2, 3]);\n     * // => [1, 2]\n     *\n     * _.dropRight([1, 2, 3], 2);\n     * // => [1]\n     *\n     * _.dropRight([1, 2, 3], 5);\n     * // => []\n     *\n     * _.dropRight([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function dropRight(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      n = length - n;\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the end.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.dropRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropRightWhile(users, ['active', false]);\n     * // => objects for ['barney']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropRightWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */\n    function dropRightWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), true, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the beginning.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.dropWhile(users, function(o) { return !o.active; });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropWhile(users, ['active', false]);\n     * // => objects for ['pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */\n    function dropWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), true)\n        : [];\n    }\n\n    /**\n     * Fills elements of `array` with `value` from `start` up to, but not\n     * including, `end`.\n     *\n     * **Note:** This method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Array\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.fill(array, 'a');\n     * console.log(array);\n     * // => ['a', 'a', 'a']\n     *\n     * _.fill(Array(3), 2);\n     * // => [2, 2, 2]\n     *\n     * _.fill([4, 6, 8, 10], '*', 1, 3);\n     * // => [4, '*', '*', 10]\n     */\n    function fill(array, value, start, end) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {\n        start = 0;\n        end = length;\n      }\n      return baseFill(array, value, start, end);\n    }\n\n    /**\n     * This method is like `_.find` except that it returns the index of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.findIndex(users, function(o) { return o.user == 'barney'; });\n     * // => 0\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findIndex(users, { 'user': 'fred', 'active': false });\n     * // => 1\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findIndex(users, ['active', false]);\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findIndex(users, 'active');\n     * // => 2\n     */\n    function findIndex(array, predicate, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n      if (index < 0) {\n        index = nativeMax(length + index, 0);\n      }\n      return baseFindIndex(array, getIteratee(predicate, 3), index);\n    }\n\n    /**\n     * This method is like `_.findIndex` except that it iterates over elements\n     * of `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n     * // => 2\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastIndex(users, { 'user': 'barney', 'active': true });\n     * // => 0\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastIndex(users, ['active', false]);\n     * // => 2\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastIndex(users, 'active');\n     * // => 0\n     */\n    function findLastIndex(array, predicate, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = length - 1;\n      if (fromIndex !== undefined) {\n        index = toInteger(fromIndex);\n        index = fromIndex < 0\n          ? nativeMax(length + index, 0)\n          : nativeMin(index, length - 1);\n      }\n      return baseFindIndex(array, getIteratee(predicate, 3), index, true);\n    }\n\n    /**\n     * Flattens `array` a single level deep.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flatten([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, [3, [4]], 5]\n     */\n    function flatten(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseFlatten(array, 1) : [];\n    }\n\n    /**\n     * Recursively flattens `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flattenDeep([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, 3, 4, 5]\n     */\n    function flattenDeep(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseFlatten(array, INFINITY) : [];\n    }\n\n    /**\n     * Recursively flatten `array` up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * var array = [1, [2, [3, [4]], 5]];\n     *\n     * _.flattenDepth(array, 1);\n     * // => [1, 2, [3, [4]], 5]\n     *\n     * _.flattenDepth(array, 2);\n     * // => [1, 2, 3, [4], 5]\n     */\n    function flattenDepth(array, depth) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      depth = depth === undefined ? 1 : toInteger(depth);\n      return baseFlatten(array, depth);\n    }\n\n    /**\n     * The inverse of `_.toPairs`; this method returns an object composed\n     * from key-value `pairs`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} pairs The key-value pairs.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.fromPairs([['a', 1], ['b', 2]]);\n     * // => { 'a': 1, 'b': 2 }\n     */\n    function fromPairs(pairs) {\n      var index = -1,\n          length = pairs == null ? 0 : pairs.length,\n          result = {};\n\n      while (++index < length) {\n        var pair = pairs[index];\n        result[pair[0]] = pair[1];\n      }\n      return result;\n    }\n\n    /**\n     * Gets the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias first\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the first element of `array`.\n     * @example\n     *\n     * _.head([1, 2, 3]);\n     * // => 1\n     *\n     * _.head([]);\n     * // => undefined\n     */\n    function head(array) {\n      return (array && array.length) ? array[0] : undefined;\n    }\n\n    /**\n     * Gets the index at which the first occurrence of `value` is found in `array`\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. If `fromIndex` is negative, it's used as the\n     * offset from the end of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.indexOf([1, 2, 1, 2], 2);\n     * // => 1\n     *\n     * // Search from the `fromIndex`.\n     * _.indexOf([1, 2, 1, 2], 2, 2);\n     * // => 3\n     */\n    function indexOf(array, value, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n      if (index < 0) {\n        index = nativeMax(length + index, 0);\n      }\n      return baseIndexOf(array, value, index);\n    }\n\n    /**\n     * Gets all but the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.initial([1, 2, 3]);\n     * // => [1, 2]\n     */\n    function initial(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseSlice(array, 0, -1) : [];\n    }\n\n    /**\n     * Creates an array of unique values that are included in all given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. The order and references of result values are\n     * determined by the first array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersection([2, 1], [2, 3]);\n     * // => [2]\n     */\n    var intersection = baseRest(function(arrays) {\n      var mapped = arrayMap(arrays, castArrayLikeObject);\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped)\n        : [];\n    });\n\n    /**\n     * This method is like `_.intersection` except that it accepts `iteratee`\n     * which is invoked for each element of each `arrays` to generate the criterion\n     * by which they're compared. The order and references of result values are\n     * determined by the first array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [2.1]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }]\n     */\n    var intersectionBy = baseRest(function(arrays) {\n      var iteratee = last(arrays),\n          mapped = arrayMap(arrays, castArrayLikeObject);\n\n      if (iteratee === last(mapped)) {\n        iteratee = undefined;\n      } else {\n        mapped.pop();\n      }\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped, getIteratee(iteratee, 2))\n        : [];\n    });\n\n    /**\n     * This method is like `_.intersection` except that it accepts `comparator`\n     * which is invoked to compare elements of `arrays`. The order and references\n     * of result values are determined by the first array. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.intersectionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }]\n     */\n    var intersectionWith = baseRest(function(arrays) {\n      var comparator = last(arrays),\n          mapped = arrayMap(arrays, castArrayLikeObject);\n\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      if (comparator) {\n        mapped.pop();\n      }\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped, undefined, comparator)\n        : [];\n    });\n\n    /**\n     * Converts all elements in `array` into a string separated by `separator`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to convert.\n     * @param {string} [separator=','] The element separator.\n     * @returns {string} Returns the joined string.\n     * @example\n     *\n     * _.join(['a', 'b', 'c'], '~');\n     * // => 'a~b~c'\n     */\n    function join(array, separator) {\n      return array == null ? '' : nativeJoin.call(array, separator);\n    }\n\n    /**\n     * Gets the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the last element of `array`.\n     * @example\n     *\n     * _.last([1, 2, 3]);\n     * // => 3\n     */\n    function last(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? array[length - 1] : undefined;\n    }\n\n    /**\n     * This method is like `_.indexOf` except that it iterates over elements of\n     * `array` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.lastIndexOf([1, 2, 1, 2], 2);\n     * // => 3\n     *\n     * // Search from the `fromIndex`.\n     * _.lastIndexOf([1, 2, 1, 2], 2, 2);\n     * // => 1\n     */\n    function lastIndexOf(array, value, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = length;\n      if (fromIndex !== undefined) {\n        index = toInteger(fromIndex);\n        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);\n      }\n      return value === value\n        ? strictLastIndexOf(array, value, index)\n        : baseFindIndex(array, baseIsNaN, index, true);\n    }\n\n    /**\n     * Gets the element at index `n` of `array`. If `n` is negative, the nth\n     * element from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.11.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=0] The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     *\n     * _.nth(array, 1);\n     * // => 'b'\n     *\n     * _.nth(array, -2);\n     * // => 'c';\n     */\n    function nth(array, n) {\n      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;\n    }\n\n    /**\n     * Removes all given values from `array` using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`\n     * to remove elements from an array by predicate.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...*} [values] The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pull(array, 'a', 'c');\n     * console.log(array);\n     * // => ['b', 'b']\n     */\n    var pull = baseRest(pullAll);\n\n    /**\n     * This method is like `_.pull` except that it accepts an array of values to remove.\n     *\n     * **Note:** Unlike `_.difference`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pullAll(array, ['a', 'c']);\n     * console.log(array);\n     * // => ['b', 'b']\n     */\n    function pullAll(array, values) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values)\n        : array;\n    }\n\n    /**\n     * This method is like `_.pullAll` except that it accepts `iteratee` which is\n     * invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The iteratee is invoked with one argument: (value).\n     *\n     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n     *\n     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\n     * console.log(array);\n     * // => [{ 'x': 2 }]\n     */\n    function pullAllBy(array, values, iteratee) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values, getIteratee(iteratee, 2))\n        : array;\n    }\n\n    /**\n     * This method is like `_.pullAll` except that it accepts `comparator` which\n     * is invoked to compare elements of `array` to `values`. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];\n     *\n     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);\n     * console.log(array);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]\n     */\n    function pullAllWith(array, values, comparator) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values, undefined, comparator)\n        : array;\n    }\n\n    /**\n     * Removes elements from `array` corresponding to `indexes` and returns an\n     * array of removed elements.\n     *\n     * **Note:** Unlike `_.at`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...(number|number[])} [indexes] The indexes of elements to remove.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     * var pulled = _.pullAt(array, [1, 3]);\n     *\n     * console.log(array);\n     * // => ['a', 'c']\n     *\n     * console.log(pulled);\n     * // => ['b', 'd']\n     */\n    var pullAt = flatRest(function(array, indexes) {\n      var length = array == null ? 0 : array.length,\n          result = baseAt(array, indexes);\n\n      basePullAt(array, arrayMap(indexes, function(index) {\n        return isIndex(index, length) ? +index : index;\n      }).sort(compareAscending));\n\n      return result;\n    });\n\n    /**\n     * Removes all elements from `array` that `predicate` returns truthy for\n     * and returns an array of the removed elements. The predicate is invoked\n     * with three arguments: (value, index, array).\n     *\n     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`\n     * to pull elements from an array by value.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = [1, 2, 3, 4];\n     * var evens = _.remove(array, function(n) {\n     *   return n % 2 == 0;\n     * });\n     *\n     * console.log(array);\n     * // => [1, 3]\n     *\n     * console.log(evens);\n     * // => [2, 4]\n     */\n    function remove(array, predicate) {\n      var result = [];\n      if (!(array && array.length)) {\n        return result;\n      }\n      var index = -1,\n          indexes = [],\n          length = array.length;\n\n      predicate = getIteratee(predicate, 3);\n      while (++index < length) {\n        var value = array[index];\n        if (predicate(value, index, array)) {\n          result.push(value);\n          indexes.push(index);\n        }\n      }\n      basePullAt(array, indexes);\n      return result;\n    }\n\n    /**\n     * Reverses `array` so that the first element becomes the last, the second\n     * element becomes the second to last, and so on.\n     *\n     * **Note:** This method mutates `array` and is based on\n     * [`Array#reverse`](https://mdn.io/Array/reverse).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.reverse(array);\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */\n    function reverse(array) {\n      return array == null ? array : nativeReverse.call(array);\n    }\n\n    /**\n     * Creates a slice of `array` from `start` up to, but not including, `end`.\n     *\n     * **Note:** This method is used instead of\n     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are\n     * returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function slice(array, start, end) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {\n        start = 0;\n        end = length;\n      }\n      else {\n        start = start == null ? 0 : toInteger(start);\n        end = end === undefined ? length : toInteger(end);\n      }\n      return baseSlice(array, start, end);\n    }\n\n    /**\n     * Uses a binary search to determine the lowest index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedIndex([30, 50], 40);\n     * // => 1\n     */\n    function sortedIndex(array, value) {\n      return baseSortedIndex(array, value);\n    }\n\n    /**\n     * This method is like `_.sortedIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 0\n     */\n    function sortedIndexBy(array, value, iteratee) {\n      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));\n    }\n\n    /**\n     * This method is like `_.indexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 1\n     */\n    function sortedIndexOf(array, value) {\n      var length = array == null ? 0 : array.length;\n      if (length) {\n        var index = baseSortedIndex(array, value);\n        if (index < length && eq(array[index], value)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.sortedIndex` except that it returns the highest\n     * index at which `value` should be inserted into `array` in order to\n     * maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);\n     * // => 4\n     */\n    function sortedLastIndex(array, value) {\n      return baseSortedIndex(array, value, true);\n    }\n\n    /**\n     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 1\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 1\n     */\n    function sortedLastIndexBy(array, value, iteratee) {\n      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);\n    }\n\n    /**\n     * This method is like `_.lastIndexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 3\n     */\n    function sortedLastIndexOf(array, value) {\n      var length = array == null ? 0 : array.length;\n      if (length) {\n        var index = baseSortedIndex(array, value, true) - 1;\n        if (eq(array[index], value)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.uniq` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniq([1, 1, 2]);\n     * // => [1, 2]\n     */\n    function sortedUniq(array) {\n      return (array && array.length)\n        ? baseSortedUniq(array)\n        : [];\n    }\n\n    /**\n     * This method is like `_.uniqBy` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);\n     * // => [1.1, 2.3]\n     */\n    function sortedUniqBy(array, iteratee) {\n      return (array && array.length)\n        ? baseSortedUniq(array, getIteratee(iteratee, 2))\n        : [];\n    }\n\n    /**\n     * Gets all but the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.tail([1, 2, 3]);\n     * // => [2, 3]\n     */\n    function tail(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseSlice(array, 1, length) : [];\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.take([1, 2, 3]);\n     * // => [1]\n     *\n     * _.take([1, 2, 3], 2);\n     * // => [1, 2]\n     *\n     * _.take([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.take([1, 2, 3], 0);\n     * // => []\n     */\n    function take(array, n, guard) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.takeRight([1, 2, 3]);\n     * // => [3]\n     *\n     * _.takeRight([1, 2, 3], 2);\n     * // => [2, 3]\n     *\n     * _.takeRight([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.takeRight([1, 2, 3], 0);\n     * // => []\n     */\n    function takeRight(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      n = length - n;\n      return baseSlice(array, n < 0 ? 0 : n, length);\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the end. Elements are\n     * taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.takeRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeRightWhile(users, ['active', false]);\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeRightWhile(users, 'active');\n     * // => []\n     */\n    function takeRightWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), false, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the beginning. Elements\n     * are taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.takeWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeWhile(users, ['active', false]);\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeWhile(users, 'active');\n     * // => []\n     */\n    function takeWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3))\n        : [];\n    }\n\n    /**\n     * Creates an array of unique values, in order, from all given arrays using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.union([2], [1, 2]);\n     * // => [2, 1]\n     */\n    var union = baseRest(function(arrays) {\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));\n    });\n\n    /**\n     * This method is like `_.union` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which uniqueness is computed. Result values are chosen from the first\n     * array in which the value occurs. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.unionBy([2.1], [1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    var unionBy = baseRest(function(arrays) {\n      var iteratee = last(arrays);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));\n    });\n\n    /**\n     * This method is like `_.union` except that it accepts `comparator` which\n     * is invoked to compare elements of `arrays`. Result values are chosen from\n     * the first array in which the value occurs. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.unionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */\n    var unionWith = baseRest(function(arrays) {\n      var comparator = last(arrays);\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);\n    });\n\n    /**\n     * Creates a duplicate-free version of an array, using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons, in which only the first occurrence of each element\n     * is kept. The order of result values is determined by the order they occur\n     * in the array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniq([2, 1, 2]);\n     * // => [2, 1]\n     */\n    function uniq(array) {\n      return (array && array.length) ? baseUniq(array) : [];\n    }\n\n    /**\n     * This method is like `_.uniq` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * uniqueness is computed. The order of result values is determined by the\n     * order they occur in the array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    function uniqBy(array, iteratee) {\n      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];\n    }\n\n    /**\n     * This method is like `_.uniq` except that it accepts `comparator` which\n     * is invoked to compare elements of `array`. The order of result values is\n     * determined by the order they occur in the array.The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.uniqWith(objects, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n     */\n    function uniqWith(array, comparator) {\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts an array of grouped\n     * elements and creates an array regrouping the elements to their pre-zip\n     * configuration.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.2.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     *\n     * _.unzip(zipped);\n     * // => [['a', 'b'], [1, 2], [true, false]]\n     */\n    function unzip(array) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      var length = 0;\n      array = arrayFilter(array, function(group) {\n        if (isArrayLikeObject(group)) {\n          length = nativeMax(group.length, length);\n          return true;\n        }\n      });\n      return baseTimes(length, function(index) {\n        return arrayMap(array, baseProperty(index));\n      });\n    }\n\n    /**\n     * This method is like `_.unzip` except that it accepts `iteratee` to specify\n     * how regrouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @param {Function} [iteratee=_.identity] The function to combine\n     *  regrouped values.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);\n     * // => [[1, 10, 100], [2, 20, 200]]\n     *\n     * _.unzipWith(zipped, _.add);\n     * // => [3, 30, 300]\n     */\n    function unzipWith(array, iteratee) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      var result = unzip(array);\n      if (iteratee == null) {\n        return result;\n      }\n      return arrayMap(result, function(group) {\n        return apply(iteratee, undefined, group);\n      });\n    }\n\n    /**\n     * Creates an array excluding all given values using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.pull`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...*} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.xor\n     * @example\n     *\n     * _.without([2, 1, 2, 3], 1, 2);\n     * // => [3]\n     */\n    var without = baseRest(function(array, values) {\n      return isArrayLikeObject(array)\n        ? baseDifference(array, values)\n        : [];\n    });\n\n    /**\n     * Creates an array of unique values that is the\n     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\n     * of the given arrays. The order of result values is determined by the order\n     * they occur in the arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.without\n     * @example\n     *\n     * _.xor([2, 1], [2, 3]);\n     * // => [1, 3]\n     */\n    var xor = baseRest(function(arrays) {\n      return baseXor(arrayFilter(arrays, isArrayLikeObject));\n    });\n\n    /**\n     * This method is like `_.xor` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which by which they're compared. The order of result values is determined\n     * by the order they occur in the arrays. The iteratee is invoked with one\n     * argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2, 3.4]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */\n    var xorBy = baseRest(function(arrays) {\n      var iteratee = last(arrays);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));\n    });\n\n    /**\n     * This method is like `_.xor` except that it accepts `comparator` which is\n     * invoked to compare elements of `arrays`. The order of result values is\n     * determined by the order they occur in the arrays. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.xorWith(objects, others, _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */\n    var xorWith = baseRest(function(arrays) {\n      var comparator = last(arrays);\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);\n    });\n\n    /**\n     * Creates an array of grouped elements, the first of which contains the\n     * first elements of the given arrays, the second of which contains the\n     * second elements of the given arrays, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     */\n    var zip = baseRest(unzip);\n\n    /**\n     * This method is like `_.fromPairs` except that it accepts two arrays,\n     * one of property identifiers and one of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.4.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObject(['a', 'b'], [1, 2]);\n     * // => { 'a': 1, 'b': 2 }\n     */\n    function zipObject(props, values) {\n      return baseZipObject(props || [], values || [], assignValue);\n    }\n\n    /**\n     * This method is like `_.zipObject` except that it supports property paths.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);\n     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }\n     */\n    function zipObjectDeep(props, values) {\n      return baseZipObject(props || [], values || [], baseSet);\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts `iteratee` to specify\n     * how grouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @param {Function} [iteratee=_.identity] The function to combine\n     *  grouped values.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\n     *   return a + b + c;\n     * });\n     * // => [111, 222]\n     */\n    var zipWith = baseRest(function(arrays) {\n      var length = arrays.length,\n          iteratee = length > 1 ? arrays[length - 1] : undefined;\n\n      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;\n      return unzipWith(arrays, iteratee);\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` wrapper instance that wraps `value` with explicit method\n     * chain sequences enabled. The result of such sequences must be unwrapped\n     * with `_#value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Seq\n     * @param {*} value The value to wrap.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36 },\n     *   { 'user': 'fred',    'age': 40 },\n     *   { 'user': 'pebbles', 'age': 1 }\n     * ];\n     *\n     * var youngest = _\n     *   .chain(users)\n     *   .sortBy('age')\n     *   .map(function(o) {\n     *     return o.user + ' is ' + o.age;\n     *   })\n     *   .head()\n     *   .value();\n     * // => 'pebbles is 1'\n     */\n    function chain(value) {\n      var result = lodash(value);\n      result.__chain__ = true;\n      return result;\n    }\n\n    /**\n     * This method invokes `interceptor` and returns `value`. The interceptor\n     * is invoked with one argument; (value). The purpose of this method is to\n     * \"tap into\" a method chain sequence in order to modify intermediate results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * _([1, 2, 3])\n     *  .tap(function(array) {\n     *    // Mutate input array.\n     *    array.pop();\n     *  })\n     *  .reverse()\n     *  .value();\n     * // => [2, 1]\n     */\n    function tap(value, interceptor) {\n      interceptor(value);\n      return value;\n    }\n\n    /**\n     * This method is like `_.tap` except that it returns the result of `interceptor`.\n     * The purpose of this method is to \"pass thru\" values replacing intermediate\n     * results in a method chain sequence.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns the result of `interceptor`.\n     * @example\n     *\n     * _('  abc  ')\n     *  .chain()\n     *  .trim()\n     *  .thru(function(value) {\n     *    return [value];\n     *  })\n     *  .value();\n     * // => ['abc']\n     */\n    function thru(value, interceptor) {\n      return interceptor(value);\n    }\n\n    /**\n     * This method is the wrapper version of `_.at`.\n     *\n     * @name at\n     * @memberOf _\n     * @since 1.0.0\n     * @category Seq\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _(object).at(['a[0].b.c', 'a[1]']).value();\n     * // => [3, 4]\n     */\n    var wrapperAt = flatRest(function(paths) {\n      var length = paths.length,\n          start = length ? paths[0] : 0,\n          value = this.__wrapped__,\n          interceptor = function(object) { return baseAt(object, paths); };\n\n      if (length > 1 || this.__actions__.length ||\n          !(value instanceof LazyWrapper) || !isIndex(start)) {\n        return this.thru(interceptor);\n      }\n      value = value.slice(start, +start + (length ? 1 : 0));\n      value.__actions__.push({\n        'func': thru,\n        'args': [interceptor],\n        'thisArg': undefined\n      });\n      return new LodashWrapper(value, this.__chain__).thru(function(array) {\n        if (length && !array.length) {\n          array.push(undefined);\n        }\n        return array;\n      });\n    });\n\n    /**\n     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.\n     *\n     * @name chain\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 }\n     * ];\n     *\n     * // A sequence without explicit chaining.\n     * _(users).head();\n     * // => { 'user': 'barney', 'age': 36 }\n     *\n     * // A sequence with explicit chaining.\n     * _(users)\n     *   .chain()\n     *   .head()\n     *   .pick('user')\n     *   .value();\n     * // => { 'user': 'barney' }\n     */\n    function wrapperChain() {\n      return chain(this);\n    }\n\n    /**\n     * Executes the chain sequence and returns the wrapped result.\n     *\n     * @name commit\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2];\n     * var wrapped = _(array).push(3);\n     *\n     * console.log(array);\n     * // => [1, 2]\n     *\n     * wrapped = wrapped.commit();\n     * console.log(array);\n     * // => [1, 2, 3]\n     *\n     * wrapped.last();\n     * // => 3\n     *\n     * console.log(array);\n     * // => [1, 2, 3]\n     */\n    function wrapperCommit() {\n      return new LodashWrapper(this.value(), this.__chain__);\n    }\n\n    /**\n     * Gets the next value on a wrapped object following the\n     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).\n     *\n     * @name next\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the next iterator value.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 1 }\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 2 }\n     *\n     * wrapped.next();\n     * // => { 'done': true, 'value': undefined }\n     */\n    function wrapperNext() {\n      if (this.__values__ === undefined) {\n        this.__values__ = toArray(this.value());\n      }\n      var done = this.__index__ >= this.__values__.length,\n          value = done ? undefined : this.__values__[this.__index__++];\n\n      return { 'done': done, 'value': value };\n    }\n\n    /**\n     * Enables the wrapper to be iterable.\n     *\n     * @name Symbol.iterator\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the wrapper object.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped[Symbol.iterator]() === wrapped;\n     * // => true\n     *\n     * Array.from(wrapped);\n     * // => [1, 2]\n     */\n    function wrapperToIterator() {\n      return this;\n    }\n\n    /**\n     * Creates a clone of the chain sequence planting `value` as the wrapped value.\n     *\n     * @name plant\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @param {*} value The value to plant.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2]).map(square);\n     * var other = wrapped.plant([3, 4]);\n     *\n     * other.value();\n     * // => [9, 16]\n     *\n     * wrapped.value();\n     * // => [1, 4]\n     */\n    function wrapperPlant(value) {\n      var result,\n          parent = this;\n\n      while (parent instanceof baseLodash) {\n        var clone = wrapperClone(parent);\n        clone.__index__ = 0;\n        clone.__values__ = undefined;\n        if (result) {\n          previous.__wrapped__ = clone;\n        } else {\n          result = clone;\n        }\n        var previous = clone;\n        parent = parent.__wrapped__;\n      }\n      previous.__wrapped__ = value;\n      return result;\n    }\n\n    /**\n     * This method is the wrapper version of `_.reverse`.\n     *\n     * **Note:** This method mutates the wrapped array.\n     *\n     * @name reverse\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _(array).reverse().value()\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */\n    function wrapperReverse() {\n      var value = this.__wrapped__;\n      if (value instanceof LazyWrapper) {\n        var wrapped = value;\n        if (this.__actions__.length) {\n          wrapped = new LazyWrapper(this);\n        }\n        wrapped = wrapped.reverse();\n        wrapped.__actions__.push({\n          'func': thru,\n          'args': [reverse],\n          'thisArg': undefined\n        });\n        return new LodashWrapper(wrapped, this.__chain__);\n      }\n      return this.thru(reverse);\n    }\n\n    /**\n     * Executes the chain sequence to resolve the unwrapped value.\n     *\n     * @name value\n     * @memberOf _\n     * @since 0.1.0\n     * @alias toJSON, valueOf\n     * @category Seq\n     * @returns {*} Returns the resolved unwrapped value.\n     * @example\n     *\n     * _([1, 2, 3]).value();\n     * // => [1, 2, 3]\n     */\n    function wrapperValue() {\n      return baseWrapperValue(this.__wrapped__, this.__actions__);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the number of times the key was returned by `iteratee`. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.countBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': 1, '6': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.countBy(['one', 'two', 'three'], 'length');\n     * // => { '3': 2, '5': 1 }\n     */\n    var countBy = createAggregator(function(result, value, key) {\n      if (hasOwnProperty.call(result, key)) {\n        ++result[key];\n      } else {\n        baseAssignValue(result, key, 1);\n      }\n    });\n\n    /**\n     * Checks if `predicate` returns truthy for **all** elements of `collection`.\n     * Iteration is stopped once `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * **Note:** This method returns `true` for\n     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n     * elements of empty collections.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.every([true, 1, null, 'yes'], Boolean);\n     * // => false\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.every(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.every(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.every(users, 'active');\n     * // => false\n     */\n    function every(collection, predicate, guard) {\n      var func = isArray(collection) ? arrayEvery : baseEvery;\n      if (guard && isIterateeCall(collection, predicate, guard)) {\n        predicate = undefined;\n      }\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning an array of all elements\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * **Note:** Unlike `_.remove`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.reject\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * _.filter(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, { 'age': 36, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.filter(users, 'active');\n     * // => objects for ['barney']\n     */\n    function filter(collection, predicate) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning the first element\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': true },\n     *   { 'user': 'fred',    'age': 40, 'active': false },\n     *   { 'user': 'pebbles', 'age': 1,  'active': true }\n     * ];\n     *\n     * _.find(users, function(o) { return o.age < 40; });\n     * // => object for 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.find(users, { 'age': 1, 'active': true });\n     * // => object for 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.find(users, ['active', false]);\n     * // => object for 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.find(users, 'active');\n     * // => object for 'barney'\n     */\n    var find = createFind(findIndex);\n\n    /**\n     * This method is like `_.find` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=collection.length-1] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * _.findLast([1, 2, 3, 4], function(n) {\n     *   return n % 2 == 1;\n     * });\n     * // => 3\n     */\n    var findLast = createFind(findLastIndex);\n\n    /**\n     * Creates a flattened array of values by running each element in `collection`\n     * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n     * with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [n, n];\n     * }\n     *\n     * _.flatMap([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */\n    function flatMap(collection, iteratee) {\n      return baseFlatten(map(collection, iteratee), 1);\n    }\n\n    /**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDeep([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */\n    function flatMapDeep(collection, iteratee) {\n      return baseFlatten(map(collection, iteratee), INFINITY);\n    }\n\n    /**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDepth([1, 2], duplicate, 2);\n     * // => [[1, 1], [2, 2]]\n     */\n    function flatMapDepth(collection, iteratee, depth) {\n      depth = depth === undefined ? 1 : toInteger(depth);\n      return baseFlatten(map(collection, iteratee), depth);\n    }\n\n    /**\n     * Iterates over elements of `collection` and invokes `iteratee` for each element.\n     * The iteratee is invoked with three arguments: (value, index|key, collection).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * **Note:** As with other \"Collections\" methods, objects with a \"length\"\n     * property are iterated like arrays. To avoid this behavior use `_.forIn`\n     * or `_.forOwn` for object iteration.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias each\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEachRight\n     * @example\n     *\n     * _.forEach([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `1` then `2`.\n     *\n     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */\n    function forEach(collection, iteratee) {\n      var func = isArray(collection) ? arrayEach : baseEach;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.forEach` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @alias eachRight\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEach\n     * @example\n     *\n     * _.forEachRight([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `2` then `1`.\n     */\n    function forEachRight(collection, iteratee) {\n      var func = isArray(collection) ? arrayEachRight : baseEachRight;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The order of grouped values\n     * is determined by the order they occur in `collection`. The corresponding\n     * value of each key is an array of elements responsible for generating the\n     * key. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': [4.2], '6': [6.1, 6.3] }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.groupBy(['one', 'two', 'three'], 'length');\n     * // => { '3': ['one', 'two'], '5': ['three'] }\n     */\n    var groupBy = createAggregator(function(result, value, key) {\n      if (hasOwnProperty.call(result, key)) {\n        result[key].push(value);\n      } else {\n        baseAssignValue(result, key, [value]);\n      }\n    });\n\n    /**\n     * Checks if `value` is in `collection`. If `collection` is a string, it's\n     * checked for a substring of `value`, otherwise\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * is used for equality comparisons. If `fromIndex` is negative, it's used as\n     * the offset from the end of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {boolean} Returns `true` if `value` is found, else `false`.\n     * @example\n     *\n     * _.includes([1, 2, 3], 1);\n     * // => true\n     *\n     * _.includes([1, 2, 3], 1, 2);\n     * // => false\n     *\n     * _.includes({ 'a': 1, 'b': 2 }, 1);\n     * // => true\n     *\n     * _.includes('abcd', 'bc');\n     * // => true\n     */\n    function includes(collection, value, fromIndex, guard) {\n      collection = isArrayLike(collection) ? collection : values(collection);\n      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\n\n      var length = collection.length;\n      if (fromIndex < 0) {\n        fromIndex = nativeMax(length + fromIndex, 0);\n      }\n      return isString(collection)\n        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\n        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\n    }\n\n    /**\n     * Invokes the method at `path` of each element in `collection`, returning\n     * an array of the results of each invoked method. Any additional arguments\n     * are provided to each invoked method. If `path` is a function, it's invoked\n     * for, and `this` bound to, each element in `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array|Function|string} path The path of the method to invoke or\n     *  the function invoked per iteration.\n     * @param {...*} [args] The arguments to invoke each method with.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');\n     * // => [[1, 5, 7], [1, 2, 3]]\n     *\n     * _.invokeMap([123, 456], String.prototype.split, '');\n     * // => [['1', '2', '3'], ['4', '5', '6']]\n     */\n    var invokeMap = baseRest(function(collection, path, args) {\n      var index = -1,\n          isFunc = typeof path == 'function',\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value) {\n        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);\n      });\n      return result;\n    });\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the last element responsible for generating the key. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * var array = [\n     *   { 'dir': 'left', 'code': 97 },\n     *   { 'dir': 'right', 'code': 100 }\n     * ];\n     *\n     * _.keyBy(array, function(o) {\n     *   return String.fromCharCode(o.code);\n     * });\n     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n     *\n     * _.keyBy(array, 'dir');\n     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n     */\n    var keyBy = createAggregator(function(result, value, key) {\n      baseAssignValue(result, key, value);\n    });\n\n    /**\n     * Creates an array of values by running each element in `collection` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n     *\n     * The guarded methods are:\n     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * _.map([4, 8], square);\n     * // => [16, 64]\n     *\n     * _.map({ 'a': 4, 'b': 8 }, square);\n     * // => [16, 64] (iteration order is not guaranteed)\n     *\n     * var users = [\n     *   { 'user': 'barney' },\n     *   { 'user': 'fred' }\n     * ];\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, 'user');\n     * // => ['barney', 'fred']\n     */\n    function map(collection, iteratee) {\n      var func = isArray(collection) ? arrayMap : baseMap;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.sortBy` except that it allows specifying the sort\n     * orders of the iteratees to sort by. If `orders` is unspecified, all values\n     * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n     * descending or \"asc\" for ascending sort order of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @param {string[]} [orders] The sort orders of `iteratees`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 34 },\n     *   { 'user': 'fred',   'age': 40 },\n     *   { 'user': 'barney', 'age': 36 }\n     * ];\n     *\n     * // Sort by `user` in ascending order and by `age` in descending order.\n     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n     */\n    function orderBy(collection, iteratees, orders, guard) {\n      if (collection == null) {\n        return [];\n      }\n      if (!isArray(iteratees)) {\n        iteratees = iteratees == null ? [] : [iteratees];\n      }\n      orders = guard ? undefined : orders;\n      if (!isArray(orders)) {\n        orders = orders == null ? [] : [orders];\n      }\n      return baseOrderBy(collection, iteratees, orders);\n    }\n\n    /**\n     * Creates an array of elements split into two groups, the first of which\n     * contains elements `predicate` returns truthy for, the second of which\n     * contains elements `predicate` returns falsey for. The predicate is\n     * invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of grouped elements.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': false },\n     *   { 'user': 'fred',    'age': 40, 'active': true },\n     *   { 'user': 'pebbles', 'age': 1,  'active': false }\n     * ];\n     *\n     * _.partition(users, function(o) { return o.active; });\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.partition(users, { 'age': 1, 'active': false });\n     * // => objects for [['pebbles'], ['barney', 'fred']]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.partition(users, ['active', false]);\n     * // => objects for [['barney', 'pebbles'], ['fred']]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.partition(users, 'active');\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     */\n    var partition = createAggregator(function(result, value, key) {\n      result[key ? 0 : 1].push(value);\n    }, function() { return [[], []]; });\n\n    /**\n     * Reduces `collection` to a value which is the accumulated result of running\n     * each element in `collection` thru `iteratee`, where each successive\n     * invocation is supplied the return value of the previous. If `accumulator`\n     * is not given, the first element of `collection` is used as the initial\n     * value. The iteratee is invoked with four arguments:\n     * (accumulator, value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.reduce`, `_.reduceRight`, and `_.transform`.\n     *\n     * The guarded methods are:\n     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\n     * and `sortBy`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduceRight\n     * @example\n     *\n     * _.reduce([1, 2], function(sum, n) {\n     *   return sum + n;\n     * }, 0);\n     * // => 3\n     *\n     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     *   return result;\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n     */\n    function reduce(collection, iteratee, accumulator) {\n      var func = isArray(collection) ? arrayReduce : baseReduce,\n          initAccum = arguments.length < 3;\n\n      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);\n    }\n\n    /**\n     * This method is like `_.reduce` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduce\n     * @example\n     *\n     * var array = [[0, 1], [2, 3], [4, 5]];\n     *\n     * _.reduceRight(array, function(flattened, other) {\n     *   return flattened.concat(other);\n     * }, []);\n     * // => [4, 5, 2, 3, 0, 1]\n     */\n    function reduceRight(collection, iteratee, accumulator) {\n      var func = isArray(collection) ? arrayReduceRight : baseReduce,\n          initAccum = arguments.length < 3;\n\n      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);\n    }\n\n    /**\n     * The opposite of `_.filter`; this method returns the elements of `collection`\n     * that `predicate` does **not** return truthy for.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.filter\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': true }\n     * ];\n     *\n     * _.reject(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.reject(users, { 'age': 40, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.reject(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.reject(users, 'active');\n     * // => objects for ['barney']\n     */\n    function reject(collection, predicate) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      return func(collection, negate(getIteratee(predicate, 3)));\n    }\n\n    /**\n     * Gets a random element from `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     * @example\n     *\n     * _.sample([1, 2, 3, 4]);\n     * // => 2\n     */\n    function sample(collection) {\n      var func = isArray(collection) ? arraySample : baseSample;\n      return func(collection);\n    }\n\n    /**\n     * Gets `n` random elements at unique keys from `collection` up to the\n     * size of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} [n=1] The number of elements to sample.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the random elements.\n     * @example\n     *\n     * _.sampleSize([1, 2, 3], 2);\n     * // => [3, 1]\n     *\n     * _.sampleSize([1, 2, 3], 4);\n     * // => [2, 3, 1]\n     */\n    function sampleSize(collection, n, guard) {\n      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {\n        n = 1;\n      } else {\n        n = toInteger(n);\n      }\n      var func = isArray(collection) ? arraySampleSize : baseSampleSize;\n      return func(collection, n);\n    }\n\n    /**\n     * Creates an array of shuffled values, using a version of the\n     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     * @example\n     *\n     * _.shuffle([1, 2, 3, 4]);\n     * // => [4, 1, 3, 2]\n     */\n    function shuffle(collection) {\n      var func = isArray(collection) ? arrayShuffle : baseShuffle;\n      return func(collection);\n    }\n\n    /**\n     * Gets the size of `collection` by returning its length for array-like\n     * values or the number of own enumerable string keyed properties for objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @returns {number} Returns the collection size.\n     * @example\n     *\n     * _.size([1, 2, 3]);\n     * // => 3\n     *\n     * _.size({ 'a': 1, 'b': 2 });\n     * // => 2\n     *\n     * _.size('pebbles');\n     * // => 7\n     */\n    function size(collection) {\n      if (collection == null) {\n        return 0;\n      }\n      if (isArrayLike(collection)) {\n        return isString(collection) ? stringSize(collection) : collection.length;\n      }\n      var tag = getTag(collection);\n      if (tag == mapTag || tag == setTag) {\n        return collection.size;\n      }\n      return baseKeys(collection).length;\n    }\n\n    /**\n     * Checks if `predicate` returns truthy for **any** element of `collection`.\n     * Iteration is stopped once `predicate` returns truthy. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.some([null, 0, 'yes', false], Boolean);\n     * // => true\n     *\n     * var users = [\n     *   { 'user': 'barney', 'active': true },\n     *   { 'user': 'fred',   'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.some(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.some(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.some(users, 'active');\n     * // => true\n     */\n    function some(collection, predicate, guard) {\n      var func = isArray(collection) ? arraySome : baseSome;\n      if (guard && isIterateeCall(collection, predicate, guard)) {\n        predicate = undefined;\n      }\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Creates an array of elements, sorted in ascending order by the results of\n     * running each element in a collection thru each iteratee. This method\n     * performs a stable sort, that is, it preserves the original sort order of\n     * equal elements. The iteratees are invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 },\n     *   { 'user': 'barney', 'age': 34 }\n     * ];\n     *\n     * _.sortBy(users, [function(o) { return o.user; }]);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n     *\n     * _.sortBy(users, ['user', 'age']);\n     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]\n     */\n    var sortBy = baseRest(function(collection, iteratees) {\n      if (collection == null) {\n        return [];\n      }\n      var length = iteratees.length;\n      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n        iteratees = [];\n      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n        iteratees = [iteratees[0]];\n      }\n      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Gets the timestamp of the number of milliseconds that have elapsed since\n     * the Unix epoch (1 January 1970 00:00:00 UTC).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Date\n     * @returns {number} Returns the timestamp.\n     * @example\n     *\n     * _.defer(function(stamp) {\n     *   console.log(_.now() - stamp);\n     * }, _.now());\n     * // => Logs the number of milliseconds it took for the deferred invocation.\n     */\n    var now = ctxNow || function() {\n      return root.Date.now();\n    };\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The opposite of `_.before`; this method creates a function that invokes\n     * `func` once it's called `n` or more times.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {number} n The number of calls before `func` is invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var saves = ['profile', 'settings'];\n     *\n     * var done = _.after(saves.length, function() {\n     *   console.log('done saving!');\n     * });\n     *\n     * _.forEach(saves, function(type) {\n     *   asyncSave({ 'type': type, 'complete': done });\n     * });\n     * // => Logs 'done saving!' after the two async saves have completed.\n     */\n    function after(n, func) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      n = toInteger(n);\n      return function() {\n        if (--n < 1) {\n          return func.apply(this, arguments);\n        }\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func`, with up to `n` arguments,\n     * ignoring any additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @param {number} [n=func.length] The arity cap.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.ary(parseInt, 1));\n     * // => [6, 8, 10]\n     */\n    function ary(func, n, guard) {\n      n = guard ? undefined : n;\n      n = (func && n == null) ? func.length : n;\n      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);\n    }\n\n    /**\n     * Creates a function that invokes `func`, with the `this` binding and arguments\n     * of the created function, while it's called less than `n` times. Subsequent\n     * calls to the created function return the result of the last `func` invocation.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {number} n The number of calls at which `func` is no longer invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * jQuery(element).on('click', _.before(5, addContactToList));\n     * // => Allows adding up to 4 contacts to the list.\n     */\n    function before(n, func) {\n      var result;\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      n = toInteger(n);\n      return function() {\n        if (--n > 0) {\n          result = func.apply(this, arguments);\n        }\n        if (n <= 1) {\n          func = undefined;\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of `thisArg`\n     * and `partials` prepended to the arguments it receives.\n     *\n     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** Unlike native `Function#bind`, this method doesn't set the \"length\"\n     * property of bound functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to bind.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * function greet(greeting, punctuation) {\n     *   return greeting + ' ' + this.user + punctuation;\n     * }\n     *\n     * var object = { 'user': 'fred' };\n     *\n     * var bound = _.bind(greet, object, 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bind(greet, object, _, '!');\n     * bound('hi');\n     * // => 'hi fred!'\n     */\n    var bind = baseRest(function(func, thisArg, partials) {\n      var bitmask = WRAP_BIND_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, getHolder(bind));\n        bitmask |= WRAP_PARTIAL_FLAG;\n      }\n      return createWrap(func, bitmask, thisArg, partials, holders);\n    });\n\n    /**\n     * Creates a function that invokes the method at `object[key]` with `partials`\n     * prepended to the arguments it receives.\n     *\n     * This method differs from `_.bind` by allowing bound functions to reference\n     * methods that may be redefined or don't yet exist. See\n     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)\n     * for more details.\n     *\n     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Function\n     * @param {Object} object The object to invoke the method on.\n     * @param {string} key The key of the method.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * var object = {\n     *   'user': 'fred',\n     *   'greet': function(greeting, punctuation) {\n     *     return greeting + ' ' + this.user + punctuation;\n     *   }\n     * };\n     *\n     * var bound = _.bindKey(object, 'greet', 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * object.greet = function(greeting, punctuation) {\n     *   return greeting + 'ya ' + this.user + punctuation;\n     * };\n     *\n     * bound('!');\n     * // => 'hiya fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bindKey(object, 'greet', _, '!');\n     * bound('hi');\n     * // => 'hiya fred!'\n     */\n    var bindKey = baseRest(function(object, key, partials) {\n      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, getHolder(bindKey));\n        bitmask |= WRAP_PARTIAL_FLAG;\n      }\n      return createWrap(key, bitmask, object, partials, holders);\n    });\n\n    /**\n     * Creates a function that accepts arguments of `func` and either invokes\n     * `func` returning its result, if at least `arity` number of arguments have\n     * been provided, or returns a function that accepts the remaining `func`\n     * arguments, and so on. The arity of `func` may be specified if `func.length`\n     * is not sufficient.\n     *\n     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curry(abc);\n     *\n     * curried(1)(2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(1)(_, 3)(2);\n     * // => [1, 2, 3]\n     */\n    function curry(func, arity, guard) {\n      arity = guard ? undefined : arity;\n      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n      result.placeholder = curry.placeholder;\n      return result;\n    }\n\n    /**\n     * This method is like `_.curry` except that arguments are applied to `func`\n     * in the manner of `_.partialRight` instead of `_.partial`.\n     *\n     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curryRight(abc);\n     *\n     * curried(3)(2)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(2, 3)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(3)(1, _)(2);\n     * // => [1, 2, 3]\n     */\n    function curryRight(func, arity, guard) {\n      arity = guard ? undefined : arity;\n      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n      result.placeholder = curryRight.placeholder;\n      return result;\n    }\n\n    /**\n     * Creates a debounced function that delays invoking `func` until after `wait`\n     * milliseconds have elapsed since the last time the debounced function was\n     * invoked. The debounced function comes with a `cancel` method to cancel\n     * delayed `func` invocations and a `flush` method to immediately invoke them.\n     * Provide `options` to indicate whether `func` should be invoked on the\n     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n     * with the last arguments provided to the debounced function. Subsequent\n     * calls to the debounced function return the result of the last `func`\n     * invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the debounced function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.debounce` and `_.throttle`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to debounce.\n     * @param {number} [wait=0] The number of milliseconds to delay.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=false]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {number} [options.maxWait]\n     *  The maximum time `func` is allowed to be delayed before it's invoked.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new debounced function.\n     * @example\n     *\n     * // Avoid costly calculations while the window size is in flux.\n     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n     *\n     * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n     * jQuery(element).on('click', _.debounce(sendMail, 300, {\n     *   'leading': true,\n     *   'trailing': false\n     * }));\n     *\n     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n     * var source = new EventSource('/stream');\n     * jQuery(source).on('message', debounced);\n     *\n     * // Cancel the trailing debounced invocation.\n     * jQuery(window).on('popstate', debounced.cancel);\n     */\n    function debounce(func, wait, options) {\n      var lastArgs,\n          lastThis,\n          maxWait,\n          result,\n          timerId,\n          lastCallTime,\n          lastInvokeTime = 0,\n          leading = false,\n          maxing = false,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      wait = toNumber(wait) || 0;\n      if (isObject(options)) {\n        leading = !!options.leading;\n        maxing = 'maxWait' in options;\n        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n\n      function invokeFunc(time) {\n        var args = lastArgs,\n            thisArg = lastThis;\n\n        lastArgs = lastThis = undefined;\n        lastInvokeTime = time;\n        result = func.apply(thisArg, args);\n        return result;\n      }\n\n      function leadingEdge(time) {\n        // Reset any `maxWait` timer.\n        lastInvokeTime = time;\n        // Start the timer for the trailing edge.\n        timerId = setTimeout(timerExpired, wait);\n        // Invoke the leading edge.\n        return leading ? invokeFunc(time) : result;\n      }\n\n      function remainingWait(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime,\n            timeWaiting = wait - timeSinceLastCall;\n\n        return maxing\n          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n          : timeWaiting;\n      }\n\n      function shouldInvoke(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime;\n\n        // Either this is the first call, activity has stopped and we're at the\n        // trailing edge, the system time has gone backwards and we're treating\n        // it as the trailing edge, or we've hit the `maxWait` limit.\n        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n      }\n\n      function timerExpired() {\n        var time = now();\n        if (shouldInvoke(time)) {\n          return trailingEdge(time);\n        }\n        // Restart the timer.\n        timerId = setTimeout(timerExpired, remainingWait(time));\n      }\n\n      function trailingEdge(time) {\n        timerId = undefined;\n\n        // Only invoke if we have `lastArgs` which means `func` has been\n        // debounced at least once.\n        if (trailing && lastArgs) {\n          return invokeFunc(time);\n        }\n        lastArgs = lastThis = undefined;\n        return result;\n      }\n\n      function cancel() {\n        if (timerId !== undefined) {\n          clearTimeout(timerId);\n        }\n        lastInvokeTime = 0;\n        lastArgs = lastCallTime = lastThis = timerId = undefined;\n      }\n\n      function flush() {\n        return timerId === undefined ? result : trailingEdge(now());\n      }\n\n      function debounced() {\n        var time = now(),\n            isInvoking = shouldInvoke(time);\n\n        lastArgs = arguments;\n        lastThis = this;\n        lastCallTime = time;\n\n        if (isInvoking) {\n          if (timerId === undefined) {\n            return leadingEdge(lastCallTime);\n          }\n          if (maxing) {\n            // Handle invocations in a tight loop.\n            timerId = setTimeout(timerExpired, wait);\n            return invokeFunc(lastCallTime);\n          }\n        }\n        if (timerId === undefined) {\n          timerId = setTimeout(timerExpired, wait);\n        }\n        return result;\n      }\n      debounced.cancel = cancel;\n      debounced.flush = flush;\n      return debounced;\n    }\n\n    /**\n     * Defers invoking the `func` until the current call stack has cleared. Any\n     * additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to defer.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.defer(function(text) {\n     *   console.log(text);\n     * }, 'deferred');\n     * // => Logs 'deferred' after one millisecond.\n     */\n    var defer = baseRest(function(func, args) {\n      return baseDelay(func, 1, args);\n    });\n\n    /**\n     * Invokes `func` after `wait` milliseconds. Any additional arguments are\n     * provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.delay(function(text) {\n     *   console.log(text);\n     * }, 1000, 'later');\n     * // => Logs 'later' after one second.\n     */\n    var delay = baseRest(function(func, wait, args) {\n      return baseDelay(func, toNumber(wait) || 0, args);\n    });\n\n    /**\n     * Creates a function that invokes `func` with arguments reversed.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to flip arguments for.\n     * @returns {Function} Returns the new flipped function.\n     * @example\n     *\n     * var flipped = _.flip(function() {\n     *   return _.toArray(arguments);\n     * });\n     *\n     * flipped('a', 'b', 'c', 'd');\n     * // => ['d', 'c', 'b', 'a']\n     */\n    function flip(func) {\n      return createWrap(func, WRAP_FLIP_FLAG);\n    }\n\n    /**\n     * Creates a function that memoizes the result of `func`. If `resolver` is\n     * provided, it determines the cache key for storing the result based on the\n     * arguments provided to the memoized function. By default, the first argument\n     * provided to the memoized function is used as the map cache key. The `func`\n     * is invoked with the `this` binding of the memoized function.\n     *\n     * **Note:** The cache is exposed as the `cache` property on the memoized\n     * function. Its creation may be customized by replacing the `_.memoize.Cache`\n     * constructor with one whose instances implement the\n     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n     * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to have its output memoized.\n     * @param {Function} [resolver] The function to resolve the cache key.\n     * @returns {Function} Returns the new memoized function.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     * var other = { 'c': 3, 'd': 4 };\n     *\n     * var values = _.memoize(_.values);\n     * values(object);\n     * // => [1, 2]\n     *\n     * values(other);\n     * // => [3, 4]\n     *\n     * object.a = 2;\n     * values(object);\n     * // => [1, 2]\n     *\n     * // Modify the result cache.\n     * values.cache.set(object, ['a', 'b']);\n     * values(object);\n     * // => ['a', 'b']\n     *\n     * // Replace `_.memoize.Cache`.\n     * _.memoize.Cache = WeakMap;\n     */\n    function memoize(func, resolver) {\n      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var memoized = function() {\n        var args = arguments,\n            key = resolver ? resolver.apply(this, args) : args[0],\n            cache = memoized.cache;\n\n        if (cache.has(key)) {\n          return cache.get(key);\n        }\n        var result = func.apply(this, args);\n        memoized.cache = cache.set(key, result) || cache;\n        return result;\n      };\n      memoized.cache = new (memoize.Cache || MapCache);\n      return memoized;\n    }\n\n    // Expose `MapCache`.\n    memoize.Cache = MapCache;\n\n    /**\n     * Creates a function that negates the result of the predicate `func`. The\n     * `func` predicate is invoked with the `this` binding and arguments of the\n     * created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} predicate The predicate to negate.\n     * @returns {Function} Returns the new negated function.\n     * @example\n     *\n     * function isEven(n) {\n     *   return n % 2 == 0;\n     * }\n     *\n     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n     * // => [1, 3, 5]\n     */\n    function negate(predicate) {\n      if (typeof predicate != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return function() {\n        var args = arguments;\n        switch (args.length) {\n          case 0: return !predicate.call(this);\n          case 1: return !predicate.call(this, args[0]);\n          case 2: return !predicate.call(this, args[0], args[1]);\n          case 3: return !predicate.call(this, args[0], args[1], args[2]);\n        }\n        return !predicate.apply(this, args);\n      };\n    }\n\n    /**\n     * Creates a function that is restricted to invoking `func` once. Repeat calls\n     * to the function return the value of the first invocation. The `func` is\n     * invoked with the `this` binding and arguments of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var initialize = _.once(createApplication);\n     * initialize();\n     * initialize();\n     * // => `createApplication` is invoked once\n     */\n    function once(func) {\n      return before(2, func);\n    }\n\n    /**\n     * Creates a function that invokes `func` with its arguments transformed.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to wrap.\n     * @param {...(Function|Function[])} [transforms=[_.identity]]\n     *  The argument transforms.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * function doubled(n) {\n     *   return n * 2;\n     * }\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var func = _.overArgs(function(x, y) {\n     *   return [x, y];\n     * }, [square, doubled]);\n     *\n     * func(9, 3);\n     * // => [81, 6]\n     *\n     * func(10, 5);\n     * // => [100, 10]\n     */\n    var overArgs = castRest(function(func, transforms) {\n      transforms = (transforms.length == 1 && isArray(transforms[0]))\n        ? arrayMap(transforms[0], baseUnary(getIteratee()))\n        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));\n\n      var funcsLength = transforms.length;\n      return baseRest(function(args) {\n        var index = -1,\n            length = nativeMin(args.length, funcsLength);\n\n        while (++index < length) {\n          args[index] = transforms[index].call(this, args[index]);\n        }\n        return apply(func, this, args);\n      });\n    });\n\n    /**\n     * Creates a function that invokes `func` with `partials` prepended to the\n     * arguments it receives. This method is like `_.bind` except it does **not**\n     * alter the `this` binding.\n     *\n     * The `_.partial.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.2.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var sayHelloTo = _.partial(greet, 'hello');\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     *\n     * // Partially applied with placeholders.\n     * var greetFred = _.partial(greet, _, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     */\n    var partial = baseRest(function(func, partials) {\n      var holders = replaceHolders(partials, getHolder(partial));\n      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);\n    });\n\n    /**\n     * This method is like `_.partial` except that partially applied arguments\n     * are appended to the arguments it receives.\n     *\n     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var greetFred = _.partialRight(greet, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     *\n     * // Partially applied with placeholders.\n     * var sayHelloTo = _.partialRight(greet, 'hello', _);\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     */\n    var partialRight = baseRest(function(func, partials) {\n      var holders = replaceHolders(partials, getHolder(partialRight));\n      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);\n    });\n\n    /**\n     * Creates a function that invokes `func` with arguments arranged according\n     * to the specified `indexes` where the argument value at the first index is\n     * provided as the first argument, the argument value at the second index is\n     * provided as the second argument, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to rearrange arguments for.\n     * @param {...(number|number[])} indexes The arranged argument indexes.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var rearged = _.rearg(function(a, b, c) {\n     *   return [a, b, c];\n     * }, [2, 0, 1]);\n     *\n     * rearged('b', 'c', 'a')\n     * // => ['a', 'b', 'c']\n     */\n    var rearg = flatRest(function(func, indexes) {\n      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);\n    });\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * created function and arguments from `start` and beyond provided as\n     * an array.\n     *\n     * **Note:** This method is based on the\n     * [rest parameter](https://mdn.io/rest_parameters).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.rest(function(what, names) {\n     *   return what + ' ' + _.initial(names).join(', ') +\n     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n     * });\n     *\n     * say('hello', 'fred', 'barney', 'pebbles');\n     * // => 'hello fred, barney, & pebbles'\n     */\n    function rest(func, start) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      start = start === undefined ? start : toInteger(start);\n      return baseRest(func, start);\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * create function and an array of arguments much like\n     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).\n     *\n     * **Note:** This method is based on the\n     * [spread operator](https://mdn.io/spread_operator).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Function\n     * @param {Function} func The function to spread arguments over.\n     * @param {number} [start=0] The start position of the spread.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.spread(function(who, what) {\n     *   return who + ' says ' + what;\n     * });\n     *\n     * say(['fred', 'hello']);\n     * // => 'fred says hello'\n     *\n     * var numbers = Promise.all([\n     *   Promise.resolve(40),\n     *   Promise.resolve(36)\n     * ]);\n     *\n     * numbers.then(_.spread(function(x, y) {\n     *   return x + y;\n     * }));\n     * // => a Promise of 76\n     */\n    function spread(func, start) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      start = start == null ? 0 : nativeMax(toInteger(start), 0);\n      return baseRest(function(args) {\n        var array = args[start],\n            otherArgs = castSlice(args, 0, start);\n\n        if (array) {\n          arrayPush(otherArgs, array);\n        }\n        return apply(func, this, otherArgs);\n      });\n    }\n\n    /**\n     * Creates a throttled function that only invokes `func` at most once per\n     * every `wait` milliseconds. The throttled function comes with a `cancel`\n     * method to cancel delayed `func` invocations and a `flush` method to\n     * immediately invoke them. Provide `options` to indicate whether `func`\n     * should be invoked on the leading and/or trailing edge of the `wait`\n     * timeout. The `func` is invoked with the last arguments provided to the\n     * throttled function. Subsequent calls to the throttled function return the\n     * result of the last `func` invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the throttled function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.throttle` and `_.debounce`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to throttle.\n     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=true]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new throttled function.\n     * @example\n     *\n     * // Avoid excessively updating the position while scrolling.\n     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n     *\n     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n     * jQuery(element).on('click', throttled);\n     *\n     * // Cancel the trailing throttled invocation.\n     * jQuery(window).on('popstate', throttled.cancel);\n     */\n    function throttle(func, wait, options) {\n      var leading = true,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      if (isObject(options)) {\n        leading = 'leading' in options ? !!options.leading : leading;\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n      return debounce(func, wait, {\n        'leading': leading,\n        'maxWait': wait,\n        'trailing': trailing\n      });\n    }\n\n    /**\n     * Creates a function that accepts up to one argument, ignoring any\n     * additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.unary(parseInt));\n     * // => [6, 8, 10]\n     */\n    function unary(func) {\n      return ary(func, 1);\n    }\n\n    /**\n     * Creates a function that provides `value` to `wrapper` as its first\n     * argument. Any additional arguments provided to the function are appended\n     * to those provided to the `wrapper`. The wrapper is invoked with the `this`\n     * binding of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {*} value The value to wrap.\n     * @param {Function} [wrapper=identity] The wrapper function.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var p = _.wrap(_.escape, function(func, text) {\n     *   return '<p>' + func(text) + '</p>';\n     * });\n     *\n     * p('fred, barney, & pebbles');\n     * // => '<p>fred, barney, &amp; pebbles</p>'\n     */\n    function wrap(value, wrapper) {\n      return partial(castFunction(wrapper), value);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Casts `value` as an array if it's not one.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Lang\n     * @param {*} value The value to inspect.\n     * @returns {Array} Returns the cast array.\n     * @example\n     *\n     * _.castArray(1);\n     * // => [1]\n     *\n     * _.castArray({ 'a': 1 });\n     * // => [{ 'a': 1 }]\n     *\n     * _.castArray('abc');\n     * // => ['abc']\n     *\n     * _.castArray(null);\n     * // => [null]\n     *\n     * _.castArray(undefined);\n     * // => [undefined]\n     *\n     * _.castArray();\n     * // => []\n     *\n     * var array = [1, 2, 3];\n     * console.log(_.castArray(array) === array);\n     * // => true\n     */\n    function castArray() {\n      if (!arguments.length) {\n        return [];\n      }\n      var value = arguments[0];\n      return isArray(value) ? value : [value];\n    }\n\n    /**\n     * Creates a shallow clone of `value`.\n     *\n     * **Note:** This method is loosely based on the\n     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n     * and supports cloning arrays, array buffers, booleans, date objects, maps,\n     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n     * arrays. The own enumerable properties of `arguments` objects are cloned\n     * as plain objects. An empty object is returned for uncloneable values such\n     * as error objects, functions, DOM nodes, and WeakMaps.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeep\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var shallow = _.clone(objects);\n     * console.log(shallow[0] === objects[0]);\n     * // => true\n     */\n    function clone(value) {\n      return baseClone(value, CLONE_SYMBOLS_FLAG);\n    }\n\n    /**\n     * This method is like `_.clone` except that it accepts `customizer` which\n     * is invoked to produce the cloned value. If `customizer` returns `undefined`,\n     * cloning is handled by the method instead. The `customizer` is invoked with\n     * up to four arguments; (value [, index|key, object, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeepWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(false);\n     *   }\n     * }\n     *\n     * var el = _.cloneWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 0\n     */\n    function cloneWith(value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);\n    }\n\n    /**\n     * This method is like `_.clone` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.clone\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var deep = _.cloneDeep(objects);\n     * console.log(deep[0] === objects[0]);\n     * // => false\n     */\n    function cloneDeep(value) {\n      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n    }\n\n    /**\n     * This method is like `_.cloneWith` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.cloneWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(true);\n     *   }\n     * }\n     *\n     * var el = _.cloneDeepWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 20\n     */\n    function cloneDeepWith(value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);\n    }\n\n    /**\n     * Checks if `object` conforms to `source` by invoking the predicate\n     * properties of `source` with the corresponding property values of `object`.\n     *\n     * **Note:** This method is equivalent to `_.conforms` when `source` is\n     * partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });\n     * // => true\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });\n     * // => false\n     */\n    function conformsTo(object, source) {\n      return source == null || baseConformsTo(object, source, keys(source));\n    }\n\n    /**\n     * Performs a\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * comparison between two values to determine if they are equivalent.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.eq(object, object);\n     * // => true\n     *\n     * _.eq(object, other);\n     * // => false\n     *\n     * _.eq('a', 'a');\n     * // => true\n     *\n     * _.eq('a', Object('a'));\n     * // => false\n     *\n     * _.eq(NaN, NaN);\n     * // => true\n     */\n    function eq(value, other) {\n      return value === other || (value !== value && other !== other);\n    }\n\n    /**\n     * Checks if `value` is greater than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     * @see _.lt\n     * @example\n     *\n     * _.gt(3, 1);\n     * // => true\n     *\n     * _.gt(3, 3);\n     * // => false\n     *\n     * _.gt(1, 3);\n     * // => false\n     */\n    var gt = createRelationalOperation(baseGt);\n\n    /**\n     * Checks if `value` is greater than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than or equal to\n     *  `other`, else `false`.\n     * @see _.lte\n     * @example\n     *\n     * _.gte(3, 1);\n     * // => true\n     *\n     * _.gte(3, 3);\n     * // => true\n     *\n     * _.gte(1, 3);\n     * // => false\n     */\n    var gte = createRelationalOperation(function(value, other) {\n      return value >= other;\n    });\n\n    /**\n     * Checks if `value` is likely an `arguments` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArguments(function() { return arguments; }());\n     * // => true\n     *\n     * _.isArguments([1, 2, 3]);\n     * // => false\n     */\n    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n        !propertyIsEnumerable.call(value, 'callee');\n    };\n\n    /**\n     * Checks if `value` is classified as an `Array` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n     * @example\n     *\n     * _.isArray([1, 2, 3]);\n     * // => true\n     *\n     * _.isArray(document.body.children);\n     * // => false\n     *\n     * _.isArray('abc');\n     * // => false\n     *\n     * _.isArray(_.noop);\n     * // => false\n     */\n    var isArray = Array.isArray;\n\n    /**\n     * Checks if `value` is classified as an `ArrayBuffer` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     * @example\n     *\n     * _.isArrayBuffer(new ArrayBuffer(2));\n     * // => true\n     *\n     * _.isArrayBuffer(new Array(2));\n     * // => false\n     */\n    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;\n\n    /**\n     * Checks if `value` is array-like. A value is considered array-like if it's\n     * not a function and has a `value.length` that's an integer greater than or\n     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n     * @example\n     *\n     * _.isArrayLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLike(document.body.children);\n     * // => true\n     *\n     * _.isArrayLike('abc');\n     * // => true\n     *\n     * _.isArrayLike(_.noop);\n     * // => false\n     */\n    function isArrayLike(value) {\n      return value != null && isLength(value.length) && !isFunction(value);\n    }\n\n    /**\n     * This method is like `_.isArrayLike` except that it also checks if `value`\n     * is an object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array-like object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArrayLikeObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLikeObject(document.body.children);\n     * // => true\n     *\n     * _.isArrayLikeObject('abc');\n     * // => false\n     *\n     * _.isArrayLikeObject(_.noop);\n     * // => false\n     */\n    function isArrayLikeObject(value) {\n      return isObjectLike(value) && isArrayLike(value);\n    }\n\n    /**\n     * Checks if `value` is classified as a boolean primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.\n     * @example\n     *\n     * _.isBoolean(false);\n     * // => true\n     *\n     * _.isBoolean(null);\n     * // => false\n     */\n    function isBoolean(value) {\n      return value === true || value === false ||\n        (isObjectLike(value) && baseGetTag(value) == boolTag);\n    }\n\n    /**\n     * Checks if `value` is a buffer.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n     * @example\n     *\n     * _.isBuffer(new Buffer(2));\n     * // => true\n     *\n     * _.isBuffer(new Uint8Array(2));\n     * // => false\n     */\n    var isBuffer = nativeIsBuffer || stubFalse;\n\n    /**\n     * Checks if `value` is classified as a `Date` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     * @example\n     *\n     * _.isDate(new Date);\n     * // => true\n     *\n     * _.isDate('Mon April 23 2012');\n     * // => false\n     */\n    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;\n\n    /**\n     * Checks if `value` is likely a DOM element.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.\n     * @example\n     *\n     * _.isElement(document.body);\n     * // => true\n     *\n     * _.isElement('<body>');\n     * // => false\n     */\n    function isElement(value) {\n      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);\n    }\n\n    /**\n     * Checks if `value` is an empty object, collection, map, or set.\n     *\n     * Objects are considered empty if they have no own enumerable string keyed\n     * properties.\n     *\n     * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n     * jQuery-like collections are considered empty if they have a `length` of `0`.\n     * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n     * @example\n     *\n     * _.isEmpty(null);\n     * // => true\n     *\n     * _.isEmpty(true);\n     * // => true\n     *\n     * _.isEmpty(1);\n     * // => true\n     *\n     * _.isEmpty([1, 2, 3]);\n     * // => false\n     *\n     * _.isEmpty({ 'a': 1 });\n     * // => false\n     */\n    function isEmpty(value) {\n      if (value == null) {\n        return true;\n      }\n      if (isArrayLike(value) &&\n          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n            isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n        return !value.length;\n      }\n      var tag = getTag(value);\n      if (tag == mapTag || tag == setTag) {\n        return !value.size;\n      }\n      if (isPrototype(value)) {\n        return !baseKeys(value).length;\n      }\n      for (var key in value) {\n        if (hasOwnProperty.call(value, key)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * Performs a deep comparison between two values to determine if they are\n     * equivalent.\n     *\n     * **Note:** This method supports comparing arrays, array buffers, booleans,\n     * date objects, error objects, maps, numbers, `Object` objects, regexes,\n     * sets, strings, symbols, and typed arrays. `Object` objects are compared\n     * by their own, not inherited, enumerable properties. Functions and DOM\n     * nodes are compared by strict equality, i.e. `===`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.isEqual(object, other);\n     * // => true\n     *\n     * object === other;\n     * // => false\n     */\n    function isEqual(value, other) {\n      return baseIsEqual(value, other);\n    }\n\n    /**\n     * This method is like `_.isEqual` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with up to\n     * six arguments: (objValue, othValue [, index|key, object, other, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, othValue) {\n     *   if (isGreeting(objValue) && isGreeting(othValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var array = ['hello', 'goodbye'];\n     * var other = ['hi', 'goodbye'];\n     *\n     * _.isEqualWith(array, other, customizer);\n     * // => true\n     */\n    function isEqualWith(value, other, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      var result = customizer ? customizer(value, other) : undefined;\n      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;\n    }\n\n    /**\n     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\n     * `SyntaxError`, `TypeError`, or `URIError` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.\n     * @example\n     *\n     * _.isError(new Error);\n     * // => true\n     *\n     * _.isError(Error);\n     * // => false\n     */\n    function isError(value) {\n      if (!isObjectLike(value)) {\n        return false;\n      }\n      var tag = baseGetTag(value);\n      return tag == errorTag || tag == domExcTag ||\n        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));\n    }\n\n    /**\n     * Checks if `value` is a finite primitive number.\n     *\n     * **Note:** This method is based on\n     * [`Number.isFinite`](https://mdn.io/Number/isFinite).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\n     * @example\n     *\n     * _.isFinite(3);\n     * // => true\n     *\n     * _.isFinite(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isFinite(Infinity);\n     * // => false\n     *\n     * _.isFinite('3');\n     * // => false\n     */\n    function isFinite(value) {\n      return typeof value == 'number' && nativeIsFinite(value);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Function` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n     * @example\n     *\n     * _.isFunction(_);\n     * // => true\n     *\n     * _.isFunction(/abc/);\n     * // => false\n     */\n    function isFunction(value) {\n      if (!isObject(value)) {\n        return false;\n      }\n      // The use of `Object#toString` avoids issues with the `typeof` operator\n      // in Safari 9 which returns 'object' for typed arrays and other constructors.\n      var tag = baseGetTag(value);\n      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n    }\n\n    /**\n     * Checks if `value` is an integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isInteger`](https://mdn.io/Number/isInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.\n     * @example\n     *\n     * _.isInteger(3);\n     * // => true\n     *\n     * _.isInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isInteger(Infinity);\n     * // => false\n     *\n     * _.isInteger('3');\n     * // => false\n     */\n    function isInteger(value) {\n      return typeof value == 'number' && value == toInteger(value);\n    }\n\n    /**\n     * Checks if `value` is a valid array-like length.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n     * @example\n     *\n     * _.isLength(3);\n     * // => true\n     *\n     * _.isLength(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isLength(Infinity);\n     * // => false\n     *\n     * _.isLength('3');\n     * // => false\n     */\n    function isLength(value) {\n      return typeof value == 'number' &&\n        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if `value` is the\n     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n     * @example\n     *\n     * _.isObject({});\n     * // => true\n     *\n     * _.isObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isObject(_.noop);\n     * // => true\n     *\n     * _.isObject(null);\n     * // => false\n     */\n    function isObject(value) {\n      var type = typeof value;\n      return value != null && (type == 'object' || type == 'function');\n    }\n\n    /**\n     * Checks if `value` is object-like. A value is object-like if it's not `null`\n     * and has a `typeof` result of \"object\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n     * @example\n     *\n     * _.isObjectLike({});\n     * // => true\n     *\n     * _.isObjectLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isObjectLike(_.noop);\n     * // => false\n     *\n     * _.isObjectLike(null);\n     * // => false\n     */\n    function isObjectLike(value) {\n      return value != null && typeof value == 'object';\n    }\n\n    /**\n     * Checks if `value` is classified as a `Map` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     * @example\n     *\n     * _.isMap(new Map);\n     * // => true\n     *\n     * _.isMap(new WeakMap);\n     * // => false\n     */\n    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\n    /**\n     * Performs a partial deep comparison between `object` and `source` to\n     * determine if `object` contains equivalent property values.\n     *\n     * **Note:** This method is equivalent to `_.matches` when `source` is\n     * partially applied.\n     *\n     * Partial comparisons will match empty array and empty object `source`\n     * values against any array or object value, respectively. See `_.isEqual`\n     * for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.isMatch(object, { 'b': 2 });\n     * // => true\n     *\n     * _.isMatch(object, { 'b': 1 });\n     * // => false\n     */\n    function isMatch(object, source) {\n      return object === source || baseIsMatch(object, source, getMatchData(source));\n    }\n\n    /**\n     * This method is like `_.isMatch` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with five\n     * arguments: (objValue, srcValue, index|key, object, source).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (isGreeting(objValue) && isGreeting(srcValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var object = { 'greeting': 'hello' };\n     * var source = { 'greeting': 'hi' };\n     *\n     * _.isMatchWith(object, source, customizer);\n     * // => true\n     */\n    function isMatchWith(object, source, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseIsMatch(object, source, getMatchData(source), customizer);\n    }\n\n    /**\n     * Checks if `value` is `NaN`.\n     *\n     * **Note:** This method is based on\n     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as\n     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for\n     * `undefined` and other non-number values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n     * @example\n     *\n     * _.isNaN(NaN);\n     * // => true\n     *\n     * _.isNaN(new Number(NaN));\n     * // => true\n     *\n     * isNaN(undefined);\n     * // => true\n     *\n     * _.isNaN(undefined);\n     * // => false\n     */\n    function isNaN(value) {\n      // An `NaN` primitive is the only value that is not equal to itself.\n      // Perform the `toStringTag` check first to avoid errors with some\n      // ActiveX objects in IE.\n      return isNumber(value) && value != +value;\n    }\n\n    /**\n     * Checks if `value` is a pristine native function.\n     *\n     * **Note:** This method can't reliably detect native functions in the presence\n     * of the core-js package because core-js circumvents this kind of detection.\n     * Despite multiple requests, the core-js maintainer has made it clear: any\n     * attempt to fix the detection will be obstructed. As a result, we're left\n     * with little choice but to throw an error. Unfortunately, this also affects\n     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),\n     * which rely on core-js.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     * @example\n     *\n     * _.isNative(Array.prototype.push);\n     * // => true\n     *\n     * _.isNative(_);\n     * // => false\n     */\n    function isNative(value) {\n      if (isMaskable(value)) {\n        throw new Error(CORE_ERROR_TEXT);\n      }\n      return baseIsNative(value);\n    }\n\n    /**\n     * Checks if `value` is `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.\n     * @example\n     *\n     * _.isNull(null);\n     * // => true\n     *\n     * _.isNull(void 0);\n     * // => false\n     */\n    function isNull(value) {\n      return value === null;\n    }\n\n    /**\n     * Checks if `value` is `null` or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n     * @example\n     *\n     * _.isNil(null);\n     * // => true\n     *\n     * _.isNil(void 0);\n     * // => true\n     *\n     * _.isNil(NaN);\n     * // => false\n     */\n    function isNil(value) {\n      return value == null;\n    }\n\n    /**\n     * Checks if `value` is classified as a `Number` primitive or object.\n     *\n     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n     * classified as numbers, use the `_.isFinite` method.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n     * @example\n     *\n     * _.isNumber(3);\n     * // => true\n     *\n     * _.isNumber(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isNumber(Infinity);\n     * // => true\n     *\n     * _.isNumber('3');\n     * // => false\n     */\n    function isNumber(value) {\n      return typeof value == 'number' ||\n        (isObjectLike(value) && baseGetTag(value) == numberTag);\n    }\n\n    /**\n     * Checks if `value` is a plain object, that is, an object created by the\n     * `Object` constructor or one with a `[[Prototype]]` of `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.8.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * _.isPlainObject(new Foo);\n     * // => false\n     *\n     * _.isPlainObject([1, 2, 3]);\n     * // => false\n     *\n     * _.isPlainObject({ 'x': 0, 'y': 0 });\n     * // => true\n     *\n     * _.isPlainObject(Object.create(null));\n     * // => true\n     */\n    function isPlainObject(value) {\n      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n        return false;\n      }\n      var proto = getPrototype(value);\n      if (proto === null) {\n        return true;\n      }\n      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n      return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n        funcToString.call(Ctor) == objectCtorString;\n    }\n\n    /**\n     * Checks if `value` is classified as a `RegExp` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     * @example\n     *\n     * _.isRegExp(/abc/);\n     * // => true\n     *\n     * _.isRegExp('/abc/');\n     * // => false\n     */\n    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;\n\n    /**\n     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754\n     * double precision number which isn't the result of a rounded unsafe integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.\n     * @example\n     *\n     * _.isSafeInteger(3);\n     * // => true\n     *\n     * _.isSafeInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isSafeInteger(Infinity);\n     * // => false\n     *\n     * _.isSafeInteger('3');\n     * // => false\n     */\n    function isSafeInteger(value) {\n      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if `value` is classified as a `Set` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     * @example\n     *\n     * _.isSet(new Set);\n     * // => true\n     *\n     * _.isSet(new WeakSet);\n     * // => false\n     */\n    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\n    /**\n     * Checks if `value` is classified as a `String` primitive or object.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n     * @example\n     *\n     * _.isString('abc');\n     * // => true\n     *\n     * _.isString(1);\n     * // => false\n     */\n    function isString(value) {\n      return typeof value == 'string' ||\n        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Symbol` primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n     * @example\n     *\n     * _.isSymbol(Symbol.iterator);\n     * // => true\n     *\n     * _.isSymbol('abc');\n     * // => false\n     */\n    function isSymbol(value) {\n      return typeof value == 'symbol' ||\n        (isObjectLike(value) && baseGetTag(value) == symbolTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a typed array.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     * @example\n     *\n     * _.isTypedArray(new Uint8Array);\n     * // => true\n     *\n     * _.isTypedArray([]);\n     * // => false\n     */\n    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n    /**\n     * Checks if `value` is `undefined`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n     * @example\n     *\n     * _.isUndefined(void 0);\n     * // => true\n     *\n     * _.isUndefined(null);\n     * // => false\n     */\n    function isUndefined(value) {\n      return value === undefined;\n    }\n\n    /**\n     * Checks if `value` is classified as a `WeakMap` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.\n     * @example\n     *\n     * _.isWeakMap(new WeakMap);\n     * // => true\n     *\n     * _.isWeakMap(new Map);\n     * // => false\n     */\n    function isWeakMap(value) {\n      return isObjectLike(value) && getTag(value) == weakMapTag;\n    }\n\n    /**\n     * Checks if `value` is classified as a `WeakSet` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.\n     * @example\n     *\n     * _.isWeakSet(new WeakSet);\n     * // => true\n     *\n     * _.isWeakSet(new Set);\n     * // => false\n     */\n    function isWeakSet(value) {\n      return isObjectLike(value) && baseGetTag(value) == weakSetTag;\n    }\n\n    /**\n     * Checks if `value` is less than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     * @see _.gt\n     * @example\n     *\n     * _.lt(1, 3);\n     * // => true\n     *\n     * _.lt(3, 3);\n     * // => false\n     *\n     * _.lt(3, 1);\n     * // => false\n     */\n    var lt = createRelationalOperation(baseLt);\n\n    /**\n     * Checks if `value` is less than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than or equal to\n     *  `other`, else `false`.\n     * @see _.gte\n     * @example\n     *\n     * _.lte(1, 3);\n     * // => true\n     *\n     * _.lte(3, 3);\n     * // => true\n     *\n     * _.lte(3, 1);\n     * // => false\n     */\n    var lte = createRelationalOperation(function(value, other) {\n      return value <= other;\n    });\n\n    /**\n     * Converts `value` to an array.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the converted array.\n     * @example\n     *\n     * _.toArray({ 'a': 1, 'b': 2 });\n     * // => [1, 2]\n     *\n     * _.toArray('abc');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toArray(1);\n     * // => []\n     *\n     * _.toArray(null);\n     * // => []\n     */\n    function toArray(value) {\n      if (!value) {\n        return [];\n      }\n      if (isArrayLike(value)) {\n        return isString(value) ? stringToArray(value) : copyArray(value);\n      }\n      if (symIterator && value[symIterator]) {\n        return iteratorToArray(value[symIterator]());\n      }\n      var tag = getTag(value),\n          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);\n\n      return func(value);\n    }\n\n    /**\n     * Converts `value` to a finite number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.12.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted number.\n     * @example\n     *\n     * _.toFinite(3.2);\n     * // => 3.2\n     *\n     * _.toFinite(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toFinite(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toFinite('3.2');\n     * // => 3.2\n     */\n    function toFinite(value) {\n      if (!value) {\n        return value === 0 ? value : 0;\n      }\n      value = toNumber(value);\n      if (value === INFINITY || value === -INFINITY) {\n        var sign = (value < 0 ? -1 : 1);\n        return sign * MAX_INTEGER;\n      }\n      return value === value ? value : 0;\n    }\n\n    /**\n     * Converts `value` to an integer.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toInteger(3.2);\n     * // => 3\n     *\n     * _.toInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toInteger(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toInteger('3.2');\n     * // => 3\n     */\n    function toInteger(value) {\n      var result = toFinite(value),\n          remainder = result % 1;\n\n      return result === result ? (remainder ? result - remainder : result) : 0;\n    }\n\n    /**\n     * Converts `value` to an integer suitable for use as the length of an\n     * array-like object.\n     *\n     * **Note:** This method is based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toLength(3.2);\n     * // => 3\n     *\n     * _.toLength(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toLength(Infinity);\n     * // => 4294967295\n     *\n     * _.toLength('3.2');\n     * // => 3\n     */\n    function toLength(value) {\n      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;\n    }\n\n    /**\n     * Converts `value` to a number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     * @example\n     *\n     * _.toNumber(3.2);\n     * // => 3.2\n     *\n     * _.toNumber(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toNumber(Infinity);\n     * // => Infinity\n     *\n     * _.toNumber('3.2');\n     * // => 3.2\n     */\n    function toNumber(value) {\n      if (typeof value == 'number') {\n        return value;\n      }\n      if (isSymbol(value)) {\n        return NAN;\n      }\n      if (isObject(value)) {\n        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n        value = isObject(other) ? (other + '') : other;\n      }\n      if (typeof value != 'string') {\n        return value === 0 ? value : +value;\n      }\n      value = value.replace(reTrim, '');\n      var isBinary = reIsBinary.test(value);\n      return (isBinary || reIsOctal.test(value))\n        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n        : (reIsBadHex.test(value) ? NAN : +value);\n    }\n\n    /**\n     * Converts `value` to a plain object flattening inherited enumerable string\n     * keyed properties of `value` to own properties of the plain object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Object} Returns the converted plain object.\n     * @example\n     *\n     * function Foo() {\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.assign({ 'a': 1 }, new Foo);\n     * // => { 'a': 1, 'b': 2 }\n     *\n     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n     * // => { 'a': 1, 'b': 2, 'c': 3 }\n     */\n    function toPlainObject(value) {\n      return copyObject(value, keysIn(value));\n    }\n\n    /**\n     * Converts `value` to a safe integer. A safe integer can be compared and\n     * represented correctly.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toSafeInteger(3.2);\n     * // => 3\n     *\n     * _.toSafeInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toSafeInteger(Infinity);\n     * // => 9007199254740991\n     *\n     * _.toSafeInteger('3.2');\n     * // => 3\n     */\n    function toSafeInteger(value) {\n      return value\n        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)\n        : (value === 0 ? value : 0);\n    }\n\n    /**\n     * Converts `value` to a string. An empty string is returned for `null`\n     * and `undefined` values. The sign of `-0` is preserved.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.toString(null);\n     * // => ''\n     *\n     * _.toString(-0);\n     * // => '-0'\n     *\n     * _.toString([1, 2, 3]);\n     * // => '1,2,3'\n     */\n    function toString(value) {\n      return value == null ? '' : baseToString(value);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Assigns own enumerable string keyed properties of source objects to the\n     * destination object. Source objects are applied from left to right.\n     * Subsequent sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object` and is loosely based on\n     * [`Object.assign`](https://mdn.io/Object/assign).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assignIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assign({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    var assign = createAssigner(function(object, source) {\n      if (isPrototype(source) || isArrayLike(source)) {\n        copyObject(source, keys(source), object);\n        return;\n      }\n      for (var key in source) {\n        if (hasOwnProperty.call(source, key)) {\n          assignValue(object, key, source[key]);\n        }\n      }\n    });\n\n    /**\n     * This method is like `_.assign` except that it iterates over own and\n     * inherited source properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extend\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assign\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assignIn({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\n     */\n    var assignIn = createAssigner(function(object, source) {\n      copyObject(source, keysIn(source), object);\n    });\n\n    /**\n     * This method is like `_.assignIn` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extendWith\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignInWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {\n      copyObject(source, keysIn(source), object, customizer);\n    });\n\n    /**\n     * This method is like `_.assign` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignInWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {\n      copyObject(source, keys(source), object, customizer);\n    });\n\n    /**\n     * Creates an array of values corresponding to `paths` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Array} Returns the picked values.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _.at(object, ['a[0].b.c', 'a[1]']);\n     * // => [3, 4]\n     */\n    var at = flatRest(baseAt);\n\n    /**\n     * Creates an object that inherits from the `prototype` object. If a\n     * `properties` object is given, its own enumerable string keyed properties\n     * are assigned to the created object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Object\n     * @param {Object} prototype The object to inherit from.\n     * @param {Object} [properties] The properties to assign to the object.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * function Shape() {\n     *   this.x = 0;\n     *   this.y = 0;\n     * }\n     *\n     * function Circle() {\n     *   Shape.call(this);\n     * }\n     *\n     * Circle.prototype = _.create(Shape.prototype, {\n     *   'constructor': Circle\n     * });\n     *\n     * var circle = new Circle;\n     * circle instanceof Circle;\n     * // => true\n     *\n     * circle instanceof Shape;\n     * // => true\n     */\n    function create(prototype, properties) {\n      var result = baseCreate(prototype);\n      return properties == null ? result : baseAssign(result, properties);\n    }\n\n    /**\n     * Assigns own and inherited enumerable string keyed properties of source\n     * objects to the destination object for all destination properties that\n     * resolve to `undefined`. Source objects are applied from left to right.\n     * Once a property is set, additional values of the same property are ignored.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaultsDeep\n     * @example\n     *\n     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var defaults = baseRest(function(object, sources) {\n      object = Object(object);\n\n      var index = -1;\n      var length = sources.length;\n      var guard = length > 2 ? sources[2] : undefined;\n\n      if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n        length = 1;\n      }\n\n      while (++index < length) {\n        var source = sources[index];\n        var props = keysIn(source);\n        var propsIndex = -1;\n        var propsLength = props.length;\n\n        while (++propsIndex < propsLength) {\n          var key = props[propsIndex];\n          var value = object[key];\n\n          if (value === undefined ||\n              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n            object[key] = source[key];\n          }\n        }\n      }\n\n      return object;\n    });\n\n    /**\n     * This method is like `_.defaults` except that it recursively assigns\n     * default properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaults\n     * @example\n     *\n     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });\n     * // => { 'a': { 'b': 2, 'c': 3 } }\n     */\n    var defaultsDeep = baseRest(function(args) {\n      args.push(undefined, customDefaultsMerge);\n      return apply(mergeWith, undefined, args);\n    });\n\n    /**\n     * This method is like `_.find` except that it returns the key of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findKey(users, function(o) { return o.age < 40; });\n     * // => 'barney' (iteration order is not guaranteed)\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findKey(users, { 'age': 1, 'active': true });\n     * // => 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findKey(users, 'active');\n     * // => 'barney'\n     */\n    function findKey(object, predicate) {\n      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);\n    }\n\n    /**\n     * This method is like `_.findKey` except that it iterates over elements of\n     * a collection in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findLastKey(users, function(o) { return o.age < 40; });\n     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastKey(users, { 'age': 36, 'active': true });\n     * // => 'barney'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastKey(users, 'active');\n     * // => 'pebbles'\n     */\n    function findLastKey(object, predicate) {\n      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);\n    }\n\n    /**\n     * Iterates over own and inherited enumerable string keyed properties of an\n     * object and invokes `iteratee` for each property. The iteratee is invoked\n     * with three arguments: (value, key, object). Iteratee functions may exit\n     * iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forInRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forIn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).\n     */\n    function forIn(object, iteratee) {\n      return object == null\n        ? object\n        : baseFor(object, getIteratee(iteratee, 3), keysIn);\n    }\n\n    /**\n     * This method is like `_.forIn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forInRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.\n     */\n    function forInRight(object, iteratee) {\n      return object == null\n        ? object\n        : baseForRight(object, getIteratee(iteratee, 3), keysIn);\n    }\n\n    /**\n     * Iterates over own enumerable string keyed properties of an object and\n     * invokes `iteratee` for each property. The iteratee is invoked with three\n     * arguments: (value, key, object). Iteratee functions may exit iteration\n     * early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwnRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */\n    function forOwn(object, iteratee) {\n      return object && baseForOwn(object, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.forOwn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwnRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.\n     */\n    function forOwnRight(object, iteratee) {\n      return object && baseForOwnRight(object, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * Creates an array of function property names from own enumerable properties\n     * of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functionsIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functions(new Foo);\n     * // => ['a', 'b']\n     */\n    function functions(object) {\n      return object == null ? [] : baseFunctions(object, keys(object));\n    }\n\n    /**\n     * Creates an array of function property names from own and inherited\n     * enumerable properties of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functions\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functionsIn(new Foo);\n     * // => ['a', 'b', 'c']\n     */\n    function functionsIn(object) {\n      return object == null ? [] : baseFunctions(object, keysIn(object));\n    }\n\n    /**\n     * Gets the value at `path` of `object`. If the resolved value is\n     * `undefined`, the `defaultValue` is returned in its place.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.get(object, 'a[0].b.c');\n     * // => 3\n     *\n     * _.get(object, ['a', '0', 'b', 'c']);\n     * // => 3\n     *\n     * _.get(object, 'a.b.c', 'default');\n     * // => 'default'\n     */\n    function get(object, path, defaultValue) {\n      var result = object == null ? undefined : baseGet(object, path);\n      return result === undefined ? defaultValue : result;\n    }\n\n    /**\n     * Checks if `path` is a direct property of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = { 'a': { 'b': 2 } };\n     * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.has(object, 'a');\n     * // => true\n     *\n     * _.has(object, 'a.b');\n     * // => true\n     *\n     * _.has(object, ['a', 'b']);\n     * // => true\n     *\n     * _.has(other, 'a');\n     * // => false\n     */\n    function has(object, path) {\n      return object != null && hasPath(object, path, baseHas);\n    }\n\n    /**\n     * Checks if `path` is a direct or inherited property of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.hasIn(object, 'a');\n     * // => true\n     *\n     * _.hasIn(object, 'a.b');\n     * // => true\n     *\n     * _.hasIn(object, ['a', 'b']);\n     * // => true\n     *\n     * _.hasIn(object, 'b');\n     * // => false\n     */\n    function hasIn(object, path) {\n      return object != null && hasPath(object, path, baseHasIn);\n    }\n\n    /**\n     * Creates an object composed of the inverted keys and values of `object`.\n     * If `object` contains duplicate values, subsequent values overwrite\n     * property assignments of previous values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invert(object);\n     * // => { '1': 'c', '2': 'b' }\n     */\n    var invert = createInverter(function(result, value, key) {\n      if (value != null &&\n          typeof value.toString != 'function') {\n        value = nativeObjectToString.call(value);\n      }\n\n      result[value] = key;\n    }, constant(identity));\n\n    /**\n     * This method is like `_.invert` except that the inverted object is generated\n     * from the results of running each element of `object` thru `iteratee`. The\n     * corresponding inverted value of each inverted key is an array of keys\n     * responsible for generating the inverted value. The iteratee is invoked\n     * with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invertBy(object);\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     *\n     * _.invertBy(object, function(value) {\n     *   return 'group' + value;\n     * });\n     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }\n     */\n    var invertBy = createInverter(function(result, value, key) {\n      if (value != null &&\n          typeof value.toString != 'function') {\n        value = nativeObjectToString.call(value);\n      }\n\n      if (hasOwnProperty.call(result, value)) {\n        result[value].push(key);\n      } else {\n        result[value] = [key];\n      }\n    }, getIteratee);\n\n    /**\n     * Invokes the method at `path` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };\n     *\n     * _.invoke(object, 'a[0].b.c.slice', 1, 3);\n     * // => [2, 3]\n     */\n    var invoke = baseRest(baseInvoke);\n\n    /**\n     * Creates an array of the own enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects. See the\n     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n     * for more details.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keys(new Foo);\n     * // => ['a', 'b'] (iteration order is not guaranteed)\n     *\n     * _.keys('hi');\n     * // => ['0', '1']\n     */\n    function keys(object) {\n      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n    }\n\n    /**\n     * Creates an array of the own and inherited enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keysIn(new Foo);\n     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n     */\n    function keysIn(object) {\n      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n    }\n\n    /**\n     * The opposite of `_.mapValues`; this method creates an object with the\n     * same values as `object` and keys generated by running each own enumerable\n     * string keyed property of `object` thru `iteratee`. The iteratee is invoked\n     * with three arguments: (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapValues\n     * @example\n     *\n     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   return key + value;\n     * });\n     * // => { 'a1': 1, 'b2': 2 }\n     */\n    function mapKeys(object, iteratee) {\n      var result = {};\n      iteratee = getIteratee(iteratee, 3);\n\n      baseForOwn(object, function(value, key, object) {\n        baseAssignValue(result, iteratee(value, key, object), value);\n      });\n      return result;\n    }\n\n    /**\n     * Creates an object with the same keys as `object` and values generated\n     * by running each own enumerable string keyed property of `object` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapKeys\n     * @example\n     *\n     * var users = {\n     *   'fred':    { 'user': 'fred',    'age': 40 },\n     *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n     * };\n     *\n     * _.mapValues(users, function(o) { return o.age; });\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.mapValues(users, 'age');\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     */\n    function mapValues(object, iteratee) {\n      var result = {};\n      iteratee = getIteratee(iteratee, 3);\n\n      baseForOwn(object, function(value, key, object) {\n        baseAssignValue(result, key, iteratee(value, key, object));\n      });\n      return result;\n    }\n\n    /**\n     * This method is like `_.assign` except that it recursively merges own and\n     * inherited enumerable string keyed properties of source objects into the\n     * destination object. Source properties that resolve to `undefined` are\n     * skipped if a destination value exists. Array and plain object properties\n     * are merged recursively. Other objects and value types are overridden by\n     * assignment. Source objects are applied from left to right. Subsequent\n     * sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {\n     *   'a': [{ 'b': 2 }, { 'd': 4 }]\n     * };\n     *\n     * var other = {\n     *   'a': [{ 'c': 3 }, { 'e': 5 }]\n     * };\n     *\n     * _.merge(object, other);\n     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n     */\n    var merge = createAssigner(function(object, source, srcIndex) {\n      baseMerge(object, source, srcIndex);\n    });\n\n    /**\n     * This method is like `_.merge` except that it accepts `customizer` which\n     * is invoked to produce the merged values of the destination and source\n     * properties. If `customizer` returns `undefined`, merging is handled by the\n     * method instead. The `customizer` is invoked with six arguments:\n     * (objValue, srcValue, key, object, source, stack).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} customizer The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (_.isArray(objValue)) {\n     *     return objValue.concat(srcValue);\n     *   }\n     * }\n     *\n     * var object = { 'a': [1], 'b': [2] };\n     * var other = { 'a': [3], 'b': [4] };\n     *\n     * _.mergeWith(object, other, customizer);\n     * // => { 'a': [1, 3], 'b': [2, 4] }\n     */\n    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {\n      baseMerge(object, source, srcIndex, customizer);\n    });\n\n    /**\n     * The opposite of `_.pick`; this method creates an object composed of the\n     * own and inherited enumerable property paths of `object` that are not omitted.\n     *\n     * **Note:** This method is considerably slower than `_.pick`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [paths] The property paths to omit.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omit(object, ['a', 'c']);\n     * // => { 'b': '2' }\n     */\n    var omit = flatRest(function(object, paths) {\n      var result = {};\n      if (object == null) {\n        return result;\n      }\n      var isDeep = false;\n      paths = arrayMap(paths, function(path) {\n        path = castPath(path, object);\n        isDeep || (isDeep = path.length > 1);\n        return path;\n      });\n      copyObject(object, getAllKeysIn(object), result);\n      if (isDeep) {\n        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);\n      }\n      var length = paths.length;\n      while (length--) {\n        baseUnset(result, paths[length]);\n      }\n      return result;\n    });\n\n    /**\n     * The opposite of `_.pickBy`; this method creates an object composed of\n     * the own and inherited enumerable string keyed properties of `object` that\n     * `predicate` doesn't return truthy for. The predicate is invoked with two\n     * arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omitBy(object, _.isNumber);\n     * // => { 'b': '2' }\n     */\n    function omitBy(object, predicate) {\n      return pickBy(object, negate(getIteratee(predicate)));\n    }\n\n    /**\n     * Creates an object composed of the picked `object` properties.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pick(object, ['a', 'c']);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    var pick = flatRest(function(object, paths) {\n      return object == null ? {} : basePick(object, paths);\n    });\n\n    /**\n     * Creates an object composed of the `object` properties `predicate` returns\n     * truthy for. The predicate is invoked with two arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pickBy(object, _.isNumber);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    function pickBy(object, predicate) {\n      if (object == null) {\n        return {};\n      }\n      var props = arrayMap(getAllKeysIn(object), function(prop) {\n        return [prop];\n      });\n      predicate = getIteratee(predicate);\n      return basePickBy(object, props, function(value, path) {\n        return predicate(value, path[0]);\n      });\n    }\n\n    /**\n     * This method is like `_.get` except that if the resolved value is a\n     * function it's invoked with the `this` binding of its parent object and\n     * its result is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to resolve.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n     *\n     * _.result(object, 'a[0].b.c1');\n     * // => 3\n     *\n     * _.result(object, 'a[0].b.c2');\n     * // => 4\n     *\n     * _.result(object, 'a[0].b.c3', 'default');\n     * // => 'default'\n     *\n     * _.result(object, 'a[0].b.c3', _.constant('default'));\n     * // => 'default'\n     */\n    function result(object, path, defaultValue) {\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length;\n\n      // Ensure the loop is entered when path is empty.\n      if (!length) {\n        length = 1;\n        object = undefined;\n      }\n      while (++index < length) {\n        var value = object == null ? undefined : object[toKey(path[index])];\n        if (value === undefined) {\n          index = length;\n          value = defaultValue;\n        }\n        object = isFunction(value) ? value.call(object) : value;\n      }\n      return object;\n    }\n\n    /**\n     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\n     * it's created. Arrays are created for missing index properties while objects\n     * are created for all other missing properties. Use `_.setWith` to customize\n     * `path` creation.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.set(object, 'a[0].b.c', 4);\n     * console.log(object.a[0].b.c);\n     * // => 4\n     *\n     * _.set(object, ['x', '0', 'y', 'z'], 5);\n     * console.log(object.x[0].y.z);\n     * // => 5\n     */\n    function set(object, path, value) {\n      return object == null ? object : baseSet(object, path, value);\n    }\n\n    /**\n     * This method is like `_.set` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.setWith(object, '[0][1]', 'a', Object);\n     * // => { '0': { '1': 'a' } }\n     */\n    function setWith(object, path, value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return object == null ? object : baseSet(object, path, value, customizer);\n    }\n\n    /**\n     * Creates an array of own enumerable string keyed-value pairs for `object`\n     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its\n     * entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entries\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairs(new Foo);\n     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)\n     */\n    var toPairs = createToPairs(keys);\n\n    /**\n     * Creates an array of own and inherited enumerable string keyed-value pairs\n     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map\n     * or set, its entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entriesIn\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairsIn(new Foo);\n     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)\n     */\n    var toPairsIn = createToPairs(keysIn);\n\n    /**\n     * An alternative to `_.reduce`; this method transforms `object` to a new\n     * `accumulator` object which is the result of running each of its own\n     * enumerable string keyed properties thru `iteratee`, with each invocation\n     * potentially mutating the `accumulator` object. If `accumulator` is not\n     * provided, a new object with the same `[[Prototype]]` will be used. The\n     * iteratee is invoked with four arguments: (accumulator, value, key, object).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The custom accumulator value.\n     * @returns {*} Returns the accumulated value.\n     * @example\n     *\n     * _.transform([2, 3, 4], function(result, n) {\n     *   result.push(n *= n);\n     *   return n % 2 == 0;\n     * }, []);\n     * // => [4, 9]\n     *\n     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     */\n    function transform(object, iteratee, accumulator) {\n      var isArr = isArray(object),\n          isArrLike = isArr || isBuffer(object) || isTypedArray(object);\n\n      iteratee = getIteratee(iteratee, 4);\n      if (accumulator == null) {\n        var Ctor = object && object.constructor;\n        if (isArrLike) {\n          accumulator = isArr ? new Ctor : [];\n        }\n        else if (isObject(object)) {\n          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\n        }\n        else {\n          accumulator = {};\n        }\n      }\n      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\n        return iteratee(accumulator, value, index, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * Removes the property at `path` of `object`.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 7 } }] };\n     * _.unset(object, 'a[0].b.c');\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     *\n     * _.unset(object, ['a', '0', 'b', 'c']);\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     */\n    function unset(object, path) {\n      return object == null ? true : baseUnset(object, path);\n    }\n\n    /**\n     * This method is like `_.set` except that accepts `updater` to produce the\n     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`\n     * is invoked with one argument: (value).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.update(object, 'a[0].b.c', function(n) { return n * n; });\n     * console.log(object.a[0].b.c);\n     * // => 9\n     *\n     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });\n     * console.log(object.x[0].y.z);\n     * // => 0\n     */\n    function update(object, path, updater) {\n      return object == null ? object : baseUpdate(object, path, castFunction(updater));\n    }\n\n    /**\n     * This method is like `_.update` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.updateWith(object, '[0][1]', _.constant('a'), Object);\n     * // => { '0': { '1': 'a' } }\n     */\n    function updateWith(object, path, updater, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);\n    }\n\n    /**\n     * Creates an array of the own enumerable string keyed property values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.values(new Foo);\n     * // => [1, 2] (iteration order is not guaranteed)\n     *\n     * _.values('hi');\n     * // => ['h', 'i']\n     */\n    function values(object) {\n      return object == null ? [] : baseValues(object, keys(object));\n    }\n\n    /**\n     * Creates an array of the own and inherited enumerable string keyed property\n     * values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.valuesIn(new Foo);\n     * // => [1, 2, 3] (iteration order is not guaranteed)\n     */\n    function valuesIn(object) {\n      return object == null ? [] : baseValues(object, keysIn(object));\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Clamps `number` within the inclusive `lower` and `upper` bounds.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Number\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     * @example\n     *\n     * _.clamp(-10, -5, 5);\n     * // => -5\n     *\n     * _.clamp(10, -5, 5);\n     * // => 5\n     */\n    function clamp(number, lower, upper) {\n      if (upper === undefined) {\n        upper = lower;\n        lower = undefined;\n      }\n      if (upper !== undefined) {\n        upper = toNumber(upper);\n        upper = upper === upper ? upper : 0;\n      }\n      if (lower !== undefined) {\n        lower = toNumber(lower);\n        lower = lower === lower ? lower : 0;\n      }\n      return baseClamp(toNumber(number), lower, upper);\n    }\n\n    /**\n     * Checks if `n` is between `start` and up to, but not including, `end`. If\n     * `end` is not specified, it's set to `start` with `start` then set to `0`.\n     * If `start` is greater than `end` the params are swapped to support\n     * negative ranges.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.3.0\n     * @category Number\n     * @param {number} number The number to check.\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     * @see _.range, _.rangeRight\n     * @example\n     *\n     * _.inRange(3, 2, 4);\n     * // => true\n     *\n     * _.inRange(4, 8);\n     * // => true\n     *\n     * _.inRange(4, 2);\n     * // => false\n     *\n     * _.inRange(2, 2);\n     * // => false\n     *\n     * _.inRange(1.2, 2);\n     * // => true\n     *\n     * _.inRange(5.2, 4);\n     * // => false\n     *\n     * _.inRange(-3, -2, -6);\n     * // => true\n     */\n    function inRange(number, start, end) {\n      start = toFinite(start);\n      if (end === undefined) {\n        end = start;\n        start = 0;\n      } else {\n        end = toFinite(end);\n      }\n      number = toNumber(number);\n      return baseInRange(number, start, end);\n    }\n\n    /**\n     * Produces a random number between the inclusive `lower` and `upper` bounds.\n     * If only one argument is provided a number between `0` and the given number\n     * is returned. If `floating` is `true`, or either `lower` or `upper` are\n     * floats, a floating-point number is returned instead of an integer.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Number\n     * @param {number} [lower=0] The lower bound.\n     * @param {number} [upper=1] The upper bound.\n     * @param {boolean} [floating] Specify returning a floating-point number.\n     * @returns {number} Returns the random number.\n     * @example\n     *\n     * _.random(0, 5);\n     * // => an integer between 0 and 5\n     *\n     * _.random(5);\n     * // => also an integer between 0 and 5\n     *\n     * _.random(5, true);\n     * // => a floating-point number between 0 and 5\n     *\n     * _.random(1.2, 5.2);\n     * // => a floating-point number between 1.2 and 5.2\n     */\n    function random(lower, upper, floating) {\n      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n        upper = floating = undefined;\n      }\n      if (floating === undefined) {\n        if (typeof upper == 'boolean') {\n          floating = upper;\n          upper = undefined;\n        }\n        else if (typeof lower == 'boolean') {\n          floating = lower;\n          lower = undefined;\n        }\n      }\n      if (lower === undefined && upper === undefined) {\n        lower = 0;\n        upper = 1;\n      }\n      else {\n        lower = toFinite(lower);\n        if (upper === undefined) {\n          upper = lower;\n          lower = 0;\n        } else {\n          upper = toFinite(upper);\n        }\n      }\n      if (lower > upper) {\n        var temp = lower;\n        lower = upper;\n        upper = temp;\n      }\n      if (floating || lower % 1 || upper % 1) {\n        var rand = nativeRandom();\n        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n      }\n      return baseRandom(lower, upper);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the camel cased string.\n     * @example\n     *\n     * _.camelCase('Foo Bar');\n     * // => 'fooBar'\n     *\n     * _.camelCase('--foo-bar--');\n     * // => 'fooBar'\n     *\n     * _.camelCase('__FOO_BAR__');\n     * // => 'fooBar'\n     */\n    var camelCase = createCompounder(function(result, word, index) {\n      word = word.toLowerCase();\n      return result + (index ? capitalize(word) : word);\n    });\n\n    /**\n     * Converts the first character of `string` to upper case and the remaining\n     * to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to capitalize.\n     * @returns {string} Returns the capitalized string.\n     * @example\n     *\n     * _.capitalize('FRED');\n     * // => 'Fred'\n     */\n    function capitalize(string) {\n      return upperFirst(toString(string).toLowerCase());\n    }\n\n    /**\n     * Deburrs `string` by converting\n     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\n     * letters to basic Latin letters and removing\n     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to deburr.\n     * @returns {string} Returns the deburred string.\n     * @example\n     *\n     * _.deburr('déjà vu');\n     * // => 'deja vu'\n     */\n    function deburr(string) {\n      string = toString(string);\n      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');\n    }\n\n    /**\n     * Checks if `string` ends with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=string.length] The position to search up to.\n     * @returns {boolean} Returns `true` if `string` ends with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.endsWith('abc', 'c');\n     * // => true\n     *\n     * _.endsWith('abc', 'b');\n     * // => false\n     *\n     * _.endsWith('abc', 'b', 2);\n     * // => true\n     */\n    function endsWith(string, target, position) {\n      string = toString(string);\n      target = baseToString(target);\n\n      var length = string.length;\n      position = position === undefined\n        ? length\n        : baseClamp(toInteger(position), 0, length);\n\n      var end = position;\n      position -= target.length;\n      return position >= 0 && string.slice(position, end) == target;\n    }\n\n    /**\n     * Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\n     * corresponding HTML entities.\n     *\n     * **Note:** No other characters are escaped. To escape additional\n     * characters use a third-party library like [_he_](https://mths.be/he).\n     *\n     * Though the \">\" character is escaped for symmetry, characters like\n     * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n     * unless they're part of a tag or unquoted attribute value. See\n     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n     * (under \"semi-related fun fact\") for more details.\n     *\n     * When working with HTML you should always\n     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\n     * XSS vectors.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escape('fred, barney, & pebbles');\n     * // => 'fred, barney, &amp; pebbles'\n     */\n    function escape(string) {\n      string = toString(string);\n      return (string && reHasUnescapedHtml.test(string))\n        ? string.replace(reUnescapedHtml, escapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n     * \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escapeRegExp('[lodash](https://lodash.com/)');\n     * // => '\\[lodash\\]\\(https://lodash\\.com/\\)'\n     */\n    function escapeRegExp(string) {\n      string = toString(string);\n      return (string && reHasRegExpChar.test(string))\n        ? string.replace(reRegExpChar, '\\\\$&')\n        : string;\n    }\n\n    /**\n     * Converts `string` to\n     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the kebab cased string.\n     * @example\n     *\n     * _.kebabCase('Foo Bar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('fooBar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('__FOO_BAR__');\n     * // => 'foo-bar'\n     */\n    var kebabCase = createCompounder(function(result, word, index) {\n      return result + (index ? '-' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Converts `string`, as space separated words, to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.lowerCase('--Foo-Bar--');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('fooBar');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('__FOO_BAR__');\n     * // => 'foo bar'\n     */\n    var lowerCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Converts the first character of `string` to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.lowerFirst('Fred');\n     * // => 'fred'\n     *\n     * _.lowerFirst('FRED');\n     * // => 'fRED'\n     */\n    var lowerFirst = createCaseFirst('toLowerCase');\n\n    /**\n     * Pads `string` on the left and right sides if it's shorter than `length`.\n     * Padding characters are truncated if they can't be evenly divided by `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.pad('abc', 8);\n     * // => '  abc   '\n     *\n     * _.pad('abc', 8, '_-');\n     * // => '_-abc_-_'\n     *\n     * _.pad('abc', 3);\n     * // => 'abc'\n     */\n    function pad(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      if (!length || strLength >= length) {\n        return string;\n      }\n      var mid = (length - strLength) / 2;\n      return (\n        createPadding(nativeFloor(mid), chars) +\n        string +\n        createPadding(nativeCeil(mid), chars)\n      );\n    }\n\n    /**\n     * Pads `string` on the right side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padEnd('abc', 6);\n     * // => 'abc   '\n     *\n     * _.padEnd('abc', 6, '_-');\n     * // => 'abc_-_'\n     *\n     * _.padEnd('abc', 3);\n     * // => 'abc'\n     */\n    function padEnd(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      return (length && strLength < length)\n        ? (string + createPadding(length - strLength, chars))\n        : string;\n    }\n\n    /**\n     * Pads `string` on the left side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padStart('abc', 6);\n     * // => '   abc'\n     *\n     * _.padStart('abc', 6, '_-');\n     * // => '_-_abc'\n     *\n     * _.padStart('abc', 3);\n     * // => 'abc'\n     */\n    function padStart(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      return (length && strLength < length)\n        ? (createPadding(length - strLength, chars) + string)\n        : string;\n    }\n\n    /**\n     * Converts `string` to an integer of the specified radix. If `radix` is\n     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a\n     * hexadecimal, in which case a `radix` of `16` is used.\n     *\n     * **Note:** This method aligns with the\n     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category String\n     * @param {string} string The string to convert.\n     * @param {number} [radix=10] The radix to interpret `value` by.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.parseInt('08');\n     * // => 8\n     *\n     * _.map(['6', '08', '10'], _.parseInt);\n     * // => [6, 8, 10]\n     */\n    function parseInt(string, radix, guard) {\n      if (guard || radix == null) {\n        radix = 0;\n      } else if (radix) {\n        radix = +radix;\n      }\n      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);\n    }\n\n    /**\n     * Repeats the given string `n` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to repeat.\n     * @param {number} [n=1] The number of times to repeat the string.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the repeated string.\n     * @example\n     *\n     * _.repeat('*', 3);\n     * // => '***'\n     *\n     * _.repeat('abc', 2);\n     * // => 'abcabc'\n     *\n     * _.repeat('abc', 0);\n     * // => ''\n     */\n    function repeat(string, n, guard) {\n      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {\n        n = 1;\n      } else {\n        n = toInteger(n);\n      }\n      return baseRepeat(toString(string), n);\n    }\n\n    /**\n     * Replaces matches for `pattern` in `string` with `replacement`.\n     *\n     * **Note:** This method is based on\n     * [`String#replace`](https://mdn.io/String/replace).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to modify.\n     * @param {RegExp|string} pattern The pattern to replace.\n     * @param {Function|string} replacement The match replacement.\n     * @returns {string} Returns the modified string.\n     * @example\n     *\n     * _.replace('Hi Fred', 'Fred', 'Barney');\n     * // => 'Hi Barney'\n     */\n    function replace() {\n      var args = arguments,\n          string = toString(args[0]);\n\n      return args.length < 3 ? string : string.replace(args[1], args[2]);\n    }\n\n    /**\n     * Converts `string` to\n     * [snake case](https://en.wikipedia.org/wiki/Snake_case).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the snake cased string.\n     * @example\n     *\n     * _.snakeCase('Foo Bar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('fooBar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('--FOO-BAR--');\n     * // => 'foo_bar'\n     */\n    var snakeCase = createCompounder(function(result, word, index) {\n      return result + (index ? '_' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Splits `string` by `separator`.\n     *\n     * **Note:** This method is based on\n     * [`String#split`](https://mdn.io/String/split).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to split.\n     * @param {RegExp|string} separator The separator pattern to split by.\n     * @param {number} [limit] The length to truncate results to.\n     * @returns {Array} Returns the string segments.\n     * @example\n     *\n     * _.split('a-b-c', '-', 2);\n     * // => ['a', 'b']\n     */\n    function split(string, separator, limit) {\n      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {\n        separator = limit = undefined;\n      }\n      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;\n      if (!limit) {\n        return [];\n      }\n      string = toString(string);\n      if (string && (\n            typeof separator == 'string' ||\n            (separator != null && !isRegExp(separator))\n          )) {\n        separator = baseToString(separator);\n        if (!separator && hasUnicode(string)) {\n          return castSlice(stringToArray(string), 0, limit);\n        }\n      }\n      return string.split(separator, limit);\n    }\n\n    /**\n     * Converts `string` to\n     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.1.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the start cased string.\n     * @example\n     *\n     * _.startCase('--foo-bar--');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('fooBar');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('__FOO_BAR__');\n     * // => 'FOO BAR'\n     */\n    var startCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + upperFirst(word);\n    });\n\n    /**\n     * Checks if `string` starts with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=0] The position to search from.\n     * @returns {boolean} Returns `true` if `string` starts with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.startsWith('abc', 'a');\n     * // => true\n     *\n     * _.startsWith('abc', 'b');\n     * // => false\n     *\n     * _.startsWith('abc', 'b', 1);\n     * // => true\n     */\n    function startsWith(string, target, position) {\n      string = toString(string);\n      position = position == null\n        ? 0\n        : baseClamp(toInteger(position), 0, string.length);\n\n      target = baseToString(target);\n      return string.slice(position, position + target.length) == target;\n    }\n\n    /**\n     * Creates a compiled template function that can interpolate data properties\n     * in \"interpolate\" delimiters, HTML-escape interpolated data properties in\n     * \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data\n     * properties may be accessed as free variables in the template. If a setting\n     * object is given, it takes precedence over `_.templateSettings` values.\n     *\n     * **Note:** In the development build `_.template` utilizes\n     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\n     * for easier debugging.\n     *\n     * For more information on precompiling templates see\n     * [lodash's custom builds documentation](https://lodash.com/custom-builds).\n     *\n     * For more information on Chrome extension sandboxes see\n     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The template string.\n     * @param {Object} [options={}] The options object.\n     * @param {RegExp} [options.escape=_.templateSettings.escape]\n     *  The HTML \"escape\" delimiter.\n     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]\n     *  The \"evaluate\" delimiter.\n     * @param {Object} [options.imports=_.templateSettings.imports]\n     *  An object to import into the template as free variables.\n     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]\n     *  The \"interpolate\" delimiter.\n     * @param {string} [options.sourceURL='lodash.templateSources[n]']\n     *  The sourceURL of the compiled template.\n     * @param {string} [options.variable='obj']\n     *  The data object variable name.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the compiled template function.\n     * @example\n     *\n     * // Use the \"interpolate\" delimiter to create a compiled template.\n     * var compiled = _.template('hello <%= user %>!');\n     * compiled({ 'user': 'fred' });\n     * // => 'hello fred!'\n     *\n     * // Use the HTML \"escape\" delimiter to escape data property values.\n     * var compiled = _.template('<b><%- value %></b>');\n     * compiled({ 'value': '<script>' });\n     * // => '<b>&lt;script&gt;</b>'\n     *\n     * // Use the \"evaluate\" delimiter to execute JavaScript and generate HTML.\n     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the internal `print` function in \"evaluate\" delimiters.\n     * var compiled = _.template('<% print(\"hello \" + user); %>!');\n     * compiled({ 'user': 'barney' });\n     * // => 'hello barney!'\n     *\n     * // Use the ES template literal delimiter as an \"interpolate\" delimiter.\n     * // Disable support by replacing the \"interpolate\" delimiter.\n     * var compiled = _.template('hello ${ user }!');\n     * compiled({ 'user': 'pebbles' });\n     * // => 'hello pebbles!'\n     *\n     * // Use backslashes to treat delimiters as plain text.\n     * var compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\n     * compiled({ 'value': 'ignored' });\n     * // => '<%- value %>'\n     *\n     * // Use the `imports` option to import `jQuery` as `jq`.\n     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\n     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the `sourceURL` option to specify a custom sourceURL for the template.\n     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\n     * compiled(data);\n     * // => Find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector.\n     *\n     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.\n     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\n     * compiled.source;\n     * // => function(data) {\n     * //   var __t, __p = '';\n     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n     * //   return __p;\n     * // }\n     *\n     * // Use custom template delimiters.\n     * _.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\n     * var compiled = _.template('hello {{ user }}!');\n     * compiled({ 'user': 'mustache' });\n     * // => 'hello mustache!'\n     *\n     * // Use the `source` property to inline compiled templates for meaningful\n     * // line numbers in error messages and stack traces.\n     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\\\n     *   var JST = {\\\n     *     \"main\": ' + _.template(mainText).source + '\\\n     *   };\\\n     * ');\n     */\n    function template(string, options, guard) {\n      // Based on John Resig's `tmpl` implementation\n      // (http://ejohn.org/blog/javascript-micro-templating/)\n      // and Laura Doktorova's doT.js (https://github.com/olado/doT).\n      var settings = lodash.templateSettings;\n\n      if (guard && isIterateeCall(string, options, guard)) {\n        options = undefined;\n      }\n      string = toString(string);\n      options = assignInWith({}, options, settings, customDefaultsAssignIn);\n\n      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),\n          importsKeys = keys(imports),\n          importsValues = baseValues(imports, importsKeys);\n\n      var isEscaping,\n          isEvaluating,\n          index = 0,\n          interpolate = options.interpolate || reNoMatch,\n          source = \"__p += '\";\n\n      // Compile the regexp to match each delimiter.\n      var reDelimiters = RegExp(\n        (options.escape || reNoMatch).source + '|' +\n        interpolate.source + '|' +\n        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +\n        (options.evaluate || reNoMatch).source + '|$'\n      , 'g');\n\n      // Use a sourceURL for easier debugging.\n      var sourceURL = '//# sourceURL=' +\n        ('sourceURL' in options\n          ? options.sourceURL\n          : ('lodash.templateSources[' + (++templateCounter) + ']')\n        ) + '\\n';\n\n      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n        interpolateValue || (interpolateValue = esTemplateValue);\n\n        // Escape characters that can't be included in string literals.\n        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);\n\n        // Replace delimiters with snippets.\n        if (escapeValue) {\n          isEscaping = true;\n          source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\n        }\n        if (evaluateValue) {\n          isEvaluating = true;\n          source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\n        }\n        if (interpolateValue) {\n          source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\n        }\n        index = offset + match.length;\n\n        // The JS engine embedded in Adobe products needs `match` returned in\n        // order to produce the correct `offset` value.\n        return match;\n      });\n\n      source += \"';\\n\";\n\n      // If `variable` is not specified wrap a with-statement around the generated\n      // code to add the data object to the top of the scope chain.\n      var variable = options.variable;\n      if (!variable) {\n        source = 'with (obj) {\\n' + source + '\\n}\\n';\n      }\n      // Cleanup code by stripping empty strings.\n      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)\n        .replace(reEmptyStringMiddle, '$1')\n        .replace(reEmptyStringTrailing, '$1;');\n\n      // Frame code as the function body.\n      source = 'function(' + (variable || 'obj') + ') {\\n' +\n        (variable\n          ? ''\n          : 'obj || (obj = {});\\n'\n        ) +\n        \"var __t, __p = ''\" +\n        (isEscaping\n           ? ', __e = _.escape'\n           : ''\n        ) +\n        (isEvaluating\n          ? ', __j = Array.prototype.join;\\n' +\n            \"function print() { __p += __j.call(arguments, '') }\\n\"\n          : ';\\n'\n        ) +\n        source +\n        'return __p\\n}';\n\n      var result = attempt(function() {\n        return Function(importsKeys, sourceURL + 'return ' + source)\n          .apply(undefined, importsValues);\n      });\n\n      // Provide the compiled function's source by its `toString` method or\n      // the `source` property as a convenience for inlining compiled templates.\n      result.source = source;\n      if (isError(result)) {\n        throw result;\n      }\n      return result;\n    }\n\n    /**\n     * Converts `string`, as a whole, to lower case just like\n     * [String#toLowerCase](https://mdn.io/toLowerCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.toLower('--Foo-Bar--');\n     * // => '--foo-bar--'\n     *\n     * _.toLower('fooBar');\n     * // => 'foobar'\n     *\n     * _.toLower('__FOO_BAR__');\n     * // => '__foo_bar__'\n     */\n    function toLower(value) {\n      return toString(value).toLowerCase();\n    }\n\n    /**\n     * Converts `string`, as a whole, to upper case just like\n     * [String#toUpperCase](https://mdn.io/toUpperCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.toUpper('--foo-bar--');\n     * // => '--FOO-BAR--'\n     *\n     * _.toUpper('fooBar');\n     * // => 'FOOBAR'\n     *\n     * _.toUpper('__foo_bar__');\n     * // => '__FOO_BAR__'\n     */\n    function toUpper(value) {\n      return toString(value).toUpperCase();\n    }\n\n    /**\n     * Removes leading and trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trim('  abc  ');\n     * // => 'abc'\n     *\n     * _.trim('-_-abc-_-', '_-');\n     * // => 'abc'\n     *\n     * _.map(['  foo  ', '  bar  '], _.trim);\n     * // => ['foo', 'bar']\n     */\n    function trim(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrim, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          chrSymbols = stringToArray(chars),\n          start = charsStartIndex(strSymbols, chrSymbols),\n          end = charsEndIndex(strSymbols, chrSymbols) + 1;\n\n      return castSlice(strSymbols, start, end).join('');\n    }\n\n    /**\n     * Removes trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimEnd('  abc  ');\n     * // => '  abc'\n     *\n     * _.trimEnd('-_-abc-_-', '_-');\n     * // => '-_-abc'\n     */\n    function trimEnd(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrimEnd, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;\n\n      return castSlice(strSymbols, 0, end).join('');\n    }\n\n    /**\n     * Removes leading whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimStart('  abc  ');\n     * // => 'abc  '\n     *\n     * _.trimStart('-_-abc-_-', '_-');\n     * // => 'abc-_-'\n     */\n    function trimStart(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrimStart, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          start = charsStartIndex(strSymbols, stringToArray(chars));\n\n      return castSlice(strSymbols, start).join('');\n    }\n\n    /**\n     * Truncates `string` if it's longer than the given maximum string length.\n     * The last characters of the truncated string are replaced with the omission\n     * string which defaults to \"...\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to truncate.\n     * @param {Object} [options={}] The options object.\n     * @param {number} [options.length=30] The maximum string length.\n     * @param {string} [options.omission='...'] The string to indicate text is omitted.\n     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.\n     * @returns {string} Returns the truncated string.\n     * @example\n     *\n     * _.truncate('hi-diddly-ho there, neighborino');\n     * // => 'hi-diddly-ho there, neighbo...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': ' '\n     * });\n     * // => 'hi-diddly-ho there,...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': /,? +/\n     * });\n     * // => 'hi-diddly-ho there...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'omission': ' [...]'\n     * });\n     * // => 'hi-diddly-ho there, neig [...]'\n     */\n    function truncate(string, options) {\n      var length = DEFAULT_TRUNC_LENGTH,\n          omission = DEFAULT_TRUNC_OMISSION;\n\n      if (isObject(options)) {\n        var separator = 'separator' in options ? options.separator : separator;\n        length = 'length' in options ? toInteger(options.length) : length;\n        omission = 'omission' in options ? baseToString(options.omission) : omission;\n      }\n      string = toString(string);\n\n      var strLength = string.length;\n      if (hasUnicode(string)) {\n        var strSymbols = stringToArray(string);\n        strLength = strSymbols.length;\n      }\n      if (length >= strLength) {\n        return string;\n      }\n      var end = length - stringSize(omission);\n      if (end < 1) {\n        return omission;\n      }\n      var result = strSymbols\n        ? castSlice(strSymbols, 0, end).join('')\n        : string.slice(0, end);\n\n      if (separator === undefined) {\n        return result + omission;\n      }\n      if (strSymbols) {\n        end += (result.length - end);\n      }\n      if (isRegExp(separator)) {\n        if (string.slice(end).search(separator)) {\n          var match,\n              substring = result;\n\n          if (!separator.global) {\n            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');\n          }\n          separator.lastIndex = 0;\n          while ((match = separator.exec(substring))) {\n            var newEnd = match.index;\n          }\n          result = result.slice(0, newEnd === undefined ? end : newEnd);\n        }\n      } else if (string.indexOf(baseToString(separator), end) != end) {\n        var index = result.lastIndexOf(separator);\n        if (index > -1) {\n          result = result.slice(0, index);\n        }\n      }\n      return result + omission;\n    }\n\n    /**\n     * The inverse of `_.escape`; this method converts the HTML entities\n     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to\n     * their corresponding characters.\n     *\n     * **Note:** No other HTML entities are unescaped. To unescape additional\n     * HTML entities use a third-party library like [_he_](https://mths.be/he).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.6.0\n     * @category String\n     * @param {string} [string=''] The string to unescape.\n     * @returns {string} Returns the unescaped string.\n     * @example\n     *\n     * _.unescape('fred, barney, &amp; pebbles');\n     * // => 'fred, barney, & pebbles'\n     */\n    function unescape(string) {\n      string = toString(string);\n      return (string && reHasEscapedHtml.test(string))\n        ? string.replace(reEscapedHtml, unescapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Converts `string`, as space separated words, to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.upperCase('--foo-bar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('fooBar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('__foo_bar__');\n     * // => 'FOO BAR'\n     */\n    var upperCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + word.toUpperCase();\n    });\n\n    /**\n     * Converts the first character of `string` to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.upperFirst('fred');\n     * // => 'Fred'\n     *\n     * _.upperFirst('FRED');\n     * // => 'FRED'\n     */\n    var upperFirst = createCaseFirst('toUpperCase');\n\n    /**\n     * Splits `string` into an array of its words.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {RegExp|string} [pattern] The pattern to match words.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the words of `string`.\n     * @example\n     *\n     * _.words('fred, barney, & pebbles');\n     * // => ['fred', 'barney', 'pebbles']\n     *\n     * _.words('fred, barney, & pebbles', /[^, ]+/g);\n     * // => ['fred', 'barney', '&', 'pebbles']\n     */\n    function words(string, pattern, guard) {\n      string = toString(string);\n      pattern = guard ? undefined : pattern;\n\n      if (pattern === undefined) {\n        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n      }\n      return string.match(pattern) || [];\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Attempts to invoke `func`, returning either the result or the caught error\n     * object. Any additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Function} func The function to attempt.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {*} Returns the `func` result or error object.\n     * @example\n     *\n     * // Avoid throwing errors for invalid selectors.\n     * var elements = _.attempt(function(selector) {\n     *   return document.querySelectorAll(selector);\n     * }, '>_>');\n     *\n     * if (_.isError(elements)) {\n     *   elements = [];\n     * }\n     */\n    var attempt = baseRest(function(func, args) {\n      try {\n        return apply(func, undefined, args);\n      } catch (e) {\n        return isError(e) ? e : new Error(e);\n      }\n    });\n\n    /**\n     * Binds methods of an object to the object itself, overwriting the existing\n     * method.\n     *\n     * **Note:** This method doesn't set the \"length\" property of bound functions.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Object} object The object to bind and assign the bound methods to.\n     * @param {...(string|string[])} methodNames The object method names to bind.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var view = {\n     *   'label': 'docs',\n     *   'click': function() {\n     *     console.log('clicked ' + this.label);\n     *   }\n     * };\n     *\n     * _.bindAll(view, ['click']);\n     * jQuery(element).on('click', view.click);\n     * // => Logs 'clicked docs' when clicked.\n     */\n    var bindAll = flatRest(function(object, methodNames) {\n      arrayEach(methodNames, function(key) {\n        key = toKey(key);\n        baseAssignValue(object, key, bind(object[key], object));\n      });\n      return object;\n    });\n\n    /**\n     * Creates a function that iterates over `pairs` and invokes the corresponding\n     * function of the first predicate to return truthy. The predicate-function\n     * pairs are invoked with the `this` binding and arguments of the created\n     * function.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Array} pairs The predicate-function pairs.\n     * @returns {Function} Returns the new composite function.\n     * @example\n     *\n     * var func = _.cond([\n     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],\n     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],\n     *   [_.stubTrue,                      _.constant('no match')]\n     * ]);\n     *\n     * func({ 'a': 1, 'b': 2 });\n     * // => 'matches A'\n     *\n     * func({ 'a': 0, 'b': 1 });\n     * // => 'matches B'\n     *\n     * func({ 'a': '1', 'b': '2' });\n     * // => 'no match'\n     */\n    function cond(pairs) {\n      var length = pairs == null ? 0 : pairs.length,\n          toIteratee = getIteratee();\n\n      pairs = !length ? [] : arrayMap(pairs, function(pair) {\n        if (typeof pair[1] != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        return [toIteratee(pair[0]), pair[1]];\n      });\n\n      return baseRest(function(args) {\n        var index = -1;\n        while (++index < length) {\n          var pair = pairs[index];\n          if (apply(pair[0], this, args)) {\n            return apply(pair[1], this, args);\n          }\n        }\n      });\n    }\n\n    /**\n     * Creates a function that invokes the predicate properties of `source` with\n     * the corresponding property values of a given object, returning `true` if\n     * all predicates return truthy, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.conformsTo` with\n     * `source` partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 2, 'b': 1 },\n     *   { 'a': 1, 'b': 2 }\n     * ];\n     *\n     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));\n     * // => [{ 'a': 1, 'b': 2 }]\n     */\n    function conforms(source) {\n      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that returns `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {*} value The value to return from the new function.\n     * @returns {Function} Returns the new constant function.\n     * @example\n     *\n     * var objects = _.times(2, _.constant({ 'a': 1 }));\n     *\n     * console.log(objects);\n     * // => [{ 'a': 1 }, { 'a': 1 }]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => true\n     */\n    function constant(value) {\n      return function() {\n        return value;\n      };\n    }\n\n    /**\n     * Checks `value` to determine whether a default value should be returned in\n     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,\n     * or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Util\n     * @param {*} value The value to check.\n     * @param {*} defaultValue The default value.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * _.defaultTo(1, 10);\n     * // => 1\n     *\n     * _.defaultTo(undefined, 10);\n     * // => 10\n     */\n    function defaultTo(value, defaultValue) {\n      return (value == null || value !== value) ? defaultValue : value;\n    }\n\n    /**\n     * Creates a function that returns the result of invoking the given functions\n     * with the `this` binding of the created function, where each successive\n     * invocation is supplied the return value of the previous.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flowRight\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flow([_.add, square]);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flow = createFlow();\n\n    /**\n     * This method is like `_.flow` except that it creates a function that\n     * invokes the given functions from right to left.\n     *\n     * @static\n     * @since 3.0.0\n     * @memberOf _\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flow\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flowRight([square, _.add]);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flowRight = createFlow(true);\n\n    /**\n     * This method returns the first argument it receives.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {*} value Any value.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     *\n     * console.log(_.identity(object) === object);\n     * // => true\n     */\n    function identity(value) {\n      return value;\n    }\n\n    /**\n     * Creates a function that invokes `func` with the arguments of the created\n     * function. If `func` is a property name, the created function returns the\n     * property value for a given element. If `func` is an array or object, the\n     * created function returns `true` for elements that contain the equivalent\n     * source properties, otherwise it returns `false`.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Util\n     * @param {*} [func=_.identity] The value to convert to a callback.\n     * @returns {Function} Returns the callback.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));\n     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, _.iteratee(['user', 'fred']));\n     * // => [{ 'user': 'fred', 'age': 40 }]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, _.iteratee('user'));\n     * // => ['barney', 'fred']\n     *\n     * // Create custom iteratee shorthands.\n     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {\n     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {\n     *     return func.test(string);\n     *   };\n     * });\n     *\n     * _.filter(['abc', 'def'], /ef/);\n     * // => ['def']\n     */\n    function iteratee(func) {\n      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that performs a partial deep comparison between a given\n     * object and `source`, returning `true` if the given object has equivalent\n     * property values, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.isMatch` with `source`\n     * partially applied.\n     *\n     * Partial comparisons will match empty array and empty object `source`\n     * values against any array or object value, respectively. See `_.isEqual`\n     * for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));\n     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]\n     */\n    function matches(source) {\n      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that performs a partial deep comparison between the\n     * value at `path` of a given object to `srcValue`, returning `true` if the\n     * object value is equivalent, else `false`.\n     *\n     * **Note:** Partial comparisons will match empty array and empty object\n     * `srcValue` values against any array or object value, respectively. See\n     * `_.isEqual` for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.find(objects, _.matchesProperty('a', 4));\n     * // => { 'a': 4, 'b': 5, 'c': 6 }\n     */\n    function matchesProperty(path, srcValue) {\n      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that invokes the method at `path` of a given object.\n     * Any additional arguments are provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': _.constant(2) } },\n     *   { 'a': { 'b': _.constant(1) } }\n     * ];\n     *\n     * _.map(objects, _.method('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(objects, _.method(['a', 'b']));\n     * // => [2, 1]\n     */\n    var method = baseRest(function(path, args) {\n      return function(object) {\n        return baseInvoke(object, path, args);\n      };\n    });\n\n    /**\n     * The opposite of `_.method`; this method creates a function that invokes\n     * the method at a given path of `object`. Any additional arguments are\n     * provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var array = _.times(3, _.constant),\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.methodOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));\n     * // => [2, 0]\n     */\n    var methodOf = baseRest(function(object, args) {\n      return function(path) {\n        return baseInvoke(object, path, args);\n      };\n    });\n\n    /**\n     * Adds all own enumerable string keyed function properties of a source\n     * object to the destination object. If `object` is a function, then methods\n     * are added to its prototype as well.\n     *\n     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to\n     * avoid conflicts caused by modifying the original.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Function|Object} [object=lodash] The destination object.\n     * @param {Object} source The object of functions to add.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.\n     * @returns {Function|Object} Returns `object`.\n     * @example\n     *\n     * function vowels(string) {\n     *   return _.filter(string, function(v) {\n     *     return /[aeiou]/i.test(v);\n     *   });\n     * }\n     *\n     * _.mixin({ 'vowels': vowels });\n     * _.vowels('fred');\n     * // => ['e']\n     *\n     * _('fred').vowels().value();\n     * // => ['e']\n     *\n     * _.mixin({ 'vowels': vowels }, { 'chain': false });\n     * _('fred').vowels();\n     * // => ['e']\n     */\n    function mixin(object, source, options) {\n      var props = keys(source),\n          methodNames = baseFunctions(source, props);\n\n      if (options == null &&\n          !(isObject(source) && (methodNames.length || !props.length))) {\n        options = source;\n        source = object;\n        object = this;\n        methodNames = baseFunctions(source, keys(source));\n      }\n      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,\n          isFunc = isFunction(object);\n\n      arrayEach(methodNames, function(methodName) {\n        var func = source[methodName];\n        object[methodName] = func;\n        if (isFunc) {\n          object.prototype[methodName] = function() {\n            var chainAll = this.__chain__;\n            if (chain || chainAll) {\n              var result = object(this.__wrapped__),\n                  actions = result.__actions__ = copyArray(this.__actions__);\n\n              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });\n              result.__chain__ = chainAll;\n              return result;\n            }\n            return func.apply(object, arrayPush([this.value()], arguments));\n          };\n        }\n      });\n\n      return object;\n    }\n\n    /**\n     * Reverts the `_` variable to its previous value and returns a reference to\n     * the `lodash` function.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @returns {Function} Returns the `lodash` function.\n     * @example\n     *\n     * var lodash = _.noConflict();\n     */\n    function noConflict() {\n      if (root._ === this) {\n        root._ = oldDash;\n      }\n      return this;\n    }\n\n    /**\n     * This method returns `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Util\n     * @example\n     *\n     * _.times(2, _.noop);\n     * // => [undefined, undefined]\n     */\n    function noop() {\n      // No operation performed.\n    }\n\n    /**\n     * Creates a function that gets the argument at index `n`. If `n` is negative,\n     * the nth argument from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [n=0] The index of the argument to return.\n     * @returns {Function} Returns the new pass-thru function.\n     * @example\n     *\n     * var func = _.nthArg(1);\n     * func('a', 'b', 'c', 'd');\n     * // => 'b'\n     *\n     * var func = _.nthArg(-2);\n     * func('a', 'b', 'c', 'd');\n     * // => 'c'\n     */\n    function nthArg(n) {\n      n = toInteger(n);\n      return baseRest(function(args) {\n        return baseNth(args, n);\n      });\n    }\n\n    /**\n     * Creates a function that invokes `iteratees` with the arguments it receives\n     * and returns their results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to invoke.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.over([Math.max, Math.min]);\n     *\n     * func(1, 2, 3, 4);\n     * // => [4, 1]\n     */\n    var over = createOver(arrayMap);\n\n    /**\n     * Creates a function that checks if **all** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overEvery([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => false\n     *\n     * func(NaN);\n     * // => false\n     */\n    var overEvery = createOver(arrayEvery);\n\n    /**\n     * Creates a function that checks if **any** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overSome([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => true\n     *\n     * func(NaN);\n     * // => false\n     */\n    var overSome = createOver(arraySome);\n\n    /**\n     * Creates a function that returns the value at `path` of a given object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': 2 } },\n     *   { 'a': { 'b': 1 } }\n     * ];\n     *\n     * _.map(objects, _.property('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n     * // => [1, 2]\n     */\n    function property(path) {\n      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n    }\n\n    /**\n     * The opposite of `_.property`; this method creates a function that returns\n     * the value at a given path of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var array = [0, 1, 2],\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));\n     * // => [2, 0]\n     */\n    function propertyOf(object) {\n      return function(path) {\n        return object == null ? undefined : baseGet(object, path);\n      };\n    }\n\n    /**\n     * Creates an array of numbers (positive and/or negative) progressing from\n     * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n     * `start` is specified without an `end` or `step`. If `end` is not specified,\n     * it's set to `start` with `start` then set to `0`.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.rangeRight\n     * @example\n     *\n     * _.range(4);\n     * // => [0, 1, 2, 3]\n     *\n     * _.range(-4);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 5);\n     * // => [1, 2, 3, 4]\n     *\n     * _.range(0, 20, 5);\n     * // => [0, 5, 10, 15]\n     *\n     * _.range(0, -4, -1);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.range(0);\n     * // => []\n     */\n    var range = createRange();\n\n    /**\n     * This method is like `_.range` except that it populates values in\n     * descending order.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.range\n     * @example\n     *\n     * _.rangeRight(4);\n     * // => [3, 2, 1, 0]\n     *\n     * _.rangeRight(-4);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 5);\n     * // => [4, 3, 2, 1]\n     *\n     * _.rangeRight(0, 20, 5);\n     * // => [15, 10, 5, 0]\n     *\n     * _.rangeRight(0, -4, -1);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.rangeRight(0);\n     * // => []\n     */\n    var rangeRight = createRange(true);\n\n    /**\n     * This method returns a new empty array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Array} Returns the new empty array.\n     * @example\n     *\n     * var arrays = _.times(2, _.stubArray);\n     *\n     * console.log(arrays);\n     * // => [[], []]\n     *\n     * console.log(arrays[0] === arrays[1]);\n     * // => false\n     */\n    function stubArray() {\n      return [];\n    }\n\n    /**\n     * This method returns `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `false`.\n     * @example\n     *\n     * _.times(2, _.stubFalse);\n     * // => [false, false]\n     */\n    function stubFalse() {\n      return false;\n    }\n\n    /**\n     * This method returns a new empty object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Object} Returns the new empty object.\n     * @example\n     *\n     * var objects = _.times(2, _.stubObject);\n     *\n     * console.log(objects);\n     * // => [{}, {}]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => false\n     */\n    function stubObject() {\n      return {};\n    }\n\n    /**\n     * This method returns an empty string.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {string} Returns the empty string.\n     * @example\n     *\n     * _.times(2, _.stubString);\n     * // => ['', '']\n     */\n    function stubString() {\n      return '';\n    }\n\n    /**\n     * This method returns `true`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `true`.\n     * @example\n     *\n     * _.times(2, _.stubTrue);\n     * // => [true, true]\n     */\n    function stubTrue() {\n      return true;\n    }\n\n    /**\n     * Invokes the iteratee `n` times, returning an array of the results of\n     * each invocation. The iteratee is invoked with one argument; (index).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} n The number of times to invoke `iteratee`.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.times(3, String);\n     * // => ['0', '1', '2']\n     *\n     *  _.times(4, _.constant(0));\n     * // => [0, 0, 0, 0]\n     */\n    function times(n, iteratee) {\n      n = toInteger(n);\n      if (n < 1 || n > MAX_SAFE_INTEGER) {\n        return [];\n      }\n      var index = MAX_ARRAY_LENGTH,\n          length = nativeMin(n, MAX_ARRAY_LENGTH);\n\n      iteratee = getIteratee(iteratee);\n      n -= MAX_ARRAY_LENGTH;\n\n      var result = baseTimes(length, iteratee);\n      while (++index < n) {\n        iteratee(index);\n      }\n      return result;\n    }\n\n    /**\n     * Converts `value` to a property path array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the new property path array.\n     * @example\n     *\n     * _.toPath('a.b.c');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toPath('a[0].b.c');\n     * // => ['a', '0', 'b', 'c']\n     */\n    function toPath(value) {\n      if (isArray(value)) {\n        return arrayMap(value, toKey);\n      }\n      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));\n    }\n\n    /**\n     * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {string} [prefix=''] The value to prefix the ID with.\n     * @returns {string} Returns the unique ID.\n     * @example\n     *\n     * _.uniqueId('contact_');\n     * // => 'contact_104'\n     *\n     * _.uniqueId();\n     * // => '105'\n     */\n    function uniqueId(prefix) {\n      var id = ++idCounter;\n      return toString(prefix) + id;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Adds two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {number} augend The first number in an addition.\n     * @param {number} addend The second number in an addition.\n     * @returns {number} Returns the total.\n     * @example\n     *\n     * _.add(6, 4);\n     * // => 10\n     */\n    var add = createMathOperation(function(augend, addend) {\n      return augend + addend;\n    }, 0);\n\n    /**\n     * Computes `number` rounded up to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round up.\n     * @param {number} [precision=0] The precision to round up to.\n     * @returns {number} Returns the rounded up number.\n     * @example\n     *\n     * _.ceil(4.006);\n     * // => 5\n     *\n     * _.ceil(6.004, 2);\n     * // => 6.01\n     *\n     * _.ceil(6040, -2);\n     * // => 6100\n     */\n    var ceil = createRound('ceil');\n\n    /**\n     * Divide two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} dividend The first number in a division.\n     * @param {number} divisor The second number in a division.\n     * @returns {number} Returns the quotient.\n     * @example\n     *\n     * _.divide(6, 4);\n     * // => 1.5\n     */\n    var divide = createMathOperation(function(dividend, divisor) {\n      return dividend / divisor;\n    }, 1);\n\n    /**\n     * Computes `number` rounded down to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round down.\n     * @param {number} [precision=0] The precision to round down to.\n     * @returns {number} Returns the rounded down number.\n     * @example\n     *\n     * _.floor(4.006);\n     * // => 4\n     *\n     * _.floor(0.046, 2);\n     * // => 0.04\n     *\n     * _.floor(4060, -2);\n     * // => 4000\n     */\n    var floor = createRound('floor');\n\n    /**\n     * Computes the maximum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * _.max([4, 2, 8, 6]);\n     * // => 8\n     *\n     * _.max([]);\n     * // => undefined\n     */\n    function max(array) {\n      return (array && array.length)\n        ? baseExtremum(array, identity, baseGt)\n        : undefined;\n    }\n\n    /**\n     * This method is like `_.max` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.maxBy(objects, function(o) { return o.n; });\n     * // => { 'n': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.maxBy(objects, 'n');\n     * // => { 'n': 2 }\n     */\n    function maxBy(array, iteratee) {\n      return (array && array.length)\n        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)\n        : undefined;\n    }\n\n    /**\n     * Computes the mean of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * _.mean([4, 2, 8, 6]);\n     * // => 5\n     */\n    function mean(array) {\n      return baseMean(array, identity);\n    }\n\n    /**\n     * This method is like `_.mean` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be averaged.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.meanBy(objects, function(o) { return o.n; });\n     * // => 5\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.meanBy(objects, 'n');\n     * // => 5\n     */\n    function meanBy(array, iteratee) {\n      return baseMean(array, getIteratee(iteratee, 2));\n    }\n\n    /**\n     * Computes the minimum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * _.min([4, 2, 8, 6]);\n     * // => 2\n     *\n     * _.min([]);\n     * // => undefined\n     */\n    function min(array) {\n      return (array && array.length)\n        ? baseExtremum(array, identity, baseLt)\n        : undefined;\n    }\n\n    /**\n     * This method is like `_.min` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.minBy(objects, function(o) { return o.n; });\n     * // => { 'n': 1 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.minBy(objects, 'n');\n     * // => { 'n': 1 }\n     */\n    function minBy(array, iteratee) {\n      return (array && array.length)\n        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)\n        : undefined;\n    }\n\n    /**\n     * Multiply two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} multiplier The first number in a multiplication.\n     * @param {number} multiplicand The second number in a multiplication.\n     * @returns {number} Returns the product.\n     * @example\n     *\n     * _.multiply(6, 4);\n     * // => 24\n     */\n    var multiply = createMathOperation(function(multiplier, multiplicand) {\n      return multiplier * multiplicand;\n    }, 1);\n\n    /**\n     * Computes `number` rounded to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round.\n     * @param {number} [precision=0] The precision to round to.\n     * @returns {number} Returns the rounded number.\n     * @example\n     *\n     * _.round(4.006);\n     * // => 4\n     *\n     * _.round(4.006, 2);\n     * // => 4.01\n     *\n     * _.round(4060, -2);\n     * // => 4100\n     */\n    var round = createRound('round');\n\n    /**\n     * Subtract two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {number} minuend The first number in a subtraction.\n     * @param {number} subtrahend The second number in a subtraction.\n     * @returns {number} Returns the difference.\n     * @example\n     *\n     * _.subtract(6, 4);\n     * // => 2\n     */\n    var subtract = createMathOperation(function(minuend, subtrahend) {\n      return minuend - subtrahend;\n    }, 0);\n\n    /**\n     * Computes the sum of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * _.sum([4, 2, 8, 6]);\n     * // => 20\n     */\n    function sum(array) {\n      return (array && array.length)\n        ? baseSum(array, identity)\n        : 0;\n    }\n\n    /**\n     * This method is like `_.sum` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be summed.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.sumBy(objects, function(o) { return o.n; });\n     * // => 20\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sumBy(objects, 'n');\n     * // => 20\n     */\n    function sumBy(array, iteratee) {\n      return (array && array.length)\n        ? baseSum(array, getIteratee(iteratee, 2))\n        : 0;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    // Add methods that return wrapped values in chain sequences.\n    lodash.after = after;\n    lodash.ary = ary;\n    lodash.assign = assign;\n    lodash.assignIn = assignIn;\n    lodash.assignInWith = assignInWith;\n    lodash.assignWith = assignWith;\n    lodash.at = at;\n    lodash.before = before;\n    lodash.bind = bind;\n    lodash.bindAll = bindAll;\n    lodash.bindKey = bindKey;\n    lodash.castArray = castArray;\n    lodash.chain = chain;\n    lodash.chunk = chunk;\n    lodash.compact = compact;\n    lodash.concat = concat;\n    lodash.cond = cond;\n    lodash.conforms = conforms;\n    lodash.constant = constant;\n    lodash.countBy = countBy;\n    lodash.create = create;\n    lodash.curry = curry;\n    lodash.curryRight = curryRight;\n    lodash.debounce = debounce;\n    lodash.defaults = defaults;\n    lodash.defaultsDeep = defaultsDeep;\n    lodash.defer = defer;\n    lodash.delay = delay;\n    lodash.difference = difference;\n    lodash.differenceBy = differenceBy;\n    lodash.differenceWith = differenceWith;\n    lodash.drop = drop;\n    lodash.dropRight = dropRight;\n    lodash.dropRightWhile = dropRightWhile;\n    lodash.dropWhile = dropWhile;\n    lodash.fill = fill;\n    lodash.filter = filter;\n    lodash.flatMap = flatMap;\n    lodash.flatMapDeep = flatMapDeep;\n    lodash.flatMapDepth = flatMapDepth;\n    lodash.flatten = flatten;\n    lodash.flattenDeep = flattenDeep;\n    lodash.flattenDepth = flattenDepth;\n    lodash.flip = flip;\n    lodash.flow = flow;\n    lodash.flowRight = flowRight;\n    lodash.fromPairs = fromPairs;\n    lodash.functions = functions;\n    lodash.functionsIn = functionsIn;\n    lodash.groupBy = groupBy;\n    lodash.initial = initial;\n    lodash.intersection = intersection;\n    lodash.intersectionBy = intersectionBy;\n    lodash.intersectionWith = intersectionWith;\n    lodash.invert = invert;\n    lodash.invertBy = invertBy;\n    lodash.invokeMap = invokeMap;\n    lodash.iteratee = iteratee;\n    lodash.keyBy = keyBy;\n    lodash.keys = keys;\n    lodash.keysIn = keysIn;\n    lodash.map = map;\n    lodash.mapKeys = mapKeys;\n    lodash.mapValues = mapValues;\n    lodash.matches = matches;\n    lodash.matchesProperty = matchesProperty;\n    lodash.memoize = memoize;\n    lodash.merge = merge;\n    lodash.mergeWith = mergeWith;\n    lodash.method = method;\n    lodash.methodOf = methodOf;\n    lodash.mixin = mixin;\n    lodash.negate = negate;\n    lodash.nthArg = nthArg;\n    lodash.omit = omit;\n    lodash.omitBy = omitBy;\n    lodash.once = once;\n    lodash.orderBy = orderBy;\n    lodash.over = over;\n    lodash.overArgs = overArgs;\n    lodash.overEvery = overEvery;\n    lodash.overSome = overSome;\n    lodash.partial = partial;\n    lodash.partialRight = partialRight;\n    lodash.partition = partition;\n    lodash.pick = pick;\n    lodash.pickBy = pickBy;\n    lodash.property = property;\n    lodash.propertyOf = propertyOf;\n    lodash.pull = pull;\n    lodash.pullAll = pullAll;\n    lodash.pullAllBy = pullAllBy;\n    lodash.pullAllWith = pullAllWith;\n    lodash.pullAt = pullAt;\n    lodash.range = range;\n    lodash.rangeRight = rangeRight;\n    lodash.rearg = rearg;\n    lodash.reject = reject;\n    lodash.remove = remove;\n    lodash.rest = rest;\n    lodash.reverse = reverse;\n    lodash.sampleSize = sampleSize;\n    lodash.set = set;\n    lodash.setWith = setWith;\n    lodash.shuffle = shuffle;\n    lodash.slice = slice;\n    lodash.sortBy = sortBy;\n    lodash.sortedUniq = sortedUniq;\n    lodash.sortedUniqBy = sortedUniqBy;\n    lodash.split = split;\n    lodash.spread = spread;\n    lodash.tail = tail;\n    lodash.take = take;\n    lodash.takeRight = takeRight;\n    lodash.takeRightWhile = takeRightWhile;\n    lodash.takeWhile = takeWhile;\n    lodash.tap = tap;\n    lodash.throttle = throttle;\n    lodash.thru = thru;\n    lodash.toArray = toArray;\n    lodash.toPairs = toPairs;\n    lodash.toPairsIn = toPairsIn;\n    lodash.toPath = toPath;\n    lodash.toPlainObject = toPlainObject;\n    lodash.transform = transform;\n    lodash.unary = unary;\n    lodash.union = union;\n    lodash.unionBy = unionBy;\n    lodash.unionWith = unionWith;\n    lodash.uniq = uniq;\n    lodash.uniqBy = uniqBy;\n    lodash.uniqWith = uniqWith;\n    lodash.unset = unset;\n    lodash.unzip = unzip;\n    lodash.unzipWith = unzipWith;\n    lodash.update = update;\n    lodash.updateWith = updateWith;\n    lodash.values = values;\n    lodash.valuesIn = valuesIn;\n    lodash.without = without;\n    lodash.words = words;\n    lodash.wrap = wrap;\n    lodash.xor = xor;\n    lodash.xorBy = xorBy;\n    lodash.xorWith = xorWith;\n    lodash.zip = zip;\n    lodash.zipObject = zipObject;\n    lodash.zipObjectDeep = zipObjectDeep;\n    lodash.zipWith = zipWith;\n\n    // Add aliases.\n    lodash.entries = toPairs;\n    lodash.entriesIn = toPairsIn;\n    lodash.extend = assignIn;\n    lodash.extendWith = assignInWith;\n\n    // Add methods to `lodash.prototype`.\n    mixin(lodash, lodash);\n\n    /*------------------------------------------------------------------------*/\n\n    // Add methods that return unwrapped values in chain sequences.\n    lodash.add = add;\n    lodash.attempt = attempt;\n    lodash.camelCase = camelCase;\n    lodash.capitalize = capitalize;\n    lodash.ceil = ceil;\n    lodash.clamp = clamp;\n    lodash.clone = clone;\n    lodash.cloneDeep = cloneDeep;\n    lodash.cloneDeepWith = cloneDeepWith;\n    lodash.cloneWith = cloneWith;\n    lodash.conformsTo = conformsTo;\n    lodash.deburr = deburr;\n    lodash.defaultTo = defaultTo;\n    lodash.divide = divide;\n    lodash.endsWith = endsWith;\n    lodash.eq = eq;\n    lodash.escape = escape;\n    lodash.escapeRegExp = escapeRegExp;\n    lodash.every = every;\n    lodash.find = find;\n    lodash.findIndex = findIndex;\n    lodash.findKey = findKey;\n    lodash.findLast = findLast;\n    lodash.findLastIndex = findLastIndex;\n    lodash.findLastKey = findLastKey;\n    lodash.floor = floor;\n    lodash.forEach = forEach;\n    lodash.forEachRight = forEachRight;\n    lodash.forIn = forIn;\n    lodash.forInRight = forInRight;\n    lodash.forOwn = forOwn;\n    lodash.forOwnRight = forOwnRight;\n    lodash.get = get;\n    lodash.gt = gt;\n    lodash.gte = gte;\n    lodash.has = has;\n    lodash.hasIn = hasIn;\n    lodash.head = head;\n    lodash.identity = identity;\n    lodash.includes = includes;\n    lodash.indexOf = indexOf;\n    lodash.inRange = inRange;\n    lodash.invoke = invoke;\n    lodash.isArguments = isArguments;\n    lodash.isArray = isArray;\n    lodash.isArrayBuffer = isArrayBuffer;\n    lodash.isArrayLike = isArrayLike;\n    lodash.isArrayLikeObject = isArrayLikeObject;\n    lodash.isBoolean = isBoolean;\n    lodash.isBuffer = isBuffer;\n    lodash.isDate = isDate;\n    lodash.isElement = isElement;\n    lodash.isEmpty = isEmpty;\n    lodash.isEqual = isEqual;\n    lodash.isEqualWith = isEqualWith;\n    lodash.isError = isError;\n    lodash.isFinite = isFinite;\n    lodash.isFunction = isFunction;\n    lodash.isInteger = isInteger;\n    lodash.isLength = isLength;\n    lodash.isMap = isMap;\n    lodash.isMatch = isMatch;\n    lodash.isMatchWith = isMatchWith;\n    lodash.isNaN = isNaN;\n    lodash.isNative = isNative;\n    lodash.isNil = isNil;\n    lodash.isNull = isNull;\n    lodash.isNumber = isNumber;\n    lodash.isObject = isObject;\n    lodash.isObjectLike = isObjectLike;\n    lodash.isPlainObject = isPlainObject;\n    lodash.isRegExp = isRegExp;\n    lodash.isSafeInteger = isSafeInteger;\n    lodash.isSet = isSet;\n    lodash.isString = isString;\n    lodash.isSymbol = isSymbol;\n    lodash.isTypedArray = isTypedArray;\n    lodash.isUndefined = isUndefined;\n    lodash.isWeakMap = isWeakMap;\n    lodash.isWeakSet = isWeakSet;\n    lodash.join = join;\n    lodash.kebabCase = kebabCase;\n    lodash.last = last;\n    lodash.lastIndexOf = lastIndexOf;\n    lodash.lowerCase = lowerCase;\n    lodash.lowerFirst = lowerFirst;\n    lodash.lt = lt;\n    lodash.lte = lte;\n    lodash.max = max;\n    lodash.maxBy = maxBy;\n    lodash.mean = mean;\n    lodash.meanBy = meanBy;\n    lodash.min = min;\n    lodash.minBy = minBy;\n    lodash.stubArray = stubArray;\n    lodash.stubFalse = stubFalse;\n    lodash.stubObject = stubObject;\n    lodash.stubString = stubString;\n    lodash.stubTrue = stubTrue;\n    lodash.multiply = multiply;\n    lodash.nth = nth;\n    lodash.noConflict = noConflict;\n    lodash.noop = noop;\n    lodash.now = now;\n    lodash.pad = pad;\n    lodash.padEnd = padEnd;\n    lodash.padStart = padStart;\n    lodash.parseInt = parseInt;\n    lodash.random = random;\n    lodash.reduce = reduce;\n    lodash.reduceRight = reduceRight;\n    lodash.repeat = repeat;\n    lodash.replace = replace;\n    lodash.result = result;\n    lodash.round = round;\n    lodash.runInContext = runInContext;\n    lodash.sample = sample;\n    lodash.size = size;\n    lodash.snakeCase = snakeCase;\n    lodash.some = some;\n    lodash.sortedIndex = sortedIndex;\n    lodash.sortedIndexBy = sortedIndexBy;\n    lodash.sortedIndexOf = sortedIndexOf;\n    lodash.sortedLastIndex = sortedLastIndex;\n    lodash.sortedLastIndexBy = sortedLastIndexBy;\n    lodash.sortedLastIndexOf = sortedLastIndexOf;\n    lodash.startCase = startCase;\n    lodash.startsWith = startsWith;\n    lodash.subtract = subtract;\n    lodash.sum = sum;\n    lodash.sumBy = sumBy;\n    lodash.template = template;\n    lodash.times = times;\n    lodash.toFinite = toFinite;\n    lodash.toInteger = toInteger;\n    lodash.toLength = toLength;\n    lodash.toLower = toLower;\n    lodash.toNumber = toNumber;\n    lodash.toSafeInteger = toSafeInteger;\n    lodash.toString = toString;\n    lodash.toUpper = toUpper;\n    lodash.trim = trim;\n    lodash.trimEnd = trimEnd;\n    lodash.trimStart = trimStart;\n    lodash.truncate = truncate;\n    lodash.unescape = unescape;\n    lodash.uniqueId = uniqueId;\n    lodash.upperCase = upperCase;\n    lodash.upperFirst = upperFirst;\n\n    // Add aliases.\n    lodash.each = forEach;\n    lodash.eachRight = forEachRight;\n    lodash.first = head;\n\n    mixin(lodash, (function() {\n      var source = {};\n      baseForOwn(lodash, function(func, methodName) {\n        if (!hasOwnProperty.call(lodash.prototype, methodName)) {\n          source[methodName] = func;\n        }\n      });\n      return source;\n    }()), { 'chain': false });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The semantic version number.\n     *\n     * @static\n     * @memberOf _\n     * @type {string}\n     */\n    lodash.VERSION = VERSION;\n\n    // Assign default placeholders.\n    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {\n      lodash[methodName].placeholder = lodash;\n    });\n\n    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.\n    arrayEach(['drop', 'take'], function(methodName, index) {\n      LazyWrapper.prototype[methodName] = function(n) {\n        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);\n\n        var result = (this.__filtered__ && !index)\n          ? new LazyWrapper(this)\n          : this.clone();\n\n        if (result.__filtered__) {\n          result.__takeCount__ = nativeMin(n, result.__takeCount__);\n        } else {\n          result.__views__.push({\n            'size': nativeMin(n, MAX_ARRAY_LENGTH),\n            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')\n          });\n        }\n        return result;\n      };\n\n      LazyWrapper.prototype[methodName + 'Right'] = function(n) {\n        return this.reverse()[methodName](n).reverse();\n      };\n    });\n\n    // Add `LazyWrapper` methods that accept an `iteratee` value.\n    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {\n      var type = index + 1,\n          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;\n\n      LazyWrapper.prototype[methodName] = function(iteratee) {\n        var result = this.clone();\n        result.__iteratees__.push({\n          'iteratee': getIteratee(iteratee, 3),\n          'type': type\n        });\n        result.__filtered__ = result.__filtered__ || isFilter;\n        return result;\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.head` and `_.last`.\n    arrayEach(['head', 'last'], function(methodName, index) {\n      var takeName = 'take' + (index ? 'Right' : '');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this[takeName](1).value()[0];\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.\n    arrayEach(['initial', 'tail'], function(methodName, index) {\n      var dropName = 'drop' + (index ? '' : 'Right');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);\n      };\n    });\n\n    LazyWrapper.prototype.compact = function() {\n      return this.filter(identity);\n    };\n\n    LazyWrapper.prototype.find = function(predicate) {\n      return this.filter(predicate).head();\n    };\n\n    LazyWrapper.prototype.findLast = function(predicate) {\n      return this.reverse().find(predicate);\n    };\n\n    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {\n      if (typeof path == 'function') {\n        return new LazyWrapper(this);\n      }\n      return this.map(function(value) {\n        return baseInvoke(value, path, args);\n      });\n    });\n\n    LazyWrapper.prototype.reject = function(predicate) {\n      return this.filter(negate(getIteratee(predicate)));\n    };\n\n    LazyWrapper.prototype.slice = function(start, end) {\n      start = toInteger(start);\n\n      var result = this;\n      if (result.__filtered__ && (start > 0 || end < 0)) {\n        return new LazyWrapper(result);\n      }\n      if (start < 0) {\n        result = result.takeRight(-start);\n      } else if (start) {\n        result = result.drop(start);\n      }\n      if (end !== undefined) {\n        end = toInteger(end);\n        result = end < 0 ? result.dropRight(-end) : result.take(end - start);\n      }\n      return result;\n    };\n\n    LazyWrapper.prototype.takeRightWhile = function(predicate) {\n      return this.reverse().takeWhile(predicate).reverse();\n    };\n\n    LazyWrapper.prototype.toArray = function() {\n      return this.take(MAX_ARRAY_LENGTH);\n    };\n\n    // Add `LazyWrapper` methods to `lodash.prototype`.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),\n          isTaker = /^(?:head|last)$/.test(methodName),\n          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],\n          retUnwrapped = isTaker || /^find/.test(methodName);\n\n      if (!lodashFunc) {\n        return;\n      }\n      lodash.prototype[methodName] = function() {\n        var value = this.__wrapped__,\n            args = isTaker ? [1] : arguments,\n            isLazy = value instanceof LazyWrapper,\n            iteratee = args[0],\n            useLazy = isLazy || isArray(value);\n\n        var interceptor = function(value) {\n          var result = lodashFunc.apply(lodash, arrayPush([value], args));\n          return (isTaker && chainAll) ? result[0] : result;\n        };\n\n        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {\n          // Avoid lazy use if the iteratee has a \"length\" value other than `1`.\n          isLazy = useLazy = false;\n        }\n        var chainAll = this.__chain__,\n            isHybrid = !!this.__actions__.length,\n            isUnwrapped = retUnwrapped && !chainAll,\n            onlyLazy = isLazy && !isHybrid;\n\n        if (!retUnwrapped && useLazy) {\n          value = onlyLazy ? value : new LazyWrapper(this);\n          var result = func.apply(value, args);\n          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });\n          return new LodashWrapper(result, chainAll);\n        }\n        if (isUnwrapped && onlyLazy) {\n          return func.apply(this, args);\n        }\n        result = this.thru(interceptor);\n        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;\n      };\n    });\n\n    // Add `Array` methods to `lodash.prototype`.\n    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {\n      var func = arrayProto[methodName],\n          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',\n          retUnwrapped = /^(?:pop|shift)$/.test(methodName);\n\n      lodash.prototype[methodName] = function() {\n        var args = arguments;\n        if (retUnwrapped && !this.__chain__) {\n          var value = this.value();\n          return func.apply(isArray(value) ? value : [], args);\n        }\n        return this[chainName](function(value) {\n          return func.apply(isArray(value) ? value : [], args);\n        });\n      };\n    });\n\n    // Map minified method names to their real names.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var lodashFunc = lodash[methodName];\n      if (lodashFunc) {\n        var key = (lodashFunc.name + ''),\n            names = realNames[key] || (realNames[key] = []);\n\n        names.push({ 'name': methodName, 'func': lodashFunc });\n      }\n    });\n\n    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{\n      'name': 'wrapper',\n      'func': undefined\n    }];\n\n    // Add methods to `LazyWrapper`.\n    LazyWrapper.prototype.clone = lazyClone;\n    LazyWrapper.prototype.reverse = lazyReverse;\n    LazyWrapper.prototype.value = lazyValue;\n\n    // Add chain sequence methods to the `lodash` wrapper.\n    lodash.prototype.at = wrapperAt;\n    lodash.prototype.chain = wrapperChain;\n    lodash.prototype.commit = wrapperCommit;\n    lodash.prototype.next = wrapperNext;\n    lodash.prototype.plant = wrapperPlant;\n    lodash.prototype.reverse = wrapperReverse;\n    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;\n\n    // Add lazy aliases.\n    lodash.prototype.first = lodash.prototype.head;\n\n    if (symIterator) {\n      lodash.prototype[symIterator] = wrapperToIterator;\n    }\n    return lodash;\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  // Export lodash.\n  var _ = runInContext();\n\n  // Some AMD build optimizers, like r.js, check for condition patterns like:\n  if (true) {\n    // Expose Lodash on the global object to prevent errors when Lodash is\n    // loaded by a script tag in the presence of an AMD loader.\n    // See http://requirejs.org/docs/errors.html#mismatch for more details.\n    // Use `_.noConflict` to remove Lodash from the global object.\n    root._ = _;\n\n    // Define as an anonymous module so, through path mapping, it can be\n    // referenced as the \"underscore\" module.\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n      return _;\n    }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n  // Check for `exports` after `define` in case a build optimizer adds it.\n  else {}\n}.call(this));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/lodash/lodash.js\n");

/***/ }),

/***/ "./node_modules/postal/lib/postal.js":
/*!*******************************************!*\
  !*** ./node_modules/postal/lib/postal.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * postal - Pub/Sub library providing wildcard subscriptions, complex message handling, etc.  Works server and client-side.\n * Author: Jim Cowart (http://ifandelse.com)\n * Version: v2.0.5\n * Url: http://github.com/postaljs/postal.js\n * License(s): MIT\n */\n\n( function( root, factory ) {\n\t\n\tif ( true ) {\n\t\t// AMD. Register as an anonymous module.\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(/*! lodash */ \"./node_modules/lodash/lodash.js\") ], __WEBPACK_AMD_DEFINE_RESULT__ = (function( _ ) {\n\t\t\treturn factory( _, root );\n\t\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\n\t} else {}\n}( this, function( _, global, undefined ) {\n\tvar prevPostal = global && global.postal;\n\tvar prevLodash = global && global._;\n\tif ( prevLodash && prevLodash !== _ ) {\n\t\t_ = _.noConflict();\n\t}\n\tvar _defaultConfig = {\n\t\tDEFAULT_CHANNEL: \"/\",\n\t\tSYSTEM_CHANNEL: \"postal\",\n\t\tenableSystemMessages: true,\n\t\tcacheKeyDelimiter: \"|\",\n\t\tautoCompactResolver: false\n\t};\n\tvar postal = {\n\t\tconfiguration: _.extend( {}, _defaultConfig )\n\t};\n\tvar _config = postal.configuration;\n\n\t\n\nvar ChannelDefinition = function( channelName, bus ) {\n\tthis.bus = bus;\n\tthis.channel = channelName || _config.DEFAULT_CHANNEL;\n};\n\nChannelDefinition.prototype.subscribe = function() {\n\treturn this.bus.subscribe( {\n\t\tchannel: this.channel,\n\t\ttopic: ( arguments.length === 1 ? arguments[ 0 ].topic : arguments[ 0 ] ),\n\t\tcallback: ( arguments.length === 1 ? arguments[ 0 ].callback : arguments[ 1 ] )\n\t} );\n};\n\n/*\n    publish( envelope [, callback ] );\n    publish( topic, data [, callback ] );\n*/\nChannelDefinition.prototype.publish = function() {\n\tvar envelope = {};\n\tvar callback;\n\tif ( typeof arguments[ 0 ] === \"string\" ) {\n\t\tenvelope.topic = arguments[ 0 ];\n\t\tenvelope.data = arguments[ 1 ];\n\t\tcallback = arguments[ 2 ];\n\t} else {\n\t\tenvelope = arguments[ 0 ];\n\t\tcallback = arguments[ 1 ];\n\t}\n\tif ( typeof envelope !== \"object\" ) {\n\t\tthrow new Error( \"The first argument to ChannelDefinition.publish should be either an envelope object or a string topic.\" );\n\t}\n\tenvelope.headers = _.extend( envelope.headers || { resolverNoCache: _config.resolverNoCache } );\n\tenvelope.channel = this.channel;\n\tthis.bus.publish( envelope, callback );\n};\n\n\t\nvar SubscriptionDefinition = function( channel, topic, callback ) {\n\tif ( arguments.length !== 3 ) {\n\t\tthrow new Error( \"You must provide a channel, topic and callback when creating a SubscriptionDefinition instance.\" );\n\t}\n\tif ( topic.length === 0 ) {\n\t\tthrow new Error( \"Topics cannot be empty\" );\n\t}\n\tthis.channel = channel;\n\tthis.topic = topic;\n\tthis.callback = callback;\n\tthis.pipeline = [];\n\tthis.cacheKeys = [];\n\tthis._context = undefined;\n};\n\nvar ConsecutiveDistinctPredicate = function() {\n\tvar previous;\n\treturn function( data ) {\n\t\tvar eq = false;\n\t\tif ( typeof data === \"string\" ) {\n\t\t\teq = data === previous;\n\t\t\tprevious = data;\n\t\t} else {\n\t\t\teq = _.isEqual( data, previous );\n\t\t\tprevious = _.extend( {}, data );\n\t\t}\n\t\treturn !eq;\n\t};\n};\n\nvar DistinctPredicate = function DistinctPredicateFactory() {\n\tvar previous = [];\n\treturn function DistinctPredicate( data ) {\n\t\tvar isDistinct = !_.some( previous, function( p ) {\n\t\t\treturn _.isEqual( data, p );\n\t\t} );\n\t\tif ( isDistinct ) {\n\t\t\tprevious.push( data );\n\t\t}\n\t\treturn isDistinct;\n\t};\n};\n\nSubscriptionDefinition.prototype = {\n\n\t\"catch\": function( errorHandler ) {\n\t\tvar original = this.callback;\n\t\tvar safeCallback = function() {\n\t\t\ttry {\n\t\t\t\toriginal.apply( this, arguments );\n\t\t\t} catch ( err ) {\n\t\t\t\terrorHandler( err, arguments[ 0 ] );\n\t\t\t}\n\t\t};\n\t\tthis.callback = safeCallback;\n\t\treturn this;\n\t},\n\n\tdefer: function defer() {\n\t\treturn this.delay( 0 );\n\t},\n\n\tdisposeAfter: function disposeAfter( maxCalls ) {\n\t\tif ( typeof maxCalls !== \"number\" || maxCalls <= 0 ) {\n\t\t\tthrow new Error( \"The value provided to disposeAfter (maxCalls) must be a number greater than zero.\" );\n\t\t}\n\t\tvar dispose = _.after( maxCalls, this.unsubscribe.bind( this ) );\n\t\tthis.pipeline.push( function( data, env, next ) {\n\t\t\tnext( data, env );\n\t\t\tdispose();\n\t\t} );\n\t\treturn this;\n\t},\n\n\tdistinct: function distinct() {\n\t\treturn this.constraint( new DistinctPredicate() );\n\t},\n\n\tdistinctUntilChanged: function distinctUntilChanged() {\n\t\treturn this.constraint( new ConsecutiveDistinctPredicate() );\n\t},\n\n\tinvokeSubscriber: function invokeSubscriber( data, env ) {\n\t\tif ( !this.inactive ) {\n\t\t\tvar self = this;\n\t\t\tvar pipeline = self.pipeline;\n\t\t\tvar len = pipeline.length;\n\t\t\tvar context = self._context;\n\t\t\tvar idx = -1;\n\t\t\tvar invoked = false;\n\t\t\tif ( !len ) {\n\t\t\t\tself.callback.call( context, data, env );\n\t\t\t\tinvoked = true;\n\t\t\t} else {\n\t\t\t\tpipeline = pipeline.concat( [ self.callback ] );\n\t\t\t\tvar step = function step( d, e ) {\n\t\t\t\t\tidx += 1;\n\t\t\t\t\tif ( idx < len ) {\n\t\t\t\t\t\tpipeline[ idx ].call( context, d, e, step );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.callback.call( context, d, e );\n\t\t\t\t\t\tinvoked = true;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tstep( data, env, 0 );\n\t\t\t}\n\t\t\treturn invoked;\n\t\t}\n\t},\n\n\tlogError: function logError() {\n\t\t\n\t\tif ( console ) {\n\t\t\tvar report;\n\t\t\tif ( console.warn ) {\n\t\t\t\treport = console.warn;\n\t\t\t} else {\n\t\t\t\treport = console.log;\n\t\t\t}\n\t\t\tthis.catch( report );\n\t\t}\n\t\treturn this;\n\t},\n\n\tonce: function once() {\n\t\treturn this.disposeAfter( 1 );\n\t},\n\n\tsubscribe: function subscribe( callback ) {\n\t\tthis.callback = callback;\n\t\treturn this;\n\t},\n\n\tunsubscribe: function unsubscribe() {\n\t\t\n\t\tif ( !this.inactive ) {\n\t\t\tpostal.unsubscribe( this );\n\t\t}\n\t},\n\n\tconstraint: function constraint( predicate ) {\n\t\tif ( typeof predicate !== \"function\" ) {\n\t\t\tthrow new Error( \"Predicate constraint must be a function\" );\n\t\t}\n\t\tthis.pipeline.push( function( data, env, next ) {\n\t\t\tif ( predicate.call( this, data, env ) ) {\n\t\t\t\tnext( data, env );\n\t\t\t}\n\t\t} );\n\t\treturn this;\n\t},\n\n\tconstraints: function constraints( predicates ) {\n\t\tvar self = this;\n\t\t\n\t\t_.each( predicates, function( predicate ) {\n\t\t\tself.constraint( predicate );\n\t\t} );\n\t\treturn self;\n\t},\n\n\tcontext: function contextSetter( context ) {\n\t\tthis._context = context;\n\t\treturn this;\n\t},\n\n\tdebounce: function debounce( milliseconds, immediate ) {\n\t\tif ( typeof milliseconds !== \"number\" ) {\n\t\t\tthrow new Error( \"Milliseconds must be a number\" );\n\t\t}\n\n\t\tvar options = {};\n\n\t\tif ( !!immediate === true ) { \n\t\t\toptions.leading = true;\n\t\t\toptions.trailing = false;\n\t\t}\n\n\t\tthis.pipeline.push(\n\t\t\t_.debounce( function( data, env, next ) {\n\t\t\t\tnext( data, env );\n\t\t\t},\n\t\t\t\tmilliseconds,\n\t\t\t\toptions\n\t\t\t)\n\t\t);\n\t\treturn this;\n\t},\n\n\tdelay: function delay( milliseconds ) {\n\t\tif ( typeof milliseconds !== \"number\" ) {\n\t\t\tthrow new Error( \"Milliseconds must be a number\" );\n\t\t}\n\t\tvar self = this;\n\t\tself.pipeline.push( function( data, env, next ) {\n\t\t\tsetTimeout( function() {\n\t\t\t\tnext( data, env );\n\t\t\t}, milliseconds );\n\t\t} );\n\t\treturn this;\n\t},\n\n\tthrottle: function throttle( milliseconds ) {\n\t\tif ( typeof milliseconds !== \"number\" ) {\n\t\t\tthrow new Error( \"Milliseconds must be a number\" );\n\t\t}\n\t\tvar fn = function( data, env, next ) {\n\t\t\tnext( data, env );\n\t\t};\n\t\tthis.pipeline.push( _.throttle( fn, milliseconds ) );\n\t\treturn this;\n\t}\n};\n\n\t\n\n\nvar bindingsResolver = _config.resolver = {\n\tcache: {},\n\tregex: {},\n\tenableCache: true,\n\n\tcompare: function compare( binding, topic, headerOptions ) {\n\t\tvar pattern;\n\t\tvar rgx;\n\t\tvar prevSegment;\n\t\tvar cacheKey = topic + _config.cacheKeyDelimiter + binding;\n\t\tvar result = ( this.cache[ cacheKey ] );\n\t\tvar opt = headerOptions || {};\n\t\tvar saveToCache = this.enableCache && !opt.resolverNoCache;\n\t\t// result is cached?\n\t\tif ( result === true ) {\n\t\t\treturn result;\n\t\t}\n\t\t// plain string matching?\n\t\tif ( binding.indexOf( \"#\" ) === -1 && binding.indexOf( \"*\" ) === -1 ) {\n\t\t\tresult = ( topic === binding );\n\t\t\tif ( saveToCache ) {\n\t\t\t\tthis.cache[ cacheKey ] = result;\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t\t// ah, regex matching, then\n\t\tif ( !( rgx = this.regex[ binding ] ) ) {\n\t\t\tpattern = \"^\" + _.map( binding.split( \".\" ), function mapTopicBinding( segment ) {\n\t\t\t\t\tvar res = \"\";\n\t\t\t\t\tif ( !!prevSegment ) {\n\t\t\t\t\t\tres = prevSegment !== \"#\" ? \"\\\\.\\\\b\" : \"\\\\b\";\n\t\t\t\t\t}\n\t\t\t\t\tif ( segment === \"#\" ) {\n\t\t\t\t\t\tres += \"[\\\\s\\\\S]*\";\n\t\t\t\t\t} else if ( segment === \"*\" ) {\n\t\t\t\t\t\tres += \"[^.]+\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tres += segment;\n\t\t\t\t\t}\n\t\t\t\t\tprevSegment = segment;\n\t\t\t\t\treturn res;\n\t\t\t\t} ).join( \"\" ) + \"$\";\n\t\t\trgx = this.regex[ binding ] = new RegExp( pattern );\n\t\t}\n\t\tresult = rgx.test( topic );\n\t\tif ( saveToCache ) {\n\t\t\tthis.cache[ cacheKey ] = result;\n\t\t}\n\t\treturn result;\n\t},\n\n\treset: function reset() {\n\t\tthis.cache = {};\n\t\tthis.regex = {};\n\t},\n\n\tpurge: function( options ) {\n\t\tvar self = this;\n\t\tvar keyDelimiter = _config.cacheKeyDelimiter;\n\t\tvar matchPredicate = function( val, key ) {\n\t\t\tvar split = key.split( keyDelimiter );\n\t\t\tvar topic = split[ 0 ];\n\t\t\tvar binding = split[ 1 ];\n\t\t\tif ( ( typeof options.topic === \"undefined\" || options.topic === topic ) &&\n\t\t\t\t\t( typeof options.binding === \"undefined\" || options.binding === binding ) ) {\n\t\t\t\tdelete self.cache[ key ];\n\t\t\t}\n\t\t};\n\n\t\tvar compactPredicate = function( val, key ) {\n\t\t\tvar split = key.split( keyDelimiter );\n\t\t\tif ( postal.getSubscribersFor( { topic: split[ 0 ] } ).length === 0 ) {\n\t\t\t\tdelete self.cache[ key ];\n\t\t\t}\n\t\t};\n\n\t\tif ( typeof options === \"undefined\" ) {\n\t\t\tthis.reset();\n\t\t} else {\n\t\t\tvar handler = options.compact === true ? compactPredicate : matchPredicate;\n\t\t\t_.each( this.cache, handler );\n\t\t}\n\t}\n};\n\n\t\n\n\nvar pubInProgress = 0;\nvar unSubQueue = [];\nvar autoCompactIndex = 0;\n\nfunction clearUnSubQueue() {\n\twhile ( unSubQueue.length ) {\n\t\tpostal.unsubscribe( unSubQueue.shift() );\n\t}\n}\n\nfunction getCachePurger( subDef, key, cache ) {\n\treturn function( sub, i, list ) {\n\t\tif ( sub === subDef ) {\n\t\t\tlist.splice( i, 1 );\n\t\t}\n\t\tif ( list.length === 0 ) {\n\t\t\tdelete cache[ key ];\n\t\t}\n\t};\n}\n\nfunction getCacher( topic, pubCache, cacheKey, done, envelope ) {\n\tvar headers = envelope && envelope.headers || {};\n\treturn function( subDef ) {\n\t\tvar cache;\n\t\tif ( _config.resolver.compare( subDef.topic, topic, headers ) ) {\n\t\t\tif ( !headers.resolverNoCache ) {\n\t\t\t\tcache = pubCache[ cacheKey ] = ( pubCache[ cacheKey ] || [] );\n\t\t\t\tcache.push( subDef );\n\t\t\t\tsubDef.cacheKeys.push( cacheKey );\n\t\t\t}\n\t\t\tif ( done ) {\n\t\t\t\tdone( subDef );\n\t\t\t}\n\t\t}\n\t};\n}\n\nfunction getSystemMessage( kind, subDef ) {\n\treturn {\n\t\tchannel: _config.SYSTEM_CHANNEL,\n\t\ttopic: \"subscription.\" + kind,\n\t\tdata: {\n\t\t\tevent: \"subscription.\" + kind,\n\t\t\tchannel: subDef.channel,\n\t\t\ttopic: subDef.topic\n\t\t}\n\t};\n}\n\nvar sysCreatedMessage = getSystemMessage.bind( undefined, \"created\" );\nvar sysRemovedMessage = getSystemMessage.bind( undefined, \"removed\" );\n\nfunction getPredicate( options, resolver ) {\n\tif ( typeof options === \"function\" ) {\n\t\treturn options;\n\t} else if ( !options ) {\n\t\treturn function() {\n\t\t\treturn true;\n\t\t};\n\t} else {\n\t\treturn function( sub ) {\n\t\t\tvar compared = 0;\n\t\t\tvar matched = 0;\n\t\t\t_.each( options, function( val, prop ) {\n\t\t\t\tcompared += 1;\n\t\t\t\tif (\n\t\t\t\t// We use the bindings resolver to compare the options.topic to subDef.topic\n\t\t\t\t( prop === \"topic\" && resolver.compare( sub.topic, options.topic, { resolverNoCache: true } ) ) ||\n\t\t\t\t\t\t( prop === \"context\" && options.context === sub._context ) ||\n\t\t\t\t\t\t// Any other potential prop/value matching outside topic & context...\n\t\t\t\t\t\t( sub[ prop ] === options[ prop ] ) ) {\n\t\t\t\t\tmatched += 1;\n\t\t\t\t}\n\t\t\t} );\n\t\t\treturn compared === matched;\n\t\t};\n\t}\n}\n\n_.extend( postal, {\n\tcache: {},\n\tsubscriptions: {},\n\twireTaps: [],\n\n\tChannelDefinition: ChannelDefinition,\n\tSubscriptionDefinition: SubscriptionDefinition,\n\n\tchannel: function channel( channelName ) {\n\t\treturn new ChannelDefinition( channelName, this );\n\t},\n\n\taddWireTap: function addWireTap( callback ) {\n\t\tvar self = this;\n\t\tself.wireTaps.push( callback );\n\t\treturn function() {\n\t\t\tvar idx = self.wireTaps.indexOf( callback );\n\t\t\tif ( idx !== -1 ) {\n\t\t\t\tself.wireTaps.splice( idx, 1 );\n\t\t\t}\n\t\t};\n\t},\n\n\tnoConflict: function noConflict() {\n\t\t\n\t\tif ( typeof window === \"undefined\" || ( typeof window !== \"undefined\" && \"function\" === \"function\" && __webpack_require__(/*! !webpack amd options */ \"./node_modules/webpack/buildin/amd-options.js\") ) ) {\n\t\t\tthrow new Error( \"noConflict can only be used in browser clients which aren't using AMD modules\" );\n\t\t}\n\t\tglobal.postal = prevPostal;\n\t\treturn this;\n\t},\n\n\tgetSubscribersFor: function getSubscribersFor( options ) {\n\t\tvar result = [];\n\t\tvar self = this;\n\t\t_.each( self.subscriptions, function( channel ) {\n\t\t\t_.each( channel, function( subList ) {\n\t\t\t\tresult = result.concat( _.filter( subList, getPredicate( options, _config.resolver ) ) );\n\t\t\t} );\n\t\t} );\n\t\treturn result;\n\t},\n\n\tpublish: function publish( envelope, cb ) {\n\t\t++pubInProgress;\n\t\tvar channel = envelope.channel = envelope.channel || _config.DEFAULT_CHANNEL;\n\t\tvar topic = envelope.topic;\n\t\tenvelope.timeStamp = new Date();\n\t\tif ( this.wireTaps.length ) {\n\t\t\t_.each( this.wireTaps, function( tap ) {\n\t\t\t\ttap( envelope.data, envelope, pubInProgress );\n\t\t\t} );\n\t\t}\n\t\tvar cacheKey = channel + _config.cacheKeyDelimiter + topic;\n\t\tvar cache = this.cache[ cacheKey ];\n\t\tvar skipped = 0;\n\t\tvar activated = 0;\n\t\tif ( !cache ) {\n\t\t\tvar cacherFn = getCacher(\n\t\t\t\ttopic,\n\t\t\t\tthis.cache,\n\t\t\t\tcacheKey,\n\t\t\t\tfunction( candidate ) {\n\t\t\t\t\tif ( candidate.invokeSubscriber( envelope.data, envelope ) ) {\n\t\t\t\t\t\tactivated++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tskipped++;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tenvelope\n\t\t\t);\n\t\t\t_.each( this.subscriptions[ channel ], function( candidates ) {\n\t\t\t\t_.each( candidates, cacherFn );\n\t\t\t} );\n\t\t} else {\n\t\t\t_.each( cache, function( subDef ) {\n\t\t\t\tif ( subDef.invokeSubscriber( envelope.data, envelope ) ) {\n\t\t\t\t\tactivated++;\n\t\t\t\t} else {\n\t\t\t\t\tskipped++;\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t\tif ( --pubInProgress === 0 ) {\n\t\t\tclearUnSubQueue();\n\t\t}\n\t\tif ( cb ) {\n\t\t\tcb( {\n\t\t\t\tactivated: activated,\n\t\t\t\tskipped: skipped\n\t\t\t} );\n\t\t}\n\t},\n\n\treset: function reset() {\n\t\tthis.unsubscribeFor();\n\t\t_config.resolver.reset();\n\t\tthis.subscriptions = {};\n\t\tthis.cache = {};\n\t},\n\n\tsubscribe: function subscribe( options ) {\n\t\tvar subscriptions = this.subscriptions;\n\t\tvar subDef = new SubscriptionDefinition( options.channel || _config.DEFAULT_CHANNEL, options.topic, options.callback );\n\t\tvar channel = subscriptions[ subDef.channel ];\n\t\tvar channelLen = subDef.channel.length;\n\t\tvar subs;\n\t\tif ( !channel ) {\n\t\t\tchannel = subscriptions[ subDef.channel ] = {};\n\t\t}\n\t\tsubs = subscriptions[ subDef.channel ][ subDef.topic ];\n\t\tif ( !subs ) {\n\t\t\tsubs = subscriptions[ subDef.channel ][ subDef.topic ] = [];\n\t\t}\n\t\t// First, add the SubscriptionDefinition to the channel list\n\t\tsubs.push( subDef );\n\t\t// Next, add the SubscriptionDefinition to any relevant existing cache(s)\n\t\tvar cache = this.cache;\n\t\t_.each( _.keys( cache ), function( cacheKey ) {\n\t\t\tif ( cacheKey.substr( 0, channelLen ) === subDef.channel ) {\n\t\t\t\tgetCacher(\n\t\t\t\t\tcacheKey.split( _config.cacheKeyDelimiter )[1],\n\t\t\t\t\tcache,\n\t\t\t\t\tcacheKey )( subDef );\n\t\t\t}\n\t\t} );\n\t\t\n\t\tif ( _config.enableSystemMessages ) {\n\t\t\tthis.publish( sysCreatedMessage( subDef ) );\n\t\t}\n\t\treturn subDef;\n\t},\n\n\tunsubscribe: function unsubscribe() {\n\t\tvar unSubLen = arguments.length;\n\t\tvar unSubIdx = 0;\n\t\tvar subDef;\n\t\tvar channelSubs;\n\t\tvar topicSubs;\n\t\tvar idx;\n\t\tfor ( ; unSubIdx < unSubLen; unSubIdx++ ) {\n\t\t\tsubDef = arguments[ unSubIdx ];\n\t\t\tsubDef.inactive = true;\n\t\t\tif ( pubInProgress ) {\n\t\t\t\tunSubQueue.push( subDef );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tchannelSubs = this.subscriptions[ subDef.channel ];\n\t\t\ttopicSubs = channelSubs && channelSubs[ subDef.topic ];\n\t\t\t\n\t\t\tif ( topicSubs ) {\n\t\t\t\tvar len = topicSubs.length;\n\t\t\t\tidx = 0;\n\t\t\t\t// remove SubscriptionDefinition from channel list\n\t\t\t\twhile ( idx < len ) {\n\t\t\t\t\t\n\t\t\t\t\tif ( topicSubs[ idx ] === subDef ) {\n\t\t\t\t\t\ttopicSubs.splice( idx, 1 );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tidx += 1;\n\t\t\t\t}\n\t\t\t\tif ( topicSubs.length === 0 ) {\n\t\t\t\t\tdelete channelSubs[ subDef.topic ];\n\t\t\t\t\tif ( !_.keys( channelSubs ).length ) {\n\t\t\t\t\t\tdelete this.subscriptions[ subDef.channel ];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// remove SubscriptionDefinition from postal cache\n\t\t\t\tif ( subDef.cacheKeys && subDef.cacheKeys.length ) {\n\t\t\t\t\tvar key;\n\t\t\t\t\twhile ( key = subDef.cacheKeys.pop() ) {\n\t\t\t\t\t\t_.each( this.cache[ key ], getCachePurger( subDef, key, this.cache ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( typeof _config.resolver.purge === \"function\" ) {\n\t\t\t\t\t// check to see if relevant resolver cache entries can be purged\n\t\t\t\t\tvar autoCompact = _config.autoCompactResolver === true ?\n\t\t\t\t\t\t0 : typeof _config.autoCompactResolver === \"number\" ?\n\t\t\t\t\t\t\t( _config.autoCompactResolver - 1 ) : false;\n\t\t\t\t\tif ( autoCompact >= 0 && autoCompactIndex === autoCompact ) {\n\t\t\t\t\t\t_config.resolver.purge( { compact: true } );\n\t\t\t\t\t\tautoCompactIndex = 0;\n\t\t\t\t\t} else if ( autoCompact >= 0 && autoCompactIndex < autoCompact ) {\n\t\t\t\t\t\tautoCompactIndex += 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( _config.enableSystemMessages ) {\n\t\t\t\tthis.publish( sysRemovedMessage( subDef ) );\n\t\t\t}\n\t\t}\n\t},\n\n\tunsubscribeFor: function unsubscribeFor( options ) {\n\t\tvar toDispose = [];\n\t\t\n\t\tif ( this.subscriptions ) {\n\t\t\ttoDispose = this.getSubscribersFor( options );\n\t\t\tthis.unsubscribe.apply( this, toDispose );\n\t\t}\n\t}\n} );\n\n\n\t\n\tif ( global && Object.prototype.hasOwnProperty.call( global, \"__postalReady__\" ) && _.isArray( global.__postalReady__ ) ) {\n\t\twhile ( global.__postalReady__.length ) {\n\t\t\tglobal.__postalReady__.shift().onReady( postal );\n\t\t}\n\t}\n\t\n\n\treturn postal;\n} ) );\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/postal/lib/postal.js\n");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/process/browser.js\n");

/***/ }),

/***/ "./node_modules/rot-js/lib/rot.js":
/*!****************************************!*\
  !*** ./node_modules/rot-js/lib/rot.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n\tThis is rot.js, the ROguelike Toolkit in JavaScript.\n\tVersion 0.7~dev, generated on Tue Dec 12 13:34:23 CET 2017.\n*/\n/**\n * Add objects for Node.js environment\n */\nglobal.requestAnimationFrame = function(cb) {\n\treturn setTimeout(function() { cb(Date.now()); }, 1000/60);\n};\n\nglobal.document = {\n\tbody: {\n\t\tappendChild: function(child) {},\n\t\tscrollLeft: 0,\n\t\tscrollTop: 0\n\t},\n\tcreateElement: function(type) {\n\t\tvar canvas;\n\t\treturn canvas = {\n\t\t\tgetBoundingClientRect: function() {\n\t\t\t\tvar rect;\n\t\t\t\treturn rect = {\n\t\t\t\t\tleft: 0,\n\t\t\t\t\ttop: 0\n\t\t\t\t};\n\t\t\t},\n\t\t\tgetContext: function(type) {\n\t\t\t\tvar context;\n\t\t\t\treturn context = {\n\t\t\t\t\t_termcolor: null,\n\t\t\t\t\tbeginPath: function() {},\n\t\t\t\t\tcanvas: canvas,\n\t\t\t\t\tclearRect: function(x, y, w, h) {\n\t\t\t\t\t\tif(this._termcolor !== null) {\n\t\t\t\t\t\t\tvar clearCmd = this._termcolor.clearToAnsi(this.fillStyle);\n\t\t\t\t\t\t\tprocess.stdout.write(clearCmd);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tdrawImage: function(a, b, c, d, e, f, g, h, i) {},\n\t\t\t\t\tfill: function() {},\n\t\t\t\t\tfillRect: function(x, y, w, h) {\n\t\t\t\t\t\tif(this._termcolor !== null) {\n\t\t\t\t\t\t\tvar clearCmd = this._termcolor.clearToAnsi(this.fillStyle);\n\t\t\t\t\t\t\tprocess.stdout.write(clearCmd);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tfillStyle: \"#000\",\n\t\t\t\t\tfillText: function(chs, x, y) {},\n\t\t\t\t\tfont: \"monospace\",\n\t\t\t\t\tlineTo: function(x, y) {},\n\t\t\t\t\tmeasureText: function(ch) {\n\t\t\t\t\t\tvar result;\n\t\t\t\t\t\treturn result = {\n\t\t\t\t\t\t\twidth: 12\n\t\t\t\t\t\t};\n\t\t\t\t\t},\n\t\t\t\t\tmoveTo: function(x, y) {},\n\t\t\t\t\ttextAlign: \"center\",\n\t\t\t\t\ttextBaseline: \"middle\"\n\t\t\t\t};\n\t\t\t},\n\t\t\theight: 0,\n\t\t\tstyle: {\n\t\t\t\tleft: \"100px\",\n\t\t\t\tposition: \"absolute\",\n\t\t\t\ttop: \"100px\",\n\t\t\t\tvisibility: \"hidden\"\n\t\t\t},\n\t\t\twidth: 0\n\t\t};\n\t},\n\tdocumentElement: {\n\t\tscrollLeft: 0,\n\t\tscrollTop: 0\n\t}\n};\n(function (root, factory) {\n    if (true) {\n        // AMD. Register as an anonymous module.\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n}(this, function() {\n/**\n * @namespace Top-level ROT namespace\n */\nvar ROT = {\n\t/**\n\t * @returns {bool} Is rot.js supported by this browser?\n\t */\n\tisSupported: function() {\n\t\treturn !!(document.createElement(\"canvas\").getContext && Function.prototype.bind);\n\t},\n\n\t/** Default with for display and map generators */\n\tDEFAULT_WIDTH: 80,\n\t/** Default height for display and map generators */\n\tDEFAULT_HEIGHT: 25,\n\n\t/** Directional constants. Ordering is important! */\n\tDIRS: {\n\t\t\"4\": [\n\t\t\t[ 0, -1],\n\t\t\t[ 1,  0],\n\t\t\t[ 0,  1],\n\t\t\t[-1,  0]\n\t\t],\n\t\t\"8\": [\n\t\t\t[ 0, -1],\n\t\t\t[ 1, -1],\n\t\t\t[ 1,  0],\n\t\t\t[ 1,  1],\n\t\t\t[ 0,  1],\n\t\t\t[-1,  1],\n\t\t\t[-1,  0],\n\t\t\t[-1, -1]\n\t\t],\n\t\t\"6\": [\n\t\t\t[-1, -1],\n\t\t\t[ 1, -1],\n\t\t\t[ 2,  0],\n\t\t\t[ 1,  1],\n\t\t\t[-1,  1],\n\t\t\t[-2,  0]\n\t\t]\n\t},\n\n\t/** Cancel key. */\n\tVK_CANCEL: 3, \n\t/** Help key. */\n\tVK_HELP: 6, \n\t/** Backspace key. */\n\tVK_BACK_SPACE: 8, \n\t/** Tab key. */\n\tVK_TAB: 9, \n\t/** 5 key on Numpad when NumLock is unlocked. Or on Mac, clear key which is positioned at NumLock key. */\n\tVK_CLEAR: 12, \n\t/** Return/enter key on the main keyboard. */\n\tVK_RETURN: 13, \n\t/** Reserved, but not used. */\n\tVK_ENTER: 14, \n\t/** Shift key. */\n\tVK_SHIFT: 16, \n\t/** Control key. */\n\tVK_CONTROL: 17, \n\t/** Alt (Option on Mac) key. */\n\tVK_ALT: 18, \n\t/** Pause key. */\n\tVK_PAUSE: 19, \n\t/** Caps lock. */\n\tVK_CAPS_LOCK: 20, \n\t/** Escape key. */\n\tVK_ESCAPE: 27, \n\t/** Space bar. */\n\tVK_SPACE: 32, \n\t/** Page Up key. */\n\tVK_PAGE_UP: 33, \n\t/** Page Down key. */\n\tVK_PAGE_DOWN: 34, \n\t/** End key. */\n\tVK_END: 35, \n\t/** Home key. */\n\tVK_HOME: 36, \n\t/** Left arrow. */\n\tVK_LEFT: 37, \n\t/** Up arrow. */\n\tVK_UP: 38, \n\t/** Right arrow. */\n\tVK_RIGHT: 39, \n\t/** Down arrow. */\n\tVK_DOWN: 40, \n\t/** Print Screen key. */\n\tVK_PRINTSCREEN: 44, \n\t/** Ins(ert) key. */\n\tVK_INSERT: 45, \n\t/** Del(ete) key. */\n\tVK_DELETE: 46, \n\t/***/\n\tVK_0: 48,\n\t/***/\n\tVK_1: 49,\n\t/***/\n\tVK_2: 50,\n\t/***/\n\tVK_3: 51,\n\t/***/\n\tVK_4: 52,\n\t/***/\n\tVK_5: 53,\n\t/***/\n\tVK_6: 54,\n\t/***/\n\tVK_7: 55,\n\t/***/\n\tVK_8: 56,\n\t/***/\n\tVK_9: 57,\n\t/** Colon (:) key. Requires Gecko 15.0 */\n\tVK_COLON: 58, \n\t/** Semicolon (;) key. */\n\tVK_SEMICOLON: 59, \n\t/** Less-than (<) key. Requires Gecko 15.0 */\n\tVK_LESS_THAN: 60, \n\t/** Equals (=) key. */\n\tVK_EQUALS: 61, \n\t/** Greater-than (>) key. Requires Gecko 15.0 */\n\tVK_GREATER_THAN: 62, \n\t/** Question mark (?) key. Requires Gecko 15.0 */\n\tVK_QUESTION_MARK: 63, \n\t/** Atmark (@) key. Requires Gecko 15.0 */\n\tVK_AT: 64, \n\t/***/\n\tVK_A: 65,\n\t/***/\n\tVK_B: 66,\n\t/***/\n\tVK_C: 67,\n\t/***/\n\tVK_D: 68,\n\t/***/\n\tVK_E: 69,\n\t/***/\n\tVK_F: 70,\n\t/***/\n\tVK_G: 71,\n\t/***/\n\tVK_H: 72,\n\t/***/\n\tVK_I: 73,\n\t/***/\n\tVK_J: 74,\n\t/***/\n\tVK_K: 75,\n\t/***/\n\tVK_L: 76,\n\t/***/\n\tVK_M: 77,\n\t/***/\n\tVK_N: 78,\n\t/***/\n\tVK_O: 79,\n\t/***/\n\tVK_P: 80,\n\t/***/\n\tVK_Q: 81,\n\t/***/\n\tVK_R: 82,\n\t/***/\n\tVK_S: 83,\n\t/***/\n\tVK_T: 84,\n\t/***/\n\tVK_U: 85,\n\t/***/\n\tVK_V: 86,\n\t/***/\n\tVK_W: 87,\n\t/***/\n\tVK_X: 88,\n\t/***/\n\tVK_Y: 89,\n\t/***/\n\tVK_Z: 90,\n\t/***/\n\tVK_CONTEXT_MENU: 93,\n\t/** 0 on the numeric keypad. */\n\tVK_NUMPAD0: 96, \n\t/** 1 on the numeric keypad. */\n\tVK_NUMPAD1: 97, \n\t/** 2 on the numeric keypad. */\n\tVK_NUMPAD2: 98, \n\t/** 3 on the numeric keypad. */\n\tVK_NUMPAD3: 99, \n\t/** 4 on the numeric keypad. */\n\tVK_NUMPAD4: 100, \n\t/** 5 on the numeric keypad. */\n\tVK_NUMPAD5: 101, \n\t/** 6 on the numeric keypad. */\n\tVK_NUMPAD6: 102, \n\t/** 7 on the numeric keypad. */\n\tVK_NUMPAD7: 103, \n\t/** 8 on the numeric keypad. */\n\tVK_NUMPAD8: 104, \n\t/** 9 on the numeric keypad. */\n\tVK_NUMPAD9: 105, \n\t/** * on the numeric keypad. */\n\tVK_MULTIPLY: 106,\n\t/** + on the numeric keypad. */\n\tVK_ADD: 107, \n\t/***/\n\tVK_SEPARATOR: 108,\n\t/** - on the numeric keypad. */\n\tVK_SUBTRACT: 109, \n\t/** Decimal point on the numeric keypad. */\n\tVK_DECIMAL: 110, \n\t/** / on the numeric keypad. */\n\tVK_DIVIDE: 111, \n\t/** F1 key. */\n\tVK_F1: 112, \n\t/** F2 key. */\n\tVK_F2: 113, \n\t/** F3 key. */\n\tVK_F3: 114, \n\t/** F4 key. */\n\tVK_F4: 115, \n\t/** F5 key. */\n\tVK_F5: 116, \n\t/** F6 key. */\n\tVK_F6: 117, \n\t/** F7 key. */\n\tVK_F7: 118, \n\t/** F8 key. */\n\tVK_F8: 119, \n\t/** F9 key. */\n\tVK_F9: 120, \n\t/** F10 key. */\n\tVK_F10: 121, \n\t/** F11 key. */\n\tVK_F11: 122, \n\t/** F12 key. */\n\tVK_F12: 123, \n\t/** F13 key. */\n\tVK_F13: 124, \n\t/** F14 key. */\n\tVK_F14: 125, \n\t/** F15 key. */\n\tVK_F15: 126, \n\t/** F16 key. */\n\tVK_F16: 127, \n\t/** F17 key. */\n\tVK_F17: 128, \n\t/** F18 key. */\n\tVK_F18: 129, \n\t/** F19 key. */\n\tVK_F19: 130, \n\t/** F20 key. */\n\tVK_F20: 131, \n\t/** F21 key. */\n\tVK_F21: 132, \n\t/** F22 key. */\n\tVK_F22: 133, \n\t/** F23 key. */\n\tVK_F23: 134, \n\t/** F24 key. */\n\tVK_F24: 135, \n\t/** Num Lock key. */\n\tVK_NUM_LOCK: 144, \n\t/** Scroll Lock key. */\n\tVK_SCROLL_LOCK: 145, \n\t/** Circumflex (^) key. Requires Gecko 15.0 */\n\tVK_CIRCUMFLEX: 160, \n\t/** Exclamation (!) key. Requires Gecko 15.0 */\n\tVK_EXCLAMATION: 161, \n\t/** Double quote () key. Requires Gecko 15.0 */\n\tVK_DOUBLE_QUOTE: 162, \n\t/** Hash (#) key. Requires Gecko 15.0 */\n\tVK_HASH: 163, \n\t/** Dollar sign ($) key. Requires Gecko 15.0 */\n\tVK_DOLLAR: 164, \n\t/** Percent (%) key. Requires Gecko 15.0 */\n\tVK_PERCENT: 165, \n\t/** Ampersand (&) key. Requires Gecko 15.0 */\n\tVK_AMPERSAND: 166, \n\t/** Underscore (_) key. Requires Gecko 15.0 */\n\tVK_UNDERSCORE: 167, \n\t/** Open parenthesis (() key. Requires Gecko 15.0 */\n\tVK_OPEN_PAREN: 168, \n\t/** Close parenthesis ()) key. Requires Gecko 15.0 */\n\tVK_CLOSE_PAREN: 169, \n\t/* Asterisk (*) key. Requires Gecko 15.0 */\n\tVK_ASTERISK: 170,\n\t/** Plus (+) key. Requires Gecko 15.0 */\n\tVK_PLUS: 171, \n\t/** Pipe (|) key. Requires Gecko 15.0 */\n\tVK_PIPE: 172, \n\t/** Hyphen-US/docs/Minus (-) key. Requires Gecko 15.0 */\n\tVK_HYPHEN_MINUS: 173, \n\t/** Open curly bracket ({) key. Requires Gecko 15.0 */\n\tVK_OPEN_CURLY_BRACKET: 174, \n\t/** Close curly bracket (}) key. Requires Gecko 15.0 */\n\tVK_CLOSE_CURLY_BRACKET: 175, \n\t/** Tilde (~) key. Requires Gecko 15.0 */\n\tVK_TILDE: 176, \n\t/** Comma (,) key. */\n\tVK_COMMA: 188, \n\t/** Period (.) key. */\n\tVK_PERIOD: 190, \n\t/** Slash (/) key. */\n\tVK_SLASH: 191, \n\t/** Back tick (`) key. */\n\tVK_BACK_QUOTE: 192, \n\t/** Open square bracket ([) key. */\n\tVK_OPEN_BRACKET: 219, \n\t/** Back slash (\\) key. */\n\tVK_BACK_SLASH: 220, \n\t/** Close square bracket (]) key. */\n\tVK_CLOSE_BRACKET: 221, \n\t/** Quote (''') key. */\n\tVK_QUOTE: 222, \n\t/** Meta key on Linux, Command key on Mac. */\n\tVK_META: 224, \n\t/** AltGr key on Linux. Requires Gecko 15.0 */\n\tVK_ALTGR: 225, \n\t/** Windows logo key on Windows. Or Super or Hyper key on Linux. Requires Gecko 15.0 */\n\tVK_WIN: 91, \n\t/** Linux support for this keycode was added in Gecko 4.0. */\n\tVK_KANA: 21, \n\t/** Linux support for this keycode was added in Gecko 4.0. */\n\tVK_HANGUL: 21, \n\t/** 英数 key on Japanese Mac keyboard. Requires Gecko 15.0 */\n\tVK_EISU: 22, \n\t/** Linux support for this keycode was added in Gecko 4.0. */\n\tVK_JUNJA: 23, \n\t/** Linux support for this keycode was added in Gecko 4.0. */\n\tVK_FINAL: 24, \n\t/** Linux support for this keycode was added in Gecko 4.0. */\n\tVK_HANJA: 25, \n\t/** Linux support for this keycode was added in Gecko 4.0. */\n\tVK_KANJI: 25, \n\t/** Linux support for this keycode was added in Gecko 4.0. */\n\tVK_CONVERT: 28, \n\t/** Linux support for this keycode was added in Gecko 4.0. */\n\tVK_NONCONVERT: 29, \n\t/** Linux support for this keycode was added in Gecko 4.0. */\n\tVK_ACCEPT: 30, \n\t/** Linux support for this keycode was added in Gecko 4.0. */\n\tVK_MODECHANGE: 31, \n\t/** Linux support for this keycode was added in Gecko 4.0. */\n\tVK_SELECT: 41, \n\t/** Linux support for this keycode was added in Gecko 4.0. */\n\tVK_PRINT: 42, \n\t/** Linux support for this keycode was added in Gecko 4.0. */\n\tVK_EXECUTE: 43, \n\t/** Linux support for this keycode was added in Gecko 4.0.\t */\n\tVK_SLEEP: 95 \n};\n/**\n * @namespace\n * Contains text tokenization and breaking routines\n */\nROT.Text = {\n\tRE_COLORS: /%([bc]){([^}]*)}/g,\n\n\t/* token types */\n\tTYPE_TEXT:\t\t0,\n\tTYPE_NEWLINE:\t1,\n\tTYPE_FG:\t\t2,\n\tTYPE_BG:\t\t3,\n\n\t/**\n\t * Measure size of a resulting text block\n\t */\n\tmeasure: function(str, maxWidth) {\n\t\tvar result = {width:0, height:1};\n\t\tvar tokens = this.tokenize(str, maxWidth);\n\t\tvar lineWidth = 0;\n\n\t\tfor (var i=0;i<tokens.length;i++) {\n\t\t\tvar token = tokens[i];\n\t\t\tswitch (token.type) {\n\t\t\t\tcase this.TYPE_TEXT:\n\t\t\t\t\tlineWidth += token.value.length;\n\t\t\t\tbreak;\n\n\t\t\t\tcase this.TYPE_NEWLINE:\n\t\t\t\t\tresult.height++;\n\t\t\t\t\tresult.width = Math.max(result.width, lineWidth);\n\t\t\t\t\tlineWidth = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tresult.width = Math.max(result.width, lineWidth);\n\n\t\treturn result;\n\t},\n\n\t/**\n\t * Convert string to a series of a formatting commands\n\t */\n\ttokenize: function(str, maxWidth) {\n\t\tvar result = [];\n\n\t\t/* first tokenization pass - split texts and color formatting commands */\n\t\tvar offset = 0;\n\t\tstr.replace(this.RE_COLORS, function(match, type, name, index) {\n\t\t\t/* string before */\n\t\t\tvar part = str.substring(offset, index);\n\t\t\tif (part.length) {\n\t\t\t\tresult.push({\n\t\t\t\t\ttype: ROT.Text.TYPE_TEXT,\n\t\t\t\t\tvalue: part\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t/* color command */\n\t\t\tresult.push({\n\t\t\t\ttype: (type == \"c\" ? ROT.Text.TYPE_FG : ROT.Text.TYPE_BG),\n\t\t\t\tvalue: name.trim()\n\t\t\t});\n\n\t\t\toffset = index + match.length;\n\t\t\treturn \"\";\n\t\t});\n\n\t\t/* last remaining part */\n\t\tvar part = str.substring(offset);\n\t\tif (part.length) {\n\t\t\tresult.push({\n\t\t\t\ttype: ROT.Text.TYPE_TEXT,\n\t\t\t\tvalue: part\n\t\t\t});\n\t\t}\n\n\t\treturn this._breakLines(result, maxWidth);\n\t},\n\n\t/* insert line breaks into first-pass tokenized data */\n\t_breakLines: function(tokens, maxWidth) {\n\t\tif (!maxWidth) { maxWidth = Infinity; }\n\n\t\tvar i = 0;\n\t\tvar lineLength = 0;\n\t\tvar lastTokenWithSpace = -1;\n\n\t\twhile (i < tokens.length) { /* take all text tokens, remove space, apply linebreaks */\n\t\t\tvar token = tokens[i];\n\t\t\tif (token.type == ROT.Text.TYPE_NEWLINE) { /* reset */\n\t\t\t\tlineLength = 0; \n\t\t\t\tlastTokenWithSpace = -1;\n\t\t\t}\n\t\t\tif (token.type != ROT.Text.TYPE_TEXT) { /* skip non-text tokens */\n\t\t\t\ti++;\n\t\t\t\tcontinue; \n\t\t\t}\n\n\t\t\t/* remove spaces at the beginning of line */\n\t\t\twhile (lineLength == 0 && token.value.charAt(0) == \" \") { token.value = token.value.substring(1); }\n\n\t\t\t/* forced newline? insert two new tokens after this one */\n\t\t\tvar index = token.value.indexOf(\"\\n\");\n\t\t\tif (index != -1) { \n\t\t\t\ttoken.value = this._breakInsideToken(tokens, i, index, true); \n\n\t\t\t\t/* if there are spaces at the end, we must remove them (we do not want the line too long) */\n\t\t\t\tvar arr = token.value.split(\"\");\n\t\t\t\twhile (arr.length && arr[arr.length-1] == \" \") { arr.pop(); }\n\t\t\t\ttoken.value = arr.join(\"\");\n\t\t\t}\n\n\t\t\t/* token degenerated? */\n\t\t\tif (!token.value.length) {\n\t\t\t\ttokens.splice(i, 1);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (lineLength + token.value.length > maxWidth) { /* line too long, find a suitable breaking spot */\n\n\t\t\t\t/* is it possible to break within this token? */\n\t\t\t\tvar index = -1;\n\t\t\t\twhile (1) {\n\t\t\t\t\tvar nextIndex = token.value.indexOf(\" \", index+1);\n\t\t\t\t\tif (nextIndex == -1) { break; }\n\t\t\t\t\tif (lineLength + nextIndex > maxWidth) { break; }\n\t\t\t\t\tindex = nextIndex;\n\t\t\t\t}\n\n\t\t\t\tif (index != -1) { /* break at space within this one */\n\t\t\t\t\ttoken.value = this._breakInsideToken(tokens, i, index, true);\n\t\t\t\t} else if (lastTokenWithSpace != -1) { /* is there a previous token where a break can occur? */\n\t\t\t\t\tvar token = tokens[lastTokenWithSpace];\n\t\t\t\t\tvar breakIndex = token.value.lastIndexOf(\" \");\n\t\t\t\t\ttoken.value = this._breakInsideToken(tokens, lastTokenWithSpace, breakIndex, true);\n\t\t\t\t\ti = lastTokenWithSpace;\n\t\t\t\t} else { /* force break in this token */\n\t\t\t\t\ttoken.value = this._breakInsideToken(tokens, i, maxWidth-lineLength, false);\n\t\t\t\t}\n\n\t\t\t} else { /* line not long, continue */\n\t\t\t\tlineLength += token.value.length;\n\t\t\t\tif (token.value.indexOf(\" \") != -1) { lastTokenWithSpace = i; }\n\t\t\t}\n\t\t\t\n\t\t\ti++; /* advance to next token */\n\t\t}\n\n\n\t\ttokens.push({type: ROT.Text.TYPE_NEWLINE}); /* insert fake newline to fix the last text line */\n\n\t\t/* remove trailing space from text tokens before newlines */\n\t\tvar lastTextToken = null;\n\t\tfor (var i=0;i<tokens.length;i++) {\n\t\t\tvar token = tokens[i];\n\t\t\tswitch (token.type) {\n\t\t\t\tcase ROT.Text.TYPE_TEXT: lastTextToken = token; break;\n\t\t\t\tcase ROT.Text.TYPE_NEWLINE: \n\t\t\t\t\tif (lastTextToken) { /* remove trailing space */\n\t\t\t\t\t\tvar arr = lastTextToken.value.split(\"\");\n\t\t\t\t\t\twhile (arr.length && arr[arr.length-1] == \" \") { arr.pop(); }\n\t\t\t\t\t\tlastTextToken.value = arr.join(\"\");\n\t\t\t\t\t}\n\t\t\t\t\tlastTextToken = null;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\ttokens.pop(); /* remove fake token */\n\n\t\treturn tokens;\n\t},\n\n\t/**\n\t * Create new tokens and insert them into the stream\n\t * @param {object[]} tokens\n\t * @param {int} tokenIndex Token being processed\n\t * @param {int} breakIndex Index within current token's value\n\t * @param {bool} removeBreakChar Do we want to remove the breaking character?\n\t * @returns {string} remaining unbroken token value\n\t */\n\t_breakInsideToken: function(tokens, tokenIndex, breakIndex, removeBreakChar) {\n\t\tvar newBreakToken = {\n\t\t\ttype: ROT.Text.TYPE_NEWLINE\n\t\t};\n\t\tvar newTextToken = {\n\t\t\ttype: ROT.Text.TYPE_TEXT,\n\t\t\tvalue: tokens[tokenIndex].value.substring(breakIndex + (removeBreakChar ? 1 : 0))\n\t\t};\n\t\ttokens.splice(tokenIndex+1, 0, newBreakToken, newTextToken);\n\t\treturn tokens[tokenIndex].value.substring(0, breakIndex);\n\t}\n};\n/**\n * @returns {any} Randomly picked item, null when length=0\n */\nArray.prototype.random = Array.prototype.random || function() {\n\tif (!this.length) { return null; }\n\treturn this[Math.floor(ROT.RNG.getUniform() * this.length)];\n};\n\n/**\n * @returns {array} New array with randomized items\n */\nArray.prototype.randomize = Array.prototype.randomize || function() {\n  var result = [];\n  var clone = this.slice();\n  while (clone.length) {\n    var index = clone.indexOf(clone.random());\n    result.push(clone.splice(index, 1)[0]);\n  }\n  return result;\n};\n/**\n * Always positive modulus\n * @param {int} n Modulus\n * @returns {int} this modulo n\n */\nNumber.prototype.mod = Number.prototype.mod || function(n) {\n\treturn ((this%n)+n)%n;\n};\n/**\n * @returns {string} First letter capitalized\n */\nString.prototype.capitalize = String.prototype.capitalize || function() {\n\treturn this.charAt(0).toUpperCase() + this.substring(1);\n};\n\n/** \n * Left pad\n * @param {string} [character=\"0\"]\n * @param {int} [count=2]\n */\nString.prototype.lpad = String.prototype.lpad || function(character, count) {\n\tvar ch = character || \"0\";\n\tvar cnt = count || 2;\n\n\tvar s = \"\";\n\twhile (s.length < (cnt - this.length)) { s += ch; }\n\ts = s.substring(0, cnt-this.length);\n\treturn s+this;\n};\n\n/** \n * Right pad\n * @param {string} [character=\"0\"]\n * @param {int} [count=2]\n */\nString.prototype.rpad = String.prototype.rpad || function(character, count) {\n\tvar ch = character || \"0\";\n\tvar cnt = count || 2;\n\n\tvar s = \"\";\n\twhile (s.length < (cnt - this.length)) { s += ch; }\n\ts = s.substring(0, cnt-this.length);\n\treturn this+s;\n};\n\n/**\n * Format a string in a flexible way. Scans for %s strings and replaces them with arguments. List of patterns is modifiable via String.format.map.\n * @param {string} template\n * @param {any} [argv]\n */\nString.format = String.format || function(template) {\n\tvar map = String.format.map;\n\tvar args = Array.prototype.slice.call(arguments, 1);\n\n\tvar replacer = function(match, group1, group2, index) {\n\t\tif (template.charAt(index-1) == \"%\") { return match.substring(1); }\n\t\tif (!args.length) { return match; }\n\t\tvar obj = args[0];\n\n\t\tvar group = group1 || group2;\n\t\tvar parts = group.split(\",\");\n\t\tvar name = parts.shift();\n\t\tvar method = map[name.toLowerCase()];\n\t\tif (!method) { return match; }\n\n\t\tvar obj = args.shift();\n\t\tvar replaced = obj[method].apply(obj, parts);\n\n\t\tvar first = name.charAt(0);\n\t\tif (first != first.toLowerCase()) { replaced = replaced.capitalize(); }\n\n\t\treturn replaced;\n\t};\n\treturn template.replace(/%(?:([a-z]+)|(?:{([^}]+)}))/gi, replacer);\n};\n\nString.format.map = String.format.map || {\n\t\"s\": \"toString\"\n};\n\n/**\n * Convenience shortcut to String.format(this)\n */\nString.prototype.format = String.prototype.format || function() {\n\tvar args = Array.prototype.slice.call(arguments);\n\targs.unshift(this);\n\treturn String.format.apply(String, args);\n};\n\nif (!Object.create) {  \n\t/**\n\t * ES5 Object.create\n\t */\n\tObject.create = function(o) {  \n\t\tvar tmp = function() {};\n\t\ttmp.prototype = o;\n\t\treturn new tmp();\n\t};  \n}  \n/**\n * Sets prototype of this function to an instance of parent function\n * @param {function} parent\n */\nFunction.prototype.extend = Function.prototype.extend || function(parent) {\n\tthis.prototype = Object.create(parent.prototype);\n\tthis.prototype.constructor = this;\n\treturn this;\n};\nif (typeof window != \"undefined\") {\n\twindow.requestAnimationFrame =\n\t\twindow.requestAnimationFrame\n\t\t|| window.mozRequestAnimationFrame\n\t\t|| window.webkitRequestAnimationFrame\n\t\t|| window.oRequestAnimationFrame\n\t\t|| window.msRequestAnimationFrame\n\t\t|| function(cb) { return setTimeout(function() { cb(Date.now()); }, 1000/60); };\n\n\twindow.cancelAnimationFrame =\n\t\twindow.cancelAnimationFrame\n\t\t|| window.mozCancelAnimationFrame\n\t\t|| window.webkitCancelAnimationFrame\n\t\t|| window.oCancelAnimationFrame\n\t\t|| window.msCancelAnimationFrame\n\t\t|| function(id) { return clearTimeout(id); };\n}\n/**\n * @class Visual map display\n * @param {object} [options]\n * @param {int} [options.width=ROT.DEFAULT_WIDTH]\n * @param {int} [options.height=ROT.DEFAULT_HEIGHT]\n * @param {int} [options.fontSize=15]\n * @param {string} [options.fontFamily=\"monospace\"]\n * @param {string} [options.fontStyle=\"\"] bold/italic/none/both\n * @param {string} [options.fg=\"#ccc\"]\n * @param {string} [options.bg=\"#000\"]\n * @param {float} [options.spacing=1]\n * @param {float} [options.border=0]\n * @param {string} [options.layout=\"rect\"]\n * @param {bool} [options.forceSquareRatio=false]\n * @param {int} [options.tileWidth=32]\n * @param {int} [options.tileHeight=32]\n * @param {object} [options.tileMap={}]\n * @param {image} [options.tileSet=null]\n * @param {image} [options.tileColorize=false]\n */\nROT.Display = function(options) {\n\tvar canvas = document.createElement(\"canvas\");\n\tthis._context = canvas.getContext(\"2d\");\n\tthis._data = {};\n\tthis._dirty = false; /* false = nothing, true = all, object = dirty cells */\n\tthis._options = {};\n\tthis._backend = null;\n\t\n\tvar defaultOptions = {\n\t\twidth: ROT.DEFAULT_WIDTH,\n\t\theight: ROT.DEFAULT_HEIGHT,\n\t\ttranspose: false,\n\t\tlayout: \"rect\",\n\t\tfontSize: 15,\n\t\tspacing: 1,\n\t\tborder: 0,\n\t\tforceSquareRatio: false,\n\t\tfontFamily: \"monospace\",\n\t\tfontStyle: \"\",\n\t\tfg: \"#ccc\",\n\t\tbg: \"#000\",\n\t\ttileWidth: 32,\n\t\ttileHeight: 32,\n\t\ttileMap: {},\n\t\ttileSet: null,\n\t\ttileColorize: false,\n\t\ttermColor: \"xterm\"\n\t};\n\tfor (var p in options) { defaultOptions[p] = options[p]; }\n\tthis.setOptions(defaultOptions);\n\tthis.DEBUG = this.DEBUG.bind(this);\n\n\tthis._tick = this._tick.bind(this);\n\trequestAnimationFrame(this._tick);\n};\n\n/**\n * Debug helper, ideal as a map generator callback. Always bound to this.\n * @param {int} x\n * @param {int} y\n * @param {int} what\n */\nROT.Display.prototype.DEBUG = function(x, y, what) {\n\tvar colors = [this._options.bg, this._options.fg];\n\tthis.draw(x, y, null, null, colors[what % colors.length]);\n};\n\n/**\n * Clear the whole display (cover it with background color)\n */\nROT.Display.prototype.clear = function() {\n\tthis._data = {};\n\tthis._dirty = true;\n};\n\n/**\n * @see ROT.Display\n */\nROT.Display.prototype.setOptions = function(options) {\n\tfor (var p in options) { this._options[p] = options[p]; }\n\tif (options.width || options.height || options.fontSize || options.fontFamily || options.spacing || options.layout) {\n\t\tif (options.layout) { \n\t\t\tthis._backend = new ROT.Display[options.layout.capitalize()](this._context);\n\t\t}\n\n\t\tvar font = (this._options.fontStyle ? this._options.fontStyle + \" \" : \"\") + this._options.fontSize + \"px \" + this._options.fontFamily;\n\t\tthis._context.font = font;\n\t\tthis._backend.compute(this._options);\n\t\tthis._context.font = font;\n\t\tthis._context.textAlign = \"center\";\n\t\tthis._context.textBaseline = \"middle\";\n\t\tthis._dirty = true;\n\t}\n\treturn this;\n};\n\n/**\n * Returns currently set options\n * @returns {object} Current options object \n */\nROT.Display.prototype.getOptions = function() {\n\treturn this._options;\n};\n\n/**\n * Returns the DOM node of this display\n * @returns {node} DOM node\n */\nROT.Display.prototype.getContainer = function() {\n\treturn this._context.canvas;\n};\n\n/**\n * Compute the maximum width/height to fit into a set of given constraints\n * @param {int} availWidth Maximum allowed pixel width\n * @param {int} availHeight Maximum allowed pixel height\n * @returns {int[2]} cellWidth,cellHeight\n */\nROT.Display.prototype.computeSize = function(availWidth, availHeight) {\n\treturn this._backend.computeSize(availWidth, availHeight, this._options);\n};\n\n/**\n * Compute the maximum font size to fit into a set of given constraints\n * @param {int} availWidth Maximum allowed pixel width\n * @param {int} availHeight Maximum allowed pixel height\n * @returns {int} fontSize\n */\nROT.Display.prototype.computeFontSize = function(availWidth, availHeight) {\n\treturn this._backend.computeFontSize(availWidth, availHeight, this._options);\n};\n\n/**\n * Convert a DOM event (mouse or touch) to map coordinates. Uses first touch for multi-touch.\n * @param {Event} e event\n * @returns {int[2]} -1 for values outside of the canvas\n */\nROT.Display.prototype.eventToPosition = function(e) {\n\tif (e.touches) {\n\t\tvar x = e.touches[0].clientX;\n\t\tvar y = e.touches[0].clientY;\n\t} else {\n\t\tvar x = e.clientX;\n\t\tvar y = e.clientY;\n\t}\n\n\tvar rect = this._context.canvas.getBoundingClientRect();\n\tx -= rect.left;\n\ty -= rect.top;\n\t\n\tx *= this._context.canvas.width / this._context.canvas.clientWidth;\n\ty *= this._context.canvas.height / this._context.canvas.clientHeight;\n\n\tif (x < 0 || y < 0 || x >= this._context.canvas.width || y >= this._context.canvas.height) { return [-1, -1]; }\n\n\treturn this._backend.eventToPosition(x, y);\n};\n\n/**\n * @param {int} x\n * @param {int} y\n * @param {string || string[]} ch One or more chars (will be overlapping themselves)\n * @param {string} [fg] foreground color\n * @param {string} [bg] background color\n */\nROT.Display.prototype.draw = function(x, y, ch, fg, bg) {\n\tif (!fg) { fg = this._options.fg; }\n\tif (!bg) { bg = this._options.bg; }\n\tthis._data[x+\",\"+y] = [x, y, ch, fg, bg];\n\t\n\tif (this._dirty === true) { return; } /* will already redraw everything */\n\tif (!this._dirty) { this._dirty = {}; } /* first! */\n\tthis._dirty[x+\",\"+y] = true;\n};\n\n/**\n * Draws a text at given position. Optionally wraps at a maximum length. Currently does not work with hex layout.\n * @param {int} x\n * @param {int} y\n * @param {string} text May contain color/background format specifiers, %c{name}/%b{name}, both optional. %c{}/%b{} resets to default.\n * @param {int} [maxWidth] wrap at what width?\n * @returns {int} lines drawn\n */\nROT.Display.prototype.drawText = function(x, y, text, maxWidth) {\n\tvar fg = null;\n\tvar bg = null;\n\tvar cx = x;\n\tvar cy = y;\n\tvar lines = 1;\n\tif (!maxWidth) { maxWidth = this._options.width-x; }\n\n\tvar tokens = ROT.Text.tokenize(text, maxWidth);\n\n\twhile (tokens.length) { /* interpret tokenized opcode stream */\n\t\tvar token = tokens.shift();\n\t\tswitch (token.type) {\n\t\t\tcase ROT.Text.TYPE_TEXT:\n\t\t\t\tvar isSpace = false, isPrevSpace = false, isFullWidth = false, isPrevFullWidth = false;\n\t\t\t\tfor (var i=0;i<token.value.length;i++) {\n\t\t\t\t\tvar cc = token.value.charCodeAt(i);\n\t\t\t\t\tvar c = token.value.charAt(i);\n\t\t\t\t\t// Assign to `true` when the current char is full-width.\n\t\t\t\t\tisFullWidth = (cc > 0xff00 && cc < 0xff61) || (cc > 0xffdc && cc < 0xffe8) || cc > 0xffee;\n\t\t\t\t\t// Current char is space, whatever full-width or half-width both are OK.\n\t\t\t\t\tisSpace = (c.charCodeAt(0) == 0x20 || c.charCodeAt(0) == 0x3000);\n\t\t\t\t\t// The previous char is full-width and\n\t\t\t\t\t// current char is nether half-width nor a space.\n\t\t\t\t\tif (isPrevFullWidth && !isFullWidth && !isSpace) { cx++; } // add an extra position\n\t\t\t\t\t// The current char is full-width and\n\t\t\t\t\t// the previous char is not a space.\n\t\t\t\t\tif(isFullWidth && !isPrevSpace) { cx++; } // add an extra position\n\t\t\t\t\tthis.draw(cx++, cy, c, fg, bg);\n\t\t\t\t\tisPrevSpace = isSpace;\n\t\t\t\t\tisPrevFullWidth = isFullWidth;\n\t\t\t\t}\n\t\t\tbreak;\n\n\t\t\tcase ROT.Text.TYPE_FG:\n\t\t\t\tfg = token.value || null;\n\t\t\tbreak;\n\n\t\t\tcase ROT.Text.TYPE_BG:\n\t\t\t\tbg = token.value || null;\n\t\t\tbreak;\n\n\t\t\tcase ROT.Text.TYPE_NEWLINE:\n\t\t\t\tcx = x;\n\t\t\t\tcy++;\n\t\t\t\tlines++;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn lines;\n};\n\n/**\n * Timer tick: update dirty parts\n */\nROT.Display.prototype._tick = function() {\n\trequestAnimationFrame(this._tick);\n\n\tif (!this._dirty) { return; }\n\n\tif (this._dirty === true) { /* draw all */\n\t\tthis._context.fillStyle = this._options.bg;\n\t\tthis._context.fillRect(0, 0, this._context.canvas.width, this._context.canvas.height);\n\n\t\tfor (var id in this._data) { /* redraw cached data */\n\t\t\tthis._draw(id, false);\n\t\t}\n\n\t} else { /* draw only dirty */\n\t\tfor (var key in this._dirty) {\n\t\t\tthis._draw(key, true);\n\t\t}\n\t}\n\n\tthis._dirty = false;\n};\n\n/**\n * @param {string} key What to draw\n * @param {bool} clearBefore Is it necessary to clean before?\n */\nROT.Display.prototype._draw = function(key, clearBefore) {\n\tvar data = this._data[key];\n\tif (data[4] != this._options.bg) { clearBefore = true; }\n\n\tthis._backend.draw(data, clearBefore);\n};\n/**\n * @class Abstract display backend module\n * @private\n */\nROT.Display.Backend = function(context) {\n\tthis._context = context;\n};\n\nROT.Display.Backend.prototype.compute = function(options) {\n};\n\nROT.Display.Backend.prototype.draw = function(data, clearBefore) {\n};\n\nROT.Display.Backend.prototype.computeSize = function(availWidth, availHeight) {\n};\n\nROT.Display.Backend.prototype.computeFontSize = function(availWidth, availHeight) {\n};\n\nROT.Display.Backend.prototype.eventToPosition = function(x, y) {\n};\n/**\n * @class Rectangular backend\n * @private\n */\nROT.Display.Rect = function(context) {\n\tROT.Display.Backend.call(this, context);\n\t\n\tthis._spacingX = 0;\n\tthis._spacingY = 0;\n\tthis._canvasCache = {};\n\tthis._options = {};\n};\nROT.Display.Rect.extend(ROT.Display.Backend);\n\nROT.Display.Rect.cache = false;\n\nROT.Display.Rect.prototype.compute = function(options) {\n\tthis._canvasCache = {};\n\tthis._options = options;\n\n\tvar charWidth = Math.ceil(this._context.measureText(\"W\").width);\n\tthis._spacingX = Math.ceil(options.spacing * charWidth);\n\tthis._spacingY = Math.ceil(options.spacing * options.fontSize);\n\n\tif (this._options.forceSquareRatio) {\n\t\tthis._spacingX = this._spacingY = Math.max(this._spacingX, this._spacingY);\n\t}\n\n\tthis._context.canvas.width = options.width * this._spacingX;\n\tthis._context.canvas.height = options.height * this._spacingY;\n};\n\nROT.Display.Rect.prototype.draw = function(data, clearBefore) {\n\tif (this.constructor.cache) {\n\t\tthis._drawWithCache(data, clearBefore);\n\t} else {\n\t\tthis._drawNoCache(data, clearBefore);\n\t}\n};\n\nROT.Display.Rect.prototype._drawWithCache = function(data, clearBefore) {\n\tvar x = data[0];\n\tvar y = data[1];\n\tvar ch = data[2];\n\tvar fg = data[3];\n\tvar bg = data[4];\n\n\tvar hash = \"\"+ch+fg+bg;\n\tif (hash in this._canvasCache) {\n\t\tvar canvas = this._canvasCache[hash];\n\t} else {\n\t\tvar b = this._options.border;\n\t\tvar canvas = document.createElement(\"canvas\");\n\t\tvar ctx = canvas.getContext(\"2d\");\n\t\tcanvas.width = this._spacingX;\n\t\tcanvas.height = this._spacingY;\n\t\tctx.fillStyle = bg;\n\t\tctx.fillRect(b, b, canvas.width-b, canvas.height-b);\n\t\t\n\t\tif (ch) {\n\t\t\tctx.fillStyle = fg;\n\t\t\tctx.font = this._context.font;\n\t\t\tctx.textAlign = \"center\";\n\t\t\tctx.textBaseline = \"middle\";\n\n\t\t\tvar chars = [].concat(ch);\n\t\t\tfor (var i=0;i<chars.length;i++) {\n\t\t\t\tctx.fillText(chars[i], this._spacingX/2, Math.ceil(this._spacingY/2));\n\t\t\t}\n\t\t}\n\t\tthis._canvasCache[hash] = canvas;\n\t}\n\t\n\tthis._context.drawImage(canvas, x*this._spacingX, y*this._spacingY);\n};\n\nROT.Display.Rect.prototype._drawNoCache = function(data, clearBefore) {\n\tvar x = data[0];\n\tvar y = data[1];\n\tvar ch = data[2];\n\tvar fg = data[3];\n\tvar bg = data[4];\n\n\tif (clearBefore) { \n\t\tvar b = this._options.border;\n\t\tthis._context.fillStyle = bg;\n\t\tthis._context.fillRect(x*this._spacingX + b, y*this._spacingY + b, this._spacingX - b, this._spacingY - b);\n\t}\n\t\n\tif (!ch) { return; }\n\n\tthis._context.fillStyle = fg;\n\n\tvar chars = [].concat(ch);\n\tfor (var i=0;i<chars.length;i++) {\n\t\tthis._context.fillText(chars[i], (x+0.5) * this._spacingX, Math.ceil((y+0.5) * this._spacingY));\n\t}\n};\n\nROT.Display.Rect.prototype.computeSize = function(availWidth, availHeight) {\n\tvar width = Math.floor(availWidth / this._spacingX);\n\tvar height = Math.floor(availHeight / this._spacingY);\n\treturn [width, height];\n};\n\nROT.Display.Rect.prototype.computeFontSize = function(availWidth, availHeight) {\n\tvar boxWidth = Math.floor(availWidth / this._options.width);\n\tvar boxHeight = Math.floor(availHeight / this._options.height);\n\n\t/* compute char ratio */\n\tvar oldFont = this._context.font;\n\tthis._context.font = \"100px \" + this._options.fontFamily;\n\tvar width = Math.ceil(this._context.measureText(\"W\").width);\n\tthis._context.font = oldFont;\n\tvar ratio = width / 100;\n\t\t\n\tvar widthFraction = ratio * boxHeight / boxWidth;\n\tif (widthFraction > 1) { /* too wide with current aspect ratio */\n\t\tboxHeight = Math.floor(boxHeight / widthFraction);\n\t}\n\treturn Math.floor(boxHeight / this._options.spacing);\n};\n\nROT.Display.Rect.prototype.eventToPosition = function(x, y) {\n\treturn [Math.floor(x/this._spacingX), Math.floor(y/this._spacingY)];\n};\n/**\n * @class Hexagonal backend\n * @private\n */\nROT.Display.Hex = function(context) {\n\tROT.Display.Backend.call(this, context);\n\n\tthis._spacingX = 0;\n\tthis._spacingY = 0;\n\tthis._hexSize = 0;\n\tthis._options = {};\n};\nROT.Display.Hex.extend(ROT.Display.Backend);\n\nROT.Display.Hex.prototype.compute = function(options) {\n\tthis._options = options;\n\n\t/* FIXME char size computation does not respect transposed hexes */\n\tvar charWidth = Math.ceil(this._context.measureText(\"W\").width);\n\tthis._hexSize = Math.floor(options.spacing * (options.fontSize + charWidth/Math.sqrt(3)) / 2);\n\tthis._spacingX = this._hexSize * Math.sqrt(3) / 2;\n\tthis._spacingY = this._hexSize * 1.5;\n\n\tif (options.transpose) {\n\t\tvar xprop = \"height\";\n\t\tvar yprop = \"width\";\n\t} else {\n\t\tvar xprop = \"width\";\n\t\tvar yprop = \"height\";\n\t}\n\tthis._context.canvas[xprop] = Math.ceil( (options.width + 1) * this._spacingX );\n\tthis._context.canvas[yprop] = Math.ceil( (options.height - 1) * this._spacingY + 2*this._hexSize );\n};\n\nROT.Display.Hex.prototype.draw = function(data, clearBefore) {\n\tvar x = data[0];\n\tvar y = data[1];\n\tvar ch = data[2];\n\tvar fg = data[3];\n\tvar bg = data[4];\n\n\tvar px = [\n\t\t(x+1) * this._spacingX,\n\t\ty * this._spacingY + this._hexSize\n\t];\n\tif (this._options.transpose) { px.reverse(); }\n\n\tif (clearBefore) {\n\t\tthis._context.fillStyle = bg;\n\t\tthis._fill(px[0], px[1]);\n\t}\n\n\tif (!ch) { return; }\n\n\tthis._context.fillStyle = fg;\n\n\tvar chars = [].concat(ch);\n\tfor (var i=0;i<chars.length;i++) {\n\t\tthis._context.fillText(chars[i], px[0], Math.ceil(px[1]));\n\t}\n};\n\nROT.Display.Hex.prototype.computeSize = function(availWidth, availHeight) {\n\tif (this._options.transpose) {\n\t\tavailWidth += availHeight;\n\t\tavailHeight = availWidth - availHeight;\n\t\tavailWidth -= availHeight;\n\t}\n\n\tvar width = Math.floor(availWidth / this._spacingX) - 1;\n\tvar height = Math.floor((availHeight - 2*this._hexSize) / this._spacingY + 1);\n\treturn [width, height];\n};\n\nROT.Display.Hex.prototype.computeFontSize = function(availWidth, availHeight) {\n\tif (this._options.transpose) {\n\t\tavailWidth += availHeight;\n\t\tavailHeight = availWidth - availHeight;\n\t\tavailWidth -= availHeight;\n\t}\n\n\tvar hexSizeWidth = 2*availWidth / ((this._options.width+1) * Math.sqrt(3)) - 1;\n\tvar hexSizeHeight = availHeight / (2 + 1.5*(this._options.height-1));\n\tvar hexSize = Math.min(hexSizeWidth, hexSizeHeight);\n\n\t/* compute char ratio */\n\tvar oldFont = this._context.font;\n\tthis._context.font = \"100px \" + this._options.fontFamily;\n\tvar width = Math.ceil(this._context.measureText(\"W\").width);\n\tthis._context.font = oldFont;\n\tvar ratio = width / 100;\n\n\thexSize = Math.floor(hexSize)+1; /* closest larger hexSize */\n\n\t/* FIXME char size computation does not respect transposed hexes */\n\tvar fontSize = 2*hexSize / (this._options.spacing * (1 + ratio / Math.sqrt(3)));\n\n\t/* closest smaller fontSize */\n\treturn Math.ceil(fontSize)-1;\n};\n\nROT.Display.Hex.prototype.eventToPosition = function(x, y) {\n\tif (this._options.transpose) {\n\t\tx += y;\n\t\ty = x-y;\n\t\tx -= y;\n\t\tvar nodeSize = this._context.canvas.width;\n\t} else {\n\t\tvar nodeSize = this._context.canvas.height;\n\t}\n\tvar size = nodeSize / this._options.height;\n\ty = Math.floor(y/size);\n\n\tif (y.mod(2)) { /* odd row */\n\t\tx -= this._spacingX;\n\t\tx = 1 + 2*Math.floor(x/(2*this._spacingX));\n\t} else {\n\t\tx = 2*Math.floor(x/(2*this._spacingX));\n\t}\n\n\treturn [x, y];\n};\n\n/**\n * Arguments are pixel values. If \"transposed\" mode is enabled, then these two are already swapped.\n */\nROT.Display.Hex.prototype._fill = function(cx, cy) {\n\tvar a = this._hexSize;\n\tvar b = this._options.border;\n\n\tthis._context.beginPath();\n\n\tif (this._options.transpose) {\n\t\tthis._context.moveTo(cx-a+b,\tcy);\n\t\tthis._context.lineTo(cx-a/2+b,\tcy+this._spacingX-b);\n\t\tthis._context.lineTo(cx+a/2-b,\tcy+this._spacingX-b);\n\t\tthis._context.lineTo(cx+a-b,\tcy);\n\t\tthis._context.lineTo(cx+a/2-b,\tcy-this._spacingX+b);\n\t\tthis._context.lineTo(cx-a/2+b,\tcy-this._spacingX+b);\n\t\tthis._context.lineTo(cx-a+b,\tcy);\n\t} else {\n\t\tthis._context.moveTo(cx,\t\t\t\t\tcy-a+b);\n\t\tthis._context.lineTo(cx+this._spacingX-b,\tcy-a/2+b);\n\t\tthis._context.lineTo(cx+this._spacingX-b,\tcy+a/2-b);\n\t\tthis._context.lineTo(cx,\t\t\t\t\tcy+a-b);\n\t\tthis._context.lineTo(cx-this._spacingX+b,\tcy+a/2-b);\n\t\tthis._context.lineTo(cx-this._spacingX+b,\tcy-a/2+b);\n\t\tthis._context.lineTo(cx,\t\t\t\t\tcy-a+b);\n\t}\n\tthis._context.fill();\n};\n/**\n * @class Tile backend\n * @private\n */\nROT.Display.Tile = function(context) {\n\tROT.Display.Rect.call(this, context);\n\t\n\tthis._options = {};\n\tthis._colorCanvas = document.createElement(\"canvas\");\n};\nROT.Display.Tile.extend(ROT.Display.Rect);\n\nROT.Display.Tile.prototype.compute = function(options) {\n\tthis._options = options;\n\tthis._context.canvas.width = options.width * options.tileWidth;\n\tthis._context.canvas.height = options.height * options.tileHeight;\n\tthis._colorCanvas.width = options.tileWidth;\n\tthis._colorCanvas.height = options.tileHeight;\n};\n\nROT.Display.Tile.prototype.draw = function(data, clearBefore) {\n\tvar x = data[0];\n\tvar y = data[1];\n\tvar ch = data[2];\n\tvar fg = data[3];\n\tvar bg = data[4];\n\n\tvar tileWidth = this._options.tileWidth;\n\tvar tileHeight = this._options.tileHeight;\n\n\tif (clearBefore) {\n\t\tif (this._options.tileColorize) {\n\t\t\tthis._context.clearRect(x*tileWidth, y*tileHeight, tileWidth, tileHeight);\n\t\t} else {\n\t\t\tthis._context.fillStyle = bg;\n\t\t\tthis._context.fillRect(x*tileWidth, y*tileHeight, tileWidth, tileHeight);\n\t\t}\n\t}\n\n\tif (!ch) { return; }\n\n\tvar chars = [].concat(ch);\n\tfor (var i=0;i<chars.length;i++) {\n\t\tvar tile = this._options.tileMap[chars[i]];\n\t\tif (!tile) { throw new Error(\"Char '\" + chars[i] + \"' not found in tileMap\"); }\n\t\t\n\t\tif (this._options.tileColorize) { /* apply colorization */\n\t\t\tvar canvas = this._colorCanvas;\n\t\t\tvar context = canvas.getContext(\"2d\");\n\t\t\tcontext.clearRect(0, 0, tileWidth, tileHeight);\n\n\t\t\tcontext.drawImage(\n\t\t\t\tthis._options.tileSet,\n\t\t\t\ttile[0], tile[1], tileWidth, tileHeight,\n\t\t\t\t0, 0, tileWidth, tileHeight\n\t\t\t);\n\n\t\t\tif (fg != \"transparent\") {\n\t\t\t\tcontext.fillStyle = fg;\n\t\t\t\tcontext.globalCompositeOperation = \"source-atop\";\n\t\t\t\tcontext.fillRect(0, 0, tileWidth, tileHeight);\n\t\t\t}\n\n\t\t\tif (bg != \"transparent\") {\n\t\t\t\tcontext.fillStyle = bg;\n\t\t\t\tcontext.globalCompositeOperation = \"destination-over\";\n\t\t\t\tcontext.fillRect(0, 0, tileWidth, tileHeight);\n\t\t\t}\n\n\t\t\tthis._context.drawImage(canvas, x*tileWidth, y*tileHeight, tileWidth, tileHeight);\n\n\t\t} else { /* no colorizing, easy */\n\t\t\tthis._context.drawImage(\n\t\t\t\tthis._options.tileSet,\n\t\t\t\ttile[0], tile[1], tileWidth, tileHeight,\n\t\t\t\tx*tileWidth, y*tileHeight, tileWidth, tileHeight\n\t\t\t);\n\t\t}\n\t}\n};\n\nROT.Display.Tile.prototype.computeSize = function(availWidth, availHeight) {\n\tvar width = Math.floor(availWidth / this._options.tileWidth);\n\tvar height = Math.floor(availHeight / this._options.tileHeight);\n\treturn [width, height];\n};\n\nROT.Display.Tile.prototype.computeFontSize = function(availWidth, availHeight) {\n\tvar width = Math.floor(availWidth / this._options.width);\n\tvar height = Math.floor(availHeight / this._options.height);\n\treturn [width, height];\n};\n\nROT.Display.Tile.prototype.eventToPosition = function(x, y) {\n\treturn [Math.floor(x/this._options.tileWidth), Math.floor(y/this._options.tileHeight)];\n};\n/**\n * @namespace\n * This code is an implementation of Alea algorithm; (C) 2010 Johannes Baagøe.\n * Alea is licensed according to the http://en.wikipedia.org/wiki/MIT_License.\n */\nROT.RNG = {\n\t/**\n\t * @returns {number} \n\t */\n\tgetSeed: function() {\n\t\treturn this._seed;\n\t},\n\n\t/**\n\t * @param {number} seed Seed the number generator\n\t */\n\tsetSeed: function(seed) {\n\t\tseed = (seed < 1 ? 1/seed : seed);\n\n\t\tthis._seed = seed;\n\t\tthis._s0 = (seed >>> 0) * this._frac;\n\n\t\tseed = (seed*69069 + 1) >>> 0;\n\t\tthis._s1 = seed * this._frac;\n\n\t\tseed = (seed*69069 + 1) >>> 0;\n\t\tthis._s2 = seed * this._frac;\n\n\t\tthis._c = 1;\n\t\treturn this;\n\t},\n\n\t/**\n\t * @returns {float} Pseudorandom value [0,1), uniformly distributed\n\t */\n\tgetUniform: function() {\n\t\tvar t = 2091639 * this._s0 + this._c * this._frac;\n\t\tthis._s0 = this._s1;\n\t\tthis._s1 = this._s2;\n\t\tthis._c = t | 0;\n\t\tthis._s2 = t - this._c;\n\t\treturn this._s2;\n\t},\n\n\t/**\n\t * @param {int} lowerBound The lower end of the range to return a value from, inclusive\n\t * @param {int} upperBound The upper end of the range to return a value from, inclusive\n\t * @returns {int} Pseudorandom value [lowerBound, upperBound], using ROT.RNG.getUniform() to distribute the value\n\t */\n\tgetUniformInt: function(lowerBound, upperBound) {\n\t\tvar max = Math.max(lowerBound, upperBound);\n\t\tvar min = Math.min(lowerBound, upperBound);\n\t\treturn Math.floor(this.getUniform() * (max - min + 1)) + min;\n\t},\n\n\t/**\n\t * @param {float} [mean=0] Mean value\n\t * @param {float} [stddev=1] Standard deviation. ~95% of the absolute values will be lower than 2*stddev.\n\t * @returns {float} A normally distributed pseudorandom value\n\t */\n\tgetNormal: function(mean, stddev) {\n\t\tdo {\n\t\t\tvar u = 2*this.getUniform()-1;\n\t\t\tvar v = 2*this.getUniform()-1;\n\t\t\tvar r = u*u + v*v;\n\t\t} while (r > 1 || r == 0);\n\n\t\tvar gauss = u * Math.sqrt(-2*Math.log(r)/r);\n\t\treturn (mean || 0) + gauss*(stddev || 1);\n\t},\n\n\t/**\n\t * @returns {int} Pseudorandom value [1,100] inclusive, uniformly distributed\n\t */\n\tgetPercentage: function() {\n\t\treturn 1 + Math.floor(this.getUniform()*100);\n\t},\n\t\n\t/**\n\t * @param {object} data key=whatever, value=weight (relative probability)\n\t * @returns {string} whatever\n\t */\n\tgetWeightedValue: function(data) {\n\t\tvar total = 0;\n\t\t\n\t\tfor (var id in data) {\n\t\t\ttotal += data[id];\n\t\t}\n\t\tvar random = this.getUniform()*total;\n\t\t\n\t\tvar part = 0;\n\t\tfor (var id in data) {\n\t\t\tpart += data[id];\n\t\t\tif (random < part) { return id; }\n\t\t}\n\n\t\t// If by some floating-point annoyance we have\n\t\t// random >= total, just return the last id.\n\t\treturn id;\n\t},\n\n\t/**\n\t * Get RNG state. Useful for storing the state and re-setting it via setState.\n\t * @returns {?} Internal state\n\t */\n\tgetState: function() {\n\t\treturn [this._s0, this._s1, this._s2, this._c];\n\t},\n\n\t/**\n\t * Set a previously retrieved state.\n\t * @param {?} state\n\t */\n\tsetState: function(state) {\n\t\tthis._s0 = state[0];\n\t\tthis._s1 = state[1];\n\t\tthis._s2 = state[2];\n\t\tthis._c  = state[3];\n\t\treturn this;\n\t},\n\n\t/**\n\t * Returns a cloned RNG\n\t */\n\tclone: function() {\n\t\tvar clone = Object.create(this);\n\t\tclone.setState(this.getState());\n\t\treturn clone;\n\t},\n\n\t_s0: 0,\n\t_s1: 0,\n\t_s2: 0,\n\t_c: 0,\n\t_frac: 2.3283064365386963e-10 /* 2^-32 */\n};\n\nROT.RNG.setSeed(Date.now());\n/**\n * @class (Markov process)-based string generator. \n * Copied from a <a href=\"http://www.roguebasin.roguelikedevelopment.org/index.php?title=Names_from_a_high_order_Markov_Process_and_a_simplified_Katz_back-off_scheme\">RogueBasin article</a>. \n * Offers configurable order and prior.\n * @param {object} [options]\n * @param {bool} [options.words=false] Use word mode?\n * @param {int} [options.order=3]\n * @param {float} [options.prior=0.001]\n */\nROT.StringGenerator = function(options) {\n\tthis._options = {\n\t\twords: false,\n\t\torder: 3,\n\t\tprior: 0.001\n\t};\n\tfor (var p in options) { this._options[p] = options[p]; }\n\n\tthis._boundary = String.fromCharCode(0);\n\tthis._suffix = this._boundary;\n\tthis._prefix = [];\n\tfor (var i=0;i<this._options.order;i++) { this._prefix.push(this._boundary); }\n\n\tthis._priorValues = {};\n\tthis._priorValues[this._boundary] = this._options.prior;\n\n\tthis._data = {};\n};\n\n/**\n * Remove all learning data\n */\nROT.StringGenerator.prototype.clear = function() {\n\tthis._data = {};\n\tthis._priorValues = {};\n};\n\n/**\n * @returns {string} Generated string\n */\nROT.StringGenerator.prototype.generate = function() {\n\tvar result = [this._sample(this._prefix)];\n\twhile (result[result.length-1] != this._boundary) {\n\t\tresult.push(this._sample(result));\n\t}\n\treturn this._join(result.slice(0, -1));\n};\n\n/**\n * Observe (learn) a string from a training set\n */\nROT.StringGenerator.prototype.observe = function(string) {\n\tvar tokens = this._split(string);\n\n\tfor (var i=0; i<tokens.length; i++) {\n\t\tthis._priorValues[tokens[i]] = this._options.prior;\n\t}\n\n\ttokens = this._prefix.concat(tokens).concat(this._suffix); /* add boundary symbols */\n\n\tfor (var i=this._options.order; i<tokens.length; i++) {\n\t\tvar context = tokens.slice(i-this._options.order, i);\n\t\tvar event = tokens[i];\n\t\tfor (var j=0; j<context.length; j++) {\n\t\t\tvar subcontext = context.slice(j);\n\t\t\tthis._observeEvent(subcontext, event);\n\t\t}\n\t}\n};\n\nROT.StringGenerator.prototype.getStats = function() {\n\tvar parts = [];\n\n\tvar priorCount = 0;\n\tfor (var p in this._priorValues) { priorCount++; }\n\tpriorCount--; /* boundary */\n\tparts.push(\"distinct samples: \" + priorCount);\n\n\tvar dataCount = 0;\n\tvar eventCount = 0;\n\tfor (var p in this._data) { \n\t\tdataCount++; \n\t\tfor (var key in this._data[p]) {\n\t\t\teventCount++;\n\t\t}\n\t}\n\tparts.push(\"dictionary size (contexts): \" + dataCount);\n\tparts.push(\"dictionary size (events): \" + eventCount);\n\n\treturn parts.join(\", \");\n};\n\n/**\n * @param {string}\n * @returns {string[]}\n */\nROT.StringGenerator.prototype._split = function(str) {\n\treturn str.split(this._options.words ? /\\s+/ : \"\");\n};\n\n/**\n * @param {string[]}\n * @returns {string} \n */\nROT.StringGenerator.prototype._join = function(arr) {\n\treturn arr.join(this._options.words ? \" \" : \"\");\n};\n\n/**\n * @param {string[]} context\n * @param {string} event\n */\nROT.StringGenerator.prototype._observeEvent = function(context, event) {\n\tvar key = this._join(context);\n\tif (!(key in this._data)) { this._data[key] = {}; }\n\tvar data = this._data[key];\n\n\tif (!(event in data)) { data[event] = 0; }\n\tdata[event]++;\n};\n\n/**\n * @param {string[]}\n * @returns {string}\n */\nROT.StringGenerator.prototype._sample = function(context) {\n\tcontext = this._backoff(context);\n\tvar key = this._join(context);\n\tvar data = this._data[key];\n\n\tvar available = {};\n\n\tif (this._options.prior) {\n\t\tfor (var event in this._priorValues) { available[event] = this._priorValues[event]; }\n\t\tfor (var event in data) { available[event] += data[event]; }\n\t} else { \n\t\tavailable = data;\n\t}\n\n\treturn ROT.RNG.getWeightedValue(available);\n};\n\n/**\n * @param {string[]}\n * @returns {string[]}\n */\nROT.StringGenerator.prototype._backoff = function(context) {\n\tif (context.length > this._options.order) {\n\t\tcontext = context.slice(-this._options.order);\n\t} else if (context.length < this._options.order) {\n\t\tcontext = this._prefix.slice(0, this._options.order - context.length).concat(context);\n\t}\n\n\twhile (!(this._join(context) in this._data) && context.length > 0) { context = context.slice(1); }\n\n\treturn context;\n};\n/**\n * @class Generic event queue: stores events and retrieves them based on their time\n */\nROT.EventQueue = function() {\n\tthis._time = 0;\n\tthis._events = [];\n\tthis._eventTimes = [];\n};\n\n/**\n * @returns {number} Elapsed time\n */\nROT.EventQueue.prototype.getTime = function() {\n\treturn this._time;\n};\n\n/**\n * Clear all scheduled events\n */\nROT.EventQueue.prototype.clear = function() {\n\tthis._events = [];\n\tthis._eventTimes = [];\n\treturn this;\n};\n\n/**\n * @param {?} event\n * @param {number} time\n */\nROT.EventQueue.prototype.add = function(event, time) {\n\tvar index = this._events.length;\n\tfor (var i=0;i<this._eventTimes.length;i++) {\n\t\tif (this._eventTimes[i] > time) {\n\t\t\tindex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tthis._events.splice(index, 0, event);\n\tthis._eventTimes.splice(index, 0, time);\n};\n\n/**\n * Locates the nearest event, advances time if necessary. Returns that event and removes it from the queue.\n * @returns {? || null} The event previously added by addEvent, null if no event available\n */\nROT.EventQueue.prototype.get = function() {\n\tif (!this._events.length) { return null; }\n\n\tvar time = this._eventTimes.splice(0, 1)[0];\n\tif (time > 0) { /* advance */\n\t\tthis._time += time;\n\t\tfor (var i=0;i<this._eventTimes.length;i++) { this._eventTimes[i] -= time; }\n\t}\n\n\treturn this._events.splice(0, 1)[0];\n};\n\n/**\n * Get the time associated with the given event\n * @param {?} event\n * @returns {number} time\n */\nROT.EventQueue.prototype.getEventTime = function(event) {\n\tvar index = this._events.indexOf(event);\n\tif (index == -1) { return undefined }\n\treturn this._eventTimes[index];\n};\n\n/**\n * Remove an event from the queue\n * @param {?} event\n * @returns {bool} success?\n */\nROT.EventQueue.prototype.remove = function(event) {\n\tvar index = this._events.indexOf(event);\n\tif (index == -1) { return false }\n\tthis._remove(index);\n\treturn true;\n};\n\n/**\n * Remove an event from the queue\n * @param {int} index\n */\nROT.EventQueue.prototype._remove = function(index) {\n\tthis._events.splice(index, 1);\n\tthis._eventTimes.splice(index, 1);\n};\n/**\n * @class Abstract scheduler\n */\nROT.Scheduler = function() {\n\tthis._queue = new ROT.EventQueue();\n\tthis._repeat = [];\n\tthis._current = null;\n};\n\n/**\n * @see ROT.EventQueue#getTime\n */\nROT.Scheduler.prototype.getTime = function() {\n\treturn this._queue.getTime();\n};\n\n/**\n * @param {?} item\n * @param {bool} repeat\n */\nROT.Scheduler.prototype.add = function(item, repeat) {\n\tif (repeat) { this._repeat.push(item); }\n\treturn this;\n};\n\n/**\n * Get the time the given item is scheduled for\n * @param {?} item\n * @returns {number} time\n */\nROT.Scheduler.prototype.getTimeOf = function(item) {\n\treturn this._queue.getEventTime(item);\n};\n\n/**\n * Clear all items\n */\nROT.Scheduler.prototype.clear = function() {\n\tthis._queue.clear();\n\tthis._repeat = [];\n\tthis._current = null;\n\treturn this;\n};\n\n/**\n * Remove a previously added item\n * @param {?} item\n * @returns {bool} successful?\n */\nROT.Scheduler.prototype.remove = function(item) {\n\tvar result = this._queue.remove(item);\n\n\tvar index = this._repeat.indexOf(item);\n\tif (index != -1) { this._repeat.splice(index, 1); }\n\n\tif (this._current == item) { this._current = null; }\n\n\treturn result;\n};\n\n/**\n * Schedule next item\n * @returns {?}\n */\nROT.Scheduler.prototype.next = function() {\n\tthis._current = this._queue.get();\n\treturn this._current;\n};\n/**\n * @class Simple fair scheduler (round-robin style)\n * @augments ROT.Scheduler\n */\nROT.Scheduler.Simple = function() {\n\tROT.Scheduler.call(this);\n};\nROT.Scheduler.Simple.extend(ROT.Scheduler);\n\n/**\n * @see ROT.Scheduler#add\n */\nROT.Scheduler.Simple.prototype.add = function(item, repeat) {\n\tthis._queue.add(item, 0);\n\treturn ROT.Scheduler.prototype.add.call(this, item, repeat);\n};\n\n/**\n * @see ROT.Scheduler#next\n */\nROT.Scheduler.Simple.prototype.next = function() {\n\tif (this._current && this._repeat.indexOf(this._current) != -1) {\n\t\tthis._queue.add(this._current, 0);\n\t}\n\treturn ROT.Scheduler.prototype.next.call(this);\n};\n/**\n * @class Speed-based scheduler\n * @augments ROT.Scheduler\n */\nROT.Scheduler.Speed = function() {\n\tROT.Scheduler.call(this);\n};\nROT.Scheduler.Speed.extend(ROT.Scheduler);\n\n/**\n * @param {object} item anything with \"getSpeed\" method\n * @param {bool} repeat\n * @param {number} [time=1/item.getSpeed()]\n * @see ROT.Scheduler#add\n */\nROT.Scheduler.Speed.prototype.add = function(item, repeat, time) {\n\tthis._queue.add(item, time !== undefined ? time : 1/item.getSpeed());\n\treturn ROT.Scheduler.prototype.add.call(this, item, repeat);\n};\n\n/**\n * @see ROT.Scheduler#next\n */\nROT.Scheduler.Speed.prototype.next = function() {\n\tif (this._current && this._repeat.indexOf(this._current) != -1) {\n\t\tthis._queue.add(this._current, 1/this._current.getSpeed());\n\t}\n\treturn ROT.Scheduler.prototype.next.call(this);\n};\n/**\n * @class Action-based scheduler\n * @augments ROT.Scheduler\n */\nROT.Scheduler.Action = function() {\n\tROT.Scheduler.call(this);\n\tthis._defaultDuration = 1; /* for newly added */\n\tthis._duration = this._defaultDuration; /* for this._current */\n};\nROT.Scheduler.Action.extend(ROT.Scheduler);\n\n/**\n * @param {object} item\n * @param {bool} repeat\n * @param {number} [time=1]\n * @see ROT.Scheduler#add\n */\nROT.Scheduler.Action.prototype.add = function(item, repeat, time) {\n\tthis._queue.add(item, time || this._defaultDuration);\n\treturn ROT.Scheduler.prototype.add.call(this, item, repeat);\n};\n\nROT.Scheduler.Action.prototype.clear = function() {\n\tthis._duration = this._defaultDuration;\n\treturn ROT.Scheduler.prototype.clear.call(this);\n};\n\nROT.Scheduler.Action.prototype.remove = function(item) {\n\tif (item == this._current) { this._duration = this._defaultDuration; }\n\treturn ROT.Scheduler.prototype.remove.call(this, item);\n};\n\n/**\n * @see ROT.Scheduler#next\n */\nROT.Scheduler.Action.prototype.next = function() {\n\tif (this._current && this._repeat.indexOf(this._current) != -1) {\n\t\tthis._queue.add(this._current, this._duration || this._defaultDuration);\n\t\tthis._duration = this._defaultDuration;\n\t}\n\treturn ROT.Scheduler.prototype.next.call(this);\n};\n\n/**\n * Set duration for the active item\n */\nROT.Scheduler.Action.prototype.setDuration = function(time) {\n\tif (this._current) { this._duration = time; }\n\treturn this;\n};\n/**\n * @class Asynchronous main loop\n * @param {ROT.Scheduler} scheduler\n */\nROT.Engine = function(scheduler) {\n\tthis._scheduler = scheduler;\n\tthis._lock = 1;\n};\n\n/**\n * Start the main loop. When this call returns, the loop is locked.\n */\nROT.Engine.prototype.start = function() {\n\treturn this.unlock();\n};\n\n/**\n * Interrupt the engine by an asynchronous action\n */\nROT.Engine.prototype.lock = function() {\n\tthis._lock++;\n\treturn this;\n};\n\n/**\n * Resume execution (paused by a previous lock)\n */\nROT.Engine.prototype.unlock = function() {\n\tif (!this._lock) { throw new Error(\"Cannot unlock unlocked engine\"); }\n\tthis._lock--;\n\n\twhile (!this._lock) {\n\t\tvar actor = this._scheduler.next();\n\t\tif (!actor) { return this.lock(); } /* no actors */\n\t\tvar result = actor.act();\n\t\tif (result && result.then) { /* actor returned a \"thenable\", looks like a Promise */\n\t\t\tthis.lock();\n\t\t\tresult.then(this.unlock.bind(this));\n\t\t}\n\t}\n\n\treturn this;\n};\n/**\n * @class Base map generator\n * @param {int} [width=ROT.DEFAULT_WIDTH]\n * @param {int} [height=ROT.DEFAULT_HEIGHT]\n */\nROT.Map = function(width, height) {\n\tthis._width = width || ROT.DEFAULT_WIDTH;\n\tthis._height = height || ROT.DEFAULT_HEIGHT;\n};\n\nROT.Map.prototype.create = function(callback) {};\n\nROT.Map.prototype._fillMap = function(value) {\n\tvar map = [];\n\tfor (var i=0;i<this._width;i++) {\n\t\tmap.push([]);\n\t\tfor (var j=0;j<this._height;j++) { map[i].push(value); }\n\t}\n\treturn map;\n};\n/**\n * @class Simple empty rectangular room\n * @augments ROT.Map\n */\nROT.Map.Arena = function(width, height) {\n\tROT.Map.call(this, width, height);\n};\nROT.Map.Arena.extend(ROT.Map);\n\nROT.Map.Arena.prototype.create = function(callback) {\n\tvar w = this._width-1;\n\tvar h = this._height-1;\n\tfor (var i=0;i<=w;i++) {\n\t\tfor (var j=0;j<=h;j++) {\n\t\t\tvar empty = (i && j && i<w && j<h);\n\t\t\tcallback(i, j, empty ? 0 : 1);\n\t\t}\n\t}\n\treturn this;\n};\n/**\n * @class Recursively divided maze, http://en.wikipedia.org/wiki/Maze_generation_algorithm#Recursive_division_method\n * @augments ROT.Map\n */\nROT.Map.DividedMaze = function(width, height) {\n\tROT.Map.call(this, width, height);\n\tthis._stack = [];\n};\nROT.Map.DividedMaze.extend(ROT.Map);\n\nROT.Map.DividedMaze.prototype.create = function(callback) {\n\tvar w = this._width;\n\tvar h = this._height;\n\t\n\tthis._map = [];\n\t\n\tfor (var i=0;i<w;i++) {\n\t\tthis._map.push([]);\n\t\tfor (var j=0;j<h;j++) {\n\t\t\tvar border = (i == 0 || j == 0 || i+1 == w || j+1 == h);\n\t\t\tthis._map[i].push(border ? 1 : 0);\n\t\t}\n\t}\n\t\n\tthis._stack = [\n\t\t[1, 1, w-2, h-2]\n\t];\n\tthis._process();\n\t\n\tfor (var i=0;i<w;i++) {\n\t\tfor (var j=0;j<h;j++) {\n\t\t\tcallback(i, j, this._map[i][j]);\n\t\t}\n\t}\n\tthis._map = null;\n\treturn this;\n};\n\nROT.Map.DividedMaze.prototype._process = function() {\n\twhile (this._stack.length) {\n\t\tvar room = this._stack.shift(); /* [left, top, right, bottom] */\n\t\tthis._partitionRoom(room);\n\t}\n};\n\nROT.Map.DividedMaze.prototype._partitionRoom = function(room) {\n\tvar availX = [];\n\tvar availY = [];\n\t\n\tfor (var i=room[0]+1;i<room[2];i++) {\n\t\tvar top = this._map[i][room[1]-1];\n\t\tvar bottom = this._map[i][room[3]+1];\n\t\tif (top && bottom && !(i % 2)) { availX.push(i); }\n\t}\n\t\n\tfor (var j=room[1]+1;j<room[3];j++) {\n\t\tvar left = this._map[room[0]-1][j];\n\t\tvar right = this._map[room[2]+1][j];\n\t\tif (left && right && !(j % 2)) { availY.push(j); }\n\t}\n\n\tif (!availX.length || !availY.length) { return; }\n\n\tvar x = availX.random();\n\tvar y = availY.random();\n\t\n\tthis._map[x][y] = 1;\n\t\n\tvar walls = [];\n\t\n\tvar w = []; walls.push(w); /* left part */\n\tfor (var i=room[0]; i<x; i++) { \n\t\tthis._map[i][y] = 1;\n\t\tw.push([i, y]); \n\t}\n\t\n\tvar w = []; walls.push(w); /* right part */\n\tfor (var i=x+1; i<=room[2]; i++) { \n\t\tthis._map[i][y] = 1;\n\t\tw.push([i, y]); \n\t}\n\n\tvar w = []; walls.push(w); /* top part */\n\tfor (var j=room[1]; j<y; j++) { \n\t\tthis._map[x][j] = 1;\n\t\tw.push([x, j]); \n\t}\n\t\n\tvar w = []; walls.push(w); /* bottom part */\n\tfor (var j=y+1; j<=room[3]; j++) { \n\t\tthis._map[x][j] = 1;\n\t\tw.push([x, j]); \n\t}\n\t\t\n\tvar solid = walls.random();\n\tfor (var i=0;i<walls.length;i++) {\n\t\tvar w = walls[i];\n\t\tif (w == solid) { continue; }\n\t\t\n\t\tvar hole = w.random();\n\t\tthis._map[hole[0]][hole[1]] = 0;\n\t}\n\n\tthis._stack.push([room[0], room[1], x-1, y-1]); /* left top */\n\tthis._stack.push([x+1, room[1], room[2], y-1]); /* right top */\n\tthis._stack.push([room[0], y+1, x-1, room[3]]); /* left bottom */\n\tthis._stack.push([x+1, y+1, room[2], room[3]]); /* right bottom */\n};\n/**\n * @class Icey's Maze generator\n * See http://www.roguebasin.roguelikedevelopment.org/index.php?title=Simple_maze for explanation\n * @augments ROT.Map\n */\nROT.Map.IceyMaze = function(width, height, regularity) {\n\tROT.Map.call(this, width, height);\n\tthis._regularity = regularity || 0;\n};\nROT.Map.IceyMaze.extend(ROT.Map);\n\nROT.Map.IceyMaze.prototype.create = function(callback) {\n\tvar width = this._width;\n\tvar height = this._height;\n\t\n\tvar map = this._fillMap(1);\n\t\n\twidth -= (width % 2 ? 1 : 2);\n\theight -= (height % 2 ? 1 : 2);\n\n\tvar cx = 0;\n\tvar cy = 0;\n\tvar nx = 0;\n\tvar ny = 0;\n\n\tvar done = 0;\n\tvar blocked = false;\n\tvar dirs = [\n\t\t[0, 0],\n\t\t[0, 0],\n\t\t[0, 0],\n\t\t[0, 0]\n\t];\n\tdo {\n\t\tcx = 1 + 2*Math.floor(ROT.RNG.getUniform()*(width-1) / 2);\n\t\tcy = 1 + 2*Math.floor(ROT.RNG.getUniform()*(height-1) / 2);\n\n\t\tif (!done) { map[cx][cy] = 0; }\n\t\t\n\t\tif (!map[cx][cy]) {\n\t\t\tthis._randomize(dirs);\n\t\t\tdo {\n\t\t\t\tif (Math.floor(ROT.RNG.getUniform()*(this._regularity+1)) == 0) { this._randomize(dirs); }\n\t\t\t\tblocked = true;\n\t\t\t\tfor (var i=0;i<4;i++) {\n\t\t\t\t\tnx = cx + dirs[i][0]*2;\n\t\t\t\t\tny = cy + dirs[i][1]*2;\n\t\t\t\t\tif (this._isFree(map, nx, ny, width, height)) {\n\t\t\t\t\t\tmap[nx][ny] = 0;\n\t\t\t\t\t\tmap[cx + dirs[i][0]][cy + dirs[i][1]] = 0;\n\t\t\t\t\t\t\n\t\t\t\t\t\tcx = nx;\n\t\t\t\t\t\tcy = ny;\n\t\t\t\t\t\tblocked = false;\n\t\t\t\t\t\tdone++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} while (!blocked);\n\t\t}\n\t} while (done+1 < width*height/4);\n\t\n\tfor (var i=0;i<this._width;i++) {\n\t\tfor (var j=0;j<this._height;j++) {\n\t\t\tcallback(i, j, map[i][j]);\n\t\t}\n\t}\n\tthis._map = null;\n\treturn this;\n};\n\nROT.Map.IceyMaze.prototype._randomize = function(dirs) {\n\tfor (var i=0;i<4;i++) {\n\t\tdirs[i][0] = 0;\n\t\tdirs[i][1] = 0;\n\t}\n\t\n\tswitch (Math.floor(ROT.RNG.getUniform()*4)) {\n\t\tcase 0:\n\t\t\tdirs[0][0] = -1; dirs[1][0] = 1;\n\t\t\tdirs[2][1] = -1; dirs[3][1] = 1;\n\t\tbreak;\n\t\tcase 1:\n\t\t\tdirs[3][0] = -1; dirs[2][0] = 1;\n\t\t\tdirs[1][1] = -1; dirs[0][1] = 1;\n\t\tbreak;\n\t\tcase 2:\n\t\t\tdirs[2][0] = -1; dirs[3][0] = 1;\n\t\t\tdirs[0][1] = -1; dirs[1][1] = 1;\n\t\tbreak;\n\t\tcase 3:\n\t\t\tdirs[1][0] = -1; dirs[0][0] = 1;\n\t\t\tdirs[3][1] = -1; dirs[2][1] = 1;\n\t\tbreak;\n\t}\n};\n\nROT.Map.IceyMaze.prototype._isFree = function(map, x, y, width, height) {\n\tif (x < 1 || y < 1 || x >= width || y >= height) { return false; }\n\treturn map[x][y];\n};\n/**\n * @class Maze generator - Eller's algorithm\n * See http://homepages.cwi.nl/~tromp/maze.html for explanation\n * @augments ROT.Map\n */\nROT.Map.EllerMaze = function(width, height) {\n\tROT.Map.call(this, width, height);\n};\nROT.Map.EllerMaze.extend(ROT.Map);\n\nROT.Map.EllerMaze.prototype.create = function(callback) {\n\tvar map = this._fillMap(1);\n\tvar w = Math.ceil((this._width-2)/2);\n\t\n\tvar rand = 9/24;\n\t\n\tvar L = [];\n\tvar R = [];\n\t\n\tfor (var i=0;i<w;i++) {\n\t\tL.push(i);\n\t\tR.push(i);\n\t}\n\tL.push(w-1); /* fake stop-block at the right side */\n\n\tfor (var j=1;j+3<this._height;j+=2) {\n\t\t/* one row */\n\t\tfor (var i=0;i<w;i++) {\n\t\t\t/* cell coords (will be always empty) */\n\t\t\tvar x = 2*i+1;\n\t\t\tvar y = j;\n\t\t\tmap[x][y] = 0;\n\t\t\t\n\t\t\t/* right connection */\n\t\t\tif (i != L[i+1] && ROT.RNG.getUniform() > rand) {\n\t\t\t\tthis._addToList(i, L, R);\n\t\t\t\tmap[x+1][y] = 0;\n\t\t\t}\n\t\t\t\n\t\t\t/* bottom connection */\n\t\t\tif (i != L[i] && ROT.RNG.getUniform() > rand) {\n\t\t\t\t/* remove connection */\n\t\t\t\tthis._removeFromList(i, L, R);\n\t\t\t} else {\n\t\t\t\t/* create connection */\n\t\t\t\tmap[x][y+1] = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\t/* last row */\n\tfor (var i=0;i<w;i++) {\n\t\t/* cell coords (will be always empty) */\n\t\tvar x = 2*i+1;\n\t\tvar y = j;\n\t\tmap[x][y] = 0;\n\t\t\n\t\t/* right connection */\n\t\tif (i != L[i+1] && (i == L[i] || ROT.RNG.getUniform() > rand)) {\n\t\t\t/* dig right also if the cell is separated, so it gets connected to the rest of maze */\n\t\t\tthis._addToList(i, L, R);\n\t\t\tmap[x+1][y] = 0;\n\t\t}\n\t\t\n\t\tthis._removeFromList(i, L, R);\n\t}\n\t\n\tfor (var i=0;i<this._width;i++) {\n\t\tfor (var j=0;j<this._height;j++) {\n\t\t\tcallback(i, j, map[i][j]);\n\t\t}\n\t}\n\t\n\treturn this;\n};\n\n/**\n * Remove \"i\" from its list\n */\nROT.Map.EllerMaze.prototype._removeFromList = function(i, L, R) {\n\tR[L[i]] = R[i];\n\tL[R[i]] = L[i];\n\tR[i] = i;\n\tL[i] = i;\n};\n\n/**\n * Join lists with \"i\" and \"i+1\"\n */\nROT.Map.EllerMaze.prototype._addToList = function(i, L, R) {\n\tR[L[i+1]] = R[i];\n\tL[R[i]] = L[i+1];\n\tR[i] = i+1;\n\tL[i+1] = i;\n};\n/**\n * @class Cellular automaton map generator\n * @augments ROT.Map\n * @param {int} [width=ROT.DEFAULT_WIDTH]\n * @param {int} [height=ROT.DEFAULT_HEIGHT]\n * @param {object} [options] Options\n * @param {int[]} [options.born] List of neighbor counts for a new cell to be born in empty space\n * @param {int[]} [options.survive] List of neighbor counts for an existing  cell to survive\n * @param {int} [options.topology] Topology 4 or 6 or 8\n */\nROT.Map.Cellular = function(width, height, options) {\n\tROT.Map.call(this, width, height);\n\tthis._options = {\n\t\tborn: [5, 6, 7, 8],\n\t\tsurvive: [4, 5, 6, 7, 8],\n\t\ttopology: 8\n\t};\n\tthis.setOptions(options);\n\n\tthis._dirs = ROT.DIRS[this._options.topology];\n\tthis._map = this._fillMap(0);\n};\nROT.Map.Cellular.extend(ROT.Map);\n\n/**\n * Fill the map with random values\n * @param {float} probability Probability for a cell to become alive; 0 = all empty, 1 = all full\n */\nROT.Map.Cellular.prototype.randomize = function(probability) {\n\tfor (var i=0;i<this._width;i++) {\n\t\tfor (var j=0;j<this._height;j++) {\n\t\t\tthis._map[i][j] = (ROT.RNG.getUniform() < probability ? 1 : 0);\n\t\t}\n\t}\n\treturn this;\n};\n\n/**\n * Change options.\n * @see ROT.Map.Cellular\n */\nROT.Map.Cellular.prototype.setOptions = function(options) {\n\tfor (var p in options) { this._options[p] = options[p]; }\n};\n\nROT.Map.Cellular.prototype.set = function(x, y, value) {\n\tthis._map[x][y] = value;\n};\n\nROT.Map.Cellular.prototype.create = function(callback) {\n\tvar newMap = this._fillMap(0);\n\tvar born = this._options.born;\n\tvar survive = this._options.survive;\n\n\n\tfor (var j=0;j<this._height;j++) {\n\t\tvar widthStep = 1;\n\t\tvar widthStart = 0;\n\t\tif (this._options.topology == 6) {\n\t\t\twidthStep = 2;\n\t\t\twidthStart = j%2;\n\t\t}\n\n\t\tfor (var i=widthStart; i<this._width; i+=widthStep) {\n\t\t\tvar cur = this._map[i][j];\n\t\t\tvar ncount = this._getNeighbors(i, j);\n\n\t\t\tif (cur && survive.indexOf(ncount) != -1) { /* survive */\n\t\t\t\tnewMap[i][j] = 1;\n\t\t\t} else if (!cur && born.indexOf(ncount) != -1) { /* born */\n\t\t\t\tnewMap[i][j] = 1;\n\t\t\t}\n\t\t}\n\t}\n\n\tthis._map = newMap;\n\tcallback && this._serviceCallback(callback);\n};\n\nROT.Map.Cellular.prototype._serviceCallback = function(callback) {\n\tfor (var j=0;j<this._height;j++) {\n\t\tvar widthStep = 1;\n\t\tvar widthStart = 0;\n\t\tif (this._options.topology == 6) {\n\t\t\twidthStep = 2;\n\t\t\twidthStart = j%2;\n\t\t}\n\t\tfor (var i=widthStart; i<this._width; i+=widthStep) {\n\t\t\tcallback(i, j, this._map[i][j]);\n\t\t}\n\t}\n};\n\n/**\n * Get neighbor count at [i,j] in this._map\n */\nROT.Map.Cellular.prototype._getNeighbors = function(cx, cy) {\n\tvar result = 0;\n\tfor (var i=0;i<this._dirs.length;i++) {\n\t\tvar dir = this._dirs[i];\n\t\tvar x = cx + dir[0];\n\t\tvar y = cy + dir[1];\n\n\t\tif (x < 0 || x >= this._width || y < 0 || y >= this._height) { continue; }\n\t\tresult += (this._map[x][y] == 1 ? 1 : 0);\n\t}\n\n\treturn result;\n};\n\n/**\n * Make sure every non-wall space is accessible.\n * @param {function} callback to call to display map when do\n * @param {int} value to consider empty space - defaults to 0\n * @param {function} callback to call when a new connection is made\n */\nROT.Map.Cellular.prototype.connect = function(callback, value, connectionCallback) {\n\tif (!value) value = 0;\n\n\tvar allFreeSpace = [];\n\tvar notConnected = {};\n\n\t// find all free space\n\tvar widthStep = 1;\n\tvar widthStarts = [0, 0];\n\tif (this._options.topology == 6) {\n\t\twidthStep = 2;\n\t\twidthStarts = [0, 1];\n\t}\n\tfor (var y = 0; y < this._height; y++) {\n\t\tfor (var x = widthStarts[y % 2]; x < this._width; x += widthStep) {\n\t\t\tif (this._freeSpace(x, y, value)) {\n\t\t\t\tvar p = [x, y];\n\t\t\t\tnotConnected[this._pointKey(p)] = p;\n\t\t\t\tallFreeSpace.push([x, y]);\n\t\t\t}\n\t\t}\n\t}\n\tvar start = allFreeSpace[ROT.RNG.getUniformInt(0, allFreeSpace.length - 1)];\n\n\tvar key = this._pointKey(start);\n\tvar connected = {};\n\tconnected[key] = start;\n\tdelete notConnected[key];\n\n\t// find what's connected to the starting point\n\tthis._findConnected(connected, notConnected, [start], false, value);\n\n\twhile (Object.keys(notConnected).length > 0) {\n\t\t// find two points from notConnected to connected\n\t\tvar p = this._getFromTo(connected, notConnected);\n\t\tvar from = p[0]; // notConnected\n\t\tvar to = p[1]; // connected\n\n\t\t// find everything connected to the starting point\n\t\tvar local = {};\n\t\tlocal[this._pointKey(from)] = from;\n\t\tthis._findConnected(local, notConnected, [from], true, value);\n\n\t\t// connect to a connected cell\n\t\tvar tunnelFn = (this._options.topology == 6 ? this._tunnelToConnected6 : this._tunnelToConnected);\n\t\ttunnelFn.call(this, to, from, connected, notConnected, value, connectionCallback);\n\n\t\t// now all of local is connected\n\t\tfor (var k in local) {\n\t\t\tvar pp = local[k];\n\t\t\tthis._map[pp[0]][pp[1]] = value;\n\t\t\tconnected[k] = pp;\n\t\t\tdelete notConnected[k];\n\t\t}\n\t}\n\n\tcallback && this._serviceCallback(callback);\n};\n\n/**\n * Find random points to connect. Search for the closest point in the larger space.\n * This is to minimize the length of the passage while maintaining good performance.\n */\nROT.Map.Cellular.prototype._getFromTo = function(connected, notConnected) {\n\tvar from, to, d;\n\tvar connectedKeys = Object.keys(connected);\n\tvar notConnectedKeys = Object.keys(notConnected);\n\tfor (var i = 0; i < 5; i++) {\n\t\tif (connectedKeys.length < notConnectedKeys.length) {\n\t\t\tvar keys = connectedKeys;\n\t\t\tto = connected[keys[ROT.RNG.getUniformInt(0, keys.length - 1)]];\n\t\t\tfrom = this._getClosest(to, notConnected);\n\t\t} else {\n\t\t\tvar keys = notConnectedKeys;\n\t\t\tfrom = notConnected[keys[ROT.RNG.getUniformInt(0, keys.length - 1)]];\n\t\t\tto = this._getClosest(from, connected);\n\t\t}\n\t\td = (from[0] - to[0]) * (from[0] - to[0]) + (from[1] - to[1]) * (from[1] - to[1]);\n\t\tif (d < 64) {\n\t\t\tbreak;\n\t\t}\n\t}\n\t// console.log(\">>> connected=\" + to + \" notConnected=\" + from + \" dist=\" + d);\n\treturn [from, to];\n};\n\nROT.Map.Cellular.prototype._getClosest = function(point, space) {\n\tvar minPoint = null;\n\tvar minDist = null;\n\tfor (k in space) {\n\t\tvar p = space[k];\n\t\tvar d = (p[0] - point[0]) * (p[0] - point[0]) + (p[1] - point[1]) * (p[1] - point[1]);\n\t\tif (minDist == null || d < minDist) {\n\t\t\tminDist = d;\n\t\t\tminPoint = p;\n\t\t}\n\t}\n\treturn minPoint;\n};\n\nROT.Map.Cellular.prototype._findConnected = function(connected, notConnected, stack, keepNotConnected, value) {\n\twhile(stack.length > 0) {\n\t\tvar p = stack.splice(0, 1)[0];\n\t\tvar tests;\n\n\t\tif (this._options.topology == 6) {\n\t\t\ttests = [\n\t\t\t\t[p[0] + 2, p[1]],\n\t\t\t\t[p[0] + 1, p[1] - 1],\n\t\t\t\t[p[0] - 1, p[1] - 1],\n\t\t\t\t[p[0] - 2, p[1]],\n\t\t\t\t[p[0] - 1, p[1] + 1],\n\t\t\t\t[p[0] + 1, p[1] + 1],\n\t\t\t];\n\t\t} else {\n\t\t\ttests = [\n\t\t\t\t[p[0] + 1, p[1]],\n\t\t\t\t[p[0] - 1, p[1]],\n\t\t\t\t[p[0],     p[1] + 1],\n\t\t\t\t[p[0],     p[1] - 1]\n\t\t\t];\n\t\t}\n\n\t\tfor (var i = 0; i < tests.length; i++) {\n\t\t\tvar key = this._pointKey(tests[i]);\n\t\t\tif (connected[key] == null && this._freeSpace(tests[i][0], tests[i][1], value)) {\n\t\t\t\tconnected[key] = tests[i];\n\t\t\t\tif (!keepNotConnected) {\n\t\t\t\t\tdelete notConnected[key];\n\t\t\t\t}\n\t\t\t\tstack.push(tests[i]);\n\t\t\t}\n\t\t}\n\t}\n};\n\nROT.Map.Cellular.prototype._tunnelToConnected = function(to, from, connected, notConnected, value, connectionCallback) {\n\tvar key = this._pointKey(from);\n\tvar a, b;\n\tif (from[0] < to[0]) {\n\t\ta = from;\n\t\tb = to;\n\t} else {\n\t\ta = to;\n\t\tb = from;\n\t}\n\tfor (var xx = a[0]; xx <= b[0]; xx++) {\n\t\tthis._map[xx][a[1]] = value;\n\t\tvar p = [xx, a[1]];\n\t\tvar pkey = this._pointKey(p);\n\t\tconnected[pkey] = p;\n\t\tdelete notConnected[pkey];\n\t}\n\tif (connectionCallback && a[0] < b[0]) {\n\t\tconnectionCallback(a, [b[0], a[1]]);\n\t}\n\n\t// x is now fixed\n\tvar x = b[0];\n\n\tif (from[1] < to[1]) {\n\t\ta = from;\n\t\tb = to;\n\t} else {\n\t\ta = to;\n\t\tb = from;\n\t}\n\tfor (var yy = a[1]; yy < b[1]; yy++) {\n\t\tthis._map[x][yy] = value;\n\t\tvar p = [x, yy];\n\t\tvar pkey = this._pointKey(p);\n\t\tconnected[pkey] = p;\n\t\tdelete notConnected[pkey];\n\t}\n\tif (connectionCallback && a[1] < b[1]) { connectionCallback([b[0], a[1]], [b[0], b[1]]); }\n}\n\nROT.Map.Cellular.prototype._tunnelToConnected6 = function(to, from, connected, notConnected, value, connectionCallback) {\n\tvar a, b;\n\tif (from[0] < to[0]) {\n\t\ta = from;\n\t\tb = to;\n\t} else {\n\t\ta = to;\n\t\tb = from;\n\t}\n\n\t// tunnel diagonally until horizontally level\n\tvar xx = a[0];\n\tvar yy = a[1];\n\twhile (!(xx == b[0] && yy == b[1])) {\n\t\tvar stepWidth = 2;\n\t\tif (yy < b[1]) {\n\t\t\tyy++;\n\t\t\tstepWidth = 1;\n\t\t} else if (yy > b[1]) {\n\t\t\tyy--;\n\t\t\tstepWidth = 1;\n\t\t}\n\t\tif (xx < b[0]) {\n\t\t\txx += stepWidth\n\t\t} else if (xx > b[0]) {\n\t\t\txx -= stepWidth\n\t\t} else if (b[1] % 2) {\n\t\t\t// Won't step outside map if destination on is map's right edge\n\t\t\txx -= stepWidth;\n\t\t} else {\n\t\t\t// ditto for left edge\n\t\t\txx += stepWidth;\n\t\t}\n\t\tthis._map[xx][yy] = value;\n\t\tvar p = [xx, yy]\n\t\tvar pkey = this._pointKey(p);\n\t\tconnected[pkey] = p;\n\t\tdelete notConnected[pkey];\n\t}\n\n\tif (connectionCallback) { connectionCallback(from, to); }\n}\n\nROT.Map.Cellular.prototype._freeSpace = function(x, y, value) {\n\treturn x >= 0 && x < this._width && y >= 0 && y < this._height && this._map[x][y] == value;\n}\n\nROT.Map.Cellular.prototype._pointKey = function(p) {\n\treturn p[0] + \".\" + p[1];\n}\n/**\n * @class Dungeon map: has rooms and corridors\n * @augments ROT.Map\n */\nROT.Map.Dungeon = function(width, height) {\n\tROT.Map.call(this, width, height);\n\tthis._rooms = []; /* list of all rooms */\n\tthis._corridors = [];\n};\nROT.Map.Dungeon.extend(ROT.Map);\n\n/**\n * Get all generated rooms\n * @returns {ROT.Map.Feature.Room[]}\n */\nROT.Map.Dungeon.prototype.getRooms = function() {\n\treturn this._rooms;\n};\n\n/**\n * Get all generated corridors\n * @returns {ROT.Map.Feature.Corridor[]}\n */\nROT.Map.Dungeon.prototype.getCorridors = function() {\n\treturn this._corridors;\n};\n/**\n * @class Random dungeon generator using human-like digging patterns.\n * Heavily based on Mike Anderson's ideas from the \"Tyrant\" algo, mentioned at \n * http://www.roguebasin.roguelikedevelopment.org/index.php?title=Dungeon-Building_Algorithm.\n * @augments ROT.Map.Dungeon\n */\nROT.Map.Digger = function(width, height, options) {\n\tROT.Map.Dungeon.call(this, width, height);\n\t\n\tthis._options = {\n\t\troomWidth: [3, 9], /* room minimum and maximum width */\n\t\troomHeight: [3, 5], /* room minimum and maximum height */\n\t\tcorridorLength: [3, 10], /* corridor minimum and maximum length */\n\t\tdugPercentage: 0.2, /* we stop after this percentage of level area has been dug out */\n\t\ttimeLimit: 1000 /* we stop after this much time has passed (msec) */\n\t};\n\tfor (var p in options) { this._options[p] = options[p]; }\n\t\n\tthis._features = {\n\t\t\"Room\": 4,\n\t\t\"Corridor\": 4\n\t};\n\tthis._featureAttempts = 20; /* how many times do we try to create a feature on a suitable wall */\n\tthis._walls = {}; /* these are available for digging */\n\t\n\tthis._digCallback = this._digCallback.bind(this);\n\tthis._canBeDugCallback = this._canBeDugCallback.bind(this);\n\tthis._isWallCallback = this._isWallCallback.bind(this);\n\tthis._priorityWallCallback = this._priorityWallCallback.bind(this);\n};\nROT.Map.Digger.extend(ROT.Map.Dungeon);\n\n/**\n * Create a map\n * @see ROT.Map#create\n */\nROT.Map.Digger.prototype.create = function(callback) {\n\tthis._rooms = [];\n\tthis._corridors = [];\n\tthis._map = this._fillMap(1);\n\tthis._walls = {};\n\tthis._dug = 0;\n\tvar area = (this._width-2) * (this._height-2);\n\n\tthis._firstRoom();\n\t\n\tvar t1 = Date.now();\n\n\tdo {\n\t\tvar t2 = Date.now();\n\t\tif (t2 - t1 > this._options.timeLimit) { break; }\n\n\t\t/* find a good wall */\n\t\tvar wall = this._findWall();\n\t\tif (!wall) { break; } /* no more walls */\n\t\t\n\t\tvar parts = wall.split(\",\");\n\t\tvar x = parseInt(parts[0]);\n\t\tvar y = parseInt(parts[1]);\n\t\tvar dir = this._getDiggingDirection(x, y);\n\t\tif (!dir) { continue; } /* this wall is not suitable */\n\t\t\n//\t\tconsole.log(\"wall\", x, y);\n\n\t\t/* try adding a feature */\n\t\tvar featureAttempts = 0;\n\t\tdo {\n\t\t\tfeatureAttempts++;\n\t\t\tif (this._tryFeature(x, y, dir[0], dir[1])) { /* feature added */\n\t\t\t\t//if (this._rooms.length + this._corridors.length == 2) { this._rooms[0].addDoor(x, y); } /* first room oficially has doors */\n\t\t\t\tthis._removeSurroundingWalls(x, y);\n\t\t\t\tthis._removeSurroundingWalls(x-dir[0], y-dir[1]);\n\t\t\t\tbreak; \n\t\t\t}\n\t\t} while (featureAttempts < this._featureAttempts);\n\t\t\n\t\tvar priorityWalls = 0;\n\t\tfor (var id in this._walls) { \n\t\t\tif (this._walls[id] > 1) { priorityWalls++; }\n\t\t}\n\n\t} while (this._dug/area < this._options.dugPercentage || priorityWalls); /* fixme number of priority walls */\n\n\tthis._addDoors();\n\n\tif (callback) {\n\t\tfor (var i=0;i<this._width;i++) {\n\t\t\tfor (var j=0;j<this._height;j++) {\n\t\t\t\tcallback(i, j, this._map[i][j]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tthis._walls = {};\n\tthis._map = null;\n\n\treturn this;\n};\n\nROT.Map.Digger.prototype._digCallback = function(x, y, value) {\n\tif (value == 0 || value == 2) { /* empty */\n\t\tthis._map[x][y] = 0;\n\t\tthis._dug++;\n\t} else { /* wall */\n\t\tthis._walls[x+\",\"+y] = 1;\n\t}\n};\n\nROT.Map.Digger.prototype._isWallCallback = function(x, y) {\n\tif (x < 0 || y < 0 || x >= this._width || y >= this._height) { return false; }\n\treturn (this._map[x][y] == 1);\n};\n\nROT.Map.Digger.prototype._canBeDugCallback = function(x, y) {\n\tif (x < 1 || y < 1 || x+1 >= this._width || y+1 >= this._height) { return false; }\n\treturn (this._map[x][y] == 1);\n};\n\nROT.Map.Digger.prototype._priorityWallCallback = function(x, y) {\n\tthis._walls[x+\",\"+y] = 2;\n};\n\nROT.Map.Digger.prototype._firstRoom = function() {\n\tvar cx = Math.floor(this._width/2);\n\tvar cy = Math.floor(this._height/2);\n\tvar room = ROT.Map.Feature.Room.createRandomCenter(cx, cy, this._options);\n\tthis._rooms.push(room);\n\troom.create(this._digCallback);\n};\n\n/**\n * Get a suitable wall\n */\nROT.Map.Digger.prototype._findWall = function() {\n\tvar prio1 = [];\n\tvar prio2 = [];\n\tfor (var id in this._walls) {\n\t\tvar prio = this._walls[id];\n\t\tif (prio == 2) { \n\t\t\tprio2.push(id); \n\t\t} else {\n\t\t\tprio1.push(id);\n\t\t}\n\t}\n\t\n\tvar arr = (prio2.length ? prio2 : prio1);\n\tif (!arr.length) { return null; } /* no walls :/ */\n\t\n\tvar id = arr.sort().random(); // sort to make the order deterministic\n\tdelete this._walls[id];\n\n\treturn id;\n};\n\n/**\n * Tries adding a feature\n * @returns {bool} was this a successful try?\n */\nROT.Map.Digger.prototype._tryFeature = function(x, y, dx, dy) {\n\tvar feature = ROT.RNG.getWeightedValue(this._features);\n\tfeature = ROT.Map.Feature[feature].createRandomAt(x, y, dx, dy, this._options);\n\t\n\tif (!feature.isValid(this._isWallCallback, this._canBeDugCallback)) {\n//\t\tconsole.log(\"not valid\");\n//\t\tfeature.debug();\n\t\treturn false;\n\t}\n\t\n\tfeature.create(this._digCallback);\n//\tfeature.debug();\n\n\tif (feature instanceof ROT.Map.Feature.Room) { this._rooms.push(feature); }\n\tif (feature instanceof ROT.Map.Feature.Corridor) { \n\t\tfeature.createPriorityWalls(this._priorityWallCallback);\n\t\tthis._corridors.push(feature); \n\t}\n\t\n\treturn true;\n};\n\nROT.Map.Digger.prototype._removeSurroundingWalls = function(cx, cy) {\n\tvar deltas = ROT.DIRS[4];\n\n\tfor (var i=0;i<deltas.length;i++) {\n\t\tvar delta = deltas[i];\n\t\tvar x = cx + delta[0];\n\t\tvar y = cy + delta[1];\n\t\tdelete this._walls[x+\",\"+y];\n\t\tvar x = cx + 2*delta[0];\n\t\tvar y = cy + 2*delta[1];\n\t\tdelete this._walls[x+\",\"+y];\n\t}\n};\n\n/**\n * Returns vector in \"digging\" direction, or false, if this does not exist (or is not unique)\n */\nROT.Map.Digger.prototype._getDiggingDirection = function(cx, cy) {\n\tif (cx <= 0 || cy <= 0 || cx >= this._width - 1 || cy >= this._height - 1) { return null; }\n\n\tvar result = null;\n\tvar deltas = ROT.DIRS[4];\n\t\n\tfor (var i=0;i<deltas.length;i++) {\n\t\tvar delta = deltas[i];\n\t\tvar x = cx + delta[0];\n\t\tvar y = cy + delta[1];\n\t\t\n\t\tif (!this._map[x][y]) { /* there already is another empty neighbor! */\n\t\t\tif (result) { return null; }\n\t\t\tresult = delta;\n\t\t}\n\t}\n\t\n\t/* no empty neighbor */\n\tif (!result) { return null; }\n\t\n\treturn [-result[0], -result[1]];\n};\n\n/**\n * Find empty spaces surrounding rooms, and apply doors.\n */\nROT.Map.Digger.prototype._addDoors = function() {\n\tvar data = this._map;\n\tvar isWallCallback = function(x, y) {\n\t\treturn (data[x][y] == 1);\n\t};\n\tfor (var i = 0; i < this._rooms.length; i++ ) {\n\t\tvar room = this._rooms[i];\n\t\troom.clearDoors();\n\t\troom.addDoors(isWallCallback);\n\t}\n};\n/**\n * @class Dungeon generator which tries to fill the space evenly. Generates independent rooms and tries to connect them.\n * @augments ROT.Map.Dungeon\n */\nROT.Map.Uniform = function(width, height, options) {\n\tROT.Map.Dungeon.call(this, width, height);\n\n\tthis._options = {\n\t\troomWidth: [3, 9], /* room minimum and maximum width */\n\t\troomHeight: [3, 5], /* room minimum and maximum height */\n\t\troomDugPercentage: 0.1, /* we stop after this percentage of level area has been dug out by rooms */\n\t\ttimeLimit: 1000 /* we stop after this much time has passed (msec) */\n\t};\n\tfor (var p in options) { this._options[p] = options[p]; }\n\n\tthis._roomAttempts = 20; /* new room is created N-times until is considered as impossible to generate */\n\tthis._corridorAttempts = 20; /* corridors are tried N-times until the level is considered as impossible to connect */\n\n\tthis._connected = []; /* list of already connected rooms */\n\tthis._unconnected = []; /* list of remaining unconnected rooms */\n\t\n\tthis._digCallback = this._digCallback.bind(this);\n\tthis._canBeDugCallback = this._canBeDugCallback.bind(this);\n\tthis._isWallCallback = this._isWallCallback.bind(this);\n};\nROT.Map.Uniform.extend(ROT.Map.Dungeon);\n\n/**\n * Create a map. If the time limit has been hit, returns null.\n * @see ROT.Map#create\n */\nROT.Map.Uniform.prototype.create = function(callback) {\n\tvar t1 = Date.now();\n\twhile (1) {\n\t\tvar t2 = Date.now();\n\t\tif (t2 - t1 > this._options.timeLimit) { return null; } /* time limit! */\n\t\n\t\tthis._map = this._fillMap(1);\n\t\tthis._dug = 0;\n\t\tthis._rooms = [];\n\t\tthis._unconnected = [];\n\t\tthis._generateRooms();\n\t\tif (this._rooms.length < 2) { continue; }\n\t\tif (this._generateCorridors()) { break; }\n\t}\n\t\n\tif (callback) {\n\t\tfor (var i=0;i<this._width;i++) {\n\t\t\tfor (var j=0;j<this._height;j++) {\n\t\t\t\tcallback(i, j, this._map[i][j]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn this;\n};\n\n/**\n * Generates a suitable amount of rooms\n */\nROT.Map.Uniform.prototype._generateRooms = function() {\n\tvar w = this._width-2;\n\tvar h = this._height-2;\n\n\tdo {\n\t\tvar room = this._generateRoom();\n\t\tif (this._dug/(w*h) > this._options.roomDugPercentage) { break; } /* achieved requested amount of free space */\n\t} while (room);\n\n\t/* either enough rooms, or not able to generate more of them :) */\n};\n\n/**\n * Try to generate one room\n */\nROT.Map.Uniform.prototype._generateRoom = function() {\n\tvar count = 0;\n\twhile (count < this._roomAttempts) {\n\t\tcount++;\n\t\t\n\t\tvar room = ROT.Map.Feature.Room.createRandom(this._width, this._height, this._options);\n\t\tif (!room.isValid(this._isWallCallback, this._canBeDugCallback)) { continue; }\n\t\t\n\t\troom.create(this._digCallback);\n\t\tthis._rooms.push(room);\n\t\treturn room;\n\t} \n\n\t/* no room was generated in a given number of attempts */\n\treturn null;\n};\n\n/**\n * Generates connectors beween rooms\n * @returns {bool} success Was this attempt successfull?\n */\nROT.Map.Uniform.prototype._generateCorridors = function() {\n\tvar cnt = 0;\n\twhile (cnt < this._corridorAttempts) {\n\t\tcnt++;\n\t\tthis._corridors = [];\n\n\t\t/* dig rooms into a clear map */\n\t\tthis._map = this._fillMap(1);\n\t\tfor (var i=0;i<this._rooms.length;i++) { \n\t\t\tvar room = this._rooms[i];\n\t\t\troom.clearDoors();\n\t\t\troom.create(this._digCallback); \n\t\t}\n\n\t\tthis._unconnected = this._rooms.slice().randomize();\n\t\tthis._connected = [];\n\t\tif (this._unconnected.length) { this._connected.push(this._unconnected.pop()); } /* first one is always connected */\n\t\t\n\t\twhile (1) {\n\t\t\t/* 1. pick random connected room */\n\t\t\tvar connected = this._connected.random();\n\t\t\t\n\t\t\t/* 2. find closest unconnected */\n\t\t\tvar room1 = this._closestRoom(this._unconnected, connected);\n\t\t\t\n\t\t\t/* 3. connect it to closest connected */\n\t\t\tvar room2 = this._closestRoom(this._connected, room1);\n\t\t\t\n\t\t\tvar ok = this._connectRooms(room1, room2);\n\t\t\tif (!ok) { break; } /* stop connecting, re-shuffle */\n\t\t\t\n\t\t\tif (!this._unconnected.length) { return true; } /* done; no rooms remain */\n\t\t}\n\t}\n\treturn false;\n};\n\n/**\n * For a given room, find the closest one from the list\n */\nROT.Map.Uniform.prototype._closestRoom = function(rooms, room) {\n\tvar dist = Infinity;\n\tvar center = room.getCenter();\n\tvar result = null;\n\t\n\tfor (var i=0;i<rooms.length;i++) {\n\t\tvar r = rooms[i];\n\t\tvar c = r.getCenter();\n\t\tvar dx = c[0]-center[0];\n\t\tvar dy = c[1]-center[1];\n\t\tvar d = dx*dx+dy*dy;\n\t\t\n\t\tif (d < dist) {\n\t\t\tdist = d;\n\t\t\tresult = r;\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\nROT.Map.Uniform.prototype._connectRooms = function(room1, room2) {\n\t/*\n\t\troom1.debug();\n\t\troom2.debug();\n\t*/\n\n\tvar center1 = room1.getCenter();\n\tvar center2 = room2.getCenter();\n\n\tvar diffX = center2[0] - center1[0];\n\tvar diffY = center2[1] - center1[1];\n\n\tif (Math.abs(diffX) < Math.abs(diffY)) { /* first try connecting north-south walls */\n\t\tvar dirIndex1 = (diffY > 0 ? 2 : 0);\n\t\tvar dirIndex2 = (dirIndex1 + 2) % 4;\n\t\tvar min = room2.getLeft();\n\t\tvar max = room2.getRight();\n\t\tvar index = 0;\n\t} else { /* first try connecting east-west walls */\n\t\tvar dirIndex1 = (diffX > 0 ? 1 : 3);\n\t\tvar dirIndex2 = (dirIndex1 + 2) % 4;\n\t\tvar min = room2.getTop();\n\t\tvar max = room2.getBottom();\n\t\tvar index = 1;\n\t}\n\n\tvar start = this._placeInWall(room1, dirIndex1); /* corridor will start here */\n\tif (!start) { return false; }\n\n\tif (start[index] >= min && start[index] <= max) { /* possible to connect with straight line (I-like) */\n\t\tvar end = start.slice();\n\t\tvar value = null;\n\t\tswitch (dirIndex2) {\n\t\t\tcase 0: value = room2.getTop()-1; break;\n\t\t\tcase 1: value = room2.getRight()+1; break;\n\t\t\tcase 2: value = room2.getBottom()+1; break;\n\t\t\tcase 3: value = room2.getLeft()-1; break;\n\t\t}\n\t\tend[(index+1)%2] = value;\n\t\tthis._digLine([start, end]);\n\t\t\n\t} else if (start[index] < min-1 || start[index] > max+1) { /* need to switch target wall (L-like) */\n\n\t\tvar diff = start[index] - center2[index];\n\t\tswitch (dirIndex2) {\n\t\t\tcase 0:\n\t\t\tcase 1:\tvar rotation = (diff < 0 ? 3 : 1); break;\n\t\t\tcase 2:\n\t\t\tcase 3:\tvar rotation = (diff < 0 ? 1 : 3); break;\n\t\t}\n\t\tdirIndex2 = (dirIndex2 + rotation) % 4;\n\t\t\n\t\tvar end = this._placeInWall(room2, dirIndex2);\n\t\tif (!end) { return false; }\n\n\t\tvar mid = [0, 0];\n\t\tmid[index] = start[index];\n\t\tvar index2 = (index+1)%2;\n\t\tmid[index2] = end[index2];\n\t\tthis._digLine([start, mid, end]);\n\t\t\n\t} else { /* use current wall pair, but adjust the line in the middle (S-like) */\n\t\n\t\tvar index2 = (index+1)%2;\n\t\tvar end = this._placeInWall(room2, dirIndex2);\n\t\tif (!end) { return false; }\n\t\tvar mid = Math.round((end[index2] + start[index2])/2);\n\n\t\tvar mid1 = [0, 0];\n\t\tvar mid2 = [0, 0];\n\t\tmid1[index] = start[index];\n\t\tmid1[index2] = mid;\n\t\tmid2[index] = end[index];\n\t\tmid2[index2] = mid;\n\t\tthis._digLine([start, mid1, mid2, end]);\n\t}\n\n\troom1.addDoor(start[0], start[1]);\n\troom2.addDoor(end[0], end[1]);\n\t\n\tvar index = this._unconnected.indexOf(room1);\n\tif (index != -1) {\n\t\tthis._unconnected.splice(index, 1);\n\t\tthis._connected.push(room1);\n\t}\n\n\tvar index = this._unconnected.indexOf(room2);\n\tif (index != -1) {\n\t\tthis._unconnected.splice(index, 1);\n\t\tthis._connected.push(room2);\n\t}\n\t\n\treturn true;\n};\n\nROT.Map.Uniform.prototype._placeInWall = function(room, dirIndex) {\n\tvar start = [0, 0];\n\tvar dir = [0, 0];\n\tvar length = 0;\n\t\n\tswitch (dirIndex) {\n\t\tcase 0:\n\t\t\tdir = [1, 0];\n\t\t\tstart = [room.getLeft(), room.getTop()-1];\n\t\t\tlength = room.getRight()-room.getLeft()+1;\n\t\tbreak;\n\t\tcase 1:\n\t\t\tdir = [0, 1];\n\t\t\tstart = [room.getRight()+1, room.getTop()];\n\t\t\tlength = room.getBottom()-room.getTop()+1;\n\t\tbreak;\n\t\tcase 2:\n\t\t\tdir = [1, 0];\n\t\t\tstart = [room.getLeft(), room.getBottom()+1];\n\t\t\tlength = room.getRight()-room.getLeft()+1;\n\t\tbreak;\n\t\tcase 3:\n\t\t\tdir = [0, 1];\n\t\t\tstart = [room.getLeft()-1, room.getTop()];\n\t\t\tlength = room.getBottom()-room.getTop()+1;\n\t\tbreak;\n\t}\n\t\n\tvar avail = [];\n\tvar lastBadIndex = -2;\n\n\tfor (var i=0;i<length;i++) {\n\t\tvar x = start[0] + i*dir[0];\n\t\tvar y = start[1] + i*dir[1];\n\t\tavail.push(null);\n\t\t\n\t\tvar isWall = (this._map[x][y] == 1);\n\t\tif (isWall) {\n\t\t\tif (lastBadIndex != i-1) { avail[i] = [x, y]; }\n\t\t} else {\n\t\t\tlastBadIndex = i;\n\t\t\tif (i) { avail[i-1] = null; }\n\t\t}\n\t}\n\t\n\tfor (var i=avail.length-1; i>=0; i--) {\n\t\tif (!avail[i]) { avail.splice(i, 1); }\n\t}\n\treturn (avail.length ? avail.random() : null);\n};\n\n/**\n * Dig a polyline.\n */\nROT.Map.Uniform.prototype._digLine = function(points) {\n\tfor (var i=1;i<points.length;i++) {\n\t\tvar start = points[i-1];\n\t\tvar end = points[i];\n\t\tvar corridor = new ROT.Map.Feature.Corridor(start[0], start[1], end[0], end[1]);\n\t\tcorridor.create(this._digCallback);\n\t\tthis._corridors.push(corridor);\n\t}\n};\n\nROT.Map.Uniform.prototype._digCallback = function(x, y, value) {\n\tthis._map[x][y] = value;\n\tif (value == 0) { this._dug++; }\n};\n\nROT.Map.Uniform.prototype._isWallCallback = function(x, y) {\n\tif (x < 0 || y < 0 || x >= this._width || y >= this._height) { return false; }\n\treturn (this._map[x][y] == 1);\n};\n\nROT.Map.Uniform.prototype._canBeDugCallback = function(x, y) {\n\tif (x < 1 || y < 1 || x+1 >= this._width || y+1 >= this._height) { return false; }\n\treturn (this._map[x][y] == 1);\n};\n\n/**\n * @author hyakugei\n * @class Dungeon generator which uses the \"orginal\" Rogue dungeon generation algorithm. See http://kuoi.com/~kamikaze/GameDesign/art07_rogue_dungeon.php\n * @augments ROT.Map\n * @param {int} [width=ROT.DEFAULT_WIDTH]\n * @param {int} [height=ROT.DEFAULT_HEIGHT]\n * @param {object} [options] Options\n * @param {int[]} [options.cellWidth=3] Number of cells to create on the horizontal (number of rooms horizontally)\n * @param {int[]} [options.cellHeight=3] Number of cells to create on the vertical (number of rooms vertically)\n * @param {int} [options.roomWidth] Room min and max width - normally set auto-magically via the constructor.\n * @param {int} [options.roomHeight] Room min and max height - normally set auto-magically via the constructor.\n */\nROT.Map.Rogue = function (width, height, options) {\n\tROT.Map.call(this, width, height);\n\n\tthis._options = {\n\t\tcellWidth: 3,  // NOTE to self, these could probably work the same as the roomWidth/room Height values\n\t\tcellHeight: 3  //     ie. as an array with min-max values for each direction....\n\t};\n\n\tfor (var p in options) { this._options[p] = options[p]; }\n\n\t/*\n\tSet the room sizes according to the over-all width of the map,\n\tand the cell sizes.\n\t*/\n\tif (!this._options.hasOwnProperty(\"roomWidth\")) {\n\t\tthis._options[\"roomWidth\"] = this._calculateRoomSize(this._width, this._options[\"cellWidth\"]);\n\t}\n\tif (!this._options.hasOwnProperty(\"roomHeight\")) {\n\t\tthis._options[\"roomHeight\"] = this._calculateRoomSize(this._height, this._options[\"cellHeight\"]);\n\t}\n\n};\n\nROT.Map.Rogue.extend(ROT.Map);\n\n/**\n * @see ROT.Map#create\n */\nROT.Map.Rogue.prototype.create = function (callback) {\n\tthis.map = this._fillMap(1);\n\tthis.rooms = [];\n\tthis.connectedCells = [];\n\n\tthis._initRooms();\n\tthis._connectRooms();\n\tthis._connectUnconnectedRooms();\n\tthis._createRandomRoomConnections();\n\tthis._createRooms();\n\tthis._createCorridors();\n\n\tif (callback) {\n\t\tfor (var i = 0; i < this._width; i++) {\n\t\t\tfor (var j = 0; j < this._height; j++) {\n\t\t\t\tcallback(i, j, this.map[i][j]);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this;\n};\n\nROT.Map.Rogue.prototype._calculateRoomSize = function (size, cell) {\n\tvar max = Math.floor((size/cell) * 0.8);\n\tvar min = Math.floor((size/cell) * 0.25);\n\tif (min < 2) { min = 2; }\n\tif (max < 2) { max = 2; }\n\treturn [min, max];\n};\n\nROT.Map.Rogue.prototype._initRooms = function () {\n\t// create rooms array. This is the \"grid\" list from the algo.\n\tfor (var i = 0; i < this._options.cellWidth; i++) {\n\t\tthis.rooms.push([]);\n\t\tfor(var j = 0; j < this._options.cellHeight; j++) {\n\t\t\tthis.rooms[i].push({\"x\":0, \"y\":0, \"width\":0, \"height\":0, \"connections\":[], \"cellx\":i, \"celly\":j});\n\t\t}\n\t}\n};\n\nROT.Map.Rogue.prototype._connectRooms = function () {\n\t//pick random starting grid\n\tvar cgx = ROT.RNG.getUniformInt(0, this._options.cellWidth-1);\n\tvar cgy = ROT.RNG.getUniformInt(0, this._options.cellHeight-1);\n\n\tvar idx;\n\tvar ncgx;\n\tvar ncgy;\n\n\tvar found = false;\n\tvar room;\n\tvar otherRoom;\n\n\t// find  unconnected neighbour cells\n\tdo {\n\n\t\t//var dirToCheck = [0, 1, 2, 3, 4, 5, 6, 7];\n\t\tvar dirToCheck = [0, 2, 4, 6];\n\t\tdirToCheck = dirToCheck.randomize();\n\n\t\tdo {\n\t\t\tfound = false;\n\t\t\tidx = dirToCheck.pop();\n\n\t\t\tncgx = cgx + ROT.DIRS[8][idx][0];\n\t\t\tncgy = cgy + ROT.DIRS[8][idx][1];\n\n\t\t\tif (ncgx < 0 || ncgx >= this._options.cellWidth) { continue; }\n\t\t\tif (ncgy < 0 || ncgy >= this._options.cellHeight) { continue; }\n\n\t\t\troom = this.rooms[cgx][cgy];\n\n\t\t\tif (room[\"connections\"].length > 0) {\n\t\t\t\t// as long as this room doesn't already coonect to me, we are ok with it.\n\t\t\t\tif (room[\"connections\"][0][0] == ncgx && room[\"connections\"][0][1] == ncgy) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\totherRoom = this.rooms[ncgx][ncgy];\n\n\t\t\tif (otherRoom[\"connections\"].length == 0) {\n\t\t\t\totherRoom[\"connections\"].push([cgx, cgy]);\n\n\t\t\t\tthis.connectedCells.push([ncgx, ncgy]);\n\t\t\t\tcgx = ncgx;\n\t\t\t\tcgy = ncgy;\n\t\t\t\tfound = true;\n\t\t\t}\n\n\t\t} while (dirToCheck.length > 0 && found == false);\n\n\t} while (dirToCheck.length > 0);\n\n};\n\nROT.Map.Rogue.prototype._connectUnconnectedRooms = function () {\n\t//While there are unconnected rooms, try to connect them to a random connected neighbor\n\t//(if a room has no connected neighbors yet, just keep cycling, you'll fill out to it eventually).\n\tvar cw = this._options.cellWidth;\n\tvar ch = this._options.cellHeight;\n\n\tthis.connectedCells = this.connectedCells.randomize();\n\tvar room;\n\tvar otherRoom;\n\tvar validRoom;\n\n\tfor (var i = 0; i < this._options.cellWidth; i++) {\n\t\tfor (var j = 0; j < this._options.cellHeight; j++)  {\n\n\t\t\troom = this.rooms[i][j];\n\n\t\t\tif (room[\"connections\"].length == 0) {\n\t\t\t\tvar directions = [0, 2, 4, 6];\n\t\t\t\tdirections = directions.randomize();\n\n\t\t\t\tvalidRoom = false;\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvar dirIdx = directions.pop();\n\t\t\t\t\tvar newI = i + ROT.DIRS[8][dirIdx][0];\n\t\t\t\t\tvar newJ = j + ROT.DIRS[8][dirIdx][1];\n\n\t\t\t\t\tif (newI < 0 || newI >= cw || newJ < 0 || newJ >= ch) { continue; }\n\n\t\t\t\t\totherRoom = this.rooms[newI][newJ];\n\n\t\t\t\t\tvalidRoom = true;\n\n\t\t\t\t\tif (otherRoom[\"connections\"].length == 0) { break; }\n\n\t\t\t\t\tfor (var k = 0; k < otherRoom[\"connections\"].length; k++) {\n\t\t\t\t\t\tif (otherRoom[\"connections\"][k][0] == i && otherRoom[\"connections\"][k][1] == j) {\n\t\t\t\t\t\t\tvalidRoom = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (validRoom) { break; }\n\n\t\t\t\t} while (directions.length);\n\n\t\t\t\tif (validRoom) {\n\t\t\t\t\troom[\"connections\"].push([otherRoom[\"cellx\"], otherRoom[\"celly\"]]);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(\"-- Unable to connect room.\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\nROT.Map.Rogue.prototype._createRandomRoomConnections = function (connections) {\n\t// Empty for now.\n};\n\n\nROT.Map.Rogue.prototype._createRooms = function () {\n\t// Create Rooms\n\n\tvar w = this._width;\n\tvar h = this._height;\n\n\tvar cw = this._options.cellWidth;\n\tvar ch = this._options.cellHeight;\n\n\tvar cwp = Math.floor(this._width / cw);\n\tvar chp = Math.floor(this._height / ch);\n\n\tvar roomw;\n\tvar roomh;\n\tvar roomWidth = this._options[\"roomWidth\"];\n\tvar roomHeight = this._options[\"roomHeight\"];\n\tvar sx;\n\tvar sy;\n\tvar otherRoom;\n\n\tfor (var i = 0; i < cw; i++) {\n\t\tfor (var j = 0; j < ch; j++) {\n\t\t\tsx = cwp * i;\n\t\t\tsy = chp * j;\n\n\t\t\tif (sx == 0) { sx = 1; }\n\t\t\tif (sy == 0) { sy = 1; }\n\n\t\t\troomw = ROT.RNG.getUniformInt(roomWidth[0], roomWidth[1]);\n\t\t\troomh = ROT.RNG.getUniformInt(roomHeight[0], roomHeight[1]);\n\n\t\t\tif (j > 0) {\n\t\t\t\totherRoom = this.rooms[i][j-1];\n\t\t\t\twhile (sy - (otherRoom[\"y\"] + otherRoom[\"height\"] ) < 3) {\n\t\t\t\t\tsy++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (i > 0) {\n\t\t\t\totherRoom = this.rooms[i-1][j];\n\t\t\t\twhile(sx - (otherRoom[\"x\"] + otherRoom[\"width\"]) < 3) {\n\t\t\t\t\tsx++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar sxOffset = Math.round(ROT.RNG.getUniformInt(0, cwp-roomw)/2);\n\t\t\tvar syOffset = Math.round(ROT.RNG.getUniformInt(0, chp-roomh)/2);\n\n\t\t\twhile (sx + sxOffset + roomw >= w) {\n\t\t\t\tif(sxOffset) {\n\t\t\t\t\tsxOffset--;\n\t\t\t\t} else {\n\t\t\t\t\troomw--;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twhile (sy + syOffset + roomh >= h) {\n\t\t\t\tif(syOffset) {\n\t\t\t\t\tsyOffset--;\n\t\t\t\t} else {\n\t\t\t\t\troomh--;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tsx = sx + sxOffset;\n\t\t\tsy = sy + syOffset;\n\n\t\t\tthis.rooms[i][j][\"x\"] = sx;\n\t\t\tthis.rooms[i][j][\"y\"] = sy;\n\t\t\tthis.rooms[i][j][\"width\"] = roomw;\n\t\t\tthis.rooms[i][j][\"height\"] = roomh;\n\n\t\t\tfor (var ii = sx; ii < sx + roomw; ii++) {\n\t\t\t\tfor (var jj = sy; jj < sy + roomh; jj++) {\n\t\t\t\t\tthis.map[ii][jj] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\nROT.Map.Rogue.prototype._getWallPosition = function (aRoom, aDirection) {\n\tvar rx;\n\tvar ry;\n\tvar door;\n\n\tif (aDirection == 1 || aDirection == 3) {\n\t\trx = ROT.RNG.getUniformInt(aRoom[\"x\"] + 1, aRoom[\"x\"] + aRoom[\"width\"] - 2);\n\t\tif (aDirection == 1) {\n\t\t\try = aRoom[\"y\"] - 2;\n\t\t\tdoor = ry + 1;\n\t\t} else {\n\t\t\try = aRoom[\"y\"] + aRoom[\"height\"] + 1;\n\t\t\tdoor = ry -1;\n\t\t}\n\n\t\tthis.map[rx][door] = 0; // i'm not setting a specific 'door' tile value right now, just empty space.\n\n\t} else if (aDirection == 2 || aDirection == 4) {\n\t\try = ROT.RNG.getUniformInt(aRoom[\"y\"] + 1, aRoom[\"y\"] + aRoom[\"height\"] - 2);\n\t\tif(aDirection == 2) {\n\t\t\trx = aRoom[\"x\"] + aRoom[\"width\"] + 1;\n\t\t\tdoor = rx - 1;\n\t\t} else {\n\t\t\trx = aRoom[\"x\"] - 2;\n\t\t\tdoor = rx + 1;\n\t\t}\n\n\t\tthis.map[door][ry] = 0; // i'm not setting a specific 'door' tile value right now, just empty space.\n\n\t}\n\treturn [rx, ry];\n};\n\n/***\n* @param startPosition a 2 element array\n* @param endPosition a 2 element array\n*/\nROT.Map.Rogue.prototype._drawCorridor = function (startPosition, endPosition) {\n\tvar xOffset = endPosition[0] - startPosition[0];\n\tvar yOffset = endPosition[1] - startPosition[1];\n\n\tvar xpos = startPosition[0];\n\tvar ypos = startPosition[1];\n\n\tvar tempDist;\n\tvar xDir;\n\tvar yDir;\n\n\tvar move; // 2 element array, element 0 is the direction, element 1 is the total value to move.\n\tvar moves = []; // a list of 2 element arrays\n\n\tvar xAbs = Math.abs(xOffset);\n\tvar yAbs = Math.abs(yOffset);\n\n\tvar percent = ROT.RNG.getUniform(); // used to split the move at different places along the long axis\n\tvar firstHalf = percent;\n\tvar secondHalf = 1 - percent;\n\n\txDir = xOffset > 0 ? 2 : 6;\n\tyDir = yOffset > 0 ? 4 : 0;\n\n\tif (xAbs < yAbs) {\n\t\t// move firstHalf of the y offset\n\t\ttempDist = Math.ceil(yAbs * firstHalf);\n\t\tmoves.push([yDir, tempDist]);\n\t\t// move all the x offset\n\t\tmoves.push([xDir, xAbs]);\n\t\t// move sendHalf of the  y offset\n\t\ttempDist = Math.floor(yAbs * secondHalf);\n\t\tmoves.push([yDir, tempDist]);\n\t} else {\n\t\t//  move firstHalf of the x offset\n\t\ttempDist = Math.ceil(xAbs * firstHalf);\n\t\tmoves.push([xDir, tempDist]);\n\t\t// move all the y offset\n\t\tmoves.push([yDir, yAbs]);\n\t\t// move secondHalf of the x offset.\n\t\ttempDist = Math.floor(xAbs * secondHalf);\n\t\tmoves.push([xDir, tempDist]);\n\t}\n\n\tthis.map[xpos][ypos] = 0;\n\n\twhile (moves.length > 0) {\n\t\tmove = moves.pop();\n\t\twhile (move[1] > 0) {\n\t\t\txpos += ROT.DIRS[8][move[0]][0];\n\t\t\typos += ROT.DIRS[8][move[0]][1];\n\t\t\tthis.map[xpos][ypos] = 0;\n\t\t\tmove[1] = move[1] - 1;\n\t\t}\n\t}\n};\n\nROT.Map.Rogue.prototype._createCorridors = function () {\n\t// Draw Corridors between connected rooms\n\n\tvar cw = this._options.cellWidth;\n\tvar ch = this._options.cellHeight;\n\tvar room;\n\tvar connection;\n\tvar otherRoom;\n\tvar wall;\n\tvar otherWall;\n\n\tfor (var i = 0; i < cw; i++) {\n\t\tfor (var j = 0; j < ch; j++) {\n\t\t\troom = this.rooms[i][j];\n\n\t\t\tfor (var k = 0; k < room[\"connections\"].length; k++) {\n\n\t\t\t\tconnection = room[\"connections\"][k];\n\n\t\t\t\totherRoom = this.rooms[connection[0]][connection[1]];\n\n\t\t\t\t// figure out what wall our corridor will start one.\n\t\t\t\t// figure out what wall our corridor will end on.\n\t\t\t\tif (otherRoom[\"cellx\"] > room[\"cellx\"]) {\n\t\t\t\t\twall = 2;\n\t\t\t\t\totherWall = 4;\n\t\t\t\t} else if (otherRoom[\"cellx\"] < room[\"cellx\"]) {\n\t\t\t\t\twall = 4;\n\t\t\t\t\totherWall = 2;\n\t\t\t\t} else if(otherRoom[\"celly\"] > room[\"celly\"]) {\n\t\t\t\t\twall = 3;\n\t\t\t\t\totherWall = 1;\n\t\t\t\t} else if(otherRoom[\"celly\"] < room[\"celly\"]) {\n\t\t\t\t\twall = 1;\n\t\t\t\t\totherWall = 3;\n\t\t\t\t}\n\n\t\t\t\tthis._drawCorridor(this._getWallPosition(room, wall), this._getWallPosition(otherRoom, otherWall));\n\t\t\t}\n\t\t}\n\t}\n};\n/**\n * @class Dungeon feature; has own .create() method\n */\nROT.Map.Feature = function() {};\nROT.Map.Feature.prototype.isValid = function(canBeDugCallback) {};\nROT.Map.Feature.prototype.create = function(digCallback) {};\nROT.Map.Feature.prototype.debug = function() {};\nROT.Map.Feature.createRandomAt = function(x, y, dx, dy, options) {};\n\n/**\n * @class Room\n * @augments ROT.Map.Feature\n * @param {int} x1\n * @param {int} y1\n * @param {int} x2\n * @param {int} y2\n * @param {int} [doorX]\n * @param {int} [doorY]\n */\nROT.Map.Feature.Room = function(x1, y1, x2, y2, doorX, doorY) {\n\tthis._x1 = x1;\n\tthis._y1 = y1;\n\tthis._x2 = x2;\n\tthis._y2 = y2;\n\tthis._doors = {};\n\tif (arguments.length > 4) { this.addDoor(doorX, doorY); }\n};\nROT.Map.Feature.Room.extend(ROT.Map.Feature);\n\n/**\n * Room of random size, with a given doors and direction\n */\nROT.Map.Feature.Room.createRandomAt = function(x, y, dx, dy, options) {\n\tvar min = options.roomWidth[0];\n\tvar max = options.roomWidth[1];\n\tvar width = ROT.RNG.getUniformInt(min, max);\n\t\n\tvar min = options.roomHeight[0];\n\tvar max = options.roomHeight[1];\n\tvar height = ROT.RNG.getUniformInt(min, max);\n\t\n\tif (dx == 1) { /* to the right */\n\t\tvar y2 = y - Math.floor(ROT.RNG.getUniform() * height);\n\t\treturn new this(x+1, y2, x+width, y2+height-1, x, y);\n\t}\n\t\n\tif (dx == -1) { /* to the left */\n\t\tvar y2 = y - Math.floor(ROT.RNG.getUniform() * height);\n\t\treturn new this(x-width, y2, x-1, y2+height-1, x, y);\n\t}\n\n\tif (dy == 1) { /* to the bottom */\n\t\tvar x2 = x - Math.floor(ROT.RNG.getUniform() * width);\n\t\treturn new this(x2, y+1, x2+width-1, y+height, x, y);\n\t}\n\n\tif (dy == -1) { /* to the top */\n\t\tvar x2 = x - Math.floor(ROT.RNG.getUniform() * width);\n\t\treturn new this(x2, y-height, x2+width-1, y-1, x, y);\n\t}\n\n        throw new Error(\"dx or dy must be 1 or -1\");\n};\n\n/**\n * Room of random size, positioned around center coords\n */\nROT.Map.Feature.Room.createRandomCenter = function(cx, cy, options) {\n\tvar min = options.roomWidth[0];\n\tvar max = options.roomWidth[1];\n\tvar width = ROT.RNG.getUniformInt(min, max);\n\t\n\tvar min = options.roomHeight[0];\n\tvar max = options.roomHeight[1];\n\tvar height = ROT.RNG.getUniformInt(min, max);\n\n\tvar x1 = cx - Math.floor(ROT.RNG.getUniform()*width);\n\tvar y1 = cy - Math.floor(ROT.RNG.getUniform()*height);\n\tvar x2 = x1 + width - 1;\n\tvar y2 = y1 + height - 1;\n\n\treturn new this(x1, y1, x2, y2);\n};\n\n/**\n * Room of random size within a given dimensions\n */\nROT.Map.Feature.Room.createRandom = function(availWidth, availHeight, options) {\n\tvar min = options.roomWidth[0];\n\tvar max = options.roomWidth[1];\n\tvar width = ROT.RNG.getUniformInt(min, max);\n\t\n\tvar min = options.roomHeight[0];\n\tvar max = options.roomHeight[1];\n\tvar height = ROT.RNG.getUniformInt(min, max);\n\t\n\tvar left = availWidth - width - 1;\n\tvar top = availHeight - height - 1;\n\n\tvar x1 = 1 + Math.floor(ROT.RNG.getUniform()*left);\n\tvar y1 = 1 + Math.floor(ROT.RNG.getUniform()*top);\n\tvar x2 = x1 + width - 1;\n\tvar y2 = y1 + height - 1;\n\n\treturn new this(x1, y1, x2, y2);\n};\n\nROT.Map.Feature.Room.prototype.addDoor = function(x, y) {\n\tthis._doors[x+\",\"+y] = 1;\n\treturn this;\n};\n\n/**\n * @param {function}\n */\nROT.Map.Feature.Room.prototype.getDoors = function(callback) {\n\tfor (var key in this._doors) {\n\t\tvar parts = key.split(\",\");\n\t\tcallback(parseInt(parts[0]), parseInt(parts[1]));\n\t}\n\treturn this;\n};\n\nROT.Map.Feature.Room.prototype.clearDoors = function() {\n\tthis._doors = {};\n\treturn this;\n};\n\nROT.Map.Feature.Room.prototype.addDoors = function(isWallCallback) {\n\tvar left = this._x1-1;\n\tvar right = this._x2+1;\n\tvar top = this._y1-1;\n\tvar bottom = this._y2+1;\n\n\tfor (var x=left; x<=right; x++) {\n\t\tfor (var y=top; y<=bottom; y++) {\n\t\t\tif (x != left && x != right && y != top && y != bottom) { continue; }\n\t\t\tif (isWallCallback(x, y)) { continue; }\n\n\t\t\tthis.addDoor(x, y);\n\t\t}\n\t}\n\n\treturn this;\n};\n\nROT.Map.Feature.Room.prototype.debug = function() {\n\tconsole.log(\"room\", this._x1, this._y1, this._x2, this._y2);\n};\n\nROT.Map.Feature.Room.prototype.isValid = function(isWallCallback, canBeDugCallback) { \n\tvar left = this._x1-1;\n\tvar right = this._x2+1;\n\tvar top = this._y1-1;\n\tvar bottom = this._y2+1;\n\t\n\tfor (var x=left; x<=right; x++) {\n\t\tfor (var y=top; y<=bottom; y++) {\n\t\t\tif (x == left || x == right || y == top || y == bottom) {\n\t\t\t\tif (!isWallCallback(x, y)) { return false; }\n\t\t\t} else {\n\t\t\t\tif (!canBeDugCallback(x, y)) { return false; }\n\t\t\t}\n\t\t}\n\t}\n\n\treturn true;\n};\n\n/**\n * @param {function} digCallback Dig callback with a signature (x, y, value). Values: 0 = empty, 1 = wall, 2 = door. Multiple doors are allowed.\n */\nROT.Map.Feature.Room.prototype.create = function(digCallback) { \n\tvar left = this._x1-1;\n\tvar right = this._x2+1;\n\tvar top = this._y1-1;\n\tvar bottom = this._y2+1;\n\t\n\tvar value = 0;\n\tfor (var x=left; x<=right; x++) {\n\t\tfor (var y=top; y<=bottom; y++) {\n\t\t\tif (x+\",\"+y in this._doors) {\n\t\t\t\tvalue = 2;\n\t\t\t} else if (x == left || x == right || y == top || y == bottom) {\n\t\t\t\tvalue = 1;\n\t\t\t} else {\n\t\t\t\tvalue = 0;\n\t\t\t}\n\t\t\tdigCallback(x, y, value);\n\t\t}\n\t}\n};\n\nROT.Map.Feature.Room.prototype.getCenter = function() {\n\treturn [Math.round((this._x1 + this._x2)/2), Math.round((this._y1 + this._y2)/2)];\n};\n\nROT.Map.Feature.Room.prototype.getLeft = function() {\n\treturn this._x1;\n};\n\nROT.Map.Feature.Room.prototype.getRight = function() {\n\treturn this._x2;\n};\n\nROT.Map.Feature.Room.prototype.getTop = function() {\n\treturn this._y1;\n};\n\nROT.Map.Feature.Room.prototype.getBottom = function() {\n\treturn this._y2;\n};\n\n/**\n * @class Corridor\n * @augments ROT.Map.Feature\n * @param {int} startX\n * @param {int} startY\n * @param {int} endX\n * @param {int} endY\n */\nROT.Map.Feature.Corridor = function(startX, startY, endX, endY) {\n\tthis._startX = startX;\n\tthis._startY = startY;\n\tthis._endX = endX; \n\tthis._endY = endY;\n\tthis._endsWithAWall = true;\n};\nROT.Map.Feature.Corridor.extend(ROT.Map.Feature);\n\nROT.Map.Feature.Corridor.createRandomAt = function(x, y, dx, dy, options) {\n\tvar min = options.corridorLength[0];\n\tvar max = options.corridorLength[1];\n\tvar length = ROT.RNG.getUniformInt(min, max);\n\t\n\treturn new this(x, y, x + dx*length, y + dy*length);\n};\n\nROT.Map.Feature.Corridor.prototype.debug = function() {\n\tconsole.log(\"corridor\", this._startX, this._startY, this._endX, this._endY);\n};\n\nROT.Map.Feature.Corridor.prototype.isValid = function(isWallCallback, canBeDugCallback){ \n\tvar sx = this._startX;\n\tvar sy = this._startY;\n\tvar dx = this._endX-sx;\n\tvar dy = this._endY-sy;\n\tvar length = 1 + Math.max(Math.abs(dx), Math.abs(dy));\n\t\n\tif (dx) { dx = dx/Math.abs(dx); }\n\tif (dy) { dy = dy/Math.abs(dy); }\n\tvar nx = dy;\n\tvar ny = -dx;\n\t\n\tvar ok = true;\n\tfor (var i=0; i<length; i++) {\n\t\tvar x = sx + i*dx;\n\t\tvar y = sy + i*dy;\n\n\t\tif (!canBeDugCallback(     x,      y)) { ok = false; }\n\t\tif (!isWallCallback  (x + nx, y + ny)) { ok = false; }\n\t\tif (!isWallCallback  (x - nx, y - ny)) { ok = false; }\n\t\t\n\t\tif (!ok) {\n\t\t\tlength = i;\n\t\t\tthis._endX = x-dx;\n\t\t\tthis._endY = y-dy;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\t/**\n\t * If the length degenerated, this corridor might be invalid\n\t */\n\t \n\t/* not supported */\n\tif (length == 0) { return false; } \n\t\n\t /* length 1 allowed only if the next space is empty */\n\tif (length == 1 && isWallCallback(this._endX + dx, this._endY + dy)) { return false; }\n\t\n\t/**\n\t * We do not want the corridor to crash into a corner of a room;\n\t * if any of the ending corners is empty, the N+1th cell of this corridor must be empty too.\n\t * \n\t * Situation:\n\t * #######1\n\t * .......?\n\t * #######2\n\t * \n\t * The corridor was dug from left to right.\n\t * 1, 2 - problematic corners, ? = N+1th cell (not dug)\n\t */\n\tvar firstCornerBad = !isWallCallback(this._endX + dx + nx, this._endY + dy + ny);\n\tvar secondCornerBad = !isWallCallback(this._endX + dx - nx, this._endY + dy - ny);\n\tthis._endsWithAWall = isWallCallback(this._endX + dx, this._endY + dy);\n\tif ((firstCornerBad || secondCornerBad) && this._endsWithAWall) { return false; }\n\n\treturn true;\n};\n\n/**\n * @param {function} digCallback Dig callback with a signature (x, y, value). Values: 0 = empty.\n */\nROT.Map.Feature.Corridor.prototype.create = function(digCallback) { \n\tvar sx = this._startX;\n\tvar sy = this._startY;\n\tvar dx = this._endX-sx;\n\tvar dy = this._endY-sy;\n\tvar length = 1+Math.max(Math.abs(dx), Math.abs(dy));\n\t\n\tif (dx) { dx = dx/Math.abs(dx); }\n\tif (dy) { dy = dy/Math.abs(dy); }\n\tvar nx = dy;\n\tvar ny = -dx;\n\t\n\tfor (var i=0; i<length; i++) {\n\t\tvar x = sx + i*dx;\n\t\tvar y = sy + i*dy;\n\t\tdigCallback(x, y, 0);\n\t}\n\t\n\treturn true;\n};\n\nROT.Map.Feature.Corridor.prototype.createPriorityWalls = function(priorityWallCallback) {\n\tif (!this._endsWithAWall) { return; }\n\n\tvar sx = this._startX;\n\tvar sy = this._startY;\n\n\tvar dx = this._endX-sx;\n\tvar dy = this._endY-sy;\n\tif (dx) { dx = dx/Math.abs(dx); }\n\tif (dy) { dy = dy/Math.abs(dy); }\n\tvar nx = dy;\n\tvar ny = -dx;\n\n\tpriorityWallCallback(this._endX + dx, this._endY + dy);\n\tpriorityWallCallback(this._endX + nx, this._endY + ny);\n\tpriorityWallCallback(this._endX - nx, this._endY - ny);\n};\n/**\n * @class Base noise generator\n */\nROT.Noise = function() {\n};\n\nROT.Noise.prototype.get = function(x, y) {};\n/**\n * A simple 2d implementation of simplex noise by Ondrej Zara\n *\n * Based on a speed-improved simplex noise algorithm for 2D, 3D and 4D in Java.\n * Which is based on example code by Stefan Gustavson (stegu@itn.liu.se).\n * With Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\n * Better rank ordering method by Stefan Gustavson in 2012.\n */\n\n/**\n * @class 2D simplex noise generator\n * @param {int} [gradients=256] Random gradients\n */\nROT.Noise.Simplex = function(gradients) {\n\tROT.Noise.call(this);\n\n\tthis._F2 = 0.5 * (Math.sqrt(3) - 1);\n\tthis._G2 = (3 - Math.sqrt(3)) / 6;\n\n\tthis._gradients = [\n\t\t[ 0, -1],\n\t\t[ 1, -1],\n\t\t[ 1,  0],\n\t\t[ 1,  1],\n\t\t[ 0,  1],\n\t\t[-1,  1],\n\t\t[-1,  0],\n\t\t[-1, -1]\n\t];\n\n\tvar permutations = [];\n\tvar count = gradients || 256;\n\tfor (var i=0;i<count;i++) { permutations.push(i); }\n\tpermutations = permutations.randomize();\n\n\tthis._perms = [];\n\tthis._indexes = [];\n\n\tfor (var i=0;i<2*count;i++) {\n\t\tthis._perms.push(permutations[i % count]);\n\t\tthis._indexes.push(this._perms[i] % this._gradients.length);\n\t}\n\n};\nROT.Noise.Simplex.extend(ROT.Noise);\n\nROT.Noise.Simplex.prototype.get = function(xin, yin) {\n\tvar perms = this._perms;\n\tvar indexes = this._indexes;\n\tvar count = perms.length/2;\n\tvar G2 = this._G2;\n\n\tvar n0 =0, n1 = 0, n2 = 0, gi; // Noise contributions from the three corners\n\n\t// Skew the input space to determine which simplex cell we're in\n\tvar s = (xin + yin) * this._F2; // Hairy factor for 2D\n\tvar i = Math.floor(xin + s);\n\tvar j = Math.floor(yin + s);\n\tvar t = (i + j) * G2;\n\tvar X0 = i - t; // Unskew the cell origin back to (x,y) space\n\tvar Y0 = j - t;\n\tvar x0 = xin - X0; // The x,y distances from the cell origin\n\tvar y0 = yin - Y0;\n\n\t// For the 2D case, the simplex shape is an equilateral triangle.\n\t// Determine which simplex we are in.\n\tvar i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n\tif (x0 > y0) {\n\t\ti1 = 1;\n\t\tj1 = 0;\n\t} else { // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n\t\ti1 = 0;\n\t\tj1 = 1;\n\t} // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n\n\t// A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n\t// a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n\t// c = (3-sqrt(3))/6\n\tvar x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n\tvar y1 = y0 - j1 + G2;\n\tvar x2 = x0 - 1 + 2*G2; // Offsets for last corner in (x,y) unskewed coords\n\tvar y2 = y0 - 1 + 2*G2;\n\n\t// Work out the hashed gradient indices of the three simplex corners\n\tvar ii = i.mod(count);\n\tvar jj = j.mod(count);\n\n\t// Calculate the contribution from the three corners\n\tvar t0 = 0.5 - x0*x0 - y0*y0;\n\tif (t0 >= 0) {\n\t\tt0 *= t0;\n\t\tgi = indexes[ii+perms[jj]];\n\t\tvar grad = this._gradients[gi];\n\t\tn0 = t0 * t0 * (grad[0] * x0 + grad[1] * y0);\n\t}\n\t\n\tvar t1 = 0.5 - x1*x1 - y1*y1;\n\tif (t1 >= 0) {\n\t\tt1 *= t1;\n\t\tgi = indexes[ii+i1+perms[jj+j1]];\n\t\tvar grad = this._gradients[gi];\n\t\tn1 = t1 * t1 * (grad[0] * x1 + grad[1] * y1);\n\t}\n\t\n\tvar t2 = 0.5 - x2*x2 - y2*y2;\n\tif (t2 >= 0) {\n\t\tt2 *= t2;\n\t\tgi = indexes[ii+1+perms[jj+1]];\n\t\tvar grad = this._gradients[gi];\n\t\tn2 = t2 * t2 * (grad[0] * x2 + grad[1] * y2);\n\t}\n\n\t// Add contributions from each corner to get the final noise value.\n\t// The result is scaled to return values in the interval [-1,1].\n\treturn 70 * (n0 + n1 + n2);\n}\n/**\n * @class Abstract FOV algorithm\n * @param {function} lightPassesCallback Does the light pass through x,y?\n * @param {object} [options]\n * @param {int} [options.topology=8] 4/6/8\n */\nROT.FOV = function(lightPassesCallback, options) {\n\tthis._lightPasses = lightPassesCallback;\n\tthis._options = {\n\t\ttopology: 8\n\t};\n\tfor (var p in options) { this._options[p] = options[p]; }\n};\n\n/**\n * Compute visibility for a 360-degree circle\n * @param {int} x\n * @param {int} y\n * @param {int} R Maximum visibility radius\n * @param {function} callback\n */\nROT.FOV.prototype.compute = function(x, y, R, callback) {};\n\n/**\n * Return all neighbors in a concentric ring\n * @param {int} cx center-x\n * @param {int} cy center-y\n * @param {int} r range\n */\nROT.FOV.prototype._getCircle = function(cx, cy, r) {\n\tvar result = [];\n\tvar dirs, countFactor, startOffset;\n\n\tswitch (this._options.topology) {\n\t\tcase 4:\n\t\t\tcountFactor = 1;\n\t\t\tstartOffset = [0, 1];\n\t\t\tdirs = [\n\t\t\t\tROT.DIRS[8][7],\n\t\t\t\tROT.DIRS[8][1],\n\t\t\t\tROT.DIRS[8][3],\n\t\t\t\tROT.DIRS[8][5]\n\t\t\t];\n\t\tbreak;\n\n\t\tcase 6:\n\t\t\tdirs = ROT.DIRS[6];\n\t\t\tcountFactor = 1;\n\t\t\tstartOffset = [-1, 1];\n\t\tbreak;\n\n\t\tcase 8:\n\t\t\tdirs = ROT.DIRS[4];\n\t\t\tcountFactor = 2;\n\t\t\tstartOffset = [-1, 1];\n\t\tbreak;\n\t}\n\n\t/* starting neighbor */\n\tvar x = cx + startOffset[0]*r;\n\tvar y = cy + startOffset[1]*r;\n\n\t/* circle */\n\tfor (var i=0;i<dirs.length;i++) {\n\t\tfor (var j=0;j<r*countFactor;j++) {\n\t\t\tresult.push([x, y]);\n\t\t\tx += dirs[i][0];\n\t\t\ty += dirs[i][1];\n\n\t\t}\n\t}\n\n\treturn result;\n};\n/**\n * @class Discrete shadowcasting algorithm. Obsoleted by Precise shadowcasting.\n * @augments ROT.FOV\n */\nROT.FOV.DiscreteShadowcasting = function(lightPassesCallback, options) {\n\tROT.FOV.call(this, lightPassesCallback, options);\n};\nROT.FOV.DiscreteShadowcasting.extend(ROT.FOV);\n\n/**\n * @see ROT.FOV#compute\n */\nROT.FOV.DiscreteShadowcasting.prototype.compute = function(x, y, R, callback) {\n\tvar center = this._coords;\n\tvar map = this._map;\n\n\t/* this place is always visible */\n\tcallback(x, y, 0, 1);\n\n\t/* standing in a dark place. FIXME is this a good idea?  */\n\tif (!this._lightPasses(x, y)) { return; }\n\t\n\t/* start and end angles */\n\tvar DATA = [];\n\t\n\tvar A, B, cx, cy, blocks;\n\n\t/* analyze surrounding cells in concentric rings, starting from the center */\n\tfor (var r=1; r<=R; r++) {\n\t\tvar neighbors = this._getCircle(x, y, r);\n\t\tvar angle = 360 / neighbors.length;\n\n\t\tfor (var i=0;i<neighbors.length;i++) {\n\t\t\tcx = neighbors[i][0];\n\t\t\tcy = neighbors[i][1];\n\t\t\tA = angle * (i - 0.5);\n\t\t\tB = A + angle;\n\t\t\t\n\t\t\tblocks = !this._lightPasses(cx, cy);\n\t\t\tif (this._visibleCoords(Math.floor(A), Math.ceil(B), blocks, DATA)) { callback(cx, cy, r, 1); }\n\t\t\t\n\t\t\tif (DATA.length == 2 && DATA[0] == 0 && DATA[1] == 360) { return; } /* cutoff? */\n\n\t\t} /* for all cells in this ring */\n\t} /* for all rings */\n};\n\n/**\n * @param {int} A start angle\n * @param {int} B end angle\n * @param {bool} blocks Does current cell block visibility?\n * @param {int[][]} DATA shadowed angle pairs\n */\nROT.FOV.DiscreteShadowcasting.prototype._visibleCoords = function(A, B, blocks, DATA) {\n\tif (A < 0) { \n\t\tvar v1 = this._visibleCoords(0, B, blocks, DATA);\n\t\tvar v2 = this._visibleCoords(360+A, 360, blocks, DATA);\n\t\treturn v1 || v2;\n\t}\n\t\n\tvar index = 0;\n\twhile (index < DATA.length && DATA[index] < A) { index++; }\n\t\n\tif (index == DATA.length) { /* completely new shadow */\n\t\tif (blocks) { DATA.push(A, B); } \n\t\treturn true;\n\t}\n\t\n\tvar count = 0;\n\t\n\tif (index % 2) { /* this shadow starts in an existing shadow, or within its ending boundary */\n\t\twhile (index < DATA.length && DATA[index] < B) {\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\t\n\t\tif (count == 0) { return false; }\n\t\t\n\t\tif (blocks) { \n\t\t\tif (count % 2) {\n\t\t\t\tDATA.splice(index-count, count, B);\n\t\t\t} else {\n\t\t\t\tDATA.splice(index-count, count);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn true;\n\n\t} else { /* this shadow starts outside an existing shadow, or within a starting boundary */\n\t\twhile (index < DATA.length && DATA[index] < B) {\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\t\n\t\t/* visible when outside an existing shadow, or when overlapping */\n\t\tif (A == DATA[index-count] && count == 1) { return false; }\n\t\t\n\t\tif (blocks) { \n\t\t\tif (count % 2) {\n\t\t\t\tDATA.splice(index-count, count, A);\n\t\t\t} else {\n\t\t\t\tDATA.splice(index-count, count, A, B);\n\t\t\t}\n\t\t}\n\t\t\t\n\t\treturn true;\n\t}\n};\n/**\n * @class Precise shadowcasting algorithm\n * @augments ROT.FOV\n */\nROT.FOV.PreciseShadowcasting = function(lightPassesCallback, options) {\n\tROT.FOV.call(this, lightPassesCallback, options);\n};\nROT.FOV.PreciseShadowcasting.extend(ROT.FOV);\n\n/**\n * @see ROT.FOV#compute\n */\nROT.FOV.PreciseShadowcasting.prototype.compute = function(x, y, R, callback) {\n\t/* this place is always visible */\n\tcallback(x, y, 0, 1);\n\n\t/* standing in a dark place. FIXME is this a good idea?  */\n\tif (!this._lightPasses(x, y)) { return; }\n\t\n\t/* list of all shadows */\n\tvar SHADOWS = [];\n\t\n\tvar cx, cy, blocks, A1, A2, visibility;\n\n\t/* analyze surrounding cells in concentric rings, starting from the center */\n\tfor (var r=1; r<=R; r++) {\n\t\tvar neighbors = this._getCircle(x, y, r);\n\t\tvar neighborCount = neighbors.length;\n\n\t\tfor (var i=0;i<neighborCount;i++) {\n\t\t\tcx = neighbors[i][0];\n\t\t\tcy = neighbors[i][1];\n\t\t\t/* shift half-an-angle backwards to maintain consistency of 0-th cells */\n\t\t\tA1 = [i ? 2*i-1 : 2*neighborCount-1, 2*neighborCount];\n\t\t\tA2 = [2*i+1, 2*neighborCount]; \n\t\t\t\n\t\t\tblocks = !this._lightPasses(cx, cy);\n\t\t\tvisibility = this._checkVisibility(A1, A2, blocks, SHADOWS);\n\t\t\tif (visibility) { callback(cx, cy, r, visibility); }\n\n\t\t\tif (SHADOWS.length == 2 && SHADOWS[0][0] == 0 && SHADOWS[1][0] == SHADOWS[1][1]) { return; } /* cutoff? */\n\n\t\t} /* for all cells in this ring */\n\t} /* for all rings */\n};\n\n/**\n * @param {int[2]} A1 arc start\n * @param {int[2]} A2 arc end\n * @param {bool} blocks Does current arc block visibility?\n * @param {int[][]} SHADOWS list of active shadows\n */\nROT.FOV.PreciseShadowcasting.prototype._checkVisibility = function(A1, A2, blocks, SHADOWS) {\n\tif (A1[0] > A2[0]) { /* split into two sub-arcs */\n\t\tvar v1 = this._checkVisibility(A1, [A1[1], A1[1]], blocks, SHADOWS);\n\t\tvar v2 = this._checkVisibility([0, 1], A2, blocks, SHADOWS);\n\t\treturn (v1+v2)/2;\n\t}\n\n\t/* index1: first shadow >= A1 */\n\tvar index1 = 0, edge1 = false;\n\twhile (index1 < SHADOWS.length) {\n\t\tvar old = SHADOWS[index1];\n\t\tvar diff = old[0]*A1[1] - A1[0]*old[1];\n\t\tif (diff >= 0) { /* old >= A1 */\n\t\t\tif (diff == 0 && !(index1 % 2)) { edge1 = true; }\n\t\t\tbreak;\n\t\t}\n\t\tindex1++;\n\t}\n\n\t/* index2: last shadow <= A2 */\n\tvar index2 = SHADOWS.length, edge2 = false;\n\twhile (index2--) {\n\t\tvar old = SHADOWS[index2];\n\t\tvar diff = A2[0]*old[1] - old[0]*A2[1];\n\t\tif (diff >= 0) { /* old <= A2 */\n\t\t\tif (diff == 0 && (index2 % 2)) { edge2 = true; }\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tvar visible = true;\n\tif (index1 == index2 && (edge1 || edge2)) {  /* subset of existing shadow, one of the edges match */\n\t\tvisible = false; \n\t} else if (edge1 && edge2 && index1+1==index2 && (index2 % 2)) { /* completely equivalent with existing shadow */\n\t\tvisible = false;\n\t} else if (index1 > index2 && (index1 % 2)) { /* subset of existing shadow, not touching */\n\t\tvisible = false;\n\t}\n\t\n\tif (!visible) { return 0; } /* fast case: not visible */\n\t\n\tvar visibleLength, P;\n\n\t/* compute the length of visible arc, adjust list of shadows (if blocking) */\n\tvar remove = index2-index1+1;\n\tif (remove % 2) {\n\t\tif (index1 % 2) { /* first edge within existing shadow, second outside */\n\t\t\tvar P = SHADOWS[index1];\n\t\t\tvisibleLength = (A2[0]*P[1] - P[0]*A2[1]) / (P[1] * A2[1]);\n\t\t\tif (blocks) { SHADOWS.splice(index1, remove, A2); }\n\t\t} else { /* second edge within existing shadow, first outside */\n\t\t\tvar P = SHADOWS[index2];\n\t\t\tvisibleLength = (P[0]*A1[1] - A1[0]*P[1]) / (A1[1] * P[1]);\n\t\t\tif (blocks) { SHADOWS.splice(index1, remove, A1); }\n\t\t}\n\t} else {\n\t\tif (index1 % 2) { /* both edges within existing shadows */\n\t\t\tvar P1 = SHADOWS[index1];\n\t\t\tvar P2 = SHADOWS[index2];\n\t\t\tvisibleLength = (P2[0]*P1[1] - P1[0]*P2[1]) / (P1[1] * P2[1]);\n\t\t\tif (blocks) { SHADOWS.splice(index1, remove); }\n\t\t} else { /* both edges outside existing shadows */\n\t\t\tif (blocks) { SHADOWS.splice(index1, remove, A1, A2); }\n\t\t\treturn 1; /* whole arc visible! */\n\t\t}\n\t}\n\n\tvar arcLength = (A2[0]*A1[1] - A1[0]*A2[1]) / (A1[1] * A2[1]);\n\n\treturn visibleLength/arcLength;\n};\n/**\n * @class Recursive shadowcasting algorithm\n * Currently only supports 4/8 topologies, not hexagonal.\n * Based on Peter Harkins' implementation of Björn Bergström's algorithm described here: http://www.roguebasin.com/index.php?title=FOV_using_recursive_shadowcasting\n * @augments ROT.FOV\n */\nROT.FOV.RecursiveShadowcasting = function(lightPassesCallback, options) {\n\tROT.FOV.call(this, lightPassesCallback, options);\n};\nROT.FOV.RecursiveShadowcasting.extend(ROT.FOV);\n\n/** Octants used for translating recursive shadowcasting offsets */\nROT.FOV.RecursiveShadowcasting.OCTANTS = [\n\t[-1,  0,  0,  1],\n\t[ 0, -1,  1,  0],\n\t[ 0, -1, -1,  0],\n\t[-1,  0,  0, -1],\n\t[ 1,  0,  0, -1],\n\t[ 0,  1, -1,  0],\n\t[ 0,  1,  1,  0],\n\t[ 1,  0,  0,  1]\n];\n\n/**\n * Compute visibility for a 360-degree circle\n * @param {int} x\n * @param {int} y\n * @param {int} R Maximum visibility radius\n * @param {function} callback\n */\nROT.FOV.RecursiveShadowcasting.prototype.compute = function(x, y, R, callback) {\n\t//You can always see your own tile\n\tcallback(x, y, 0, 1);\n\tfor(var i = 0; i < ROT.FOV.RecursiveShadowcasting.OCTANTS.length; i++) {\n\t\tthis._renderOctant(x, y, ROT.FOV.RecursiveShadowcasting.OCTANTS[i], R, callback);\n\t}\n};\n\n/**\n * Compute visibility for a 180-degree arc\n * @param {int} x\n * @param {int} y\n * @param {int} R Maximum visibility radius\n * @param {int} dir Direction to look in (expressed in a ROT.DIRS value);\n * @param {function} callback\n */\nROT.FOV.RecursiveShadowcasting.prototype.compute180 = function(x, y, R, dir, callback) {\n\t//You can always see your own tile\n\tcallback(x, y, 0, 1);\n\tvar previousOctant = (dir - 1 + 8) % 8; //Need to retrieve the previous octant to render a full 180 degrees\n\tvar nextPreviousOctant = (dir - 2 + 8) % 8; //Need to retrieve the previous two octants to render a full 180 degrees\n\tvar nextOctant = (dir+ 1 + 8) % 8; //Need to grab to next octant to render a full 180 degrees\n\tthis._renderOctant(x, y, ROT.FOV.RecursiveShadowcasting.OCTANTS[nextPreviousOctant], R, callback);\n\tthis._renderOctant(x, y, ROT.FOV.RecursiveShadowcasting.OCTANTS[previousOctant], R, callback);\n\tthis._renderOctant(x, y, ROT.FOV.RecursiveShadowcasting.OCTANTS[dir], R, callback);\n\tthis._renderOctant(x, y, ROT.FOV.RecursiveShadowcasting.OCTANTS[nextOctant], R, callback);\n};\n\n/**\n * Compute visibility for a 90-degree arc\n * @param {int} x\n * @param {int} y\n * @param {int} R Maximum visibility radius\n * @param {int} dir Direction to look in (expressed in a ROT.DIRS value);\n * @param {function} callback\n */\nROT.FOV.RecursiveShadowcasting.prototype.compute90 = function(x, y, R, dir, callback) {\n\t//You can always see your own tile\n\tcallback(x, y, 0, 1);\n\tvar previousOctant = (dir - 1 + 8) % 8; //Need to retrieve the previous octant to render a full 90 degrees\n\tthis._renderOctant(x, y, ROT.FOV.RecursiveShadowcasting.OCTANTS[dir], R, callback);\n\tthis._renderOctant(x, y, ROT.FOV.RecursiveShadowcasting.OCTANTS[previousOctant], R, callback);\n};\n\n/**\n * Render one octant (45-degree arc) of the viewshed\n * @param {int} x\n * @param {int} y\n * @param {int} octant Octant to be rendered\n * @param {int} R Maximum visibility radius\n * @param {function} callback\n */\nROT.FOV.RecursiveShadowcasting.prototype._renderOctant = function(x, y, octant, R, callback) {\n\t//Radius incremented by 1 to provide same coverage area as other shadowcasting radiuses\n\tthis._castVisibility(x, y, 1, 1.0, 0.0, R + 1, octant[0], octant[1], octant[2], octant[3], callback);\n};\n\n/**\n * Actually calculates the visibility\n * @param {int} startX The starting X coordinate\n * @param {int} startY The starting Y coordinate\n * @param {int} row The row to render\n * @param {float} visSlopeStart The slope to start at\n * @param {float} visSlopeEnd The slope to end at\n * @param {int} radius The radius to reach out to\n * @param {int} xx \n * @param {int} xy \n * @param {int} yx \n * @param {int} yy \n * @param {function} callback The callback to use when we hit a block that is visible\n */\nROT.FOV.RecursiveShadowcasting.prototype._castVisibility = function(startX, startY, row, visSlopeStart, visSlopeEnd, radius, xx, xy, yx, yy, callback) {\n\tif(visSlopeStart < visSlopeEnd) { return; }\n\tfor(var i = row; i <= radius; i++) {\n\t\tvar dx = -i - 1;\n\t\tvar dy = -i;\n\t\tvar blocked = false;\n\t\tvar newStart = 0;\n\n\t\t//'Row' could be column, names here assume octant 0 and would be flipped for half the octants\n\t\twhile(dx <= 0) {\n\t\t\tdx += 1;\n\n\t\t\t//Translate from relative coordinates to map coordinates\n\t\t\tvar mapX = startX + dx * xx + dy * xy;\n\t\t\tvar mapY = startY + dx * yx + dy * yy;\n\n\t\t\t//Range of the row\n\t\t\tvar slopeStart = (dx - 0.5) / (dy + 0.5);\n\t\t\tvar slopeEnd = (dx + 0.5) / (dy - 0.5);\n\t\t\n\t\t\t//Ignore if not yet at left edge of Octant\n\t\t\tif(slopeEnd > visSlopeStart) { continue; }\n\t\t\t\n\t\t\t//Done if past right edge\n\t\t\tif(slopeStart < visSlopeEnd) { break; }\n\t\t\t\t\n\t\t\t//If it's in range, it's visible\n\t\t\tif((dx * dx + dy * dy) < (radius * radius)) {\n\t\t\t\tcallback(mapX, mapY, i, 1);\n\t\t\t}\n\t\n\t\t\tif(!blocked) {\n\t\t\t\t//If tile is a blocking tile, cast around it\n\t\t\t\tif(!this._lightPasses(mapX, mapY) && i < radius) {\n\t\t\t\t\tblocked = true;\n\t\t\t\t\tthis._castVisibility(startX, startY, i + 1, visSlopeStart, slopeStart, radius, xx, xy, yx, yy, callback);\n\t\t\t\t\tnewStart = slopeEnd;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t//Keep narrowing if scanning across a block\n\t\t\t\tif(!this._lightPasses(mapX, mapY)) {\n\t\t\t\t\tnewStart = slopeEnd;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\n\t\t\t\t//Block has ended\n\t\t\t\tblocked = false;\n\t\t\t\tvisSlopeStart = newStart;\n\t\t\t}\n\t\t}\n\t\tif(blocked) { break; }\n\t}\n};\n/**\n * @namespace Color operations\n */\nROT.Color = {\n\tfromString: function(str) {\n\t\tvar cached, r;\n\t\tif (str in this._cache) {\n\t\t\tcached = this._cache[str];\n\t\t} else {\n\t\t\tif (str.charAt(0) == \"#\") { /* hex rgb */\n\n\t\t\t\tvar values = str.match(/[0-9a-f]/gi).map(function(x) { return parseInt(x, 16); });\n\t\t\t\tif (values.length == 3) {\n\t\t\t\t\tcached = values.map(function(x) { return x*17; });\n\t\t\t\t} else {\n\t\t\t\t\tfor (var i=0;i<3;i++) {\n\t\t\t\t\t\tvalues[i+1] += 16*values[i];\n\t\t\t\t\t\tvalues.splice(i, 1);\n\t\t\t\t\t}\n\t\t\t\t\tcached = values;\n\t\t\t\t}\n\n\t\t\t} else if ((r = str.match(/rgb\\(([0-9, ]+)\\)/i))) { /* decimal rgb */\n\t\t\t\tcached = r[1].split(/\\s*,\\s*/).map(function(x) { return parseInt(x); });\n\t\t\t} else { /* html name */\n\t\t\t\tcached = [0, 0, 0];\n\t\t\t}\n\n\t\t\tthis._cache[str] = cached;\n\t\t}\n\n\t\treturn cached.slice();\n\t},\n\n\t/**\n\t * Add two or more colors\n\t * @param {number[]} color1\n\t * @param {number[]} color2\n\t * @returns {number[]}\n\t */\n\tadd: function(color1, color2) {\n\t\tvar result = color1.slice();\n\t\tfor (var i=0;i<3;i++) {\n\t\t\tfor (var j=1;j<arguments.length;j++) {\n\t\t\t\tresult[i] += arguments[j][i];\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t},\n\n\t/**\n\t * Add two or more colors, MODIFIES FIRST ARGUMENT\n\t * @param {number[]} color1\n\t * @param {number[]} color2\n\t * @returns {number[]}\n\t */\n\tadd_: function(color1, color2) {\n\t\tfor (var i=0;i<3;i++) {\n\t\t\tfor (var j=1;j<arguments.length;j++) {\n\t\t\t\tcolor1[i] += arguments[j][i];\n\t\t\t}\n\t\t}\n\t\treturn color1;\n\t},\n\n\t/**\n\t * Multiply (mix) two or more colors\n\t * @param {number[]} color1\n\t * @param {number[]} color2\n\t * @returns {number[]}\n\t */\n\tmultiply: function(color1, color2) {\n\t\tvar result = color1.slice();\n\t\tfor (var i=0;i<3;i++) {\n\t\t\tfor (var j=1;j<arguments.length;j++) {\n\t\t\t\tresult[i] *= arguments[j][i] / 255;\n\t\t\t}\n\t\t\tresult[i] = Math.round(result[i]);\n\t\t}\n\t\treturn result;\n\t},\n\n\t/**\n\t * Multiply (mix) two or more colors, MODIFIES FIRST ARGUMENT\n\t * @param {number[]} color1\n\t * @param {number[]} color2\n\t * @returns {number[]}\n\t */\n\tmultiply_: function(color1, color2) {\n\t\tfor (var i=0;i<3;i++) {\n\t\t\tfor (var j=1;j<arguments.length;j++) {\n\t\t\t\tcolor1[i] *= arguments[j][i] / 255;\n\t\t\t}\n\t\t\tcolor1[i] = Math.round(color1[i]);\n\t\t}\n\t\treturn color1;\n\t},\n\n\t/**\n\t * Interpolate (blend) two colors with a given factor\n\t * @param {number[]} color1\n\t * @param {number[]} color2\n\t * @param {float} [factor=0.5] 0..1\n\t * @returns {number[]}\n\t */\n\tinterpolate: function(color1, color2, factor) {\n\t\tif (arguments.length < 3) { factor = 0.5; }\n\t\tvar result = color1.slice();\n\t\tfor (var i=0;i<3;i++) {\n\t\t\tresult[i] = Math.round(result[i] + factor*(color2[i]-color1[i]));\n\t\t}\n\t\treturn result;\n\t},\n\n\t/**\n\t * Interpolate (blend) two colors with a given factor in HSL mode\n\t * @param {number[]} color1\n\t * @param {number[]} color2\n\t * @param {float} [factor=0.5] 0..1\n\t * @returns {number[]}\n\t */\n\tinterpolateHSL: function(color1, color2, factor) {\n\t\tif (arguments.length < 3) { factor = 0.5; }\n\t\tvar hsl1 = this.rgb2hsl(color1);\n\t\tvar hsl2 = this.rgb2hsl(color2);\n\t\tfor (var i=0;i<3;i++) {\n\t\t\thsl1[i] += factor*(hsl2[i]-hsl1[i]);\n\t\t}\n\t\treturn this.hsl2rgb(hsl1);\n\t},\n\n\t/**\n\t * Create a new random color based on this one\n\t * @param {number[]} color\n\t * @param {number[]} diff Set of standard deviations\n\t * @returns {number[]}\n\t */\n\trandomize: function(color, diff) {\n\t\tif (!(diff instanceof Array)) { diff = Math.round(ROT.RNG.getNormal(0, diff)); }\n\t\tvar result = color.slice();\n\t\tfor (var i=0;i<3;i++) {\n\t\t\tresult[i] += (diff instanceof Array ? Math.round(ROT.RNG.getNormal(0, diff[i])) : diff);\n\t\t}\n\t\treturn result;\n\t},\n\n\t/**\n\t * Converts an RGB color value to HSL. Expects 0..255 inputs, produces 0..1 outputs.\n\t * @param {number[]} color\n\t * @returns {number[]}\n\t */\n\trgb2hsl: function(color) {\n\t\tvar r = color[0]/255;\n\t\tvar g = color[1]/255;\n\t\tvar b = color[2]/255;\n\n\t\tvar max = Math.max(r, g, b), min = Math.min(r, g, b);\n\t\tvar h, s, l = (max + min) / 2;\n\n\t\tif (max == min) {\n\t\t\th = s = 0; // achromatic\n\t\t} else {\n\t\t\tvar d = max - min;\n\t\t\ts = (l > 0.5 ? d / (2 - max - min) : d / (max + min));\n\t\t\tswitch(max) {\n\t\t\t\tcase r: h = (g - b) / d + (g < b ? 6 : 0); break;\n\t\t\t\tcase g: h = (b - r) / d + 2; break;\n\t\t\t\tcase b: h = (r - g) / d + 4; break;\n\t\t\t}\n\t\t\th /= 6;\n\t\t}\n\n\t\treturn [h, s, l];\n\t},\n\n\t/**\n\t * Converts an HSL color value to RGB. Expects 0..1 inputs, produces 0..255 outputs.\n\t * @param {number[]} color\n\t * @returns {number[]}\n\t */\n\thsl2rgb: function(color) {\n\t\tvar l = color[2];\n\n\t\tif (color[1] == 0) {\n\t\t\tl = Math.round(l*255);\n\t\t\treturn [l, l, l];\n\t\t} else {\n\t\t\tvar hue2rgb = function(p, q, t) {\n\t\t\t\tif (t < 0) t += 1;\n\t\t\t\tif (t > 1) t -= 1;\n\t\t\t\tif (t < 1/6) return p + (q - p) * 6 * t;\n\t\t\t\tif (t < 1/2) return q;\n\t\t\t\tif (t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n\t\t\t\treturn p;\n\t\t\t}\n\n\t\t\tvar s = color[1];\n\t\t\tvar q = (l < 0.5 ? l * (1 + s) : l + s - l * s);\n\t\t\tvar p = 2 * l - q;\n\t\t\tvar r = hue2rgb(p, q, color[0] + 1/3);\n\t\t\tvar g = hue2rgb(p, q, color[0]);\n\t\t\tvar b = hue2rgb(p, q, color[0] - 1/3);\n\t\t\treturn [Math.round(r*255), Math.round(g*255), Math.round(b*255)];\n\t\t}\n\t},\n\n\ttoRGB: function(color) {\n\t\treturn \"rgb(\" + this._clamp(color[0]) + \",\" + this._clamp(color[1]) + \",\" + this._clamp(color[2]) + \")\";\n\t},\n\n\ttoHex: function(color) {\n\t\tvar parts = [];\n\t\tfor (var i=0;i<3;i++) {\n\t\t\tparts.push(this._clamp(color[i]).toString(16).lpad(\"0\", 2));\n\t\t}\n\t\treturn \"#\" + parts.join(\"\");\n\t},\n\n\t_clamp: function(num) {\n\t\tif (num < 0) {\n\t\t\treturn 0;\n\t\t} else if (num > 255) {\n\t\t\treturn 255;\n\t\t} else {\n\t\t\treturn num;\n\t\t}\n\t},\n\n\t_cache: {\n\t\t\"black\": [0,0,0],\n\t\t\"navy\": [0,0,128],\n\t\t\"darkblue\": [0,0,139],\n\t\t\"mediumblue\": [0,0,205],\n\t\t\"blue\": [0,0,255],\n\t\t\"darkgreen\": [0,100,0],\n\t\t\"green\": [0,128,0],\n\t\t\"teal\": [0,128,128],\n\t\t\"darkcyan\": [0,139,139],\n\t\t\"deepskyblue\": [0,191,255],\n\t\t\"darkturquoise\": [0,206,209],\n\t\t\"mediumspringgreen\": [0,250,154],\n\t\t\"lime\": [0,255,0],\n\t\t\"springgreen\": [0,255,127],\n\t\t\"aqua\": [0,255,255],\n\t\t\"cyan\": [0,255,255],\n\t\t\"midnightblue\": [25,25,112],\n\t\t\"dodgerblue\": [30,144,255],\n\t\t\"forestgreen\": [34,139,34],\n\t\t\"seagreen\": [46,139,87],\n\t\t\"darkslategray\": [47,79,79],\n\t\t\"darkslategrey\": [47,79,79],\n\t\t\"limegreen\": [50,205,50],\n\t\t\"mediumseagreen\": [60,179,113],\n\t\t\"turquoise\": [64,224,208],\n\t\t\"royalblue\": [65,105,225],\n\t\t\"steelblue\": [70,130,180],\n\t\t\"darkslateblue\": [72,61,139],\n\t\t\"mediumturquoise\": [72,209,204],\n\t\t\"indigo\": [75,0,130],\n\t\t\"darkolivegreen\": [85,107,47],\n\t\t\"cadetblue\": [95,158,160],\n\t\t\"cornflowerblue\": [100,149,237],\n\t\t\"mediumaquamarine\": [102,205,170],\n\t\t\"dimgray\": [105,105,105],\n\t\t\"dimgrey\": [105,105,105],\n\t\t\"slateblue\": [106,90,205],\n\t\t\"olivedrab\": [107,142,35],\n\t\t\"slategray\": [112,128,144],\n\t\t\"slategrey\": [112,128,144],\n\t\t\"lightslategray\": [119,136,153],\n\t\t\"lightslategrey\": [119,136,153],\n\t\t\"mediumslateblue\": [123,104,238],\n\t\t\"lawngreen\": [124,252,0],\n\t\t\"chartreuse\": [127,255,0],\n\t\t\"aquamarine\": [127,255,212],\n\t\t\"maroon\": [128,0,0],\n\t\t\"purple\": [128,0,128],\n\t\t\"olive\": [128,128,0],\n\t\t\"gray\": [128,128,128],\n\t\t\"grey\": [128,128,128],\n\t\t\"skyblue\": [135,206,235],\n\t\t\"lightskyblue\": [135,206,250],\n\t\t\"blueviolet\": [138,43,226],\n\t\t\"darkred\": [139,0,0],\n\t\t\"darkmagenta\": [139,0,139],\n\t\t\"saddlebrown\": [139,69,19],\n\t\t\"darkseagreen\": [143,188,143],\n\t\t\"lightgreen\": [144,238,144],\n\t\t\"mediumpurple\": [147,112,216],\n\t\t\"darkviolet\": [148,0,211],\n\t\t\"palegreen\": [152,251,152],\n\t\t\"darkorchid\": [153,50,204],\n\t\t\"yellowgreen\": [154,205,50],\n\t\t\"sienna\": [160,82,45],\n\t\t\"brown\": [165,42,42],\n\t\t\"darkgray\": [169,169,169],\n\t\t\"darkgrey\": [169,169,169],\n\t\t\"lightblue\": [173,216,230],\n\t\t\"greenyellow\": [173,255,47],\n\t\t\"paleturquoise\": [175,238,238],\n\t\t\"lightsteelblue\": [176,196,222],\n\t\t\"powderblue\": [176,224,230],\n\t\t\"firebrick\": [178,34,34],\n\t\t\"darkgoldenrod\": [184,134,11],\n\t\t\"mediumorchid\": [186,85,211],\n\t\t\"rosybrown\": [188,143,143],\n\t\t\"darkkhaki\": [189,183,107],\n\t\t\"silver\": [192,192,192],\n\t\t\"mediumvioletred\": [199,21,133],\n\t\t\"indianred\": [205,92,92],\n\t\t\"peru\": [205,133,63],\n\t\t\"chocolate\": [210,105,30],\n\t\t\"tan\": [210,180,140],\n\t\t\"lightgray\": [211,211,211],\n\t\t\"lightgrey\": [211,211,211],\n\t\t\"palevioletred\": [216,112,147],\n\t\t\"thistle\": [216,191,216],\n\t\t\"orchid\": [218,112,214],\n\t\t\"goldenrod\": [218,165,32],\n\t\t\"crimson\": [220,20,60],\n\t\t\"gainsboro\": [220,220,220],\n\t\t\"plum\": [221,160,221],\n\t\t\"burlywood\": [222,184,135],\n\t\t\"lightcyan\": [224,255,255],\n\t\t\"lavender\": [230,230,250],\n\t\t\"darksalmon\": [233,150,122],\n\t\t\"violet\": [238,130,238],\n\t\t\"palegoldenrod\": [238,232,170],\n\t\t\"lightcoral\": [240,128,128],\n\t\t\"khaki\": [240,230,140],\n\t\t\"aliceblue\": [240,248,255],\n\t\t\"honeydew\": [240,255,240],\n\t\t\"azure\": [240,255,255],\n\t\t\"sandybrown\": [244,164,96],\n\t\t\"wheat\": [245,222,179],\n\t\t\"beige\": [245,245,220],\n\t\t\"whitesmoke\": [245,245,245],\n\t\t\"mintcream\": [245,255,250],\n\t\t\"ghostwhite\": [248,248,255],\n\t\t\"salmon\": [250,128,114],\n\t\t\"antiquewhite\": [250,235,215],\n\t\t\"linen\": [250,240,230],\n\t\t\"lightgoldenrodyellow\": [250,250,210],\n\t\t\"oldlace\": [253,245,230],\n\t\t\"red\": [255,0,0],\n\t\t\"fuchsia\": [255,0,255],\n\t\t\"magenta\": [255,0,255],\n\t\t\"deeppink\": [255,20,147],\n\t\t\"orangered\": [255,69,0],\n\t\t\"tomato\": [255,99,71],\n\t\t\"hotpink\": [255,105,180],\n\t\t\"coral\": [255,127,80],\n\t\t\"darkorange\": [255,140,0],\n\t\t\"lightsalmon\": [255,160,122],\n\t\t\"orange\": [255,165,0],\n\t\t\"lightpink\": [255,182,193],\n\t\t\"pink\": [255,192,203],\n\t\t\"gold\": [255,215,0],\n\t\t\"peachpuff\": [255,218,185],\n\t\t\"navajowhite\": [255,222,173],\n\t\t\"moccasin\": [255,228,181],\n\t\t\"bisque\": [255,228,196],\n\t\t\"mistyrose\": [255,228,225],\n\t\t\"blanchedalmond\": [255,235,205],\n\t\t\"papayawhip\": [255,239,213],\n\t\t\"lavenderblush\": [255,240,245],\n\t\t\"seashell\": [255,245,238],\n\t\t\"cornsilk\": [255,248,220],\n\t\t\"lemonchiffon\": [255,250,205],\n\t\t\"floralwhite\": [255,250,240],\n\t\t\"snow\": [255,250,250],\n\t\t\"yellow\": [255,255,0],\n\t\t\"lightyellow\": [255,255,224],\n\t\t\"ivory\": [255,255,240],\n\t\t\"white\": [255,255,255]\n\t}\n};\n/**\n * @class Lighting computation, based on a traditional FOV for multiple light sources and multiple passes.\n * @param {function} reflectivityCallback Callback to retrieve cell reflectivity (0..1)\n * @param {object} [options]\n * @param {int} [options.passes=1] Number of passes. 1 equals to simple FOV of all light sources, >1 means a *highly simplified* radiosity-like algorithm.\n * @param {int} [options.emissionThreshold=100] Cells with emissivity > threshold will be treated as light source in the next pass.\n * @param {int} [options.range=10] Max light range\n */\nROT.Lighting = function(reflectivityCallback, options) {\n\tthis._reflectivityCallback = reflectivityCallback;\n\tthis._options = {\n\t\tpasses: 1,\n\t\temissionThreshold: 100,\n\t\trange: 10\n\t};\n\tthis._fov = null;\n\n\tthis._lights = {};\n\tthis._reflectivityCache = {};\n\tthis._fovCache = {};\n\n\tthis.setOptions(options);\n};\n\n/**\n * Adjust options at runtime\n * @see ROT.Lighting\n * @param {object} [options]\n */\nROT.Lighting.prototype.setOptions = function(options) {\n\tfor (var p in options) { this._options[p] = options[p]; }\n\tif (options && options.range) { this.reset(); }\n\treturn this;\n};\n\n/**\n * Set the used Field-Of-View algo\n * @param {ROT.FOV} fov\n */\nROT.Lighting.prototype.setFOV = function(fov) {\n\tthis._fov = fov;\n\tthis._fovCache = {};\n\treturn this;\n};\n\n/**\n * Set (or remove) a light source\n * @param {int} x\n * @param {int} y\n * @param {null || string || number[3]} color\n */\nROT.Lighting.prototype.setLight = function(x, y, color) {\n  var key = x + \",\" + y;\n\n  if (color) {\n    this._lights[key] = (typeof(color) == \"string\" ? ROT.Color.fromString(color) : color);\n  } else {\n    delete this._lights[key];\n  }\n  return this;\n};\n\n/**\n * Remove all light sources\n */\nROT.Lighting.prototype.clearLights = function() {\n    this._lights = {};\n};\n\n/**\n * Reset the pre-computed topology values. Call whenever the underlying map changes its light-passability.\n */\nROT.Lighting.prototype.reset = function() {\n\tthis._reflectivityCache = {};\n\tthis._fovCache = {};\n\n\treturn this;\n};\n\n/**\n * Compute the lighting\n * @param {function} lightingCallback Will be called with (x, y, color) for every lit cell\n */\nROT.Lighting.prototype.compute = function(lightingCallback) {\n\tvar doneCells = {};\n\tvar emittingCells = {};\n\tvar litCells = {};\n\n\tfor (var key in this._lights) { /* prepare emitters for first pass */\n\t\tvar light = this._lights[key];\n\t\temittingCells[key] = [0, 0, 0];\n\t\tROT.Color.add_(emittingCells[key], light);\n\t}\n\n\tfor (var i=0;i<this._options.passes;i++) { /* main loop */\n\t\tthis._emitLight(emittingCells, litCells, doneCells);\n\t\tif (i+1 == this._options.passes) { continue; } /* not for the last pass */\n\t\temittingCells = this._computeEmitters(litCells, doneCells);\n\t}\n\n\tfor (var litKey in litCells) { /* let the user know what and how is lit */\n\t\tvar parts = litKey.split(\",\");\n\t\tvar x = parseInt(parts[0]);\n\t\tvar y = parseInt(parts[1]);\n\t\tlightingCallback(x, y, litCells[litKey]);\n\t}\n\n\treturn this;\n};\n\n/**\n * Compute one iteration from all emitting cells\n * @param {object} emittingCells These emit light\n * @param {object} litCells Add projected light to these\n * @param {object} doneCells These already emitted, forbid them from further calculations\n */\nROT.Lighting.prototype._emitLight = function(emittingCells, litCells, doneCells) {\n\tfor (var key in emittingCells) {\n\t\tvar parts = key.split(\",\");\n\t\tvar x = parseInt(parts[0]);\n\t\tvar y = parseInt(parts[1]);\n\t\tthis._emitLightFromCell(x, y, emittingCells[key], litCells);\n\t\tdoneCells[key] = 1;\n\t}\n\treturn this;\n};\n\n/**\n * Prepare a list of emitters for next pass\n * @param {object} litCells\n * @param {object} doneCells\n * @returns {object}\n */\nROT.Lighting.prototype._computeEmitters = function(litCells, doneCells) {\n\tvar result = {};\n\n\tfor (var key in litCells) {\n\t\tif (key in doneCells) { continue; } /* already emitted */\n\n\t\tvar color = litCells[key];\n\n\t\tif (key in this._reflectivityCache) {\n\t\t\tvar reflectivity = this._reflectivityCache[key];\n\t\t} else {\n\t\t\tvar parts = key.split(\",\");\n\t\t\tvar x = parseInt(parts[0]);\n\t\t\tvar y = parseInt(parts[1]);\n\t\t\tvar reflectivity = this._reflectivityCallback(x, y);\n\t\t\tthis._reflectivityCache[key] = reflectivity;\n\t\t}\n\n\t\tif (reflectivity == 0) { continue; } /* will not reflect at all */\n\n\t\t/* compute emission color */\n\t\tvar emission = [];\n\t\tvar intensity = 0;\n\t\tfor (var i=0;i<3;i++) {\n\t\t\tvar part = Math.round(color[i]*reflectivity);\n\t\t\temission[i] = part;\n\t\t\tintensity += part;\n\t\t}\n\t\tif (intensity > this._options.emissionThreshold) { result[key] = emission; }\n\t}\n\n\treturn result;\n};\n\n/**\n * Compute one iteration from one cell\n * @param {int} x\n * @param {int} y\n * @param {number[]} color\n * @param {object} litCells Cell data to by updated\n */\nROT.Lighting.prototype._emitLightFromCell = function(x, y, color, litCells) {\n\tvar key = x+\",\"+y;\n\tif (key in this._fovCache) {\n\t\tvar fov = this._fovCache[key];\n\t} else {\n\t\tvar fov = this._updateFOV(x, y);\n\t}\n\n\tfor (var fovKey in fov) {\n\t\tvar formFactor = fov[fovKey];\n\n\t\tif (fovKey in litCells) { /* already lit */\n\t\t\tvar result = litCells[fovKey];\n\t\t} else { /* newly lit */\n\t\t\tvar result = [0, 0, 0];\n\t\t\tlitCells[fovKey] = result;\n\t\t}\n\n\t\tfor (var i=0;i<3;i++) { result[i] += Math.round(color[i]*formFactor); } /* add light color */\n\t}\n\n\treturn this;\n};\n\n/**\n * Compute FOV (\"form factor\") for a potential light source at [x,y]\n * @param {int} x\n * @param {int} y\n * @returns {object}\n */\nROT.Lighting.prototype._updateFOV = function(x, y) {\n\tvar key1 = x+\",\"+y;\n\tvar cache = {};\n\tthis._fovCache[key1] = cache;\n\tvar range = this._options.range;\n\tvar cb = function(x, y, r, vis) {\n\t\tvar key2 = x+\",\"+y;\n\t\tvar formFactor = vis * (1-r/range);\n\t\tif (formFactor == 0) { return; }\n\t\tcache[key2] = formFactor;\n\t};\n\tthis._fov.compute(x, y, range, cb.bind(this));\n\n\treturn cache;\n};\n/**\n * @class Abstract pathfinder\n * @param {int} toX Target X coord\n * @param {int} toY Target Y coord\n * @param {function} passableCallback Callback to determine map passability\n * @param {object} [options]\n * @param {int} [options.topology=8]\n */\nROT.Path = function(toX, toY, passableCallback, options) {\n\tthis._toX = toX;\n\tthis._toY = toY;\n\tthis._fromX = null;\n\tthis._fromY = null;\n\tthis._passableCallback = passableCallback;\n\tthis._options = {\n\t\ttopology: 8\n\t};\n\tfor (var p in options) { this._options[p] = options[p]; }\n\n\tthis._dirs = ROT.DIRS[this._options.topology];\n\tif (this._options.topology == 8) { /* reorder dirs for more aesthetic result (vertical/horizontal first) */\n\t\tthis._dirs = [\n\t\t\tthis._dirs[0],\n\t\t\tthis._dirs[2],\n\t\t\tthis._dirs[4],\n\t\t\tthis._dirs[6],\n\t\t\tthis._dirs[1],\n\t\t\tthis._dirs[3],\n\t\t\tthis._dirs[5],\n\t\t\tthis._dirs[7]\n\t\t]\n\t}\n};\n\n/**\n * Compute a path from a given point\n * @param {int} fromX\n * @param {int} fromY\n * @param {function} callback Will be called for every path item with arguments \"x\" and \"y\"\n */\nROT.Path.prototype.compute = function(fromX, fromY, callback) {\n};\n\nROT.Path.prototype._getNeighbors = function(cx, cy) {\n\tvar result = [];\n\tfor (var i=0;i<this._dirs.length;i++) {\n\t\tvar dir = this._dirs[i];\n\t\tvar x = cx + dir[0];\n\t\tvar y = cy + dir[1];\n\t\t\n\t\tif (!this._passableCallback(x, y)) { continue; }\n\t\tresult.push([x, y]);\n\t}\n\t\n\treturn result;\n};\n/**\n * @class Simplified Dijkstra's algorithm: all edges have a value of 1\n * @augments ROT.Path\n * @see ROT.Path\n */\nROT.Path.Dijkstra = function(toX, toY, passableCallback, options) {\n\tROT.Path.call(this, toX, toY, passableCallback, options);\n\n\tthis._computed = {};\n\tthis._todo = [];\n\tthis._add(toX, toY, null);\n};\nROT.Path.Dijkstra.extend(ROT.Path);\n\n/**\n * Compute a path from a given point\n * @see ROT.Path#compute\n */\nROT.Path.Dijkstra.prototype.compute = function(fromX, fromY, callback) {\n\tvar key = fromX+\",\"+fromY;\n\tif (!(key in this._computed)) { this._compute(fromX, fromY); }\n\tif (!(key in this._computed)) { return; }\n\t\n\tvar item = this._computed[key];\n\twhile (item) {\n\t\tcallback(item.x, item.y);\n\t\titem = item.prev;\n\t}\n};\n\n/**\n * Compute a non-cached value\n */\nROT.Path.Dijkstra.prototype._compute = function(fromX, fromY) {\n\twhile (this._todo.length) {\n\t\tvar item = this._todo.shift();\n\t\tif (item.x == fromX && item.y == fromY) { return; }\n\t\t\n\t\tvar neighbors = this._getNeighbors(item.x, item.y);\n\t\t\n\t\tfor (var i=0;i<neighbors.length;i++) {\n\t\t\tvar neighbor = neighbors[i];\n\t\t\tvar x = neighbor[0];\n\t\t\tvar y = neighbor[1];\n\t\t\tvar id = x+\",\"+y;\n\t\t\tif (id in this._computed) { continue; } /* already done */\t\n\t\t\tthis._add(x, y, item); \n\t\t}\n\t}\n};\n\nROT.Path.Dijkstra.prototype._add = function(x, y, prev) {\n\tvar obj = {\n\t\tx: x,\n\t\ty: y,\n\t\tprev: prev\n\t};\n\tthis._computed[x+\",\"+y] = obj;\n\tthis._todo.push(obj);\n};\n/**\n * @class Simplified A* algorithm: all edges have a value of 1\n * @augments ROT.Path\n * @see ROT.Path\n */\nROT.Path.AStar = function(toX, toY, passableCallback, options) {\n\tROT.Path.call(this, toX, toY, passableCallback, options);\n\n\tthis._todo = [];\n\tthis._done = {};\n\tthis._fromX = null;\n\tthis._fromY = null;\n};\nROT.Path.AStar.extend(ROT.Path);\n\n/**\n * Compute a path from a given point\n * @see ROT.Path#compute\n */\nROT.Path.AStar.prototype.compute = function(fromX, fromY, callback) {\n\tthis._todo = [];\n\tthis._done = {};\n\tthis._fromX = fromX;\n\tthis._fromY = fromY;\n\tthis._add(this._toX, this._toY, null);\n\n\twhile (this._todo.length) {\n\t\tvar item = this._todo.shift();\n\t\tvar id = item.x+\",\"+item.y;\n\t\tif (id in this._done) { continue; }\n\t\tthis._done[id] = item;\n\t\tif (item.x == fromX && item.y == fromY) { break; }\n\n\t\tvar neighbors = this._getNeighbors(item.x, item.y);\n\n\t\tfor (var i=0;i<neighbors.length;i++) {\n\t\t\tvar neighbor = neighbors[i];\n\t\t\tvar x = neighbor[0];\n\t\t\tvar y = neighbor[1];\n\t\t\tvar id = x+\",\"+y;\n\t\t\tif (id in this._done) { continue; }\n\t\t\tthis._add(x, y, item); \n\t\t}\n\t}\n\t\n\tvar item = this._done[fromX+\",\"+fromY];\n\tif (!item) { return; }\n\t\n\twhile (item) {\n\t\tcallback(item.x, item.y);\n\t\titem = item.prev;\n\t}\n};\n\nROT.Path.AStar.prototype._add = function(x, y, prev) {\n\tvar h = this._distance(x, y);\n\tvar obj = {\n\t\tx: x,\n\t\ty: y,\n\t\tprev: prev,\n\t\tg: (prev ? prev.g+1 : 0),\n\t\th: h\n\t};\n\t\n\t/* insert into priority queue */\n\t\n\tvar f = obj.g + obj.h;\n\tfor (var i=0;i<this._todo.length;i++) {\n\t\tvar item = this._todo[i];\n\t\tvar itemF = item.g + item.h;\n\t\tif (f < itemF || (f == itemF && h < item.h)) {\n\t\t\tthis._todo.splice(i, 0, obj);\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tthis._todo.push(obj);\n};\n\nROT.Path.AStar.prototype._distance = function(x, y) {\n\tswitch (this._options.topology) {\n\t\tcase 4:\n\t\t\treturn (Math.abs(x-this._fromX) + Math.abs(y-this._fromY));\n\t\tbreak;\n\n\t\tcase 6:\n\t\t\tvar dx = Math.abs(x - this._fromX);\n\t\t\tvar dy = Math.abs(y - this._fromY);\n\t\t\treturn dy + Math.max(0, (dx-dy)/2);\n\t\tbreak;\n\n\t\tcase 8: \n\t\t\treturn Math.max(Math.abs(x-this._fromX), Math.abs(y-this._fromY));\n\t\tbreak;\n\t}\n\n        throw new Error(\"Illegal topology\");\n};\n/**\n * @class Terminal backend\n * @private\n */\nROT.Display.Term = function(context) {\n\tROT.Display.Backend.call(this, context);\n\tthis._cx = -1;\n\tthis._cy = -1;\n\tthis._lastColor = \"\";\n\tthis._options = {};\n\tthis._ox = 0;\n\tthis._oy = 0;\n\tthis._termcolor = {};\n}\nROT.Display.Term.extend(ROT.Display.Backend);\n\nROT.Display.Term.prototype.compute = function(options) {\n\tthis._options = options;\n\tthis._ox = Math.floor((process.stdout.columns - options.width) / 2);\n\tthis._oy = Math.floor((process.stdout.rows - options.height) / 2);\n\tthis._termcolor = new ROT.Display.Term[options.termColor.capitalize()](this._context);\n\tthis._context._termcolor = this._termcolor;\n}\n\nROT.Display.Term.prototype.draw = function(data, clearBefore) {\n\t// determine where to draw what with what colors\n\tvar x = data[0];\n\tvar y = data[1];\n\tvar ch = data[2];\n\tvar fg = data[3];\n\tvar bg = data[4];\n\n\t// determine if we need to move the terminal cursor\n\tvar dx = this._ox + x;\n\tvar dy = this._oy + y;\n\tif (dx < 0 || dx >= process.stdout.columns) { return; }\n\tif (dy < 0 || dy >= process.stdout.rows) { return; }\n\tif (dx !== this._cx || dy !== this._cy) {\n\t\tprocess.stdout.write(this._termcolor.positionToAnsi(dx,dy));\n\t\tthis._cx = dx;\n\t\tthis._cy = dy;\n\t}\n\n\t// terminals automatically clear, but if we're clearing when we're\n\t// not otherwise provided with a character, just use a space instead\n\tif (clearBefore) {\n\t\tif (!ch) {\n\t\t\tch = \" \";\n\t\t}\n\t}\n\t\t\n\t// if we're not clearing and not provided with a character, do nothing\n\tif (!ch) { return; }\n\n\t// determine if we need to change colors\n\tvar newColor = this._termcolor.colorToAnsi(fg,bg);\n\tif (newColor !== this._lastColor) {\n\t\tprocess.stdout.write(newColor);\n\t\tthis._lastColor = newColor;\n\t}\n\n\t// write the provided symbol to the display\n\tvar chars = [].concat(ch);\n\tprocess.stdout.write(chars[0]);\n\n\t// update our position, given that we wrote a character\n\tthis._cx++;\n\tif (this._cx >= process.stdout.columns) {\n\t\tthis._cx = 0;\n\t\tthis._cy++;\n\t}\n}\n\nROT.Display.Term.prototype.computeSize = function(availWidth, availHeight) {\n\treturn [process.stdout.columns, process.stdout.rows];\n}\n\nROT.Display.Term.prototype.computeFontSize = function(availWidth, availHeight) {\n\treturn 12;\n}\n\nROT.Display.Term.prototype.eventToPosition = function(x, y) {\n\treturn [x,y]\n}\n/**\n * @class Abstract terminal code module\n * @private\n */\nROT.Display.Term.Color = function(context) {\n\tthis._context = context;\n}\n\nROT.Display.Term.Color.prototype.clearToAnsi = function(bg) {\n}\n\nROT.Display.Term.Color.prototype.colorToAnsi = function(fg, bg) {\n}\n\nROT.Display.Term.Color.prototype.positionToAnsi = function(x, y) {\n}\n/**\n * @class xterm terminal code module\n * @private\n */\nROT.Display.Term.Xterm = function(context) {\n\tROT.Display.Term.Color.call(this, context);\n}\nROT.Display.Term.Xterm.extend(ROT.Display.Term.Color);\n\nROT.Display.Term.Xterm.prototype.clearToAnsi = function(bg) {\n\treturn \"\\x1b[0;48;5;\"\n\t\t+ this._termcolor(bg)\n\t\t+ \"m\\x1b[2J\";\n}\n\nROT.Display.Term.Xterm.prototype.colorToAnsi = function(fg, bg) {\n\treturn \"\\x1b[0;38;5;\"\n\t\t+ this._termcolor(fg)\n\t\t+ \";48;5;\"\n\t\t+ this._termcolor(bg)\n\t\t+ \"m\";\n}\n\nROT.Display.Term.Xterm.prototype.positionToAnsi = function(x, y) {\n\treturn \"\\x1b[\" + (y+1) + \";\" + (x+1) + \"H\";\n}\n\nROT.Display.Term.Xterm.prototype._termcolor = function(color) {\n\tvar SRC_COLORS = 256.0;\n\tvar DST_COLORS = 6.0;\n\tvar COLOR_RATIO = DST_COLORS / SRC_COLORS;\n\tvar rgb = ROT.Color.fromString(color);\n\tvar r = Math.floor(rgb[0] * COLOR_RATIO);\n\tvar g = Math.floor(rgb[1] * COLOR_RATIO);\n\tvar b = Math.floor(rgb[2] * COLOR_RATIO);\n\treturn r*36 + g*6 + b*1 + 16;\n}\n/**\n * Export to Node.js module\n */\nfor (var p in ROT) {\n\texports[p] = ROT[p];\n}\n  return ROT;\n}));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/rot-js/lib/rot.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/amd-options.js":
/*!****************************************!*\
  !*** (webpack)/buildin/amd-options.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */\r\nmodule.exports = __webpack_amd_options__;\r\n\n/* WEBPACK VAR INJECTION */}.call(this, {}))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vYW1kLW9wdGlvbnMuanM/MDA4NiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9hbWQtb3B0aW9ucy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbHMgX193ZWJwYWNrX2FtZF9vcHRpb25zX18gKi9cclxubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfYW1kX29wdGlvbnNfXztcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/amd-options.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEM7O0FBRTVDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSwgZXZhbCkoXCJ0aGlzXCIpO1xyXG59IGNhdGNoIChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/global.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\r\n\tif (!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif (!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2NlZDIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9tb2R1bGUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xyXG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xyXG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XHJcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcclxuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxyXG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XHJcblx0fVxyXG5cdHJldHVybiBtb2R1bGU7XHJcbn07XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/module.js\n");

/***/ }),

/***/ "./src/ares/parts.ts":
/*!***************************!*\
  !*** ./src/ares/parts.ts ***!
  \***************************/
/*! exports provided: updateMonsterParts, placeMonsterPartsOnGrid, removeMonsterPartsFromGrid */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"updateMonsterParts\", function() { return updateMonsterParts; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"placeMonsterPartsOnGrid\", function() { return placeMonsterPartsOnGrid; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"removeMonsterPartsFromGrid\", function() { return removeMonsterPartsFromGrid; });\n/* harmony import */ var _brew__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../brew */ \"./src/brew.ts\");\n\r\nlet facingPointerLookup = {};\r\nfacingPointerLookup[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].xyToKey(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Directions\"].RIGHT)] = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Symbols\"].pointer_right;\r\nfacingPointerLookup[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].xyToKey(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Directions\"].LEFT)] = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Symbols\"].pointer_left;\r\nfacingPointerLookup[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].xyToKey(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Directions\"].UP)] = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Symbols\"].pointer_up;\r\nfacingPointerLookup[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].xyToKey(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Directions\"].DOWN)] = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Symbols\"].pointer_down;\r\nfacingPointerLookup[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].xyToKey(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Directions\"].DOWN_LEFT)] = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Symbols\"].pointer_downleft;\r\nfacingPointerLookup[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].xyToKey(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Directions\"].DOWN_RIGHT)] = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Symbols\"].pointer_downright;\r\nfacingPointerLookup[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].xyToKey(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Directions\"].UP_RIGHT)] = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Symbols\"].pointer_upright;\r\nfacingPointerLookup[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].xyToKey(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Directions\"].UP_LEFT)] = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Symbols\"].pointer_upleft;\r\nfunction getFacingPointerForOffset(offset_xy) {\r\n    return facingPointerLookup[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].xyToKey(offset_xy)];\r\n}\r\nlet facingDoubleArrowLookup = {};\r\nfacingDoubleArrowLookup[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].xyToKey(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Directions\"].RIGHT)] = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Symbols\"].dbl_arrow_right;\r\nfacingDoubleArrowLookup[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].xyToKey(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Directions\"].LEFT)] = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Symbols\"].dbl_arrow_left;\r\nfacingDoubleArrowLookup[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].xyToKey(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Directions\"].UP)] = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Symbols\"].dbl_arrow_up;\r\nfacingDoubleArrowLookup[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].xyToKey(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Directions\"].DOWN)] = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Symbols\"].dbl_arrow_down;\r\nfunction getDoubleArrowForOffset(offset_xy) {\r\n    return facingDoubleArrowLookup[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].xyToKey(offset_xy)];\r\n}\r\nfunction updateMonsterParts(gm, actor) {\r\n    if (actor.building_type == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].ComponentPartsBuildingType.None) {\r\n        return;\r\n    }\r\n    else if (actor.building_type == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].ComponentPartsBuildingType.Tank) {\r\n        let turretPower = actor.getPowers().getPowerOfType(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewPowerType.TurretCannon);\r\n        let tank_parts = buildFeaturesForTank(gm, actor.location.clone(), actor.facing_direction, turretPower.facing_direction);\r\n        for (let p of tank_parts) {\r\n            p.setParent(actor);\r\n        }\r\n        actor.setParts(tank_parts);\r\n    }\r\n}\r\nfunction placeMonsterPartsOnGrid(gm, actor) {\r\n    let level = gm.getCurrentLevel();\r\n    let component_parts = actor.getParts();\r\n    for (let tank_part of component_parts) {\r\n        if (level.isValid(tank_part.location)) {\r\n            level.parts.removeAt(tank_part.location);\r\n            level.parts.setAt(tank_part.location, tank_part);\r\n        }\r\n    }\r\n    let triggered = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Movement\"].checkForImpactOfNewParts(gm, actor, component_parts);\r\n    gm.displayList(component_parts.map((f) => { return f.location; }));\r\n}\r\nfunction removeMonsterPartsFromGrid(gm, actor) {\r\n    let level = gm.getCurrentLevel();\r\n    let component_parts = actor.getParts();\r\n    for (let tank_part of component_parts) {\r\n        if (level.isValid(tank_part.location)) {\r\n            level.parts.removeAt(tank_part.location);\r\n        }\r\n    }\r\n    gm.displayList(component_parts.map((f) => { return f.location; }));\r\n}\r\nlet Sqrt2 = Math.sqrt(2);\r\nlet TurnNone = [0, 1];\r\nlet TurnHalf = [Math.PI, 1];\r\nlet TurnQuarter = [Math.PI / 2, 1];\r\nlet TurnOctant = [Math.PI / 4, Sqrt2];\r\nlet TurnThreeOctant = [Math.PI * 3 / 4, Sqrt2];\r\nfunction buildFeaturesForTank(gm, center_xy, tank_facing_dir_xy, turret_facing_dir_xy) {\r\n    // let level = gm.getCurrentLevel()\r\n    let tank_parts = [];\r\n    let feature_part;\r\n    let starting_angle = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].xyToPolar(tank_facing_dir_xy).angle_theta;\r\n    //  wall\r\n    let wall_code = (tank_facing_dir_xy.x != 0) ? \"|\" : _brew__WEBPACK_IMPORTED_MODULE_0__[\"Symbols\"].box_hline;\r\n    for (let turn of [TurnHalf, TurnNone]) {\r\n        feature_part = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].featureFactory(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].FeatureType.TankPart, { code: wall_code });\r\n        feature_part.location = center_xy.add(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].getPolarOffsetCoordinate(starting_angle + turn[0], turn[1]));\r\n        tank_parts.push(feature_part);\r\n    }\r\n    // front wall/pointer\r\n    // wall_code = getFacingArrowForOffset(facing_dir_xy)\r\n    // feature_part = Brew.Definitions.featureFactory(Brew.Definitions.FeatureType.TankWall, { code: wall_code })\r\n    // feature_part.location = center_xy.add(Brew.Utils.getPolarOffsetCoordinate(starting_angle, 1))\r\n    // tank_parts.push(feature_part)\r\n    for (let turn of [TurnOctant, TurnQuarter, TurnThreeOctant]) {\r\n        feature_part = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].featureFactory(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].FeatureType.TankPart, { code: '0' });\r\n        feature_part.location = center_xy.add(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].getPolarOffsetCoordinate(starting_angle + turn[0], turn[1]));\r\n        tank_parts.push(feature_part);\r\n    }\r\n    for (let turn of [TurnOctant, TurnQuarter, TurnThreeOctant]) {\r\n        feature_part = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].featureFactory(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].FeatureType.TankPart, { code: '0' });\r\n        feature_part.location = center_xy.add(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].getPolarOffsetCoordinate(starting_angle - turn[0], turn[1]));\r\n        tank_parts.push(feature_part);\r\n    }\r\n    // driving/forward pointer\r\n    let pointer_char = getFacingPointerForOffset(tank_facing_dir_xy);\r\n    feature_part = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].featureFactory(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].FeatureType.TankPart, { code: pointer_char });\r\n    let facing_xy = feature_part.location = center_xy.add(tank_facing_dir_xy);\r\n    // remove whatever part is there now\r\n    tank_parts = tank_parts.filter((f) => { return (!(f.location.compare(facing_xy))); });\r\n    tank_parts.push(feature_part);\r\n    // turret\r\n    let turret_char = getDoubleArrowForOffset(turret_facing_dir_xy);\r\n    let turret_xy = center_xy;\r\n    // remove whatever part is there now\r\n    // tank_parts = tank_parts.filter((f) => { return (!(f.location.compare(turret_xy))) })\r\n    // put in the new part\r\n    feature_part = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].featureFactory(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].FeatureType.TankPart, { code: turret_char });\r\n    feature_part.location = turret_xy;\r\n    tank_parts.push(feature_part);\r\n    return tank_parts;\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/ares/parts.ts\n");

/***/ }),

/***/ "./src/ares/tank.ts":
/*!**************************!*\
  !*** ./src/ares/tank.ts ***!
  \**************************/
/*! exports provided: getFiringArcValues, getDirectionFromKeycode, getRotatedFacingDirectionFromKeycode, rotate_body, rotate_weapon, getPrimaryFacingDirection, getFiringArcRange, processInventory, getLevelAuditReport, helpMessages */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getFiringArcValues\", function() { return getFiringArcValues; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getDirectionFromKeycode\", function() { return getDirectionFromKeycode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getRotatedFacingDirectionFromKeycode\", function() { return getRotatedFacingDirectionFromKeycode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotate_body\", function() { return rotate_body; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotate_weapon\", function() { return rotate_weapon; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getPrimaryFacingDirection\", function() { return getPrimaryFacingDirection; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getFiringArcRange\", function() { return getFiringArcRange; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"processInventory\", function() { return processInventory; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getLevelAuditReport\", function() { return getLevelAuditReport; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"helpMessages\", function() { return helpMessages; });\n/* harmony import */ var _brew__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../brew */ \"./src/brew.ts\");\n\r\nlet BrewFiringArcAngles = {};\r\nBrewFiringArcAngles[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].FiringArc.FullArc] = Math.PI * 2;\r\nBrewFiringArcAngles[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].FiringArc.HalfArc] = Math.PI;\r\nBrewFiringArcAngles[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].FiringArc.QuarterArc] = Math.PI / 2;\r\nBrewFiringArcAngles[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].FiringArc.OctantArc] = Math.PI / 4;\r\nBrewFiringArcAngles[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].FiringArc.ThreeOctantArc] = Math.PI * 3 / 4;\r\nBrewFiringArcAngles[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].FiringArc.ThreeQuarterArc] = Math.PI * 3 / 2;\r\nfunction getFiringArcValues(arc_name) {\r\n    return BrewFiringArcAngles[arc_name];\r\n}\r\nfunction getDirectionFromKeycode(actor, keycode) {\r\n    let direction_xy;\r\n    if (_brew__WEBPACK_IMPORTED_MODULE_0__[\"KeyMap\"].MoveForward.indexOf(keycode) > -1) {\r\n        direction_xy = actor.facing_direction;\r\n    }\r\n    else if (_brew__WEBPACK_IMPORTED_MODULE_0__[\"KeyMap\"].MoveBackward.indexOf(keycode) > -1) {\r\n        let backwards_xy = actor.facing_direction.multiplyScalar(-1);\r\n        direction_xy = backwards_xy;\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n    return direction_xy;\r\n}\r\nfunction getRotatedFacingDirectionFromKeycode(facing_dir_xy, keycode) {\r\n    let new_facing_xy;\r\n    // let turn_angle = Math.PI / 2\r\n    let current_angle = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].xyToPolar(facing_dir_xy.toUnit()).angle_theta;\r\n    let new_angle;\r\n    if (_brew__WEBPACK_IMPORTED_MODULE_0__[\"KeyMap\"].CWRotateKeys.indexOf(keycode) > -1) {\r\n        new_angle = current_angle + (Math.PI / 2);\r\n    }\r\n    else if (_brew__WEBPACK_IMPORTED_MODULE_0__[\"KeyMap\"].CCWRotateKeys.indexOf(keycode) > -1) {\r\n        new_angle = current_angle - (Math.PI / 2);\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n    if (Math.abs(new_angle) == Math.PI) {\r\n        new_angle = Math.PI;\r\n    }\r\n    new_facing_xy = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].getPolarOffsetCoordinate(new_angle, 1);\r\n    // console.log(new_angle, new_facing_xy)\r\n    return new_facing_xy;\r\n}\r\nfunction rotate_body(gm, brEvent) {\r\n    let new_facing_xy = brEvent.rotateData.new_facing_xy;\r\n    brEvent.actor.facing_direction = new_facing_xy;\r\n    _brew__WEBPACK_IMPORTED_MODULE_0__[\"Parts\"].removeMonsterPartsFromGrid(gm, brEvent.actor);\r\n    _brew__WEBPACK_IMPORTED_MODULE_0__[\"Parts\"].updateMonsterParts(gm, brEvent.actor);\r\n    _brew__WEBPACK_IMPORTED_MODULE_0__[\"Parts\"].placeMonsterPartsOnGrid(gm, brEvent.actor);\r\n    gm.endEvent(brEvent);\r\n}\r\nfunction rotate_weapon(gm, brEvent) {\r\n    let new_facing_xy = brEvent.rotateData.new_facing_xy;\r\n    let weaponPower = brEvent.rotateData.weaponPower;\r\n    weaponPower.facing_direction = new_facing_xy;\r\n    _brew__WEBPACK_IMPORTED_MODULE_0__[\"Parts\"].removeMonsterPartsFromGrid(gm, brEvent.actor);\r\n    _brew__WEBPACK_IMPORTED_MODULE_0__[\"Parts\"].updateMonsterParts(gm, brEvent.actor);\r\n    _brew__WEBPACK_IMPORTED_MODULE_0__[\"Parts\"].placeMonsterPartsOnGrid(gm, brEvent.actor);\r\n    gm.endEvent(brEvent);\r\n}\r\nfunction getPrimaryFacingDirection(gm, actor) {\r\n    let view_direction;\r\n    let turretPower = actor.getPowers().getPowerOfType(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewPowerType.TurretCannon);\r\n    if (turretPower) {\r\n        view_direction = turretPower.facing_direction;\r\n    }\r\n    else {\r\n        view_direction = actor.facing_direction;\r\n    }\r\n    return view_direction;\r\n}\r\nfunction getFiringArcRange(gm, center_xy, weaponPower) {\r\n    let facing_dir_xy = weaponPower.facing_direction;\r\n    let center_angle = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].xyToPolar(facing_dir_xy).angle_theta;\r\n    let full_arc = getFiringArcValues(weaponPower.firing_arc);\r\n    let half_range = full_arc / 2;\r\n    let min_angle = center_angle - half_range;\r\n    let max_angle = center_angle + half_range;\r\n    return {\r\n        minAngle: min_angle,\r\n        midpointAngle: center_angle,\r\n        maxAngle: max_angle,\r\n    };\r\n}\r\nfunction processInventory(gm) {\r\n    let player = gm.getPlayer();\r\n    let item;\r\n    let turret_gun = player.getPowers().getPowerOfType(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewPowerType.TurretCannon);\r\n    let machine_gun = player.getPowers().getPowerOfType(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewPowerType.MachineGun);\r\n    let audit = {\r\n        civiliansRescued: 0,\r\n        hpRepaired: 0,\r\n        hpOversupplied: false,\r\n        shellsLoaded: 0,\r\n        shellsOversupplied: false,\r\n        bulletsLoaded: 0,\r\n        bulletsOversupplied: false\r\n    };\r\n    for (let inv_key of player.inventory.getKeys()) {\r\n        item = player.inventory.getItemByKey(inv_key);\r\n        // increment health for each supplies\r\n        if (item.isType(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemType.Supplies)) {\r\n            if (player.hp.isMaxed()) {\r\n                audit.hpOversupplied = true;\r\n            }\r\n            player.hp.increment(1);\r\n            audit.hpRepaired += 1;\r\n            player.inventory.removeItemByKey(inv_key);\r\n        }\r\n        else if (item.isType(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemType.Civilian)) {\r\n            audit.civiliansRescued += 1;\r\n            player.score.increment(1, true);\r\n            player.inventory.removeItemByKey(inv_key);\r\n        }\r\n        else if (item.isType(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemType.Shells)) {\r\n            if (turret_gun.charge_stat.isMaxed()) {\r\n                audit.shellsOversupplied = true;\r\n            }\r\n            turret_gun.charge_stat.increment(1);\r\n            audit.shellsLoaded += 1;\r\n            player.inventory.removeItemByKey(inv_key);\r\n        }\r\n        else if (item.isType(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemType.Bullets)) {\r\n            if (machine_gun.charge_stat.isMaxed()) {\r\n                audit.bulletsOversupplied = true;\r\n            }\r\n            machine_gun.charge_stat.increment(1);\r\n            audit.bulletsLoaded += 1;\r\n            player.inventory.removeItemByKey(inv_key);\r\n        }\r\n    }\r\n    return audit;\r\n}\r\nfunction getLevelAuditReport(gm, audit_report) {\r\n    let entryList = [];\r\n    let too_many;\r\n    let rescue_text;\r\n    if (audit_report.civiliansRescued >= 5) {\r\n        rescue_text = \"You rescued \" + audit_report.civiliansRescued + \" civilians! May God bless you!\";\r\n    }\r\n    else if (audit_report.civiliansRescued > 1) {\r\n        rescue_text = \"You rescued \" + audit_report.civiliansRescued + \" civilians. Thank you.\";\r\n    }\r\n    else if (audit_report.civiliansRescued == 1) {\r\n        rescue_text = \"You rescued a single civilian. Please, help us find more.\";\r\n    }\r\n    else {\r\n        rescue_text = \"You rescued no civilians. Surely there must be more survivors?\";\r\n    }\r\n    entryList.push({\r\n        entryType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].GenericMenuEntryType.Cancel,\r\n        entryName: \"Civilians Rescued\",\r\n        entryDescription: rescue_text,\r\n        entryEvent: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.GenericMenuOff, false)\r\n    });\r\n    too_many = (audit_report.hpOversupplied) ? \"; we had more parts than we needed\" : \"\";\r\n    entryList.push({\r\n        entryType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].GenericMenuEntryType.Cancel,\r\n        entryName: \"Tank Repairs\",\r\n        entryDescription: \"We repaired \" + audit_report.hpRepaired + \" units of armor to your tank\" + too_many,\r\n        entryEvent: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.GenericMenuOff, false)\r\n    });\r\n    too_many = (audit_report.shellsOversupplied) ? \"; more than your tank's capacity\" : \"\";\r\n    entryList.push({\r\n        entryType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].GenericMenuEntryType.Cancel,\r\n        entryName: \"Shells Loaded\",\r\n        entryDescription: \"We loaded \" + audit_report.shellsLoaded + \" shells\" + too_many,\r\n        entryEvent: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.GenericMenuOff, false)\r\n    });\r\n    too_many = (audit_report.bulletsOversupplied) ? \"; more than your tank's capacity\" : \"\";\r\n    entryList.push({\r\n        entryType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].GenericMenuEntryType.Cancel,\r\n        entryName: \"Bullets Loaded\",\r\n        entryDescription: \"We loaded \" + audit_report.bulletsLoaded + \" units of ammunition for your machine gun\" + too_many,\r\n        entryEvent: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.GenericMenuOff, false)\r\n    });\r\n    entryList.push({\r\n        entryType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].GenericMenuEntryType.Cancel,\r\n        entryName: \"Onward\",\r\n        entryDescription: \"More battlegrounds await - the wounded are in desparate need of rescue.\",\r\n        entryEvent: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.GenericMenuOff, false)\r\n    });\r\n    let actionReportMenu = {\r\n        eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.GenericMenuOn,\r\n        actor: gm.getPlayer(),\r\n        playerInitiated: false,\r\n        endsTurn: false,\r\n        genericMenuData: {\r\n            allowCancel: false,\r\n            menuTitle: \"Area Action Report\",\r\n            menuDescription: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].randomOf(listEndOfLevelMessages, true),\r\n            menuEntriesList: entryList,\r\n        }\r\n    };\r\n    return actionReportMenu;\r\n}\r\nlet listEndOfLevelMessages = [\r\n    \"welcome friend. We have heard of you and your tank. We'll do what we can to help.\",\r\n    \"Wecome. We heard rumors of your tank from the resistance... it is an amazing sight.\",\r\n    \"We will take the wounded from here - you are needed back on the battlefield. Good luck!\",\r\n    \"Well met. Your reputation preceeds you - we are glad to help a true hero of the resistance.\",\r\n    \"You are doing God's work out there. Please save as many as you can.\",\r\n    \"So that tank is yours! I thought we were doomed for sure. Be careful out there - we will do what we can do help.\",\r\n];\r\nlet helpMessages = [\r\n    \"The resistance has stolen a tank! As the only qualified tank commander, it's your mission to head into the battlefield and rescue as many civilians as you can. Destroy any regime soldiers you come across. We will mark checkpoints (X) on your map - collect as many civilians and supplies as you can. We will repair and resupply your tank before sending you to the next area. Good luck!\",\r\n    \"Your tank \" + _brew__WEBPACK_IMPORTED_MODULE_0__[\"Symbols\"].pointer_up + \" + and turret \" + _brew__WEBPACK_IMPORTED_MODULE_0__[\"Symbols\"].dbl_arrow_up + \" can face different directions, and rotate independently.\",\r\n    \"- CONTROLS -\",\r\n    \"9/0 : Shrink/Enlarge Screen\",\r\n    \"W S : Tank Forward/Back\",\r\n    \"D : Rotate Tank Body Clockwise (tank pointer: \" + _brew__WEBPACK_IMPORTED_MODULE_0__[\"Symbols\"].pointer_left + \")\",\r\n    \"A : Rotate Tank Body Counter-Clockwise\",\r\n    \"E : Rotate TURRET Clockwise (turret pointer: \" + _brew__WEBPACK_IMPORTED_MODULE_0__[\"Symbols\"].dbl_arrow_left + \")\",\r\n    \"Q : Rotate TURRET Counter-Clockwise\",\r\n    \"1 : Fire Main Turret (facing direction only)\",\r\n    \"2 : Fire Machine Gun (all directions)\",\r\n    \"SPACE : Wait, Pickup, Use Exit (X)\",\r\n    \"i : Inventory\",\r\n    \"Z : Heads up Display (arrows to move, ESC/Z/SPACE to exit)\",\r\n    \"X : eXamine nearby\",\r\n    \"- HOW TO PLAY -\",\r\n    \"You can SMASH through most obstacles - including enemies\",\r\n    \"You can carry a limited number of items (\" + _brew__WEBPACK_IMPORTED_MODULE_0__[\"Config\"].max_items + \")\",\r\n    \"Each area has a red exit checkpoint (marked X), bringing different items with you will become your core strategy:\",\r\n    \"@ Rescuing Civilians is the only way to increase your SCORE\",\r\n    \"% Supplies - Repair 1 point of armor for each carried\",\r\n    _brew__WEBPACK_IMPORTED_MODULE_0__[\"Symbols\"].power_sys + \" Shells - Reload 1 unit of ammo for your main turret\",\r\n    \"= Bullets - Reload 1 unit of ammo for your machine gun\",\r\n    \"Get through as many areas as you can - rescue as many civilians as you can. I'm afraid your mission will not end well for you personally... you are doing God's work.\"\r\n];\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXJlcy90YW5rLnRzPzdlNDciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQStCO0FBRS9CLElBQUksbUJBQW1CLEdBQXFDLEVBQUU7QUFDOUQsbUJBQW1CLENBQUMsMkNBQVUsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDO0FBQy9ELG1CQUFtQixDQUFDLDJDQUFVLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFO0FBQzNELG1CQUFtQixDQUFDLDJDQUFVLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQztBQUNsRSxtQkFBbUIsQ0FBQywyQ0FBVSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUM7QUFDakUsbUJBQW1CLENBQUMsMkNBQVUsQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUMsQ0FBQztBQUN4RSxtQkFBbUIsQ0FBQywyQ0FBVSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsR0FBQyxDQUFDO0FBRW5FLDRCQUE2QixRQUE4QjtJQUM3RCxNQUFNLENBQUMsbUJBQW1CLENBQUMsUUFBUSxDQUFDO0FBQ3hDLENBQUM7QUFFSyxpQ0FBa0MsS0FBOEIsRUFBRSxPQUFlO0lBQ25GLElBQUksWUFBNkI7SUFFakMsRUFBRSxDQUFDLENBQUMsNENBQVcsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoRCxZQUFZLEdBQUcsS0FBSyxDQUFDLGdCQUFnQjtJQUV6QyxDQUFDO0lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLDRDQUFXLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEQsSUFBSSxZQUFZLEdBQUcsS0FBSyxDQUFDLGdCQUFnQixDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1RCxZQUFZLEdBQUcsWUFBWTtJQUUvQixDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDSixNQUFNLENBQUMsSUFBSTtJQUNmLENBQUM7SUFFRCxNQUFNLENBQUMsWUFBWTtBQUN2QixDQUFDO0FBRUssOENBQStDLGFBQThCLEVBQUUsT0FBZTtJQUNoRyxJQUFJLGFBQStCO0lBQ25DLCtCQUErQjtJQUMvQixJQUFJLGFBQWEsR0FBRywyQ0FBVSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxXQUFXO0lBQzVFLElBQUksU0FBa0I7SUFFdEIsRUFBRSxDQUFDLENBQUMsNENBQVcsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqRCxTQUFTLEdBQUcsYUFBYSxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyw0Q0FBVyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pELFNBQVMsR0FBRyxhQUFhLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDSixNQUFNLENBQUMsSUFBSTtJQUNmLENBQUM7SUFFRCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2pDLFNBQVMsR0FBRyxJQUFJLENBQUMsRUFBRTtJQUN2QixDQUFDO0lBRUQsYUFBYSxHQUFHLDJDQUFVLENBQUMsd0JBQXdCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztJQUNqRSx3Q0FBd0M7SUFFeEMsTUFBTSxDQUFDLGFBQWE7QUFDeEIsQ0FBQztBQUVLLHFCQUFzQixFQUFtQixFQUFFLE9BQThCO0lBQzNFLElBQUksYUFBYSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsYUFBYTtJQUNwRCxPQUFPLENBQUMsS0FBSyxDQUFDLGdCQUFnQixHQUFHLGFBQWE7SUFFOUMsMkNBQVUsQ0FBQywwQkFBMEIsQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUN4RCwyQ0FBVSxDQUFDLGtCQUFrQixDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDO0lBQ2hELDJDQUFVLENBQUMsdUJBQXVCLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUM7SUFFckQsRUFBRSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7QUFDeEIsQ0FBQztBQUVLLHVCQUF3QixFQUFtQixFQUFFLE9BQThCO0lBQzdFLElBQUksYUFBYSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsYUFBYTtJQUNwRCxJQUFJLFdBQVcsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLFdBQVc7SUFDaEQsV0FBVyxDQUFDLGdCQUFnQixHQUFHLGFBQWE7SUFFNUMsMkNBQVUsQ0FBQywwQkFBMEIsQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUN4RCwyQ0FBVSxDQUFDLGtCQUFrQixDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDO0lBQ2hELDJDQUFVLENBQUMsdUJBQXVCLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUM7SUFFckQsRUFBRSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7QUFDeEIsQ0FBQztBQUVLLG1DQUFvQyxFQUFtQixFQUFFLEtBQThCO0lBQ3pGLElBQUksY0FBK0I7SUFDbkMsSUFBSSxXQUFXLEdBQUcsS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDLGNBQWMsQ0FBQywyQ0FBVSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUM7SUFDekYsRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUNkLGNBQWMsR0FBRyxXQUFXLENBQUMsZ0JBQWdCO0lBQ2pELENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUNKLGNBQWMsR0FBRyxLQUFLLENBQUMsZ0JBQWdCO0lBQzNDLENBQUM7SUFFRCxNQUFNLENBQUMsY0FBYztBQUN6QixDQUFDO0FBUUssMkJBQTRCLEVBQW1CLEVBQUUsU0FBMEIsRUFBRSxXQUE4QjtJQUU3RyxJQUFJLGFBQWEsR0FBRyxXQUFXLENBQUMsZ0JBQWdCO0lBQ2hELElBQUksWUFBWSxHQUFHLDJDQUFVLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDLFdBQVc7SUFFbEUsSUFBSSxRQUFRLEdBQUcsa0JBQWtCLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQztJQUN6RCxJQUFJLFVBQVUsR0FBRyxRQUFRLEdBQUcsQ0FBQztJQUU3QixJQUFJLFNBQVMsR0FBRyxZQUFZLEdBQUcsVUFBVTtJQUN6QyxJQUFJLFNBQVMsR0FBRyxZQUFZLEdBQUcsVUFBVTtJQUV6QyxNQUFNLENBQUM7UUFDSCxRQUFRLEVBQUUsU0FBUztRQUNuQixhQUFhLEVBQUUsWUFBWTtRQUMzQixRQUFRLEVBQUUsU0FBUztLQUN0QjtBQUNMLENBQUM7QUF1QkssMEJBQTJCLEVBQW1CO0lBQ2hELElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQyxTQUFTLEVBQUU7SUFDM0IsSUFBSSxJQUEyQjtJQUMvQixJQUFJLFVBQVUsR0FBRyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUMsY0FBYyxDQUFDLDJDQUFVLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQztJQUN6RixJQUFJLFdBQVcsR0FBRyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUMsY0FBYyxDQUFDLDJDQUFVLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQztJQUV4RixJQUFJLEtBQUssR0FBK0I7UUFDcEMsZ0JBQWdCLEVBQUUsQ0FBQztRQUNuQixVQUFVLEVBQUUsQ0FBQztRQUNiLGNBQWMsRUFBRSxLQUFLO1FBQ3JCLFlBQVksRUFBRSxDQUFDO1FBQ2Ysa0JBQWtCLEVBQUUsS0FBSztRQUN6QixhQUFhLEVBQUUsQ0FBQztRQUNoQixtQkFBbUIsRUFBRSxLQUFLO0tBQzdCO0lBRUQsR0FBRyxDQUFDLENBQUMsSUFBSSxPQUFPLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDN0MsSUFBSSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQztRQUU3QyxxQ0FBcUM7UUFDckMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpREFBZ0IsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRWxELEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUN0QixLQUFLLENBQUMsY0FBYyxHQUFHLElBQUk7WUFDL0IsQ0FBQztZQUVELE1BQU0sQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztZQUN0QixLQUFLLENBQUMsVUFBVSxJQUFJLENBQUM7WUFFckIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDO1FBRTdDLENBQUM7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpREFBZ0IsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3pELEtBQUssQ0FBQyxnQkFBZ0IsSUFBSSxDQUFDO1lBQzNCLE1BQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUM7WUFDL0IsTUFBTSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDO1FBRTdDLENBQUM7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpREFBZ0IsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRXZELEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUNuQyxLQUFLLENBQUMsa0JBQWtCLEdBQUcsSUFBSTtZQUNuQyxDQUFDO1lBQ0QsVUFBVSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ25DLEtBQUssQ0FBQyxZQUFZLElBQUksQ0FBQztZQUN2QixNQUFNLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUM7UUFFN0MsQ0FBQztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGlEQUFnQixDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFeEQsRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3BDLEtBQUssQ0FBQyxtQkFBbUIsR0FBRyxJQUFJO1lBQ3BDLENBQUM7WUFDRCxXQUFXLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDcEMsS0FBSyxDQUFDLGFBQWEsSUFBSSxDQUFDO1lBQ3hCLE1BQU0sQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQztRQUM3QyxDQUFDO0lBQ0wsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFLO0FBQ2hCLENBQUM7QUFFSyw2QkFBOEIsRUFBbUIsRUFBRSxZQUF3QztJQUU3RixJQUFJLFNBQVMsR0FBNkMsRUFBRTtJQUM1RCxJQUFJLFFBQWlCO0lBRXJCLElBQUksV0FBb0I7SUFDeEIsRUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLGdCQUFnQixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckMsV0FBVyxHQUFHLGNBQWMsR0FBRyxZQUFZLENBQUMsZ0JBQWdCLEdBQUcsZ0NBQWdDO0lBQ25HLENBQUM7SUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLGdCQUFnQixHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0MsV0FBVyxHQUFHLGNBQWMsR0FBRyxZQUFZLENBQUMsZ0JBQWdCLEdBQUcsd0JBQXdCO0lBQzNGLENBQUM7SUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLGdCQUFnQixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUMsV0FBVyxHQUFHLDJEQUEyRDtJQUM3RSxDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDSixXQUFXLEdBQUcsZ0VBQWdFO0lBQ2xGLENBQUM7SUFFRCxTQUFTLENBQUMsSUFBSSxDQUFDO1FBQ1gsU0FBUyxFQUFFLDJDQUFVLENBQUMsb0JBQW9CLENBQUMsTUFBTTtRQUNqRCxTQUFTLEVBQUUsbUJBQW1CO1FBQzlCLGdCQUFnQixFQUFFLFdBQVc7UUFDN0IsVUFBVSxFQUFFLDRDQUFXLENBQUMsd0JBQXdCLENBQUMsRUFBRSxFQUFFLDJDQUFVLENBQUMsYUFBYSxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUM7S0FDdkcsQ0FBQztJQUVGLFFBQVEsR0FBRyxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsb0NBQW9DLENBQUMsQ0FBQyxDQUFDLEVBQUU7SUFDcEYsU0FBUyxDQUFDLElBQUksQ0FBQztRQUNYLFNBQVMsRUFBRSwyQ0FBVSxDQUFDLG9CQUFvQixDQUFDLE1BQU07UUFDakQsU0FBUyxFQUFFLGNBQWM7UUFDekIsZ0JBQWdCLEVBQUUsY0FBYyxHQUFHLFlBQVksQ0FBQyxVQUFVLEdBQUcsOEJBQThCLEdBQUcsUUFBUTtRQUN0RyxVQUFVLEVBQUUsNENBQVcsQ0FBQyx3QkFBd0IsQ0FBQyxFQUFFLEVBQUUsMkNBQVUsQ0FBQyxhQUFhLENBQUMsY0FBYyxFQUFFLEtBQUssQ0FBQztLQUN2RyxDQUFDO0lBRUYsUUFBUSxHQUFHLENBQUMsWUFBWSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDLGtDQUFrQyxDQUFDLENBQUMsQ0FBQyxFQUFFO0lBQ3RGLFNBQVMsQ0FBQyxJQUFJLENBQUM7UUFDWCxTQUFTLEVBQUUsMkNBQVUsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNO1FBQ2pELFNBQVMsRUFBRSxlQUFlO1FBQzFCLGdCQUFnQixFQUFFLFlBQVksR0FBRyxZQUFZLENBQUMsWUFBWSxHQUFHLFNBQVMsR0FBRyxRQUFRO1FBQ2pGLFVBQVUsRUFBRSw0Q0FBVyxDQUFDLHdCQUF3QixDQUFDLEVBQUUsRUFBRSwyQ0FBVSxDQUFDLGFBQWEsQ0FBQyxjQUFjLEVBQUUsS0FBSyxDQUFDO0tBQ3ZHLENBQUM7SUFFRixRQUFRLEdBQUcsQ0FBQyxZQUFZLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLENBQUMsa0NBQWtDLENBQUMsQ0FBQyxDQUFDLEVBQUU7SUFDdkYsU0FBUyxDQUFDLElBQUksQ0FBQztRQUNYLFNBQVMsRUFBRSwyQ0FBVSxDQUFDLG9CQUFvQixDQUFDLE1BQU07UUFDakQsU0FBUyxFQUFFLGdCQUFnQjtRQUMzQixnQkFBZ0IsRUFBRSxZQUFZLEdBQUcsWUFBWSxDQUFDLGFBQWEsR0FBRywyQ0FBMkMsR0FBRyxRQUFRO1FBQ3BILFVBQVUsRUFBRSw0Q0FBVyxDQUFDLHdCQUF3QixDQUFDLEVBQUUsRUFBRSwyQ0FBVSxDQUFDLGFBQWEsQ0FBQyxjQUFjLEVBQUUsS0FBSyxDQUFDO0tBQ3ZHLENBQUM7SUFFRixTQUFTLENBQUMsSUFBSSxDQUFDO1FBQ1gsU0FBUyxFQUFFLDJDQUFVLENBQUMsb0JBQW9CLENBQUMsTUFBTTtRQUNqRCxTQUFTLEVBQUUsUUFBUTtRQUNuQixnQkFBZ0IsRUFBRSx5RUFBeUU7UUFDM0YsVUFBVSxFQUFFLDRDQUFXLENBQUMsd0JBQXdCLENBQUMsRUFBRSxFQUFFLDJDQUFVLENBQUMsYUFBYSxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUM7S0FDdkcsQ0FBQztJQUVGLElBQUksZ0JBQWdCLEdBQTJCO1FBQzNDLFNBQVMsRUFBRSwyQ0FBVSxDQUFDLGFBQWEsQ0FBQyxhQUFhO1FBQ2pELEtBQUssRUFBRSxFQUFFLENBQUMsU0FBUyxFQUFFO1FBQ3JCLGVBQWUsRUFBRSxLQUFLO1FBQ3RCLFFBQVEsRUFBRSxLQUFLO1FBQ2YsZUFBZSxFQUFFO1lBQ2IsV0FBVyxFQUFFLEtBQUs7WUFDbEIsU0FBUyxFQUFFLG9CQUFvQjtZQUMvQixlQUFlLEVBQUUsMkNBQVUsQ0FBQyxRQUFRLENBQUUsc0JBQXNCLEVBQUUsSUFBSSxDQUFDO1lBQ25FLGVBQWUsRUFBRyxTQUFTO1NBQzlCO0tBQ0o7SUFFRCxNQUFNLENBQUMsZ0JBQWdCO0FBQzNCLENBQUM7QUFFRCxJQUFJLHNCQUFzQixHQUFjO0lBQ3BDLG1GQUFtRjtJQUNuRixxRkFBcUY7SUFDckYseUZBQXlGO0lBQ3pGLDZGQUE2RjtJQUM3RixxRUFBcUU7SUFDckUsa0hBQWtIO0NBQ3JIO0FBRU0sSUFBSSxZQUFZLEdBQWM7SUFDakMsa1lBQWtZO0lBQ2xZLFlBQVksR0FBRyw2Q0FBWSxDQUFDLFVBQVUsR0FBRyxnQkFBZ0IsR0FBRyw2Q0FBWSxDQUFDLFlBQVksR0FBRywyREFBMkQ7SUFDbkosY0FBYztJQUNkLDZCQUE2QjtJQUM3Qix5QkFBeUI7SUFDekIsZ0RBQWdELEdBQUcsNkNBQVksQ0FBQyxZQUFZLEdBQUcsR0FBRztJQUNsRix3Q0FBd0M7SUFDeEMsK0NBQStDLEdBQUcsNkNBQVksQ0FBQyxjQUFjLEdBQUcsR0FBRztJQUNuRixxQ0FBcUM7SUFDckMsOENBQThDO0lBQzlDLHVDQUF1QztJQUN2QyxvQ0FBb0M7SUFDcEMsZUFBZTtJQUNmLDREQUE0RDtJQUM1RCxvQkFBb0I7SUFDcEIsaUJBQWlCO0lBQ2pCLDBEQUEwRDtJQUMxRCwyQ0FBMkMsR0FBRyw0Q0FBVyxDQUFDLFNBQVMsR0FBRyxHQUFHO0lBQ3pFLG1IQUFtSDtJQUNuSCw2REFBNkQ7SUFDN0QsdURBQXVEO0lBQ3ZELDZDQUFZLENBQUMsU0FBUyxHQUFHLHNEQUFzRDtJQUMvRSx3REFBd0Q7SUFDeEQsdUtBQXVLO0NBRTFLIiwiZmlsZSI6Ii4vc3JjL2FyZXMvdGFuay50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEJyZXcgZnJvbSBcIi4uL2JyZXdcIlxyXG5cclxubGV0IEJyZXdGaXJpbmdBcmNBbmdsZXMgOiB7IFthcmNfbmFtZTogc3RyaW5nXSA6IG51bWJlciB9ID0ge31cclxuQnJld0ZpcmluZ0FyY0FuZ2xlc1tCcmV3LkVudW1zLkZpcmluZ0FyYy5GdWxsQXJjXSA9IE1hdGguUEkgKiAyXHJcbkJyZXdGaXJpbmdBcmNBbmdsZXNbQnJldy5FbnVtcy5GaXJpbmdBcmMuSGFsZkFyY10gPSBNYXRoLlBJXHJcbkJyZXdGaXJpbmdBcmNBbmdsZXNbQnJldy5FbnVtcy5GaXJpbmdBcmMuUXVhcnRlckFyY10gPSBNYXRoLlBJIC8gMlxyXG5CcmV3RmlyaW5nQXJjQW5nbGVzW0JyZXcuRW51bXMuRmlyaW5nQXJjLk9jdGFudEFyY10gPSBNYXRoLlBJIC8gNFxyXG5CcmV3RmlyaW5nQXJjQW5nbGVzW0JyZXcuRW51bXMuRmlyaW5nQXJjLlRocmVlT2N0YW50QXJjXSA9IE1hdGguUEkgKiAzLzRcclxuQnJld0ZpcmluZ0FyY0FuZ2xlc1tCcmV3LkVudW1zLkZpcmluZ0FyYy5UaHJlZVF1YXJ0ZXJBcmNdID0gTWF0aC5QSSAqIDMvMlxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEZpcmluZ0FyY1ZhbHVlcyhhcmNfbmFtZTogQnJldy5FbnVtcy5GaXJpbmdBcmMpIDogbnVtYmVyIHtcclxuICAgIHJldHVybiBCcmV3RmlyaW5nQXJjQW5nbGVzW2FyY19uYW1lXVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGlyZWN0aW9uRnJvbUtleWNvZGUoYWN0b3I6IEJyZXcuR3JpZFRoaW5ncy5Nb25zdGVyLCBrZXljb2RlOiBudW1iZXIpOiBCcmV3LkNvb3JkaW5hdGUge1xyXG4gICAgbGV0IGRpcmVjdGlvbl94eTogQnJldy5Db29yZGluYXRlXHJcbiAgICBcclxuICAgIGlmIChCcmV3LktleU1hcC5Nb3ZlRm9yd2FyZC5pbmRleE9mKGtleWNvZGUpID4gLTEpIHtcclxuICAgICAgICBkaXJlY3Rpb25feHkgPSBhY3Rvci5mYWNpbmdfZGlyZWN0aW9uXHJcbiAgICAgICAgXHJcbiAgICB9IGVsc2UgaWYgKEJyZXcuS2V5TWFwLk1vdmVCYWNrd2FyZC5pbmRleE9mKGtleWNvZGUpID4gLTEpIHtcclxuICAgICAgICBsZXQgYmFja3dhcmRzX3h5ID0gYWN0b3IuZmFjaW5nX2RpcmVjdGlvbi5tdWx0aXBseVNjYWxhcigtMSlcclxuICAgICAgICBkaXJlY3Rpb25feHkgPSBiYWNrd2FyZHNfeHlcclxuXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBudWxsXHJcbiAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgcmV0dXJuIGRpcmVjdGlvbl94eVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Um90YXRlZEZhY2luZ0RpcmVjdGlvbkZyb21LZXljb2RlKGZhY2luZ19kaXJfeHk6IEJyZXcuQ29vcmRpbmF0ZSwga2V5Y29kZTogbnVtYmVyKSA6IEJyZXcuQ29vcmRpbmF0ZSB7XHJcbiAgICBsZXQgbmV3X2ZhY2luZ194eSA6IEJyZXcuQ29vcmRpbmF0ZVxyXG4gICAgLy8gbGV0IHR1cm5fYW5nbGUgPSBNYXRoLlBJIC8gMlxyXG4gICAgbGV0IGN1cnJlbnRfYW5nbGUgPSBCcmV3LlV0aWxzLnh5VG9Qb2xhcihmYWNpbmdfZGlyX3h5LnRvVW5pdCgpKS5hbmdsZV90aGV0YVxyXG4gICAgbGV0IG5ld19hbmdsZSA6IG51bWJlclxyXG5cclxuICAgIGlmIChCcmV3LktleU1hcC5DV1JvdGF0ZUtleXMuaW5kZXhPZihrZXljb2RlKSA+IC0xKSB7XHJcbiAgICAgICAgbmV3X2FuZ2xlID0gY3VycmVudF9hbmdsZSArIChNYXRoLlBJIC8gMilcclxuICAgIH0gZWxzZSBpZiAoQnJldy5LZXlNYXAuQ0NXUm90YXRlS2V5cy5pbmRleE9mKGtleWNvZGUpID4gLTEpIHtcclxuICAgICAgICBuZXdfYW5nbGUgPSBjdXJyZW50X2FuZ2xlIC0gKE1hdGguUEkgLyAyKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgfVxyXG5cclxuICAgIGlmIChNYXRoLmFicyhuZXdfYW5nbGUpID09IE1hdGguUEkpIHtcclxuICAgICAgICBuZXdfYW5nbGUgPSBNYXRoLlBJXHJcbiAgICB9XHJcblxyXG4gICAgbmV3X2ZhY2luZ194eSA9IEJyZXcuVXRpbHMuZ2V0UG9sYXJPZmZzZXRDb29yZGluYXRlKG5ld19hbmdsZSwgMSlcclxuICAgIC8vIGNvbnNvbGUubG9nKG5ld19hbmdsZSwgbmV3X2ZhY2luZ194eSlcclxuXHJcbiAgICByZXR1cm4gbmV3X2ZhY2luZ194eVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlX2JvZHkoZ206IEJyZXcuR2FtZU1hc3RlciwgYnJFdmVudDogQnJldy5FbnVtcy5JQnJld0V2ZW50KSB7XHJcbiAgICBsZXQgbmV3X2ZhY2luZ194eSA9IGJyRXZlbnQucm90YXRlRGF0YS5uZXdfZmFjaW5nX3h5XHJcbiAgICBickV2ZW50LmFjdG9yLmZhY2luZ19kaXJlY3Rpb24gPSBuZXdfZmFjaW5nX3h5XHJcblxyXG4gICAgQnJldy5QYXJ0cy5yZW1vdmVNb25zdGVyUGFydHNGcm9tR3JpZChnbSwgYnJFdmVudC5hY3RvcilcclxuICAgIEJyZXcuUGFydHMudXBkYXRlTW9uc3RlclBhcnRzKGdtLCBickV2ZW50LmFjdG9yKVxyXG4gICAgQnJldy5QYXJ0cy5wbGFjZU1vbnN0ZXJQYXJ0c09uR3JpZChnbSwgYnJFdmVudC5hY3RvcilcclxuXHJcbiAgICBnbS5lbmRFdmVudChickV2ZW50KVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlX3dlYXBvbihnbTogQnJldy5HYW1lTWFzdGVyLCBickV2ZW50OiBCcmV3LkVudW1zLklCcmV3RXZlbnQpIHtcclxuICAgIGxldCBuZXdfZmFjaW5nX3h5ID0gYnJFdmVudC5yb3RhdGVEYXRhLm5ld19mYWNpbmdfeHlcclxuICAgIGxldCB3ZWFwb25Qb3dlciA9IGJyRXZlbnQucm90YXRlRGF0YS53ZWFwb25Qb3dlclxyXG4gICAgd2VhcG9uUG93ZXIuZmFjaW5nX2RpcmVjdGlvbiA9IG5ld19mYWNpbmdfeHlcclxuXHJcbiAgICBCcmV3LlBhcnRzLnJlbW92ZU1vbnN0ZXJQYXJ0c0Zyb21HcmlkKGdtLCBickV2ZW50LmFjdG9yKVxyXG4gICAgQnJldy5QYXJ0cy51cGRhdGVNb25zdGVyUGFydHMoZ20sIGJyRXZlbnQuYWN0b3IpXHJcbiAgICBCcmV3LlBhcnRzLnBsYWNlTW9uc3RlclBhcnRzT25HcmlkKGdtLCBickV2ZW50LmFjdG9yKVxyXG5cclxuICAgIGdtLmVuZEV2ZW50KGJyRXZlbnQpXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRQcmltYXJ5RmFjaW5nRGlyZWN0aW9uKGdtOiBCcmV3LkdhbWVNYXN0ZXIsIGFjdG9yOiBCcmV3LkdyaWRUaGluZ3MuTW9uc3RlcikgOiBCcmV3LkNvb3JkaW5hdGUge1xyXG4gICAgbGV0IHZpZXdfZGlyZWN0aW9uOiBCcmV3LkNvb3JkaW5hdGVcclxuICAgIGxldCB0dXJyZXRQb3dlciA9IGFjdG9yLmdldFBvd2VycygpLmdldFBvd2VyT2ZUeXBlKEJyZXcuRW51bXMuQnJld1Bvd2VyVHlwZS5UdXJyZXRDYW5ub24pXHJcbiAgICBpZiAodHVycmV0UG93ZXIpIHtcclxuICAgICAgICB2aWV3X2RpcmVjdGlvbiA9IHR1cnJldFBvd2VyLmZhY2luZ19kaXJlY3Rpb25cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdmlld19kaXJlY3Rpb24gPSBhY3Rvci5mYWNpbmdfZGlyZWN0aW9uXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZpZXdfZGlyZWN0aW9uXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUZpcmluZ0FyY1JhbmdlIHtcclxuICAgIG1pbkFuZ2xlOiBudW1iZXJcclxuICAgIG1heEFuZ2xlOiBudW1iZXJcclxuICAgIG1pZHBvaW50QW5nbGU6IG51bWJlclxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RmlyaW5nQXJjUmFuZ2UoZ206IEJyZXcuR2FtZU1hc3RlciwgY2VudGVyX3h5OiBCcmV3LkNvb3JkaW5hdGUsIHdlYXBvblBvd2VyOiBCcmV3LlBvd2Vycy5Qb3dlcikgOiBJRmlyaW5nQXJjUmFuZ2Uge1xyXG5cclxuICAgIGxldCBmYWNpbmdfZGlyX3h5ID0gd2VhcG9uUG93ZXIuZmFjaW5nX2RpcmVjdGlvblxyXG4gICAgbGV0IGNlbnRlcl9hbmdsZSA9IEJyZXcuVXRpbHMueHlUb1BvbGFyKGZhY2luZ19kaXJfeHkpLmFuZ2xlX3RoZXRhXHJcblxyXG4gICAgbGV0IGZ1bGxfYXJjID0gZ2V0RmlyaW5nQXJjVmFsdWVzKHdlYXBvblBvd2VyLmZpcmluZ19hcmMpXHJcbiAgICBsZXQgaGFsZl9yYW5nZSA9IGZ1bGxfYXJjIC8gMlxyXG5cclxuICAgIGxldCBtaW5fYW5nbGUgPSBjZW50ZXJfYW5nbGUgLSBoYWxmX3JhbmdlXHJcbiAgICBsZXQgbWF4X2FuZ2xlID0gY2VudGVyX2FuZ2xlICsgaGFsZl9yYW5nZVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbWluQW5nbGU6IG1pbl9hbmdsZSxcclxuICAgICAgICBtaWRwb2ludEFuZ2xlOiBjZW50ZXJfYW5nbGUsXHJcbiAgICAgICAgbWF4QW5nbGU6IG1heF9hbmdsZSxcclxuICAgIH1cclxufVxyXG5cclxuLy8gZXhwb3J0IGZ1bmN0aW9uIGlzVGFyZ2V0V2l0aGluRmlyaW5nQXJjKGdtOiBCcmV3LkdhbWVNYXN0ZXIsIGNlbnRlcl94eTogQnJldy5Db29yZGluYXRlLCB3ZWFwb25Qb3dlcjogQnJldy5Qb3dlcnMuUG93ZXIsIHRhcmdldF94eTogQnJldy5Db29yZGluYXRlKSA6IGJvb2xlYW4ge1xyXG4vLyAgICAgLy8gZmluZCB0aGUgbWF4L21pbiB2YWx1ZXMgb2Ygb3VyIHJhbmdlXHJcbi8vICAgICBsZXQgYXJjX3JhbmdlID0gZ2V0RmlyaW5nQXJjUmFuZ2UoZ20sIGNlbnRlcl94eSwgd2VhcG9uUG93ZXIpXHJcblxyXG4vLyAgICAgLy8gZmlndXJlIG91dCB3aGVyZSB0YXJnZXQgaXMgcmVsYXRpdmUgdG8gY2VudGVyXHJcbi8vICAgICAvLyBsZXQgZGlzdCA9IEJyZXcuVXRpbHMuZGlzdDJkKGNlbnRlcl94eSwgdGFyZ2V0X3h5KVxyXG4vLyAgICAgbGV0IHRhcmdldF9vZmZzZXRfcG9sYXIgPSBCcmV3LlV0aWxzLnh5VG9Qb2xhcih0YXJnZXRfeHksIGNlbnRlcl94eSlcclxuXHJcbi8vICAgICByZXR1cm4gdHJ1ZVxyXG4vLyB9XHJcblxyXG5pbnRlcmZhY2UgSUVuZE9mTGV2ZWxJbnZlbnRvcnlBdWRpdCB7XHJcbiAgICBocFJlcGFpcmVkOiBudW1iZXIsXHJcbiAgICBocE92ZXJzdXBwbGllZDogYm9vbGVhbixcclxuICAgIHNoZWxsc0xvYWRlZDogbnVtYmVyLFxyXG4gICAgc2hlbGxzT3ZlcnN1cHBsaWVkOiBib29sZWFuLFxyXG4gICAgYnVsbGV0c0xvYWRlZDogbnVtYmVyLFxyXG4gICAgYnVsbGV0c092ZXJzdXBwbGllZDogYm9vbGVhbixcclxuICAgIGNpdmlsaWFuc1Jlc2N1ZWQ6IG51bWJlcixcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NJbnZlbnRvcnkoZ206IEJyZXcuR2FtZU1hc3RlcikgOiBJRW5kT2ZMZXZlbEludmVudG9yeUF1ZGl0IHtcclxuICAgIGxldCBwbGF5ZXIgPSBnbS5nZXRQbGF5ZXIoKVxyXG4gICAgbGV0IGl0ZW0gOiBCcmV3LkdyaWRUaGluZ3MuSXRlbVxyXG4gICAgbGV0IHR1cnJldF9ndW4gPSBwbGF5ZXIuZ2V0UG93ZXJzKCkuZ2V0UG93ZXJPZlR5cGUoQnJldy5FbnVtcy5CcmV3UG93ZXJUeXBlLlR1cnJldENhbm5vbilcclxuICAgIGxldCBtYWNoaW5lX2d1biA9IHBsYXllci5nZXRQb3dlcnMoKS5nZXRQb3dlck9mVHlwZShCcmV3LkVudW1zLkJyZXdQb3dlclR5cGUuTWFjaGluZUd1bilcclxuXHJcbiAgICBsZXQgYXVkaXQgOiBJRW5kT2ZMZXZlbEludmVudG9yeUF1ZGl0ID0ge1xyXG4gICAgICAgIGNpdmlsaWFuc1Jlc2N1ZWQ6IDAsXHJcbiAgICAgICAgaHBSZXBhaXJlZDogMCxcclxuICAgICAgICBocE92ZXJzdXBwbGllZDogZmFsc2UsXHJcbiAgICAgICAgc2hlbGxzTG9hZGVkOiAwLFxyXG4gICAgICAgIHNoZWxsc092ZXJzdXBwbGllZDogZmFsc2UsXHJcbiAgICAgICAgYnVsbGV0c0xvYWRlZDogMCxcclxuICAgICAgICBidWxsZXRzT3ZlcnN1cHBsaWVkOiBmYWxzZVxyXG4gICAgfVxyXG5cclxuICAgIGZvciAobGV0IGludl9rZXkgb2YgcGxheWVyLmludmVudG9yeS5nZXRLZXlzKCkpIHtcclxuICAgICAgICBpdGVtID0gcGxheWVyLmludmVudG9yeS5nZXRJdGVtQnlLZXkoaW52X2tleSlcclxuXHJcbiAgICAgICAgLy8gaW5jcmVtZW50IGhlYWx0aCBmb3IgZWFjaCBzdXBwbGllc1xyXG4gICAgICAgIGlmIChpdGVtLmlzVHlwZShCcmV3LkRlZmluaXRpb25zLkl0ZW1UeXBlLlN1cHBsaWVzKSkge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKHBsYXllci5ocC5pc01heGVkKCkpIHtcclxuICAgICAgICAgICAgICAgIGF1ZGl0LmhwT3ZlcnN1cHBsaWVkID0gdHJ1ZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBwbGF5ZXIuaHAuaW5jcmVtZW50KDEpXHJcbiAgICAgICAgICAgIGF1ZGl0LmhwUmVwYWlyZWQgKz0gMVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgcGxheWVyLmludmVudG9yeS5yZW1vdmVJdGVtQnlLZXkoaW52X2tleSlcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfSBlbHNlIGlmIChpdGVtLmlzVHlwZShCcmV3LkRlZmluaXRpb25zLkl0ZW1UeXBlLkNpdmlsaWFuKSkge1xyXG4gICAgICAgICAgICBhdWRpdC5jaXZpbGlhbnNSZXNjdWVkICs9IDFcclxuICAgICAgICAgICAgcGxheWVyLnNjb3JlLmluY3JlbWVudCgxLCB0cnVlKVxyXG4gICAgICAgICAgICBwbGF5ZXIuaW52ZW50b3J5LnJlbW92ZUl0ZW1CeUtleShpbnZfa2V5KVxyXG5cclxuICAgICAgICB9IGVsc2UgaWYgKGl0ZW0uaXNUeXBlKEJyZXcuRGVmaW5pdGlvbnMuSXRlbVR5cGUuU2hlbGxzKSkge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKHR1cnJldF9ndW4uY2hhcmdlX3N0YXQuaXNNYXhlZCgpKSB7XHJcbiAgICAgICAgICAgICAgICBhdWRpdC5zaGVsbHNPdmVyc3VwcGxpZWQgPSB0cnVlXHJcbiAgICAgICAgICAgIH0gXHJcbiAgICAgICAgICAgIHR1cnJldF9ndW4uY2hhcmdlX3N0YXQuaW5jcmVtZW50KDEpXHJcbiAgICAgICAgICAgIGF1ZGl0LnNoZWxsc0xvYWRlZCArPSAxXHJcbiAgICAgICAgICAgIHBsYXllci5pbnZlbnRvcnkucmVtb3ZlSXRlbUJ5S2V5KGludl9rZXkpXHJcblxyXG4gICAgICAgIH0gZWxzZSBpZiAoaXRlbS5pc1R5cGUoQnJldy5EZWZpbml0aW9ucy5JdGVtVHlwZS5CdWxsZXRzKSkge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKG1hY2hpbmVfZ3VuLmNoYXJnZV9zdGF0LmlzTWF4ZWQoKSkge1xyXG4gICAgICAgICAgICAgICAgYXVkaXQuYnVsbGV0c092ZXJzdXBwbGllZCA9IHRydWVcclxuICAgICAgICAgICAgfSBcclxuICAgICAgICAgICAgbWFjaGluZV9ndW4uY2hhcmdlX3N0YXQuaW5jcmVtZW50KDEpXHJcbiAgICAgICAgICAgIGF1ZGl0LmJ1bGxldHNMb2FkZWQgKz0gMVxyXG4gICAgICAgICAgICBwbGF5ZXIuaW52ZW50b3J5LnJlbW92ZUl0ZW1CeUtleShpbnZfa2V5KVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYXVkaXRcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldExldmVsQXVkaXRSZXBvcnQoZ206IEJyZXcuR2FtZU1hc3RlciwgYXVkaXRfcmVwb3J0IDogSUVuZE9mTGV2ZWxJbnZlbnRvcnlBdWRpdCkgOiBCcmV3LkVudW1zLklCcmV3RXZlbnQge1xyXG5cclxuICAgIGxldCBlbnRyeUxpc3QgOiBBcnJheTxCcmV3LkVudW1zLklCcmV3R2VuZXJpY01lbnVFbnRyeT4gPSBbXVxyXG4gICAgbGV0IHRvb19tYW55IDogc3RyaW5nXHJcblxyXG4gICAgbGV0IHJlc2N1ZV90ZXh0IDogc3RyaW5nXHJcbiAgICBpZiAoYXVkaXRfcmVwb3J0LmNpdmlsaWFuc1Jlc2N1ZWQgPj0gNSkge1xyXG4gICAgICAgIHJlc2N1ZV90ZXh0ID0gXCJZb3UgcmVzY3VlZCBcIiArIGF1ZGl0X3JlcG9ydC5jaXZpbGlhbnNSZXNjdWVkICsgXCIgY2l2aWxpYW5zISBNYXkgR29kIGJsZXNzIHlvdSFcIlxyXG4gICAgfSBlbHNlIGlmIChhdWRpdF9yZXBvcnQuY2l2aWxpYW5zUmVzY3VlZCA+IDEpIHtcclxuICAgICAgICByZXNjdWVfdGV4dCA9IFwiWW91IHJlc2N1ZWQgXCIgKyBhdWRpdF9yZXBvcnQuY2l2aWxpYW5zUmVzY3VlZCArIFwiIGNpdmlsaWFucy4gVGhhbmsgeW91LlwiXHJcbiAgICB9IGVsc2UgaWYgKGF1ZGl0X3JlcG9ydC5jaXZpbGlhbnNSZXNjdWVkID09IDEpIHtcclxuICAgICAgICByZXNjdWVfdGV4dCA9IFwiWW91IHJlc2N1ZWQgYSBzaW5nbGUgY2l2aWxpYW4uIFBsZWFzZSwgaGVscCB1cyBmaW5kIG1vcmUuXCJcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmVzY3VlX3RleHQgPSBcIllvdSByZXNjdWVkIG5vIGNpdmlsaWFucy4gU3VyZWx5IHRoZXJlIG11c3QgYmUgbW9yZSBzdXJ2aXZvcnM/XCJcclxuICAgIH1cclxuXHJcbiAgICBlbnRyeUxpc3QucHVzaCh7XHJcbiAgICAgICAgZW50cnlUeXBlOiBCcmV3LkVudW1zLkdlbmVyaWNNZW51RW50cnlUeXBlLkNhbmNlbCxcclxuICAgICAgICBlbnRyeU5hbWU6IFwiQ2l2aWxpYW5zIFJlc2N1ZWRcIixcclxuICAgICAgICBlbnRyeURlc2NyaXB0aW9uOiByZXNjdWVfdGV4dCxcclxuICAgICAgICBlbnRyeUV2ZW50OiBCcmV3LkV2ZW50cy5jcmVhdGVHZW5lcmljRXZlbnRPZlR5cGUoZ20sIEJyZXcuRW51bXMuQnJld0V2ZW50VHlwZS5HZW5lcmljTWVudU9mZiwgZmFsc2UpXHJcbiAgICB9KVxyXG5cclxuICAgIHRvb19tYW55ID0gKGF1ZGl0X3JlcG9ydC5ocE92ZXJzdXBwbGllZCkgPyBcIjsgd2UgaGFkIG1vcmUgcGFydHMgdGhhbiB3ZSBuZWVkZWRcIiA6IFwiXCJcclxuICAgIGVudHJ5TGlzdC5wdXNoKHtcclxuICAgICAgICBlbnRyeVR5cGU6IEJyZXcuRW51bXMuR2VuZXJpY01lbnVFbnRyeVR5cGUuQ2FuY2VsLFxyXG4gICAgICAgIGVudHJ5TmFtZTogXCJUYW5rIFJlcGFpcnNcIixcclxuICAgICAgICBlbnRyeURlc2NyaXB0aW9uOiBcIldlIHJlcGFpcmVkIFwiICsgYXVkaXRfcmVwb3J0LmhwUmVwYWlyZWQgKyBcIiB1bml0cyBvZiBhcm1vciB0byB5b3VyIHRhbmtcIiArIHRvb19tYW55LFxyXG4gICAgICAgIGVudHJ5RXZlbnQ6IEJyZXcuRXZlbnRzLmNyZWF0ZUdlbmVyaWNFdmVudE9mVHlwZShnbSwgQnJldy5FbnVtcy5CcmV3RXZlbnRUeXBlLkdlbmVyaWNNZW51T2ZmLCBmYWxzZSlcclxuICAgIH0pXHJcblxyXG4gICAgdG9vX21hbnkgPSAoYXVkaXRfcmVwb3J0LnNoZWxsc092ZXJzdXBwbGllZCkgPyBcIjsgbW9yZSB0aGFuIHlvdXIgdGFuaydzIGNhcGFjaXR5XCIgOiBcIlwiXHJcbiAgICBlbnRyeUxpc3QucHVzaCh7XHJcbiAgICAgICAgZW50cnlUeXBlOiBCcmV3LkVudW1zLkdlbmVyaWNNZW51RW50cnlUeXBlLkNhbmNlbCxcclxuICAgICAgICBlbnRyeU5hbWU6IFwiU2hlbGxzIExvYWRlZFwiLFxyXG4gICAgICAgIGVudHJ5RGVzY3JpcHRpb246IFwiV2UgbG9hZGVkIFwiICsgYXVkaXRfcmVwb3J0LnNoZWxsc0xvYWRlZCArIFwiIHNoZWxsc1wiICsgdG9vX21hbnksXHJcbiAgICAgICAgZW50cnlFdmVudDogQnJldy5FdmVudHMuY3JlYXRlR2VuZXJpY0V2ZW50T2ZUeXBlKGdtLCBCcmV3LkVudW1zLkJyZXdFdmVudFR5cGUuR2VuZXJpY01lbnVPZmYsIGZhbHNlKVxyXG4gICAgfSlcclxuXHJcbiAgICB0b29fbWFueSA9IChhdWRpdF9yZXBvcnQuYnVsbGV0c092ZXJzdXBwbGllZCkgPyBcIjsgbW9yZSB0aGFuIHlvdXIgdGFuaydzIGNhcGFjaXR5XCIgOiBcIlwiXHJcbiAgICBlbnRyeUxpc3QucHVzaCh7XHJcbiAgICAgICAgZW50cnlUeXBlOiBCcmV3LkVudW1zLkdlbmVyaWNNZW51RW50cnlUeXBlLkNhbmNlbCxcclxuICAgICAgICBlbnRyeU5hbWU6IFwiQnVsbGV0cyBMb2FkZWRcIixcclxuICAgICAgICBlbnRyeURlc2NyaXB0aW9uOiBcIldlIGxvYWRlZCBcIiArIGF1ZGl0X3JlcG9ydC5idWxsZXRzTG9hZGVkICsgXCIgdW5pdHMgb2YgYW1tdW5pdGlvbiBmb3IgeW91ciBtYWNoaW5lIGd1blwiICsgdG9vX21hbnksXHJcbiAgICAgICAgZW50cnlFdmVudDogQnJldy5FdmVudHMuY3JlYXRlR2VuZXJpY0V2ZW50T2ZUeXBlKGdtLCBCcmV3LkVudW1zLkJyZXdFdmVudFR5cGUuR2VuZXJpY01lbnVPZmYsIGZhbHNlKVxyXG4gICAgfSlcclxuXHJcbiAgICBlbnRyeUxpc3QucHVzaCh7XHJcbiAgICAgICAgZW50cnlUeXBlOiBCcmV3LkVudW1zLkdlbmVyaWNNZW51RW50cnlUeXBlLkNhbmNlbCxcclxuICAgICAgICBlbnRyeU5hbWU6IFwiT253YXJkXCIsXHJcbiAgICAgICAgZW50cnlEZXNjcmlwdGlvbjogXCJNb3JlIGJhdHRsZWdyb3VuZHMgYXdhaXQgLSB0aGUgd291bmRlZCBhcmUgaW4gZGVzcGFyYXRlIG5lZWQgb2YgcmVzY3VlLlwiLFxyXG4gICAgICAgIGVudHJ5RXZlbnQ6IEJyZXcuRXZlbnRzLmNyZWF0ZUdlbmVyaWNFdmVudE9mVHlwZShnbSwgQnJldy5FbnVtcy5CcmV3RXZlbnRUeXBlLkdlbmVyaWNNZW51T2ZmLCBmYWxzZSlcclxuICAgIH0pXHJcblxyXG4gICAgbGV0IGFjdGlvblJlcG9ydE1lbnUgOiBCcmV3LkVudW1zLklCcmV3RXZlbnQgPSB7XHJcbiAgICAgICAgZXZlbnRUeXBlOiBCcmV3LkVudW1zLkJyZXdFdmVudFR5cGUuR2VuZXJpY01lbnVPbixcclxuICAgICAgICBhY3RvcjogZ20uZ2V0UGxheWVyKCksXHJcbiAgICAgICAgcGxheWVySW5pdGlhdGVkOiBmYWxzZSxcclxuICAgICAgICBlbmRzVHVybjogZmFsc2UsXHJcbiAgICAgICAgZ2VuZXJpY01lbnVEYXRhOiB7XHJcbiAgICAgICAgICAgIGFsbG93Q2FuY2VsOiBmYWxzZSxcclxuICAgICAgICAgICAgbWVudVRpdGxlOiBcIkFyZWEgQWN0aW9uIFJlcG9ydFwiLFxyXG4gICAgICAgICAgICBtZW51RGVzY3JpcHRpb246IEJyZXcuVXRpbHMucmFuZG9tT2YoIGxpc3RFbmRPZkxldmVsTWVzc2FnZXMsIHRydWUpLFxyXG4gICAgICAgICAgICBtZW51RW50cmllc0xpc3Q6ICBlbnRyeUxpc3QsXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBhY3Rpb25SZXBvcnRNZW51XHJcbn1cclxuXHJcbmxldCBsaXN0RW5kT2ZMZXZlbE1lc3NhZ2VzIDogc3RyaW5nW10gPSBbXHJcbiAgICBcIndlbGNvbWUgZnJpZW5kLiBXZSBoYXZlIGhlYXJkIG9mIHlvdSBhbmQgeW91ciB0YW5rLiBXZSdsbCBkbyB3aGF0IHdlIGNhbiB0byBoZWxwLlwiLFxyXG4gICAgXCJXZWNvbWUuIFdlIGhlYXJkIHJ1bW9ycyBvZiB5b3VyIHRhbmsgZnJvbSB0aGUgcmVzaXN0YW5jZS4uLiBpdCBpcyBhbiBhbWF6aW5nIHNpZ2h0LlwiLFxyXG4gICAgXCJXZSB3aWxsIHRha2UgdGhlIHdvdW5kZWQgZnJvbSBoZXJlIC0geW91IGFyZSBuZWVkZWQgYmFjayBvbiB0aGUgYmF0dGxlZmllbGQuIEdvb2QgbHVjayFcIixcclxuICAgIFwiV2VsbCBtZXQuIFlvdXIgcmVwdXRhdGlvbiBwcmVjZWVkcyB5b3UgLSB3ZSBhcmUgZ2xhZCB0byBoZWxwIGEgdHJ1ZSBoZXJvIG9mIHRoZSByZXNpc3RhbmNlLlwiLFxyXG4gICAgXCJZb3UgYXJlIGRvaW5nIEdvZCdzIHdvcmsgb3V0IHRoZXJlLiBQbGVhc2Ugc2F2ZSBhcyBtYW55IGFzIHlvdSBjYW4uXCIsXHJcbiAgICBcIlNvIHRoYXQgdGFuayBpcyB5b3VycyEgSSB0aG91Z2h0IHdlIHdlcmUgZG9vbWVkIGZvciBzdXJlLiBCZSBjYXJlZnVsIG91dCB0aGVyZSAtIHdlIHdpbGwgZG8gd2hhdCB3ZSBjYW4gZG8gaGVscC5cIixcclxuXVxyXG5cclxuZXhwb3J0IGxldCBoZWxwTWVzc2FnZXMgOiBzdHJpbmdbXSA9IFtcclxuICAgIFwiVGhlIHJlc2lzdGFuY2UgaGFzIHN0b2xlbiBhIHRhbmshIEFzIHRoZSBvbmx5IHF1YWxpZmllZCB0YW5rIGNvbW1hbmRlciwgaXQncyB5b3VyIG1pc3Npb24gdG8gaGVhZCBpbnRvIHRoZSBiYXR0bGVmaWVsZCBhbmQgcmVzY3VlIGFzIG1hbnkgY2l2aWxpYW5zIGFzIHlvdSBjYW4uIERlc3Ryb3kgYW55IHJlZ2ltZSBzb2xkaWVycyB5b3UgY29tZSBhY3Jvc3MuIFdlIHdpbGwgbWFyayBjaGVja3BvaW50cyAoWCkgb24geW91ciBtYXAgLSBjb2xsZWN0IGFzIG1hbnkgY2l2aWxpYW5zIGFuZCBzdXBwbGllcyBhcyB5b3UgY2FuLiBXZSB3aWxsIHJlcGFpciBhbmQgcmVzdXBwbHkgeW91ciB0YW5rIGJlZm9yZSBzZW5kaW5nIHlvdSB0byB0aGUgbmV4dCBhcmVhLiBHb29kIGx1Y2shXCIsXHJcbiAgICBcIllvdXIgdGFuayBcIiArIEJyZXcuU3ltYm9scy5wb2ludGVyX3VwICsgXCIgKyBhbmQgdHVycmV0IFwiICsgQnJldy5TeW1ib2xzLmRibF9hcnJvd191cCArIFwiIGNhbiBmYWNlIGRpZmZlcmVudCBkaXJlY3Rpb25zLCBhbmQgcm90YXRlIGluZGVwZW5kZW50bHkuXCIsXHJcbiAgICBcIi0gQ09OVFJPTFMgLVwiLFxyXG4gICAgXCI5LzAgOiBTaHJpbmsvRW5sYXJnZSBTY3JlZW5cIixcclxuICAgIFwiVyBTIDogVGFuayBGb3J3YXJkL0JhY2tcIixcclxuICAgIFwiRCA6IFJvdGF0ZSBUYW5rIEJvZHkgQ2xvY2t3aXNlICh0YW5rIHBvaW50ZXI6IFwiICsgQnJldy5TeW1ib2xzLnBvaW50ZXJfbGVmdCArIFwiKVwiLFxyXG4gICAgXCJBIDogUm90YXRlIFRhbmsgQm9keSBDb3VudGVyLUNsb2Nrd2lzZVwiLFxyXG4gICAgXCJFIDogUm90YXRlIFRVUlJFVCBDbG9ja3dpc2UgKHR1cnJldCBwb2ludGVyOiBcIiArIEJyZXcuU3ltYm9scy5kYmxfYXJyb3dfbGVmdCArIFwiKVwiLFxyXG4gICAgXCJRIDogUm90YXRlIFRVUlJFVCBDb3VudGVyLUNsb2Nrd2lzZVwiLFxyXG4gICAgXCIxIDogRmlyZSBNYWluIFR1cnJldCAoZmFjaW5nIGRpcmVjdGlvbiBvbmx5KVwiLFxyXG4gICAgXCIyIDogRmlyZSBNYWNoaW5lIEd1biAoYWxsIGRpcmVjdGlvbnMpXCIsXHJcbiAgICBcIlNQQUNFIDogV2FpdCwgUGlja3VwLCBVc2UgRXhpdCAoWClcIixcclxuICAgIFwiaSA6IEludmVudG9yeVwiLFxyXG4gICAgXCJaIDogSGVhZHMgdXAgRGlzcGxheSAoYXJyb3dzIHRvIG1vdmUsIEVTQy9aL1NQQUNFIHRvIGV4aXQpXCIsXHJcbiAgICBcIlggOiBlWGFtaW5lIG5lYXJieVwiLFxyXG4gICAgXCItIEhPVyBUTyBQTEFZIC1cIixcclxuICAgIFwiWW91IGNhbiBTTUFTSCB0aHJvdWdoIG1vc3Qgb2JzdGFjbGVzIC0gaW5jbHVkaW5nIGVuZW1pZXNcIixcclxuICAgIFwiWW91IGNhbiBjYXJyeSBhIGxpbWl0ZWQgbnVtYmVyIG9mIGl0ZW1zIChcIiArIEJyZXcuQ29uZmlnLm1heF9pdGVtcyArIFwiKVwiLFxyXG4gICAgXCJFYWNoIGFyZWEgaGFzIGEgcmVkIGV4aXQgY2hlY2twb2ludCAobWFya2VkIFgpLCBicmluZ2luZyBkaWZmZXJlbnQgaXRlbXMgd2l0aCB5b3Ugd2lsbCBiZWNvbWUgeW91ciBjb3JlIHN0cmF0ZWd5OlwiLFxyXG4gICAgXCJAIFJlc2N1aW5nIENpdmlsaWFucyBpcyB0aGUgb25seSB3YXkgdG8gaW5jcmVhc2UgeW91ciBTQ09SRVwiLFxyXG4gICAgXCIlIFN1cHBsaWVzIC0gUmVwYWlyIDEgcG9pbnQgb2YgYXJtb3IgZm9yIGVhY2ggY2FycmllZFwiLFxyXG4gICAgQnJldy5TeW1ib2xzLnBvd2VyX3N5cyArIFwiIFNoZWxscyAtIFJlbG9hZCAxIHVuaXQgb2YgYW1tbyBmb3IgeW91ciBtYWluIHR1cnJldFwiLFxyXG4gICAgXCI9IEJ1bGxldHMgLSBSZWxvYWQgMSB1bml0IG9mIGFtbW8gZm9yIHlvdXIgbWFjaGluZSBndW5cIixcclxuICAgIFwiR2V0IHRocm91Z2ggYXMgbWFueSBhcmVhcyBhcyB5b3UgY2FuIC0gcmVzY3VlIGFzIG1hbnkgY2l2aWxpYW5zIGFzIHlvdSBjYW4uIEknbSBhZnJhaWQgeW91ciBtaXNzaW9uIHdpbGwgbm90IGVuZCB3ZWxsIGZvciB5b3UgcGVyc29uYWxseS4uLiB5b3UgYXJlIGRvaW5nIEdvZCdzIHdvcmsuXCJcclxuXHJcbl1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/ares/tank.ts\n");

/***/ }),

/***/ "./src/brew.ts":
/*!*********************!*\
  !*** ./src/brew.ts ***!
  \*********************/
/*! exports provided: GameMaster, Enums, Utils, Config, Symbols, Color, Coordinate, CoordinateArea, Directions, Stat, Inventory, Input, Architect, Path, FieldOfView, Timers, Intel, Debug, KeyMap, Powers, Animations, Combat, Movement, Events, Menus, ItemInteraction, Targeting, HUD, GridOfThings, Level, Portal, Definitions, GridThings, LevelGenerator, Display, Turning, Glossary, Parts, Tank, Rooms */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _brew_engine_game_master__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./brew_engine/game_master */ \"./src/brew_engine/game_master.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"GameMaster\", function() { return _brew_engine_game_master__WEBPACK_IMPORTED_MODULE_0__[\"GameMaster\"]; });\n\n/* harmony import */ var _brew_engine_enums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./brew_engine/enums */ \"./src/brew_engine/enums.ts\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"Enums\", function() { return _brew_engine_enums__WEBPACK_IMPORTED_MODULE_1__; });\n/* harmony import */ var _brew_components_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./brew_components/utils */ \"./src/brew_components/utils.ts\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"Utils\", function() { return _brew_components_utils__WEBPACK_IMPORTED_MODULE_2__; });\n/* harmony import */ var _brew_components_config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./brew_components/config */ \"./src/brew_components/config.ts\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"Config\", function() { return _brew_components_config__WEBPACK_IMPORTED_MODULE_3__; });\n/* harmony import */ var _brew_components_symbols__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./brew_components/symbols */ \"./src/brew_components/symbols.ts\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"Symbols\", function() { return _brew_components_symbols__WEBPACK_IMPORTED_MODULE_4__; });\n/* harmony import */ var _brew_components_color__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./brew_components/color */ \"./src/brew_components/color.ts\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"Color\", function() { return _brew_components_color__WEBPACK_IMPORTED_MODULE_5__; });\n/* harmony import */ var _brew_components_coordinate__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./brew_components/coordinate */ \"./src/brew_components/coordinate.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Coordinate\", function() { return _brew_components_coordinate__WEBPACK_IMPORTED_MODULE_6__[\"Coordinate\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"CoordinateArea\", function() { return _brew_components_coordinate__WEBPACK_IMPORTED_MODULE_6__[\"CoordinateArea\"]; });\n\n/* harmony import */ var _brew_components_directions__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./brew_components/directions */ \"./src/brew_components/directions.ts\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"Directions\", function() { return _brew_components_directions__WEBPACK_IMPORTED_MODULE_7__; });\n/* harmony import */ var _brew_components_stat__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./brew_components/stat */ \"./src/brew_components/stat.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Stat\", function() { return _brew_components_stat__WEBPACK_IMPORTED_MODULE_8__[\"Stat\"]; });\n\n/* harmony import */ var _brew_components_inventory__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./brew_components/inventory */ \"./src/brew_components/inventory.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Inventory\", function() { return _brew_components_inventory__WEBPACK_IMPORTED_MODULE_9__[\"Inventory\"]; });\n\n/* harmony import */ var _brew_engine_input__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./brew_engine/input */ \"./src/brew_engine/input.ts\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"Input\", function() { return _brew_engine_input__WEBPACK_IMPORTED_MODULE_10__; });\n/* harmony import */ var _brew_engine_architect__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./brew_engine/architect */ \"./src/brew_engine/architect.ts\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"Architect\", function() { return _brew_engine_architect__WEBPACK_IMPORTED_MODULE_11__; });\n/* harmony import */ var _brew_engine_pathmap__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./brew_engine/pathmap */ \"./src/brew_engine/pathmap.ts\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"Path\", function() { return _brew_engine_pathmap__WEBPACK_IMPORTED_MODULE_12__; });\n/* harmony import */ var _brew_components_fov__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./brew_components/fov */ \"./src/brew_components/fov.ts\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"FieldOfView\", function() { return _brew_components_fov__WEBPACK_IMPORTED_MODULE_13__; });\n/* harmony import */ var _brew_engine_timers__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./brew_engine/timers */ \"./src/brew_engine/timers.ts\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"Timers\", function() { return _brew_engine_timers__WEBPACK_IMPORTED_MODULE_14__; });\n/* harmony import */ var _brew_engine_intel__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./brew_engine/intel */ \"./src/brew_engine/intel.ts\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"Intel\", function() { return _brew_engine_intel__WEBPACK_IMPORTED_MODULE_15__; });\n/* harmony import */ var _brew_engine_debug__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./brew_engine/debug */ \"./src/brew_engine/debug.ts\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"Debug\", function() { return _brew_engine_debug__WEBPACK_IMPORTED_MODULE_16__; });\n/* harmony import */ var _brew_engine_keymap__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./brew_engine/keymap */ \"./src/brew_engine/keymap.ts\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"KeyMap\", function() { return _brew_engine_keymap__WEBPACK_IMPORTED_MODULE_17__; });\n/* harmony import */ var _brew_game_powers__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./brew_game/powers */ \"./src/brew_game/powers.ts\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"Powers\", function() { return _brew_game_powers__WEBPACK_IMPORTED_MODULE_18__; });\n/* harmony import */ var _brew_game_animations__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./brew_game/animations */ \"./src/brew_game/animations.ts\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"Animations\", function() { return _brew_game_animations__WEBPACK_IMPORTED_MODULE_19__; });\n/* harmony import */ var _brew_game_combat__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./brew_game/combat */ \"./src/brew_game/combat.ts\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"Combat\", function() { return _brew_game_combat__WEBPACK_IMPORTED_MODULE_20__; });\n/* harmony import */ var _brew_game_movement__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./brew_game/movement */ \"./src/brew_game/movement.ts\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"Movement\", function() { return _brew_game_movement__WEBPACK_IMPORTED_MODULE_21__; });\n/* harmony import */ var _brew_engine_events__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./brew_engine/events */ \"./src/brew_engine/events.ts\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"Events\", function() { return _brew_engine_events__WEBPACK_IMPORTED_MODULE_22__; });\n/* harmony import */ var _brew_game_menus__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./brew_game/menus */ \"./src/brew_game/menus.ts\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"Menus\", function() { return _brew_game_menus__WEBPACK_IMPORTED_MODULE_23__; });\n/* harmony import */ var _brew_game_item_interaction__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./brew_game/item_interaction */ \"./src/brew_game/item_interaction.ts\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"ItemInteraction\", function() { return _brew_game_item_interaction__WEBPACK_IMPORTED_MODULE_24__; });\n/* harmony import */ var _brew_game_targeting__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./brew_game/targeting */ \"./src/brew_game/targeting.ts\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"Targeting\", function() { return _brew_game_targeting__WEBPACK_IMPORTED_MODULE_25__; });\n/* harmony import */ var _brew_game_hud_info__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./brew_game/hud_info */ \"./src/brew_game/hud_info.ts\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"HUD\", function() { return _brew_game_hud_info__WEBPACK_IMPORTED_MODULE_26__; });\n/* harmony import */ var _brew_components_grid__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./brew_components/grid */ \"./src/brew_components/grid.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"GridOfThings\", function() { return _brew_components_grid__WEBPACK_IMPORTED_MODULE_27__[\"GridOfThings\"]; });\n\n/* harmony import */ var _brew_components_level__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./brew_components/level */ \"./src/brew_components/level.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Level\", function() { return _brew_components_level__WEBPACK_IMPORTED_MODULE_28__[\"Level\"]; });\n\n/* harmony import */ var _brew_components_portal__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./brew_components/portal */ \"./src/brew_components/portal.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Portal\", function() { return _brew_components_portal__WEBPACK_IMPORTED_MODULE_29__[\"Portal\"]; });\n\n/* harmony import */ var _grid_things_definitions__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./grid_things/definitions */ \"./src/grid_things/definitions.ts\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"Definitions\", function() { return _grid_things_definitions__WEBPACK_IMPORTED_MODULE_30__; });\n/* harmony import */ var _grid_things__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./grid_things */ \"./src/grid_things/index.ts\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"GridThings\", function() { return _grid_things__WEBPACK_IMPORTED_MODULE_31__; });\n/* harmony import */ var _brew_game_levelgen__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./brew_game/levelgen */ \"./src/brew_game/levelgen.ts\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"LevelGenerator\", function() { return _brew_game_levelgen__WEBPACK_IMPORTED_MODULE_32__; });\n/* harmony import */ var _brew_game_display__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./brew_game/display */ \"./src/brew_game/display.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Display\", function() { return _brew_game_display__WEBPACK_IMPORTED_MODULE_33__[\"Display\"]; });\n\n/* harmony import */ var _brew_components_turning__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./brew_components/turning */ \"./src/brew_components/turning.ts\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"Turning\", function() { return _brew_components_turning__WEBPACK_IMPORTED_MODULE_34__; });\n/* harmony import */ var _brew_game_glossary__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./brew_game/glossary */ \"./src/brew_game/glossary.ts\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"Glossary\", function() { return _brew_game_glossary__WEBPACK_IMPORTED_MODULE_35__; });\n/* harmony import */ var _ares_parts__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./ares/parts */ \"./src/ares/parts.ts\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"Parts\", function() { return _ares_parts__WEBPACK_IMPORTED_MODULE_36__; });\n/* harmony import */ var _ares_tank__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./ares/tank */ \"./src/ares/tank.ts\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"Tank\", function() { return _ares_tank__WEBPACK_IMPORTED_MODULE_37__; });\n/* harmony import */ var _level_generator_rooms__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./level_generator/rooms */ \"./src/level_generator/rooms.ts\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"Rooms\", function() { return _level_generator_rooms__WEBPACK_IMPORTED_MODULE_38__; });\n\r\n\r\n\r\n\r\n// simpler components - should be pretty basic and self-contained\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// todo: not sure this structure makes sense at all...\r\n\r\n\r\n// todo: breakout power objects from power events I guess\r\n\r\n\r\n// Events\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// grid components\r\n\r\n\r\n\r\n\r\n\r\n\r\n// grid-based things and definitions\r\n\r\n\r\n// build GridThings as its own grouping\r\n// https://stackoverflow.com/a/43198685/904245\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import * as Warppod from './brew_game/warppod'\r\n// export { Warppod }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYnJldy50cz84ZmFmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXNEO0FBQ2pDO0FBRXVCO0FBQzVCO0FBR2hCLGlFQUFpRTtBQUNqQjtBQUNoQztBQUVrQztBQUNqQztBQUVtQztBQUNsQztBQUU4QjtBQUNoQztBQUV5RDtBQUNwQztBQUVxQjtBQUNyQztBQUV3QjtBQUM5QjtBQUV3QztBQUNuQztBQUV3QjtBQUM1QjtBQUVvQztBQUNoQztBQUV5QjtBQUM5QjtBQUVxQztBQUM5QjtBQUV3QjtBQUM3QjtBQUcyQjtBQUM1QjtBQUU0QjtBQUM1QjtBQUVoQixzREFBc0Q7QUFDUjtBQUM3QjtBQUVqQix5REFBeUQ7QUFDYjtBQUMzQjtBQUVqQixTQUFTO0FBQzJDO0FBQy9CO0FBRXVCO0FBQzNCO0FBRStCO0FBQzdCO0FBRTJCO0FBQzdCO0FBRXlCO0FBQzFCO0FBRytDO0FBQ3JDO0FBRXdCO0FBQzlCO0FBRXVCO0FBQzdCO0FBRWQsa0JBQWtCO0FBQ21DO0FBQzlCO0FBRXdCO0FBQy9CO0FBRWlDO0FBQ2hDO0FBRWpCLG9DQUFvQztBQUNvQjtBQUNsQztBQUV0Qix1Q0FBdUM7QUFDdkMsOENBQThDO0FBQ0g7QUFDdEI7QUFFaUM7QUFDN0I7QUFFb0I7QUFDM0I7QUFFa0M7QUFDbEM7QUFFbEIsaURBQWlEO0FBQ2pELHFCQUFxQjtBQUUyQjtBQUM3QjtBQUVrQjtBQUNyQjtBQUVtQjtBQUNwQjtBQUVpQztBQUNoQyIsImZpbGUiOiIuL3NyYy9icmV3LnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR2FtZU1hc3RlciB9IGZyb20gJy4vYnJld19lbmdpbmUvZ2FtZV9tYXN0ZXInXHJcbmV4cG9ydCB7IEdhbWVNYXN0ZXIgfVxyXG5cclxuaW1wb3J0ICogYXMgRW51bXMgZnJvbSAnLi9icmV3X2VuZ2luZS9lbnVtcydcclxuZXhwb3J0IHsgRW51bXMgfVxyXG5cclxuXHJcbi8vIHNpbXBsZXIgY29tcG9uZW50cyAtIHNob3VsZCBiZSBwcmV0dHkgYmFzaWMgYW5kIHNlbGYtY29udGFpbmVkXHJcbmltcG9ydCAqIGFzIFV0aWxzIGZyb20gJy4vYnJld19jb21wb25lbnRzL3V0aWxzJ1xyXG5leHBvcnQgeyBVdGlscyB9XHJcblxyXG5pbXBvcnQgKiBhcyBDb25maWcgZnJvbSAnLi9icmV3X2NvbXBvbmVudHMvY29uZmlnJ1xyXG5leHBvcnQgeyBDb25maWcgfVxyXG5cclxuaW1wb3J0ICogYXMgU3ltYm9scyBmcm9tICcuL2JyZXdfY29tcG9uZW50cy9zeW1ib2xzJ1xyXG5leHBvcnQgeyBTeW1ib2xzIH1cclxuXHJcbmltcG9ydCAqIGFzIENvbG9yIGZyb20gJy4vYnJld19jb21wb25lbnRzL2NvbG9yJ1xyXG5leHBvcnQgeyBDb2xvciB9XHJcblxyXG5pbXBvcnQgeyBDb29yZGluYXRlLCBDb29yZGluYXRlQXJlYSB9IGZyb20gJy4vYnJld19jb21wb25lbnRzL2Nvb3JkaW5hdGUnXHJcbmV4cG9ydCB7IENvb3JkaW5hdGUsIENvb3JkaW5hdGVBcmVhIH1cclxuXHJcbmltcG9ydCAqIGFzIERpcmVjdGlvbnMgZnJvbSAnLi9icmV3X2NvbXBvbmVudHMvZGlyZWN0aW9ucydcclxuZXhwb3J0IHsgRGlyZWN0aW9ucyB9XHJcblxyXG5pbXBvcnQgeyBTdGF0IH0gZnJvbSAnLi9icmV3X2NvbXBvbmVudHMvc3RhdCdcclxuZXhwb3J0IHsgU3RhdCB9IFxyXG5cclxuaW1wb3J0IHsgSW52ZW50b3J5IH0gZnJvbSAnLi9icmV3X2NvbXBvbmVudHMvaW52ZW50b3J5J1xyXG5leHBvcnQgeyBJbnZlbnRvcnkgfSBcclxuXHJcbmltcG9ydCAqIGFzIElucHV0IGZyb20gJy4vYnJld19lbmdpbmUvaW5wdXQnXHJcbmV4cG9ydCB7IElucHV0IH1cclxuXHJcbmltcG9ydCAqIGFzIEFyY2hpdGVjdCBmcm9tICcuL2JyZXdfZW5naW5lL2FyY2hpdGVjdCdcclxuZXhwb3J0IHsgQXJjaGl0ZWN0IH1cclxuXHJcbmltcG9ydCAqIGFzIFBhdGggZnJvbSAnLi9icmV3X2VuZ2luZS9wYXRobWFwJ1xyXG5leHBvcnQgeyBQYXRoIH1cclxuXHJcbmltcG9ydCAqIGFzIEZpZWxkT2ZWaWV3IGZyb20gJy4vYnJld19jb21wb25lbnRzL2ZvdidcclxuZXhwb3J0IHsgRmllbGRPZlZpZXcgfVxyXG5cclxuaW1wb3J0ICogYXMgVGltZXJzIGZyb20gJy4vYnJld19lbmdpbmUvdGltZXJzJ1xyXG5leHBvcnQgeyBUaW1lcnMgfVxyXG5cclxuXHJcbmltcG9ydCAqIGFzIEludGVsIGZyb20gJy4vYnJld19lbmdpbmUvaW50ZWwnXHJcbmV4cG9ydCB7IEludGVsIH1cclxuXHJcbmltcG9ydCAqIGFzIERlYnVnIGZyb20gJy4vYnJld19lbmdpbmUvZGVidWcnXHJcbmV4cG9ydCB7IERlYnVnIH1cclxuXHJcbi8vIHRvZG86IG5vdCBzdXJlIHRoaXMgc3RydWN0dXJlIG1ha2VzIHNlbnNlIGF0IGFsbC4uLlxyXG5pbXBvcnQgKiBhcyBLZXlNYXAgZnJvbSAnLi9icmV3X2VuZ2luZS9rZXltYXAnXHJcbmV4cG9ydCB7IEtleU1hcCB9XHJcblxyXG4vLyB0b2RvOiBicmVha291dCBwb3dlciBvYmplY3RzIGZyb20gcG93ZXIgZXZlbnRzIEkgZ3Vlc3NcclxuaW1wb3J0ICogYXMgUG93ZXJzIGZyb20gJy4vYnJld19nYW1lL3Bvd2VycydcclxuZXhwb3J0IHsgUG93ZXJzIH1cclxuXHJcbi8vIEV2ZW50c1xyXG5pbXBvcnQgKiBhcyBBbmltYXRpb25zIGZyb20gJy4vYnJld19nYW1lL2FuaW1hdGlvbnMnIFxyXG5leHBvcnQgeyBBbmltYXRpb25zIH1cclxuXHJcbmltcG9ydCAqIGFzIENvbWJhdCBmcm9tICcuL2JyZXdfZ2FtZS9jb21iYXQnXHJcbmV4cG9ydCB7IENvbWJhdCB9XHJcblxyXG5pbXBvcnQgKiBhcyBNb3ZlbWVudCBmcm9tICcuL2JyZXdfZ2FtZS9tb3ZlbWVudCdcclxuZXhwb3J0IHsgTW92ZW1lbnQgfVxyXG5cclxuaW1wb3J0ICogYXMgRXZlbnRzIGZyb20gJy4vYnJld19lbmdpbmUvZXZlbnRzJ1xyXG5leHBvcnQgeyBFdmVudHMgfVxyXG5cclxuaW1wb3J0ICogYXMgTWVudXMgZnJvbSAnLi9icmV3X2dhbWUvbWVudXMnXHJcbmV4cG9ydCB7IE1lbnVzIH1cclxuXHJcblxyXG5pbXBvcnQgKiBhcyBJdGVtSW50ZXJhY3Rpb24gZnJvbSAnLi9icmV3X2dhbWUvaXRlbV9pbnRlcmFjdGlvbidcclxuZXhwb3J0IHsgSXRlbUludGVyYWN0aW9uIH1cclxuXHJcbmltcG9ydCAqIGFzIFRhcmdldGluZyBmcm9tICcuL2JyZXdfZ2FtZS90YXJnZXRpbmcnXHJcbmV4cG9ydCB7IFRhcmdldGluZyB9XHJcblxyXG5pbXBvcnQgKiBhcyBIVUQgZnJvbSAnLi9icmV3X2dhbWUvaHVkX2luZm8nXHJcbmV4cG9ydCB7IEhVRCB9XHJcblxyXG4vLyBncmlkIGNvbXBvbmVudHNcclxuaW1wb3J0IHsgR3JpZE9mVGhpbmdzIH0gZnJvbSAnLi9icmV3X2NvbXBvbmVudHMvZ3JpZCdcclxuZXhwb3J0IHsgR3JpZE9mVGhpbmdzIH1cclxuXHJcbmltcG9ydCB7IExldmVsIH0gZnJvbSAnLi9icmV3X2NvbXBvbmVudHMvbGV2ZWwnXHJcbmV4cG9ydCB7IExldmVsIH0gXHJcblxyXG5pbXBvcnQgeyBQb3J0YWwgfSBmcm9tICcuL2JyZXdfY29tcG9uZW50cy9wb3J0YWwnXHJcbmV4cG9ydCB7IFBvcnRhbCB9IFxyXG5cclxuLy8gZ3JpZC1iYXNlZCB0aGluZ3MgYW5kIGRlZmluaXRpb25zXHJcbmltcG9ydCAqIGFzIERlZmluaXRpb25zIGZyb20gJy4vZ3JpZF90aGluZ3MvZGVmaW5pdGlvbnMnXHJcbmV4cG9ydCB7IERlZmluaXRpb25zIH1cclxuXHJcbi8vIGJ1aWxkIEdyaWRUaGluZ3MgYXMgaXRzIG93biBncm91cGluZ1xyXG4vLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNDMxOTg2ODUvOTA0MjQ1XHJcbmltcG9ydCAqIGFzIEdyaWRUaGluZ3MgZnJvbSAnLi9ncmlkX3RoaW5ncydcclxuZXhwb3J0IHsgR3JpZFRoaW5ncyB9XHJcblxyXG5pbXBvcnQgKiBhcyBMZXZlbEdlbmVyYXRvciBmcm9tICcuL2JyZXdfZ2FtZS9sZXZlbGdlbidcclxuZXhwb3J0IHsgTGV2ZWxHZW5lcmF0b3IgfVxyXG5cclxuaW1wb3J0IHsgRGlzcGxheSB9IGZyb20gJy4vYnJld19nYW1lL2Rpc3BsYXknXHJcbmV4cG9ydCB7IERpc3BsYXkgfVxyXG5cclxuaW1wb3J0ICogYXMgVHVybmluZyBmcm9tICcuL2JyZXdfY29tcG9uZW50cy90dXJuaW5nJ1xyXG5leHBvcnQgeyBUdXJuaW5nIH1cclxuXHJcbi8vIGltcG9ydCAqIGFzIFdhcnBwb2QgZnJvbSAnLi9icmV3X2dhbWUvd2FycHBvZCdcclxuLy8gZXhwb3J0IHsgV2FycHBvZCB9XHJcblxyXG5pbXBvcnQgKiBhcyBHbG9zc2FyeSBmcm9tICcuL2JyZXdfZ2FtZS9nbG9zc2FyeSdcclxuZXhwb3J0IHsgR2xvc3NhcnkgfVxyXG5cclxuaW1wb3J0ICogYXMgUGFydHMgZnJvbSAnLi9hcmVzL3BhcnRzJ1xyXG5leHBvcnQgeyBQYXJ0cyB9XHJcblxyXG5pbXBvcnQgKiBhcyBUYW5rIGZyb20gJy4vYXJlcy90YW5rJ1xyXG5leHBvcnQgeyBUYW5rIH1cclxuXHJcbmltcG9ydCAqIGFzIFJvb21zIGZyb20gJy4vbGV2ZWxfZ2VuZXJhdG9yL3Jvb21zJ1xyXG5leHBvcnQgeyBSb29tcyB9XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/brew.ts\n");

/***/ }),

/***/ "./src/brew_components/color.ts":
/*!**************************************!*\
  !*** ./src/brew_components/color.ts ***!
  \**************************************/
/*! exports provided: black, white, blue, orange, green, yellow, red, dark_gray, gray, purple, light_cyan, charcoal, charcoal_complement, violet, indigo, goldenrod, dark_slate_gray, light_slate_gray, dark_red, firebrick, midnight_blue, hero_blue, normal, bg_remote_vision, target_path, target_cursor, target_error, bg_unexplored, bg_memory, memory, damage_flash, power_booster, power_shield, power_cloak, power_phasewalk, power_hack, power_axe, power_warp, color_force, color_stun, color_explosion, color_notes_player, forest_green, primary_shade_0, primary_shade_1, primary_shade_2, primary_shade_3, primary_shade_4, secondary_blue_shade_0, secondary_blue_shade_1, secondary_blue_shade_2, secondary_blue_shade_3, secondary_blue_shade_4, secondary_green_shade_0, secondary_green_shade_1, secondary_green_shade_2, secondary_green_shade_3, secondary_green_shade_4, monster_color */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"black\", function() { return black; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"white\", function() { return white; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"blue\", function() { return blue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"orange\", function() { return orange; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"green\", function() { return green; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"yellow\", function() { return yellow; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"red\", function() { return red; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dark_gray\", function() { return dark_gray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"gray\", function() { return gray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"purple\", function() { return purple; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"light_cyan\", function() { return light_cyan; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"charcoal\", function() { return charcoal; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"charcoal_complement\", function() { return charcoal_complement; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"violet\", function() { return violet; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"indigo\", function() { return indigo; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"goldenrod\", function() { return goldenrod; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dark_slate_gray\", function() { return dark_slate_gray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"light_slate_gray\", function() { return light_slate_gray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dark_red\", function() { return dark_red; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"firebrick\", function() { return firebrick; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"midnight_blue\", function() { return midnight_blue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hero_blue\", function() { return hero_blue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"normal\", function() { return normal; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bg_remote_vision\", function() { return bg_remote_vision; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"target_path\", function() { return target_path; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"target_cursor\", function() { return target_cursor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"target_error\", function() { return target_error; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bg_unexplored\", function() { return bg_unexplored; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bg_memory\", function() { return bg_memory; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"memory\", function() { return memory; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"damage_flash\", function() { return damage_flash; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"power_booster\", function() { return power_booster; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"power_shield\", function() { return power_shield; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"power_cloak\", function() { return power_cloak; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"power_phasewalk\", function() { return power_phasewalk; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"power_hack\", function() { return power_hack; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"power_axe\", function() { return power_axe; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"power_warp\", function() { return power_warp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"color_force\", function() { return color_force; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"color_stun\", function() { return color_stun; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"color_explosion\", function() { return color_explosion; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"color_notes_player\", function() { return color_notes_player; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"forest_green\", function() { return forest_green; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"primary_shade_0\", function() { return primary_shade_0; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"primary_shade_1\", function() { return primary_shade_1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"primary_shade_2\", function() { return primary_shade_2; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"primary_shade_3\", function() { return primary_shade_3; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"primary_shade_4\", function() { return primary_shade_4; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"secondary_blue_shade_0\", function() { return secondary_blue_shade_0; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"secondary_blue_shade_1\", function() { return secondary_blue_shade_1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"secondary_blue_shade_2\", function() { return secondary_blue_shade_2; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"secondary_blue_shade_3\", function() { return secondary_blue_shade_3; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"secondary_blue_shade_4\", function() { return secondary_blue_shade_4; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"secondary_green_shade_0\", function() { return secondary_green_shade_0; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"secondary_green_shade_1\", function() { return secondary_green_shade_1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"secondary_green_shade_2\", function() { return secondary_green_shade_2; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"secondary_green_shade_3\", function() { return secondary_green_shade_3; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"secondary_green_shade_4\", function() { return secondary_green_shade_4; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"monster_color\", function() { return monster_color; });\nlet black = [10, 10, 10];\r\nlet white = [255, 255, 255];\r\nlet blue = [0, 204, 255];\r\nlet orange = [255, 127, 0];\r\nlet green = [0, 204, 0];\r\nlet yellow = [255, 177, 0];\r\nlet red = [204, 0, 0];\r\nlet dark_gray = [64, 64, 64];\r\nlet gray = [102, 102, 102];\r\nlet purple = [138, 43, 226];\r\nlet light_cyan = [224, 255, 255];\r\nlet charcoal = [52, 40, 44];\r\nlet charcoal_complement = [39, 51, 47];\r\nlet violet = [238, 130, 238];\r\nlet indigo = [75, 0, 130];\r\nlet goldenrod = [218, 165, 32];\r\nlet dark_slate_gray = [47, 79, 79];\r\nlet light_slate_gray = [119, 136, 153];\r\nlet dark_red = [139, 0, 0];\r\nlet firebrick = [178, 34, 34];\r\nlet midnight_blue = [25, 25, 112];\r\nlet hero_blue = [0, 207, 255];\r\nlet normal = [150, 150, 150];\r\nlet bg_remote_vision = [51, 102, 153];\r\nlet target_path = yellow;\r\nlet target_cursor = orange;\r\nlet target_error = red;\r\nlet bg_unexplored = charcoal;\r\nlet bg_memory = charcoal_complement;\r\nlet memory = dark_gray;\r\nlet damage_flash = red;\r\nlet power_booster = orange;\r\nlet power_shield = green;\r\nlet power_cloak = yellow;\r\nlet power_phasewalk = violet;\r\nlet power_hack = hero_blue;\r\nlet power_axe = goldenrod;\r\nlet power_warp = firebrick;\r\nlet color_force = orange;\r\nlet color_stun = violet;\r\nlet color_explosion = damage_flash;\r\nlet color_notes_player = white;\r\nlet forest_green = [34, 139, 34];\r\n//#####  Color Palette by Paletton.com\r\n//#####  Palette URL: http://paletton.com/#uid=30x0u0kllllaFw0g0qFqFg0w0aF\r\n// *** Primary color:\r\nlet primary_shade_0 = [170, 111, 57];\r\nlet primary_shade_1 = [255, 211, 170];\r\nlet primary_shade_2 = [212, 157, 106];\r\nlet primary_shade_3 = [128, 72, 21];\r\nlet primary_shade_4 = [85, 41, 0];\r\n// *** Secondary color (1):\r\nlet secondary_blue_shade_0 = [47, 64, 115];\r\nlet secondary_blue_shade_1 = [121, 134, 172];\r\nlet secondary_blue_shade_2 = [80, 96, 143];\r\nlet secondary_blue_shade_3 = [22, 38, 86];\r\nlet secondary_blue_shade_4 = [6, 19, 57];\r\n// *** Secondary color (2):\r\nlet secondary_green_shade_0 = [43, 130, 58];\r\nlet secondary_green_shade_1 = [130, 195, 141];\r\nlet secondary_green_shade_2 = [81, 163, 95];\r\nlet secondary_green_shade_3 = [16, 98, 30];\r\nlet secondary_green_shade_4 = [0, 65, 11];\r\n// #####  Generated by Paletton.com (c) 2002-2014\r\nlet monster_color = [255, 255, 0];\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/brew_components/color.ts\n");

/***/ }),

/***/ "./src/brew_components/config.ts":
/*!***************************************!*\
  !*** ./src/brew_components/config.ts ***!
  \***************************************/
/*! exports provided: MAX_GRID_SIZE, screen_width_tiles, screen_height_tiles, font_size, animation_speed, rotjs_topology, ally_hover_range, max_depth, max_powers, max_items, max_health, pack_attack_size, pack_distance, grenade_radius, player_shield_amount, map_width_tiles, map_height_tiles, max_power_charges, max_power_strength, popup_msg_speed, local_sight_range, explosion_damage, turret_damage, machinegun_damage, default_monster_sight_range, default_player_sight_range */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MAX_GRID_SIZE\", function() { return MAX_GRID_SIZE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"screen_width_tiles\", function() { return screen_width_tiles; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"screen_height_tiles\", function() { return screen_height_tiles; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"font_size\", function() { return font_size; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"animation_speed\", function() { return animation_speed; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotjs_topology\", function() { return rotjs_topology; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ally_hover_range\", function() { return ally_hover_range; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"max_depth\", function() { return max_depth; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"max_powers\", function() { return max_powers; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"max_items\", function() { return max_items; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"max_health\", function() { return max_health; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"pack_attack_size\", function() { return pack_attack_size; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"pack_distance\", function() { return pack_distance; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"grenade_radius\", function() { return grenade_radius; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"player_shield_amount\", function() { return player_shield_amount; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"map_width_tiles\", function() { return map_width_tiles; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"map_height_tiles\", function() { return map_height_tiles; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"max_power_charges\", function() { return max_power_charges; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"max_power_strength\", function() { return max_power_strength; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"popup_msg_speed\", function() { return popup_msg_speed; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"local_sight_range\", function() { return local_sight_range; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"explosion_damage\", function() { return explosion_damage; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"turret_damage\", function() { return turret_damage; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"machinegun_damage\", function() { return machinegun_damage; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_monster_sight_range\", function() { return default_monster_sight_range; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_player_sight_range\", function() { return default_player_sight_range; });\n// export let Config : { [name: string]: any } = {\r\n// \tBOSS_MODE: false,\r\n// \tMAX_GRID_SIZE: 1024, // used for converting coordinates to indexes, only change this if either map dimension is ginormous\r\n// \tscreen_width_tiles: 64,\r\n// \tscreen_height_tiles: 32,\r\n// \tfont_size: 12,\r\n// \tanimation_speed: 33,\r\n// \trotjs_topology: 4,\r\n// \tally_hover_range: 3,\r\n// \tmax_depth: 4,\r\n// \tmax_powers: 3,\r\n// \tmax_health: 3,\r\n// \tpack_attack_size: 3,\r\n// \tpack_distance: 4,\r\n// \tgrenade_radius: 5, // todo: move this to the item itself / differentiate by level\r\n// \tplayer_shield_amount: 3, // todo: make this rely on the power rank somehow\r\n// }\r\n// Config.map_width_tiles = Config.screen_width_tiles\r\n// Config.map_height_tiles = Config.screen_height_tiles\r\nlet MAX_GRID_SIZE = 1024; // used for converting coordinates to indexes, only change this if either map dimension is ginormous\r\nlet screen_width_tiles = 60;\r\nlet screen_height_tiles = 30;\r\nlet font_size = 12;\r\nlet animation_speed = 33;\r\nlet rotjs_topology = 4;\r\nlet ally_hover_range = 3;\r\nlet max_depth = 4;\r\nlet max_powers = 3;\r\nlet max_items = 8;\r\nlet max_health = 3;\r\nlet pack_attack_size = 3;\r\nlet pack_distance = 4;\r\nlet grenade_radius = 5; // todo: move this to the item itself / differentiate by level\r\nlet player_shield_amount = 3; // todo: make this rely on the power rank somehow\r\nlet map_width_tiles = screen_width_tiles;\r\nlet map_height_tiles = screen_height_tiles;\r\nlet max_power_charges = 9;\r\nlet max_power_strength = 9;\r\nlet popup_msg_speed = 1500;\r\nlet local_sight_range = 6;\r\nconst explosion_damage = 1;\r\nconst turret_damage = 2;\r\nconst machinegun_damage = 1;\r\nconst default_monster_sight_range = 10;\r\nconst default_player_sight_range = 20;\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYnJld19jb21wb25lbnRzL2NvbmZpZy50cz9hMDk1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQSxrREFBa0Q7QUFDbEQscUJBQXFCO0FBQ3JCLDZIQUE2SDtBQUM3SCwyQkFBMkI7QUFDM0IsNEJBQTRCO0FBQzVCLGtCQUFrQjtBQUNsQix3QkFBd0I7QUFDeEIsc0JBQXNCO0FBQ3RCLHdCQUF3QjtBQUN4QixpQkFBaUI7QUFDakIsa0JBQWtCO0FBQ2xCLGtCQUFrQjtBQUNsQix3QkFBd0I7QUFDeEIscUJBQXFCO0FBQ3JCLHFGQUFxRjtBQUNyRiw4RUFBOEU7QUFDOUUsSUFBSTtBQUVKLHFEQUFxRDtBQUNyRCx1REFBdUQ7QUFHaEQsSUFBSSxhQUFhLEdBQUcsSUFBSSxFQUFDLG9HQUFvRztBQUM3SCxJQUFJLGtCQUFrQixHQUFHLEVBQUU7QUFDM0IsSUFBSSxtQkFBbUIsR0FBRyxFQUFFO0FBQzVCLElBQUksU0FBUyxHQUFHLEVBQUU7QUFDbEIsSUFBSSxlQUFlLEdBQUcsRUFBRTtBQUN4QixJQUFJLGNBQWMsR0FBRyxDQUFDO0FBQ3RCLElBQUksZ0JBQWdCLEdBQUcsQ0FBQztBQUN4QixJQUFJLFNBQVMsR0FBRyxDQUFDO0FBQ2pCLElBQUksVUFBVSxHQUFHLENBQUM7QUFDbEIsSUFBSSxTQUFTLEdBQUcsQ0FBQztBQUNqQixJQUFJLFVBQVUsR0FBRyxDQUFDO0FBQ2xCLElBQUksZ0JBQWdCLEdBQUcsQ0FBQztBQUN4QixJQUFJLGFBQWEsR0FBRyxDQUFDO0FBQ3JCLElBQUksY0FBYyxHQUFHLENBQUMsRUFBQyw4REFBOEQ7QUFDckYsSUFBSSxvQkFBb0IsR0FBRyxDQUFDLEVBQUMsaURBQWlEO0FBQzlFLElBQUksZUFBZSxHQUFHLGtCQUFrQjtBQUN4QyxJQUFJLGdCQUFnQixHQUFHLG1CQUFtQjtBQUMxQyxJQUFJLGlCQUFpQixHQUFHLENBQUM7QUFDekIsSUFBSSxrQkFBa0IsR0FBRyxDQUFDO0FBQzFCLElBQUksZUFBZSxHQUFHLElBQUk7QUFDMUIsSUFBSSxpQkFBaUIsR0FBRyxDQUFDO0FBRXpCLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQztBQUMxQixNQUFNLGFBQWEsR0FBRyxDQUFDO0FBQ3ZCLE1BQU0saUJBQWlCLEdBQUcsQ0FBQztBQUUzQixNQUFNLDJCQUEyQixHQUFHLEVBQUU7QUFDdEMsTUFBTSwwQkFBMEIsR0FBRyxFQUFFIiwiZmlsZSI6Ii4vc3JjL2JyZXdfY29tcG9uZW50cy9jb25maWcudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHBvcnQgbGV0IENvbmZpZyA6IHsgW25hbWU6IHN0cmluZ106IGFueSB9ID0ge1xyXG4vLyBcdEJPU1NfTU9ERTogZmFsc2UsXHJcbi8vIFx0TUFYX0dSSURfU0laRTogMTAyNCwgLy8gdXNlZCBmb3IgY29udmVydGluZyBjb29yZGluYXRlcyB0byBpbmRleGVzLCBvbmx5IGNoYW5nZSB0aGlzIGlmIGVpdGhlciBtYXAgZGltZW5zaW9uIGlzIGdpbm9ybW91c1xyXG4vLyBcdHNjcmVlbl93aWR0aF90aWxlczogNjQsXHJcbi8vIFx0c2NyZWVuX2hlaWdodF90aWxlczogMzIsXHJcbi8vIFx0Zm9udF9zaXplOiAxMixcclxuLy8gXHRhbmltYXRpb25fc3BlZWQ6IDMzLFxyXG4vLyBcdHJvdGpzX3RvcG9sb2d5OiA0LFxyXG4vLyBcdGFsbHlfaG92ZXJfcmFuZ2U6IDMsXHJcbi8vIFx0bWF4X2RlcHRoOiA0LFxyXG4vLyBcdG1heF9wb3dlcnM6IDMsXHJcbi8vIFx0bWF4X2hlYWx0aDogMyxcclxuLy8gXHRwYWNrX2F0dGFja19zaXplOiAzLFxyXG4vLyBcdHBhY2tfZGlzdGFuY2U6IDQsXHJcbi8vIFx0Z3JlbmFkZV9yYWRpdXM6IDUsIC8vIHRvZG86IG1vdmUgdGhpcyB0byB0aGUgaXRlbSBpdHNlbGYgLyBkaWZmZXJlbnRpYXRlIGJ5IGxldmVsXHJcbi8vIFx0cGxheWVyX3NoaWVsZF9hbW91bnQ6IDMsIC8vIHRvZG86IG1ha2UgdGhpcyByZWx5IG9uIHRoZSBwb3dlciByYW5rIHNvbWVob3dcclxuLy8gfVxyXG5cclxuLy8gQ29uZmlnLm1hcF93aWR0aF90aWxlcyA9IENvbmZpZy5zY3JlZW5fd2lkdGhfdGlsZXNcclxuLy8gQ29uZmlnLm1hcF9oZWlnaHRfdGlsZXMgPSBDb25maWcuc2NyZWVuX2hlaWdodF90aWxlc1xyXG5cclxuXHJcbmV4cG9ydCBsZXQgTUFYX0dSSURfU0laRSA9IDEwMjQgLy8gdXNlZCBmb3IgY29udmVydGluZyBjb29yZGluYXRlcyB0byBpbmRleGVzLCBvbmx5IGNoYW5nZSB0aGlzIGlmIGVpdGhlciBtYXAgZGltZW5zaW9uIGlzIGdpbm9ybW91c1xyXG5leHBvcnQgbGV0IHNjcmVlbl93aWR0aF90aWxlcyA9IDYwXHJcbmV4cG9ydCBsZXQgc2NyZWVuX2hlaWdodF90aWxlcyA9IDMwXHJcbmV4cG9ydCBsZXQgZm9udF9zaXplID0gMTJcclxuZXhwb3J0IGxldCBhbmltYXRpb25fc3BlZWQgPSAzM1xyXG5leHBvcnQgbGV0IHJvdGpzX3RvcG9sb2d5ID0gNFxyXG5leHBvcnQgbGV0IGFsbHlfaG92ZXJfcmFuZ2UgPSAzXHJcbmV4cG9ydCBsZXQgbWF4X2RlcHRoID0gNFxyXG5leHBvcnQgbGV0IG1heF9wb3dlcnMgPSAzXHJcbmV4cG9ydCBsZXQgbWF4X2l0ZW1zID0gOFxyXG5leHBvcnQgbGV0IG1heF9oZWFsdGggPSAzXHJcbmV4cG9ydCBsZXQgcGFja19hdHRhY2tfc2l6ZSA9IDNcclxuZXhwb3J0IGxldCBwYWNrX2Rpc3RhbmNlID0gNFxyXG5leHBvcnQgbGV0IGdyZW5hZGVfcmFkaXVzID0gNSAvLyB0b2RvOiBtb3ZlIHRoaXMgdG8gdGhlIGl0ZW0gaXRzZWxmIC8gZGlmZmVyZW50aWF0ZSBieSBsZXZlbFxyXG5leHBvcnQgbGV0IHBsYXllcl9zaGllbGRfYW1vdW50ID0gMyAvLyB0b2RvOiBtYWtlIHRoaXMgcmVseSBvbiB0aGUgcG93ZXIgcmFuayBzb21laG93XHJcbmV4cG9ydCBsZXQgbWFwX3dpZHRoX3RpbGVzID0gc2NyZWVuX3dpZHRoX3RpbGVzXHJcbmV4cG9ydCBsZXQgbWFwX2hlaWdodF90aWxlcyA9IHNjcmVlbl9oZWlnaHRfdGlsZXNcclxuZXhwb3J0IGxldCBtYXhfcG93ZXJfY2hhcmdlcyA9IDlcclxuZXhwb3J0IGxldCBtYXhfcG93ZXJfc3RyZW5ndGggPSA5XHJcbmV4cG9ydCBsZXQgcG9wdXBfbXNnX3NwZWVkID0gMTUwMFxyXG5leHBvcnQgbGV0IGxvY2FsX3NpZ2h0X3JhbmdlID0gNlxyXG5cclxuZXhwb3J0IGNvbnN0IGV4cGxvc2lvbl9kYW1hZ2UgPSAxXHJcbmV4cG9ydCBjb25zdCB0dXJyZXRfZGFtYWdlID0gMlxyXG5leHBvcnQgY29uc3QgbWFjaGluZWd1bl9kYW1hZ2UgPSAxXHJcblxyXG5leHBvcnQgY29uc3QgZGVmYXVsdF9tb25zdGVyX3NpZ2h0X3JhbmdlID0gMTBcclxuZXhwb3J0IGNvbnN0IGRlZmF1bHRfcGxheWVyX3NpZ2h0X3JhbmdlID0gMjBcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/brew_components/config.ts\n");

/***/ }),

/***/ "./src/brew_components/coordinate.ts":
/*!*******************************************!*\
  !*** ./src/brew_components/coordinate.ts ***!
  \*******************************************/
/*! exports provided: Coordinate, CoordinateArea */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Coordinate\", function() { return Coordinate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CoordinateArea\", function() { return CoordinateArea; });\n/* harmony import */ var _brew__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../brew */ \"./src/brew.ts\");\n// coordinates & direction constants\r\n\r\nclass Coordinate {\r\n    constructor(xx, yy) {\r\n        this.x = xx;\r\n        this.y = yy;\r\n    }\r\n    toString() {\r\n        return `(${this.x}, ${this.y})`;\r\n    }\r\n    clone() {\r\n        return new Coordinate(this.x, this.y);\r\n    }\r\n    compare(other_xy) {\r\n        return (this.x == other_xy.x) && (this.y == other_xy.y);\r\n    }\r\n    add(other_xy) {\r\n        let xy = new Coordinate(this.x + other_xy.x, this.y + other_xy.y);\r\n        return xy;\r\n    }\r\n    subtract(other_xy) {\r\n        let xy = new Coordinate(this.x - other_xy.x, this.y - other_xy.y);\r\n        return xy;\r\n    }\r\n    multiplyScalar(scalar_amount) {\r\n        let xy = new Coordinate(this.x * scalar_amount, this.y * scalar_amount);\r\n        return xy;\r\n    }\r\n    toUnit() {\r\n        let x_sign = (this.x == 0) ? 0 : (Math.abs(this.x) / this.x);\r\n        let y_sign = (this.y == 0) ? 0 : (Math.abs(this.y) / this.y);\r\n        let xy = new Coordinate(x_sign, y_sign);\r\n        return xy;\r\n    }\r\n    getAdjacent() {\r\n        return [\r\n            this.add(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Directions\"].UP),\r\n            this.add(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Directions\"].DOWN),\r\n            this.add(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Directions\"].LEFT),\r\n            this.add(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Directions\"].RIGHT)\r\n        ];\r\n    }\r\n    getDiagonals() {\r\n        return [\r\n            this.add(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Directions\"].UP_LEFT),\r\n            this.add(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Directions\"].UP_RIGHT),\r\n            this.add(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Directions\"].DOWN_LEFT),\r\n            this.add(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Directions\"].DOWN_RIGHT)\r\n        ];\r\n    }\r\n    getSurrounding() {\r\n        return [\r\n            this.add(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Directions\"].UP),\r\n            this.add(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Directions\"].DOWN),\r\n            this.add(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Directions\"].LEFT),\r\n            this.add(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Directions\"].RIGHT),\r\n            this.add(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Directions\"].DOWN_LEFT),\r\n            this.add(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Directions\"].DOWN_RIGHT),\r\n            this.add(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Directions\"].UP_LEFT),\r\n            this.add(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Directions\"].UP_RIGHT),\r\n        ];\r\n    }\r\n}\r\nclass CoordinateArea {\r\n    constructor(given_xy_list = []) {\r\n        this.list_of_coords = [];\r\n        this.addCoordinates(given_xy_list);\r\n    }\r\n    getCoordinates() {\r\n        return this.list_of_coords;\r\n    }\r\n    addCoordinate(add_xy) {\r\n        // returns true if a new coord, false if already exists in the list\r\n        if (this.hasCoordinate(add_xy)) {\r\n            return false;\r\n        }\r\n        else {\r\n            this.list_of_coords.push(add_xy.clone());\r\n            return true;\r\n        }\r\n    }\r\n    addCoordinates(xy_list) {\r\n        let results = xy_list.map((xy) => {\r\n            return this.addCoordinate(xy);\r\n        });\r\n        return results.every((was_new) => { return was_new; });\r\n    }\r\n    findCoordinate(find_xy) {\r\n        return this.list_of_coords.findIndex((xy) => {\r\n            return xy.compare(find_xy);\r\n        });\r\n    }\r\n    hasCoordinate(has_xy) {\r\n        return this.findCoordinate(has_xy) > -1;\r\n    }\r\n    removeCoordinate(del_xy) {\r\n        let idx = this.findCoordinate(del_xy);\r\n        if (idx > -1) {\r\n            this.list_of_coords.splice(idx, 1);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    getUnion(other_area) {\r\n        // return elements of A + B\r\n        let combined_area = new CoordinateArea(this.list_of_coords);\r\n        other_area.getCoordinates().forEach((xy) => {\r\n            combined_area.addCoordinate(xy);\r\n        });\r\n        return combined_area;\r\n    }\r\n    getDiff(other_area) {\r\n        // return elements of A not in B\r\n        let diff_area = new CoordinateArea();\r\n        this.getCoordinates().forEach((xy) => {\r\n            if (!(other_area.hasCoordinate(xy))) {\r\n                diff_area.addCoordinate(xy);\r\n            }\r\n        });\r\n        return diff_area;\r\n    }\r\n    getSymmetricDiff(other_area) {\r\n        // return elements of A not in B and B not in A\r\n        let diff_a = this.getDiff(other_area);\r\n        let diff_b = other_area.getDiff(this);\r\n        return diff_a.getUnion(diff_b);\r\n    }\r\n    getCoordinatesExcept(exception_xy_list) {\r\n        let other_area = new CoordinateArea(exception_xy_list);\r\n        return this.getDiff(other_area).getCoordinates();\r\n    }\r\n    filter(filter_fn) {\r\n        return new CoordinateArea(this.list_of_coords.filter(filter_fn));\r\n    }\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/brew_components/coordinate.ts\n");

/***/ }),

/***/ "./src/brew_components/directions.ts":
/*!*******************************************!*\
  !*** ./src/brew_components/directions.ts ***!
  \*******************************************/
/*! exports provided: UP, DOWN, LEFT, RIGHT, UP_LEFT, DOWN_LEFT, UP_RIGHT, DOWN_RIGHT */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UP\", function() { return UP; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DOWN\", function() { return DOWN; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LEFT\", function() { return LEFT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RIGHT\", function() { return RIGHT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UP_LEFT\", function() { return UP_LEFT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DOWN_LEFT\", function() { return DOWN_LEFT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UP_RIGHT\", function() { return UP_RIGHT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DOWN_RIGHT\", function() { return DOWN_RIGHT; });\n/* harmony import */ var _brew__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../brew */ \"./src/brew.ts\");\n\r\nconst UP = new _brew__WEBPACK_IMPORTED_MODULE_0__[\"Coordinate\"](0, -1);\r\nconst DOWN = new _brew__WEBPACK_IMPORTED_MODULE_0__[\"Coordinate\"](0, 1);\r\nconst LEFT = new _brew__WEBPACK_IMPORTED_MODULE_0__[\"Coordinate\"](-1, 0);\r\nconst RIGHT = new _brew__WEBPACK_IMPORTED_MODULE_0__[\"Coordinate\"](1, 0);\r\nconst UP_LEFT = new _brew__WEBPACK_IMPORTED_MODULE_0__[\"Coordinate\"](-1, -1);\r\nconst DOWN_LEFT = new _brew__WEBPACK_IMPORTED_MODULE_0__[\"Coordinate\"](-1, 1);\r\nconst UP_RIGHT = new _brew__WEBPACK_IMPORTED_MODULE_0__[\"Coordinate\"](1, -1);\r\nconst DOWN_RIGHT = new _brew__WEBPACK_IMPORTED_MODULE_0__[\"Coordinate\"](1, 1);\r\n// export const N = Brew.Directions.UP\r\n// export const S = Brew.Directions.DOWN\r\n// export const E = Brew.Directions.RIGHT\r\n// export const W = Brew.Directions.LEFT\r\n// export const NE = Brew.Directions.UP_RIGHT\r\n// export const NW = Brew.Directions.UP_LEFT\r\n// export const SE = Brew.Directions.DOWN_RIGHT\r\n// export const SW = Brew.Directions.DOWN_LEFT\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYnJld19jb21wb25lbnRzL2RpcmVjdGlvbnMudHM/ZWViOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQStCO0FBRXhCLE1BQU0sRUFBRSxHQUFHLElBQUksZ0RBQWUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDckMsTUFBTSxJQUFJLEdBQUcsSUFBSSxnREFBZSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDdEMsTUFBTSxJQUFJLEdBQUcsSUFBSSxnREFBZSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN2QyxNQUFNLEtBQUssR0FBRyxJQUFJLGdEQUFlLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUV2QyxNQUFNLE9BQU8sR0FBRyxJQUFJLGdEQUFlLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDM0MsTUFBTSxTQUFTLEdBQUcsSUFBSSxnREFBZSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUM1QyxNQUFNLFFBQVEsR0FBRyxJQUFJLGdEQUFlLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzNDLE1BQU0sVUFBVSxHQUFHLElBQUksZ0RBQWUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ25ELHNDQUFzQztBQUN0Qyx3Q0FBd0M7QUFDeEMseUNBQXlDO0FBQ3pDLHdDQUF3QztBQUN4Qyw2Q0FBNkM7QUFDN0MsNENBQTRDO0FBQzVDLCtDQUErQztBQUMvQyw4Q0FBOEMiLCJmaWxlIjoiLi9zcmMvYnJld19jb21wb25lbnRzL2RpcmVjdGlvbnMudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBCcmV3IGZyb20gXCIuLi9icmV3XCJcclxuXHJcbmV4cG9ydCBjb25zdCBVUCA9IG5ldyBCcmV3LkNvb3JkaW5hdGUoMCwgLTEpXHJcbmV4cG9ydCBjb25zdCBET1dOID0gbmV3IEJyZXcuQ29vcmRpbmF0ZSgwLCAxKVxyXG5leHBvcnQgY29uc3QgTEVGVCA9IG5ldyBCcmV3LkNvb3JkaW5hdGUoLTEsIDApXHJcbmV4cG9ydCBjb25zdCBSSUdIVCA9IG5ldyBCcmV3LkNvb3JkaW5hdGUoMSwgMClcclxuXHJcbmV4cG9ydCBjb25zdCBVUF9MRUZUID0gbmV3IEJyZXcuQ29vcmRpbmF0ZSgtMSwgLTEpXHJcbmV4cG9ydCBjb25zdCBET1dOX0xFRlQgPSBuZXcgQnJldy5Db29yZGluYXRlKC0xLCAxKVxyXG5leHBvcnQgY29uc3QgVVBfUklHSFQgPSBuZXcgQnJldy5Db29yZGluYXRlKDEsIC0xKVxyXG5leHBvcnQgY29uc3QgRE9XTl9SSUdIVCA9IG5ldyBCcmV3LkNvb3JkaW5hdGUoMSwgMSlcclxuLy8gZXhwb3J0IGNvbnN0IE4gPSBCcmV3LkRpcmVjdGlvbnMuVVBcclxuLy8gZXhwb3J0IGNvbnN0IFMgPSBCcmV3LkRpcmVjdGlvbnMuRE9XTlxyXG4vLyBleHBvcnQgY29uc3QgRSA9IEJyZXcuRGlyZWN0aW9ucy5SSUdIVFxyXG4vLyBleHBvcnQgY29uc3QgVyA9IEJyZXcuRGlyZWN0aW9ucy5MRUZUXHJcbi8vIGV4cG9ydCBjb25zdCBORSA9IEJyZXcuRGlyZWN0aW9ucy5VUF9SSUdIVFxyXG4vLyBleHBvcnQgY29uc3QgTlcgPSBCcmV3LkRpcmVjdGlvbnMuVVBfTEVGVFxyXG4vLyBleHBvcnQgY29uc3QgU0UgPSBCcmV3LkRpcmVjdGlvbnMuRE9XTl9SSUdIVFxyXG4vLyBleHBvcnQgY29uc3QgU1cgPSBCcmV3LkRpcmVjdGlvbnMuRE9XTl9MRUZUXHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/brew_components/directions.ts\n");

/***/ }),

/***/ "./src/brew_components/fov.ts":
/*!************************************!*\
  !*** ./src/brew_components/fov.ts ***!
  \************************************/
/*! exports provided: symmetricRecursiveShadowcasting_Directional, symmetricRecursiveShadowcasting */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"symmetricRecursiveShadowcasting_Directional\", function() { return symmetricRecursiveShadowcasting_Directional; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"symmetricRecursiveShadowcasting\", function() { return symmetricRecursiveShadowcasting; });\n/* harmony import */ var _brew__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../brew */ \"./src/brew.ts\");\n\r\n// An array of transforms, each corresponding to one octant.\r\nlet transforms = [\r\n    { xx: 1, xy: 0, yx: 0, yy: 1 },\r\n    { xx: 1, xy: 0, yx: 0, yy: -1 },\r\n    { xx: -1, xy: 0, yx: 0, yy: 1 },\r\n    { xx: -1, xy: 0, yx: 0, yy: -1 },\r\n    { xx: 0, xy: 1, yx: 1, yy: 0 },\r\n    { xx: 0, xy: 1, yx: -1, yy: 0 },\r\n    { xx: 0, xy: -1, yx: 1, yy: 0 },\r\n    { xx: 0, xy: -1, yx: -1, yy: 0 }\r\n];\r\nfunction symmetricRecursiveShadowcasting_Directional(cx, cy, transparent, reveal, facing_dir_xy) {\r\n    let octants = [];\r\n    //  3|1\r\n    // 7 * 5\r\n    // 6 * 4\r\n    //  2|0\r\n    if (facing_dir_xy.compare(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Directions\"].UP)) {\r\n        octants = [3, 1];\r\n    }\r\n    else if (facing_dir_xy.compare(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Directions\"].DOWN)) {\r\n        octants = [2, 0];\r\n    }\r\n    else if (facing_dir_xy.compare(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Directions\"].LEFT)) {\r\n        octants = [7, 6];\r\n    }\r\n    else if (facing_dir_xy.compare(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Directions\"].RIGHT)) {\r\n        octants = [4, 5];\r\n    }\r\n    else {\r\n        // console.warn(\"invalid facing direction\")\r\n        octants = [0, 1, 2, 3, 4, 5, 6, 7];\r\n    }\r\n    symmetricRecursiveShadowcasting(cx, cy, transparent, reveal, octants);\r\n}\r\n/**\r\n * Recursive shadowcasting algorithm.\r\n * This algorithm creates a field of view centered around (x, y).\r\n * Opaque tiles are treated as if they have beveled edges.\r\n * Transparent tiles are visible only if their center is visible, so the\r\n * algorithm is symmetric.\r\n * @param cx - x coordinate of center\r\n * @param cy - y coordinate of center\r\n * @param transparent - function that takes (x, y) as arguments and returns the transparency of that tile\r\n * @param reveal - callback function that reveals the tile at (x, y)\r\n */\r\nfunction symmetricRecursiveShadowcasting(cx, cy, transparent, reveal, octants) {\r\n    if (!(octants)) {\r\n        octants = [0, 1, 2, 3, 4, 5, 6, 7];\r\n    }\r\n    /**\r\n     * Scan one row of one octant.\r\n     * @param y - distance from the row scanned to the center\r\n     * @param start - starting slope\r\n     * @param end - ending slope\r\n     * @param transform - describes the transfrom to apply on x and y; determines the octant\r\n     */\r\n    let scan = (y, start, end, transform) => {\r\n        if (start >= end) {\r\n            return;\r\n        }\r\n        let xmin = Math.round((y - 0.5) * start);\r\n        let xmax = Math.ceil((y + 0.5) * end - 0.5);\r\n        for (let x = xmin; x <= xmax; x++) {\r\n            let realx = cx + transform.xx * x + transform.xy * y;\r\n            let realy = cy + transform.yx * x + transform.yy * y;\r\n            if (transparent(realx, realy)) {\r\n                if (x >= y * start && x <= y * end) {\r\n                    reveal(realx, realy);\r\n                }\r\n            }\r\n            else {\r\n                if (x >= (y - 0.5) * start && x - 0.5 <= y * end) {\r\n                    reveal(realx, realy);\r\n                }\r\n                scan(y + 1, start, (x - 0.5) / y, transform);\r\n                start = (x + 0.5) / y;\r\n                if (start >= end) {\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        scan(y + 1, start, end, transform);\r\n    };\r\n    reveal(cx, cy);\r\n    // Scan each octant\r\n    for (var i = 0; i < 8; i++) {\r\n        if (octants.indexOf(i) > -1) {\r\n            scan(1, 0, 1, transforms[i]);\r\n        }\r\n    }\r\n}\r\n// }\r\n// window.shadowcast = function(cx, cy, transparent, reveal) {\r\n//     'use strict';\r\n//     /**\r\n//      * Scan one row of one octant.\r\n//      * @param y - distance from the row scanned to the center\r\n//      * @param start - starting slope\r\n//      * @param end - ending slope\r\n//      * @param transform - describes the transfrom to apply on x and y; determines the octant\r\n//      */\r\n//     var scan = function(y, start, end, transform) {\r\n//         if (start >= end) {\r\n//             return;\r\n//         }\r\n//         var xmin = Math.round((y - 0.5) * start);\r\n//         var xmax = Math.ceil((y + 0.5) * end - 0.5);\r\n//         for (var x = xmin; x <= xmax; x++) {\r\n//             var realx = cx + transform.xx * x + transform.xy * y;\r\n//             var realy = cy + transform.yx * x + transform.yy * y;\r\n//             if (transparent(realx, realy)) {\r\n//                 if (x >= y * start && x <= y * end) {\r\n//                     reveal(realx, realy);\r\n//                 }\r\n//             } else {\r\n//                 if (x >= (y - 0.5) * start && x - 0.5 <= y * end) {\r\n//                     reveal(realx, realy);\r\n//                 }\r\n//                 scan(y + 1, start, (x - 0.5) / y, transform);\r\n//                 start = (x + 0.5) / y;\r\n//                 if (start >= end) {\r\n//                     return;\r\n//                 }\r\n//             }\r\n//         }\r\n//         scan(y + 1, start, end, transform);\r\n//     };\r\n//     // An array of transforms, each corresponding to one octant.\r\n//     var transforms = [\r\n//         { xx:  1, xy:  0, yx:  0, yy:  1 },\r\n//         { xx:  1, xy:  0, yx:  0, yy: -1 },\r\n//         { xx: -1, xy:  0, yx:  0, yy:  1 },\r\n//         { xx: -1, xy:  0, yx:  0, yy: -1 },\r\n//         { xx:  0, xy:  1, yx:  1, yy:  0 },\r\n//         { xx:  0, xy:  1, yx: -1, yy:  0 },\r\n//         { xx:  0, xy: -1, yx:  1, yy:  0 },\r\n//         { xx:  0, xy: -1, yx: -1, yy:  0 }\r\n//     ];\r\n//     reveal(cx, cy);\r\n//     // Scan each octant\r\n//     for (var i = 0; i < 8; i++) {\r\n//         scan(1, 0, 1, transforms[i]);\r\n//     }\r\n// };\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/brew_components/fov.ts\n");

/***/ }),

/***/ "./src/brew_components/grid.ts":
/*!*************************************!*\
  !*** ./src/brew_components/grid.ts ***!
  \*************************************/
/*! exports provided: GridOfThings */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GridOfThings\", function() { return GridOfThings; });\n/* harmony import */ var _brew__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../brew */ \"./src/brew.ts\");\n\r\nclass GridOfThings {\r\n    constructor() {\r\n        // things: Dict<ThingInterface> = {}\r\n        this.things = {};\r\n    }\r\n    clearAll() {\r\n        this.things = {};\r\n    }\r\n    clone() {\r\n        let new_GoT = new GridOfThings();\r\n        new_GoT.things = Object.assign({}, this.things);\r\n        return new_GoT;\r\n    }\r\n    hasAt(xy) {\r\n        var key = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].xyToKey(xy);\r\n        if (key in this.things) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    getAt(xy) {\r\n        if (this.hasAt(xy)) {\r\n            var key = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].xyToKey(xy);\r\n            return this.things[key];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    // setAt (xy: Brew.Coordinate, something: Thing) : boolean {\r\n    setAt(xy, something) {\r\n        if (this.hasAt(xy)) {\r\n            return false;\r\n        }\r\n        else {\r\n            var key = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].xyToKey(xy);\r\n            this.things[key] = something;\r\n            // if its a Thing, set its location on the object as well \r\n            if (something instanceof _brew__WEBPACK_IMPORTED_MODULE_0__[\"GridThings\"].Thing) {\r\n                something.location = xy;\r\n            }\r\n            // something[\"location\"] = xy\r\n            return true;\r\n        }\r\n    }\r\n    removeAt(xy) {\r\n        // returns true if we removed something, false if not\r\n        if (this.hasAt(xy)) {\r\n            var key = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].xyToKey(xy);\r\n            delete this.things[key];\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    getAllCoordinates() {\r\n        let xy;\r\n        let numberkey;\r\n        let coords = [];\r\n        for (let key in this.things) {\r\n            numberkey = parseInt(key);\r\n            xy = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].keyToXY(numberkey);\r\n            coords.push(xy);\r\n        }\r\n        return coords;\r\n    }\r\n    getAllThings() {\r\n        let values = [];\r\n        for (let key in this.things) {\r\n            values.push(this.things[key]);\r\n        }\r\n        return values;\r\n    }\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYnJld19jb21wb25lbnRzL2dyaWQudHM/ZjY5MiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBK0I7QUFPekI7SUFBTjtRQUVJLG9DQUFvQztRQUNwQyxXQUFNLEdBQXVCLEVBQUU7SUFtRm5DLENBQUM7SUFqRkcsUUFBUTtRQUNKLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRTtJQUNwQixDQUFDO0lBRUQsS0FBSztRQUNELElBQUksT0FBTyxHQUFHLElBQUksWUFBWSxFQUFLO1FBQ25DLE9BQU8sQ0FBQyxNQUFNLHFCQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDakMsTUFBTSxDQUFDLE9BQU87SUFDbEIsQ0FBQztJQUVELEtBQUssQ0FBRSxFQUFtQjtRQUN0QixJQUFJLEdBQUcsR0FBRywyQ0FBVSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFFaEMsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ3JCLE1BQU0sQ0FBQyxJQUFJO1FBQ2YsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osTUFBTSxDQUFDLEtBQUs7UUFDaEIsQ0FBQztJQUNMLENBQUM7SUFFRCxLQUFLLENBQUUsRUFBbUI7UUFDdEIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakIsSUFBSSxHQUFHLEdBQUcsMkNBQVUsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1lBQ2hDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztRQUMzQixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDSixNQUFNLENBQUMsSUFBSTtRQUNmLENBQUM7SUFDTCxDQUFDO0lBRUQsNERBQTREO0lBQzVELEtBQUssQ0FBRSxFQUFtQixFQUFFLFNBQVk7UUFDcEMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakIsTUFBTSxDQUFDLEtBQUs7UUFDaEIsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osSUFBSSxHQUFHLEdBQUcsMkNBQVUsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1lBQ2hDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsU0FBUztZQUU1QiwwREFBMEQ7WUFDMUQsRUFBRSxDQUFDLENBQUMsU0FBUyxZQUFZLGdEQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDNUMsU0FBaUIsQ0FBQyxRQUFRLEdBQUcsRUFBRTtZQUNwQyxDQUFDO1lBRUQsNkJBQTZCO1lBRTdCLE1BQU0sQ0FBQyxJQUFJO1FBQ2YsQ0FBQztJQUNMLENBQUM7SUFFRCxRQUFRLENBQUUsRUFBbUI7UUFDekIscURBQXFEO1FBQ3JELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pCLElBQUksR0FBRyxHQUFHLDJDQUFVLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUNoQyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO1lBQ3ZCLE1BQU0sQ0FBQyxJQUFJO1FBQ2YsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osTUFBTSxDQUFDLEtBQUs7UUFDaEIsQ0FBQztJQUNMLENBQUM7SUFFRCxpQkFBaUI7UUFDYixJQUFJLEVBQW1CO1FBQ3ZCLElBQUksU0FBa0I7UUFDdEIsSUFBSSxNQUFNLEdBQTRCLEVBQUU7UUFFeEMsR0FBRyxDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDMUIsU0FBUyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUM7WUFDekIsRUFBRSxHQUFHLDJDQUFVLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztZQUNsQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUNuQixDQUFDO1FBRUQsTUFBTSxDQUFDLE1BQU07SUFDakIsQ0FBQztJQUVELFlBQVk7UUFDUixJQUFJLE1BQU0sR0FBYyxFQUFFO1FBQzFCLEdBQUcsQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQzFCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNqQyxDQUFDO1FBRUQsTUFBTSxDQUFDLE1BQU07SUFDakIsQ0FBQztDQUNKIiwiZmlsZSI6Ii4vc3JjL2JyZXdfY29tcG9uZW50cy9ncmlkLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgQnJldyBmcm9tIFwiLi4vYnJld1wiXHJcblxyXG5pbnRlcmZhY2UgVGhpbmdJbnRlcmZhY2Uge1xyXG4gICAgbG9jYXRpb246IEJyZXcuQ29vcmRpbmF0ZVxyXG4gICAgY29kZTogc3RyaW5nXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBHcmlkT2ZUaGluZ3M8VD4ge1xyXG5cclxuICAgIC8vIHRoaW5nczogRGljdDxUaGluZ0ludGVyZmFjZT4gPSB7fVxyXG4gICAgdGhpbmdzOiBCcmV3LlV0aWxzLkRpY3Q8VD4gPSB7fVxyXG4gICAgXHJcbiAgICBjbGVhckFsbCAoKSB7XHJcbiAgICAgICAgdGhpcy50aGluZ3MgPSB7fVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBjbG9uZSgpIDogR3JpZE9mVGhpbmdzPFQ+IHtcclxuICAgICAgICBsZXQgbmV3X0dvVCA9IG5ldyBHcmlkT2ZUaGluZ3M8VD4oKVxyXG4gICAgICAgIG5ld19Hb1QudGhpbmdzID0gey4uLnRoaXMudGhpbmdzfVxyXG4gICAgICAgIHJldHVybiBuZXdfR29UXHJcbiAgICB9XHJcbiAgICBcclxuICAgIGhhc0F0ICh4eTogQnJldy5Db29yZGluYXRlKSA6IGJvb2xlYW4ge1xyXG4gICAgICAgIHZhciBrZXkgPSBCcmV3LlV0aWxzLnh5VG9LZXkoeHkpXHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKGtleSBpbiB0aGlzLnRoaW5ncykge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgIH0gZWxzZSB7IFxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGdldEF0ICh4eTogQnJldy5Db29yZGluYXRlKSA6IFQge1xyXG4gICAgICAgIGlmICh0aGlzLmhhc0F0KHh5KSkge1xyXG4gICAgICAgICAgICB2YXIga2V5ID0gQnJldy5VdGlscy54eVRvS2V5KHh5KVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy50aGluZ3Nba2V5XVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBzZXRBdCAoeHk6IEJyZXcuQ29vcmRpbmF0ZSwgc29tZXRoaW5nOiBUaGluZykgOiBib29sZWFuIHtcclxuICAgIHNldEF0ICh4eTogQnJldy5Db29yZGluYXRlLCBzb21ldGhpbmc6IFQpIDogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKHRoaXMuaGFzQXQoeHkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBrZXkgPSBCcmV3LlV0aWxzLnh5VG9LZXkoeHkpXHJcbiAgICAgICAgICAgIHRoaXMudGhpbmdzW2tleV0gPSBzb21ldGhpbmdcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIGlmIGl0cyBhIFRoaW5nLCBzZXQgaXRzIGxvY2F0aW9uIG9uIHRoZSBvYmplY3QgYXMgd2VsbCBcclxuICAgICAgICAgICAgaWYgKHNvbWV0aGluZyBpbnN0YW5jZW9mIEJyZXcuR3JpZFRoaW5ncy5UaGluZykge1xyXG4gICAgICAgICAgICAgICAgKHNvbWV0aGluZyBhcyBhbnkpLmxvY2F0aW9uID0geHlcclxuICAgICAgICAgICAgfSBcclxuXHJcbiAgICAgICAgICAgIC8vIHNvbWV0aGluZ1tcImxvY2F0aW9uXCJdID0geHlcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZW1vdmVBdCAoeHk6IEJyZXcuQ29vcmRpbmF0ZSkgOiBib29sZWFuIHtcclxuICAgICAgICAvLyByZXR1cm5zIHRydWUgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcsIGZhbHNlIGlmIG5vdFxyXG4gICAgICAgIGlmICh0aGlzLmhhc0F0KHh5KSkge1xyXG4gICAgICAgICAgICB2YXIga2V5ID0gQnJldy5VdGlscy54eVRvS2V5KHh5KVxyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy50aGluZ3Nba2V5XVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgZ2V0QWxsQ29vcmRpbmF0ZXMoKSA6IEFycmF5PEJyZXcuQ29vcmRpbmF0ZT4ge1xyXG4gICAgICAgIGxldCB4eTogQnJldy5Db29yZGluYXRlXHJcbiAgICAgICAgbGV0IG51bWJlcmtleSA6IG51bWJlclxyXG4gICAgICAgIGxldCBjb29yZHMgOiBBcnJheTxCcmV3LkNvb3JkaW5hdGU+ID0gW11cclxuICAgICAgICBcclxuICAgICAgICBmb3IgKGxldCBrZXkgaW4gdGhpcy50aGluZ3MpIHtcclxuICAgICAgICAgICAgbnVtYmVya2V5ID0gcGFyc2VJbnQoa2V5KVxyXG4gICAgICAgICAgICB4eSA9IEJyZXcuVXRpbHMua2V5VG9YWShudW1iZXJrZXkpXHJcbiAgICAgICAgICAgIGNvb3Jkcy5wdXNoKHh5KVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gY29vcmRzXHJcbiAgICB9XHJcbiAgICBcclxuICAgIGdldEFsbFRoaW5ncygpIDogQXJyYXk8VD4ge1xyXG4gICAgICAgIGxldCB2YWx1ZXMgOiBBcnJheTxUPiA9IFtdXHJcbiAgICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMudGhpbmdzKSB7XHJcbiAgICAgICAgICAgIHZhbHVlcy5wdXNoKHRoaXMudGhpbmdzW2tleV0pXHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiB2YWx1ZXNcclxuICAgIH1cclxufVxyXG5cclxuXHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/brew_components/grid.ts\n");

/***/ }),

/***/ "./src/brew_components/inventory.ts":
/*!******************************************!*\
  !*** ./src/brew_components/inventory.ts ***!
  \******************************************/
/*! exports provided: Inventory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Inventory\", function() { return Inventory; });\nlet default_inv_keys = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\r\nclass Inventory {\r\n    // assign_key_fn: () => string\r\n    constructor(max_items, inv_keys = default_inv_keys) {\r\n        this.items = {};\r\n        // this.items = {}\r\n        this.num_items = 0;\r\n        this.max_items = max_items;\r\n        this.inv_keys = inv_keys;\r\n        if (inv_keys.length < max_items) {\r\n            throw new Error(\"Not enough inventory keys given for maximum number of items\");\r\n        }\r\n    }\r\n    hasCapacity() {\r\n        return this.num_items < this.max_items;\r\n    }\r\n    addItem(an_item) {\r\n        // returns false if inv is full\r\n        if (this.num_items == this.max_items) {\r\n            return false;\r\n        }\r\n        let invkey = this.assignInventoryKey(an_item);\r\n        this.items[invkey] = {\r\n            item: an_item,\r\n            num_stacked: 1\r\n        };\r\n        this.num_items += 1;\r\n        return true;\r\n    }\r\n    assignInventoryKey(an_item) {\r\n        for (let key_value of this.inv_keys) {\r\n            // console.log(key_value, (!(key_value in this.items)))\r\n            if (!(key_value in this.items)) {\r\n                return key_value;\r\n            }\r\n        }\r\n        throw new Error(\"Ran out of free inventory keys\");\r\n    }\r\n    getItemByKey(inv_key) {\r\n        if (!(inv_key in this.items)) {\r\n            throw new Error(`No item linked to inventory key: ${inv_key}`);\r\n        }\r\n        return this.items[inv_key].item;\r\n    }\r\n    getInventoryItemByKey(inv_key) {\r\n        if (!(inv_key in this.items)) {\r\n            throw new Error(`No item linked to inventory key: ${inv_key}`);\r\n        }\r\n        return this.items[inv_key];\r\n    }\r\n    removeItemByKey(inv_key) {\r\n        if (!(inv_key in this.items)) {\r\n            throw new Error(`No item linked to inventory key: ${inv_key}`);\r\n        }\r\n        delete this.items[inv_key];\r\n        this.num_items -= 1;\r\n    }\r\n    getItems() {\r\n        let results = [];\r\n        for (let invkey in this.items) {\r\n            results.push(this.items[invkey].item);\r\n        }\r\n        return results;\r\n    }\r\n    getKeys() {\r\n        let results = [];\r\n        for (let invkey in this.items) {\r\n            results.push(invkey);\r\n        }\r\n        return results;\r\n    }\r\n    findKeyForItemOfType(given_type) {\r\n        let found_invkey = null;\r\n        for (let invkey in this.items) {\r\n            let it = this.getItemByKey(invkey);\r\n            if (it.isType(given_type)) {\r\n                found_invkey = invkey;\r\n                break;\r\n            }\r\n        }\r\n        return found_invkey;\r\n    }\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/brew_components/inventory.ts\n");

/***/ }),

/***/ "./src/brew_components/level.ts":
/*!**************************************!*\
  !*** ./src/brew_components/level.ts ***!
  \**************************************/
/*! exports provided: Level */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Level\", function() { return Level; });\n/* harmony import */ var _brew__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../brew */ \"./src/brew.ts\");\n\r\nclass Level {\r\n    constructor(width, height, depth) {\r\n        this.isConstructed = false;\r\n        this.id = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].generateID();\r\n        this.width = width;\r\n        this.height = height;\r\n        this.depth = depth || 0;\r\n        this.terrain = new _brew__WEBPACK_IMPORTED_MODULE_0__[\"GridOfThings\"]();\r\n        this.monsters = new _brew__WEBPACK_IMPORTED_MODULE_0__[\"GridOfThings\"]();\r\n        this.items = new _brew__WEBPACK_IMPORTED_MODULE_0__[\"GridOfThings\"]();\r\n        this.features = new _brew__WEBPACK_IMPORTED_MODULE_0__[\"GridOfThings\"]();\r\n        this.above = new _brew__WEBPACK_IMPORTED_MODULE_0__[\"GridOfThings\"]();\r\n        this.portals = new _brew__WEBPACK_IMPORTED_MODULE_0__[\"GridOfThings\"]();\r\n        this.parts = new _brew__WEBPACK_IMPORTED_MODULE_0__[\"GridOfThings\"]();\r\n        this.navigation_tiles = {};\r\n        this.navigation_tiles[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].LevelNavigationType.Walk] = [];\r\n        this.navigation_tiles[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].LevelNavigationType.Fly] = [];\r\n    }\r\n    isValid(xy) {\r\n        return (this.isConstructed) && (xy.x >= 0) && (xy.y >= 0) && (xy.x < this.width) && (xy.y < this.height);\r\n    }\r\n    isValid_PointsOnly(xy) {\r\n        return (xy.x >= 0) && (xy.y >= 0) && (xy.x < this.width) && (xy.y < this.height);\r\n    }\r\n    getSafeLocationNear(spot_xy, exclude_location_with_item = false) {\r\n        // returns a safe spot near a given Brew.Coordinate\r\n        // safe = walkable, monster-free, not an exit\r\n        let max_size = 10; // stop after 5 successively bigger squares\r\n        let points;\r\n        for (let size = 1; size < max_size; size++) {\r\n            points = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].getSquarePoints(spot_xy, size);\r\n            for (let xy of points) {\r\n                if (this.isSafe(xy, exclude_location_with_item)) {\r\n                    return xy;\r\n                }\r\n            }\r\n        }\r\n        console.warn(\"unable to find suitable place to exit phasewalk - dumping to potentially dumb random location\");\r\n        let random_xy = this.getSafeLocation();\r\n        return random_xy;\r\n    }\r\n    isSafe(xy, exclude_location_with_item = false) {\r\n        let not_ok;\r\n        not_ok = ((!(this.isValid(xy))) ||\r\n            (this.terrain.getAt(xy).blocks_walking) ||\r\n            (this.monsters.hasAt(xy)) ||\r\n            (this.portals.hasAt(xy)) ||\r\n            (exclude_location_with_item && (this.items.hasAt(xy))) ||\r\n            (xy.compare(this.simple_exit_xy)) ||\r\n            (xy.compare(this.simple_start_xy)));\r\n        return (!(not_ok));\r\n    }\r\n    getSafeLocation() {\r\n        // returns a walkable, monster-free location\r\n        let xy;\r\n        let tries = 0;\r\n        let not_ok;\r\n        while (tries < 50) {\r\n            xy = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].randomOf(this.getWalkableTiles());\r\n            not_ok = ((this.monsters.hasAt(xy)) ||\r\n                (xy.compare(this.simple_exit_xy)) ||\r\n                (xy.compare(this.simple_start_xy)));\r\n            if (!(not_ok)) {\r\n                return xy;\r\n            }\r\n            tries += 1;\r\n        }\r\n        console.error(\"unable to find safe location\");\r\n        return null;\r\n    }\r\n    updateNavigation() {\r\n        let t;\r\n        let xy;\r\n        for (let x = 1; x < (this.width - 1); x++) {\r\n            for (let y = 1; y < (this.height - 1); y++) {\r\n                xy = new _brew__WEBPACK_IMPORTED_MODULE_0__[\"Coordinate\"](x, y);\r\n                t = this.terrain.getAt(xy);\r\n                if (!(t.blocks_walking)) {\r\n                    this.navigation_tiles[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].LevelNavigationType.Walk].push(xy);\r\n                }\r\n                if (!(t.blocks_flying)) {\r\n                    this.navigation_tiles[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].LevelNavigationType.Fly].push(xy);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getWalkableTiles() {\r\n        return this.getNavigableTilesOfType(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].LevelNavigationType.Walk);\r\n    }\r\n    getFlyableTiles() {\r\n        return this.getNavigableTilesOfType(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].LevelNavigationType.Fly);\r\n    }\r\n    getNavigableTilesOfType(navType) {\r\n        return this.navigation_tiles[navType];\r\n    }\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/brew_components/level.ts\n");

/***/ }),

/***/ "./src/brew_components/portal.ts":
/*!***************************************!*\
  !*** ./src/brew_components/portal.ts ***!
  \***************************************/
/*! exports provided: Portal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Portal\", function() { return Portal; });\nclass Portal {\r\n    constructor(from_level_id, from_level_xy) {\r\n        this.dest_level_id = null;\r\n        this.dest_location_xy = null;\r\n        this.source_level_id = from_level_id;\r\n        this.source_location_xy = from_level_xy;\r\n        this.destinationExists = false;\r\n    }\r\n    attachDestination(to_level_id, to_level_xy) {\r\n        this.dest_level_id = to_level_id;\r\n        this.dest_location_xy = to_level_xy;\r\n        this.destinationExists = true;\r\n        return true; // todo: return false when level gen fails -- can it fail?\r\n    }\r\n    getReversePortal() {\r\n        // return a portal that is the reverse/inverse of this portal\r\n        let reversePortal;\r\n        if (this.destinationExists) {\r\n            reversePortal = new Portal(this.dest_level_id, this.dest_location_xy);\r\n            reversePortal.dest_level_id = this.source_level_id;\r\n            reversePortal.dest_location_xy = this.source_location_xy;\r\n        }\r\n        else {\r\n            console.warn(\"can't reverse a portal without a destination\");\r\n            reversePortal = null;\r\n        }\r\n        return reversePortal;\r\n    }\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYnJld19jb21wb25lbnRzL3BvcnRhbC50cz8xMDFkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRU07SUFPRixZQUFhLGFBQXNCLEVBQUUsYUFBOEI7UUFIbkUsa0JBQWEsR0FBVyxJQUFJO1FBQzVCLHFCQUFnQixHQUFvQixJQUFJO1FBR3BDLElBQUksQ0FBQyxlQUFlLEdBQUcsYUFBYTtRQUNwQyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsYUFBYTtRQUN2QyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsS0FBSztJQUNsQyxDQUFDO0lBRU0saUJBQWlCLENBQUUsV0FBb0IsRUFBRSxXQUE2QjtRQUN6RSxJQUFJLENBQUMsYUFBYSxHQUFHLFdBQVc7UUFDaEMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLFdBQVc7UUFDbkMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUk7UUFDN0IsTUFBTSxDQUFDLElBQUksRUFBQywwREFBMEQ7SUFDMUUsQ0FBQztJQUVELGdCQUFnQjtRQUNaLDZEQUE2RDtRQUU3RCxJQUFJLGFBQXNCO1FBRTFCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7WUFDekIsYUFBYSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDO1lBQ3JFLGFBQWEsQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLGVBQWU7WUFDbEQsYUFBYSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxrQkFBa0I7UUFFNUQsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osT0FBTyxDQUFDLElBQUksQ0FBQyw4Q0FBOEMsQ0FBQztZQUM1RCxhQUFhLEdBQUcsSUFBSTtRQUN4QixDQUFDO1FBRUQsTUFBTSxDQUFDLGFBQWE7SUFDeEIsQ0FBQztDQUNKIiwiZmlsZSI6Ii4vc3JjL2JyZXdfY29tcG9uZW50cy9wb3J0YWwudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBCcmV3IGZyb20gXCIuLi9icmV3XCJcclxuXHJcbmV4cG9ydCBjbGFzcyBQb3J0YWwge1xyXG4gICAgc291cmNlX2xldmVsX2lkOiBudW1iZXJcclxuICAgIHNvdXJjZV9sb2NhdGlvbl94eTogQnJldy5Db29yZGluYXRlXHJcbiAgICBkZXN0aW5hdGlvbkV4aXN0czogYm9vbGVhblxyXG4gICAgZGVzdF9sZXZlbF9pZDogbnVtYmVyID0gbnVsbFxyXG4gICAgZGVzdF9sb2NhdGlvbl94eTogQnJldy5Db29yZGluYXRlID0gbnVsbFxyXG5cclxuICAgIGNvbnN0cnVjdG9yIChmcm9tX2xldmVsX2lkIDogbnVtYmVyLCBmcm9tX2xldmVsX3h5OiBCcmV3LkNvb3JkaW5hdGUpICB7XHJcbiAgICAgICAgdGhpcy5zb3VyY2VfbGV2ZWxfaWQgPSBmcm9tX2xldmVsX2lkXHJcbiAgICAgICAgdGhpcy5zb3VyY2VfbG9jYXRpb25feHkgPSBmcm9tX2xldmVsX3h5XHJcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbkV4aXN0cyA9IGZhbHNlXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGF0dGFjaERlc3RpbmF0aW9uICh0b19sZXZlbF9pZCA6IG51bWJlciwgdG9fbGV2ZWxfeHkgOiBCcmV3LkNvb3JkaW5hdGUpIDogYm9vbGVhbiB7XHJcbiAgICAgICAgdGhpcy5kZXN0X2xldmVsX2lkID0gdG9fbGV2ZWxfaWRcclxuICAgICAgICB0aGlzLmRlc3RfbG9jYXRpb25feHkgPSB0b19sZXZlbF94eVxyXG4gICAgICAgIHRoaXMuZGVzdGluYXRpb25FeGlzdHMgPSB0cnVlXHJcbiAgICAgICAgcmV0dXJuIHRydWUgLy8gdG9kbzogcmV0dXJuIGZhbHNlIHdoZW4gbGV2ZWwgZ2VuIGZhaWxzIC0tIGNhbiBpdCBmYWlsP1xyXG4gICAgfVxyXG5cclxuICAgIGdldFJldmVyc2VQb3J0YWwgKCkgOiBQb3J0YWwge1xyXG4gICAgICAgIC8vIHJldHVybiBhIHBvcnRhbCB0aGF0IGlzIHRoZSByZXZlcnNlL2ludmVyc2Ugb2YgdGhpcyBwb3J0YWxcclxuICAgICAgICBcclxuICAgICAgICBsZXQgcmV2ZXJzZVBvcnRhbCA6IFBvcnRhbFxyXG5cclxuICAgICAgICBpZiAodGhpcy5kZXN0aW5hdGlvbkV4aXN0cykge1xyXG4gICAgICAgICAgICByZXZlcnNlUG9ydGFsID0gbmV3IFBvcnRhbCh0aGlzLmRlc3RfbGV2ZWxfaWQsIHRoaXMuZGVzdF9sb2NhdGlvbl94eSlcclxuICAgICAgICAgICAgcmV2ZXJzZVBvcnRhbC5kZXN0X2xldmVsX2lkID0gdGhpcy5zb3VyY2VfbGV2ZWxfaWRcclxuICAgICAgICAgICAgcmV2ZXJzZVBvcnRhbC5kZXN0X2xvY2F0aW9uX3h5ID0gdGhpcy5zb3VyY2VfbG9jYXRpb25feHlcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiY2FuJ3QgcmV2ZXJzZSBhIHBvcnRhbCB3aXRob3V0IGEgZGVzdGluYXRpb25cIilcclxuICAgICAgICAgICAgcmV2ZXJzZVBvcnRhbCA9IG51bGxcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXZlcnNlUG9ydGFsXHJcbiAgICB9XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/brew_components/portal.ts\n");

/***/ }),

/***/ "./src/brew_components/stat.ts":
/*!*************************************!*\
  !*** ./src/brew_components/stat.ts ***!
  \*************************************/
/*! exports provided: Stat */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Stat\", function() { return Stat; });\nclass Stat {\r\n    constructor(statName, amount) {\r\n        this.statName = statName;\r\n        this.current_amount = amount;\r\n        this.max_amount = amount;\r\n    }\r\n    setCurrentLevel(amount) {\r\n        this.current_amount = amount;\r\n    }\r\n    setMaxLevel(amount) {\r\n        this.max_amount = amount;\r\n    }\r\n    setTo(amount) {\r\n        this.current_amount = amount;\r\n        this.max_amount = amount;\r\n    }\r\n    getCurrentLevel() { return this.current_amount; }\r\n    getMaxLevel() { return this.max_amount; }\r\n    resetToMax() {\r\n        this.current_amount = this.max_amount;\r\n    }\r\n    isMaxed() {\r\n        return this.current_amount == this.max_amount;\r\n    }\r\n    isEmpty() {\r\n        return this.current_amount == 0;\r\n    }\r\n    increment(amount, overrideMax = false) {\r\n        if (overrideMax) {\r\n            this.current_amount += amount;\r\n        }\r\n        else {\r\n            this.current_amount = Math.min(this.max_amount, this.current_amount + amount);\r\n        }\r\n    }\r\n    decrement(amount) {\r\n        this.current_amount = Math.max(0, this.current_amount - amount);\r\n    }\r\n    getType() {\r\n        return this.statName;\r\n    }\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYnJld19jb21wb25lbnRzL3N0YXQudHM/YjFlZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVNO0lBSUYsWUFBb0IsUUFBOEIsRUFBRSxNQUFjO1FBQTlDLGFBQVEsR0FBUixRQUFRLENBQXNCO1FBQzlDLElBQUksQ0FBQyxjQUFjLEdBQUcsTUFBTTtRQUM1QixJQUFJLENBQUMsVUFBVSxHQUFHLE1BQU07SUFDNUIsQ0FBQztJQUVELGVBQWUsQ0FBQyxNQUFjO1FBQzFCLElBQUksQ0FBQyxjQUFjLEdBQUcsTUFBTTtJQUNoQyxDQUFDO0lBRUQsV0FBVyxDQUFDLE1BQWM7UUFDdEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxNQUFNO0lBQzVCLENBQUM7SUFFRCxLQUFLLENBQUMsTUFBYztRQUNoQixJQUFJLENBQUMsY0FBYyxHQUFHLE1BQU07UUFDNUIsSUFBSSxDQUFDLFVBQVUsR0FBRyxNQUFNO0lBQzVCLENBQUM7SUFFRCxlQUFlLEtBQUssTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUMsQ0FBQztJQUNoRCxXQUFXLEtBQUssTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUMsQ0FBQztJQUV4QyxVQUFVO1FBQ04sSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsVUFBVTtJQUN6QyxDQUFDO0lBRUQsT0FBTztRQUNILE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxJQUFJLElBQUksQ0FBQyxVQUFVO0lBQ2pELENBQUM7SUFFRCxPQUFPO1FBQ0gsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLElBQUksQ0FBQztJQUNuQyxDQUFDO0lBRUQsU0FBUyxDQUFDLE1BQWMsRUFBRSxjQUF3QixLQUFLO1FBQ25ELEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFDZCxJQUFJLENBQUMsY0FBYyxJQUFJLE1BQU07UUFDakMsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLGNBQWMsR0FBRyxNQUFNLENBQUM7UUFDakYsQ0FBQztJQUNMLENBQUM7SUFFRCxTQUFTLENBQUMsTUFBYztRQUNwQixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxjQUFjLEdBQUcsTUFBTSxDQUFDO0lBQ25FLENBQUM7SUFFRCxPQUFPO1FBQ0gsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRO0lBQ3hCLENBQUM7Q0FDSiIsImZpbGUiOiIuL3NyYy9icmV3X2NvbXBvbmVudHMvc3RhdC50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEJyZXcgZnJvbSBcIi4uL2JyZXdcIlxyXG5cclxuZXhwb3J0IGNsYXNzIFN0YXQge1xyXG4gICAgcHJpdmF0ZSBjdXJyZW50X2Ftb3VudCA6IG51bWJlclxyXG4gICAgcHJpdmF0ZSBtYXhfYW1vdW50IDogbnVtYmVyXHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBzdGF0TmFtZSA6IEJyZXcuRW51bXMuU3RhdE5hbWUsIGFtb3VudDogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50X2Ftb3VudCA9IGFtb3VudFxyXG4gICAgICAgIHRoaXMubWF4X2Ftb3VudCA9IGFtb3VudFxyXG4gICAgfVxyXG5cclxuICAgIHNldEN1cnJlbnRMZXZlbChhbW91bnQ6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuY3VycmVudF9hbW91bnQgPSBhbW91bnRcclxuICAgIH1cclxuXHJcbiAgICBzZXRNYXhMZXZlbChhbW91bnQ6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMubWF4X2Ftb3VudCA9IGFtb3VudFxyXG4gICAgfVxyXG5cclxuICAgIHNldFRvKGFtb3VudDogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50X2Ftb3VudCA9IGFtb3VudFxyXG4gICAgICAgIHRoaXMubWF4X2Ftb3VudCA9IGFtb3VudFxyXG4gICAgfSBcclxuXHJcbiAgICBnZXRDdXJyZW50TGV2ZWwoKSB7IHJldHVybiB0aGlzLmN1cnJlbnRfYW1vdW50IH1cclxuICAgIGdldE1heExldmVsKCkgeyByZXR1cm4gdGhpcy5tYXhfYW1vdW50IH1cclxuICAgIFxyXG4gICAgcmVzZXRUb01heCgpIHtcclxuICAgICAgICB0aGlzLmN1cnJlbnRfYW1vdW50ID0gdGhpcy5tYXhfYW1vdW50XHJcbiAgICB9XHJcblxyXG4gICAgaXNNYXhlZCgpIDogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudF9hbW91bnQgPT0gdGhpcy5tYXhfYW1vdW50XHJcbiAgICB9XHJcblxyXG4gICAgaXNFbXB0eSgpIDogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudF9hbW91bnQgPT0gMFxyXG4gICAgfVxyXG5cclxuICAgIGluY3JlbWVudChhbW91bnQ6IG51bWJlciwgb3ZlcnJpZGVNYXggOiBib29sZWFuID0gZmFsc2UpICB7XHJcbiAgICAgICAgaWYgKG92ZXJyaWRlTWF4KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudF9hbW91bnQgKz0gYW1vdW50XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50X2Ftb3VudCA9IE1hdGgubWluKHRoaXMubWF4X2Ftb3VudCwgdGhpcy5jdXJyZW50X2Ftb3VudCArIGFtb3VudClcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZGVjcmVtZW50KGFtb3VudDogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50X2Ftb3VudCA9IE1hdGgubWF4KDAsIHRoaXMuY3VycmVudF9hbW91bnQgLSBhbW91bnQpXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VHlwZSgpIDogQnJldy5FbnVtcy5TdGF0TmFtZSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdE5hbWVcclxuICAgIH1cclxufSAgIFxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/brew_components/stat.ts\n");

/***/ }),

/***/ "./src/brew_components/symbols.ts":
/*!****************************************!*\
  !*** ./src/brew_components/symbols.ts ***!
  \****************************************/
/*! exports provided: full_block, smiley_face, power_sys, diamond_full, diamond_empty, jigjags, fourdots, heart_full, heart_empty, pointer_up, pointer_down, pointer_left, pointer_right, pointer_downright, pointer_downleft, pointer_upleft, pointer_upright, radioactive_sign, quad_diamond, double_angle_bracket_left, double_angle_bracket_right, box_hline, box_vline, box_topleft, box_topright, box_bottomleft, box_bottomright, arrow_up, arrow_left, arrow_right, arrow_down, dbl_arrow_left, dbl_arrow_up, dbl_arrow_right, dbl_arrow_down, half_block_lower */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"full_block\", function() { return full_block; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"smiley_face\", function() { return smiley_face; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"power_sys\", function() { return power_sys; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"diamond_full\", function() { return diamond_full; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"diamond_empty\", function() { return diamond_empty; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"jigjags\", function() { return jigjags; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fourdots\", function() { return fourdots; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"heart_full\", function() { return heart_full; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"heart_empty\", function() { return heart_empty; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"pointer_up\", function() { return pointer_up; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"pointer_down\", function() { return pointer_down; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"pointer_left\", function() { return pointer_left; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"pointer_right\", function() { return pointer_right; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"pointer_downright\", function() { return pointer_downright; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"pointer_downleft\", function() { return pointer_downleft; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"pointer_upleft\", function() { return pointer_upleft; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"pointer_upright\", function() { return pointer_upright; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"radioactive_sign\", function() { return radioactive_sign; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"quad_diamond\", function() { return quad_diamond; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"double_angle_bracket_left\", function() { return double_angle_bracket_left; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"double_angle_bracket_right\", function() { return double_angle_bracket_right; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"box_hline\", function() { return box_hline; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"box_vline\", function() { return box_vline; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"box_topleft\", function() { return box_topleft; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"box_topright\", function() { return box_topright; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"box_bottomleft\", function() { return box_bottomleft; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"box_bottomright\", function() { return box_bottomright; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"arrow_up\", function() { return arrow_up; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"arrow_left\", function() { return arrow_left; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"arrow_right\", function() { return arrow_right; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"arrow_down\", function() { return arrow_down; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dbl_arrow_left\", function() { return dbl_arrow_left; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dbl_arrow_up\", function() { return dbl_arrow_up; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dbl_arrow_right\", function() { return dbl_arrow_right; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dbl_arrow_down\", function() { return dbl_arrow_down; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"half_block_lower\", function() { return half_block_lower; });\n// http://www.fileformat.info/info/unicode/font/monospaced.bold/grid.htm\r\n// https://www.w3schools.com/charsets/ref_utf_geometric.asp\r\nconst full_block = \"\\u2588\";\r\nconst smiley_face = \"\\u263A\";\r\nconst power_sys = \"\\u00A4\";\r\nconst diamond_full = \"\\u2666\";\r\nconst diamond_empty = \"\\u25C7\";\r\nconst jigjags = \"\\u2652\";\r\nconst fourdots = \"\\u2237\";\r\nconst heart_full = \"\\u2665\";\r\nconst heart_empty = \"\\u2661\";\r\nconst pointer_up = \"\\u25B2\";\r\nconst pointer_down = \"\\u25BC\";\r\nconst pointer_left = \"\\u25C4\";\r\nconst pointer_right = \"\\u25BA\";\r\nconst pointer_downright = \"\\u25E2\";\r\nconst pointer_downleft = \"\\u25E3\";\r\nconst pointer_upleft = \"\\u25E4\";\r\nconst pointer_upright = \"\\u25E5\";\r\nconst radioactive_sign = \"\\u2622\";\r\nconst quad_diamond = \"\\u233a\";\r\nconst double_angle_bracket_left = \"\\u226A\";\r\nconst double_angle_bracket_right = \"\\u226B\";\r\n// box drawing\r\nconst box_hline = \"\\u2500\";\r\nconst box_vline = \"\\u2502\";\r\nconst box_topleft = \"\\u250c\";\r\nconst box_topright = \"\\u2510\";\r\nconst box_bottomleft = \"\\u2514\";\r\nconst box_bottomright = \"\\u2518\";\r\n// arrows\r\nconst arrow_up = \"\\u2191\";\r\nconst arrow_left = \"\\u2190\";\r\nconst arrow_right = \"\\u2192\";\r\nconst arrow_down = \"\\u2193\";\r\nconst dbl_arrow_left = \"\\u219E\";\r\nconst dbl_arrow_up = \"\\u219F\";\r\nconst dbl_arrow_right = \"\\u21A0\";\r\nconst dbl_arrow_down = \"\\u21A1\";\r\nconst half_block_lower = \"\\u2584\";\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYnJld19jb21wb25lbnRzL3N5bWJvbHMudHM/MWEwMSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQTtBQUFBLHdFQUF3RTtBQUN4RSwyREFBMkQ7QUFFcEQsTUFBTSxVQUFVLEdBQUcsUUFBUTtBQUMzQixNQUFNLFdBQVcsR0FBRyxRQUFRO0FBQzVCLE1BQU0sU0FBUyxHQUFHLFFBQVE7QUFDMUIsTUFBTSxZQUFZLEdBQUcsUUFBUTtBQUM3QixNQUFNLGFBQWEsR0FBRyxRQUFRO0FBQzlCLE1BQU0sT0FBTyxHQUFHLFFBQVE7QUFDeEIsTUFBTSxRQUFRLEdBQUcsUUFBUTtBQUN6QixNQUFNLFVBQVUsR0FBRyxRQUFRO0FBQzNCLE1BQU0sV0FBVyxHQUFHLFFBQVE7QUFFNUIsTUFBTSxVQUFVLEdBQUcsUUFBUTtBQUMzQixNQUFNLFlBQVksR0FBRyxRQUFRO0FBQzdCLE1BQU0sWUFBWSxHQUFHLFFBQVE7QUFDN0IsTUFBTSxhQUFhLEdBQUcsUUFBUTtBQUU5QixNQUFNLGlCQUFpQixHQUFHLFFBQVE7QUFDbEMsTUFBTSxnQkFBZ0IsR0FBRyxRQUFRO0FBQ2pDLE1BQU0sY0FBYyxHQUFHLFFBQVE7QUFDL0IsTUFBTSxlQUFlLEdBQUcsUUFBUTtBQUVoQyxNQUFNLGdCQUFnQixHQUFHLFFBQVE7QUFDakMsTUFBTSxZQUFZLEdBQUcsUUFBUTtBQUM3QixNQUFNLHlCQUF5QixHQUFHLFFBQVE7QUFDMUMsTUFBTSwwQkFBMEIsR0FBRyxRQUFRO0FBRWxELGNBQWM7QUFDUCxNQUFNLFNBQVMsR0FBRyxRQUFRO0FBQzFCLE1BQU0sU0FBUyxHQUFHLFFBQVE7QUFDMUIsTUFBTSxXQUFXLEdBQUcsUUFBUTtBQUM1QixNQUFNLFlBQVksR0FBRyxRQUFRO0FBQzdCLE1BQU0sY0FBYyxHQUFHLFFBQVE7QUFDL0IsTUFBTSxlQUFlLEdBQUcsUUFBUTtBQUV2QyxTQUFTO0FBQ0YsTUFBTSxRQUFRLEdBQUcsUUFBUTtBQUN6QixNQUFNLFVBQVUsR0FBRyxRQUFRO0FBQzNCLE1BQU0sV0FBVyxHQUFHLFFBQVE7QUFDNUIsTUFBTSxVQUFVLEdBQUcsUUFBUTtBQUMzQixNQUFNLGNBQWMsR0FBRyxRQUFRO0FBQy9CLE1BQU0sWUFBWSxHQUFHLFFBQVE7QUFDN0IsTUFBTSxlQUFlLEdBQUcsUUFBUTtBQUNoQyxNQUFNLGNBQWMsR0FBRyxRQUFRO0FBRS9CLE1BQU0sZ0JBQWdCLEdBQUcsUUFBUSIsImZpbGUiOiIuL3NyYy9icmV3X2NvbXBvbmVudHMvc3ltYm9scy50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG4vLyBodHRwOi8vd3d3LmZpbGVmb3JtYXQuaW5mby9pbmZvL3VuaWNvZGUvZm9udC9tb25vc3BhY2VkLmJvbGQvZ3JpZC5odG1cclxuLy8gaHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jaGFyc2V0cy9yZWZfdXRmX2dlb21ldHJpYy5hc3BcclxuXHJcbmV4cG9ydCBjb25zdCBmdWxsX2Jsb2NrID0gXCJcXHUyNTg4XCJcclxuZXhwb3J0IGNvbnN0IHNtaWxleV9mYWNlID0gXCJcXHUyNjNBXCJcclxuZXhwb3J0IGNvbnN0IHBvd2VyX3N5cyA9IFwiXFx1MDBBNFwiXHJcbmV4cG9ydCBjb25zdCBkaWFtb25kX2Z1bGwgPSBcIlxcdTI2NjZcIlxyXG5leHBvcnQgY29uc3QgZGlhbW9uZF9lbXB0eSA9IFwiXFx1MjVDN1wiXHJcbmV4cG9ydCBjb25zdCBqaWdqYWdzID0gXCJcXHUyNjUyXCJcclxuZXhwb3J0IGNvbnN0IGZvdXJkb3RzID0gXCJcXHUyMjM3XCJcclxuZXhwb3J0IGNvbnN0IGhlYXJ0X2Z1bGwgPSBcIlxcdTI2NjVcIlxyXG5leHBvcnQgY29uc3QgaGVhcnRfZW1wdHkgPSBcIlxcdTI2NjFcIlxyXG5cclxuZXhwb3J0IGNvbnN0IHBvaW50ZXJfdXAgPSBcIlxcdTI1QjJcIlxyXG5leHBvcnQgY29uc3QgcG9pbnRlcl9kb3duID0gXCJcXHUyNUJDXCJcclxuZXhwb3J0IGNvbnN0IHBvaW50ZXJfbGVmdCA9IFwiXFx1MjVDNFwiXHJcbmV4cG9ydCBjb25zdCBwb2ludGVyX3JpZ2h0ID0gXCJcXHUyNUJBXCJcclxuXHJcbmV4cG9ydCBjb25zdCBwb2ludGVyX2Rvd25yaWdodCA9IFwiXFx1MjVFMlwiXHJcbmV4cG9ydCBjb25zdCBwb2ludGVyX2Rvd25sZWZ0ID0gXCJcXHUyNUUzXCJcclxuZXhwb3J0IGNvbnN0IHBvaW50ZXJfdXBsZWZ0ID0gXCJcXHUyNUU0XCJcclxuZXhwb3J0IGNvbnN0IHBvaW50ZXJfdXByaWdodCA9IFwiXFx1MjVFNVwiXHJcblxyXG5leHBvcnQgY29uc3QgcmFkaW9hY3RpdmVfc2lnbiA9IFwiXFx1MjYyMlwiXHJcbmV4cG9ydCBjb25zdCBxdWFkX2RpYW1vbmQgPSBcIlxcdTIzM2FcIlxyXG5leHBvcnQgY29uc3QgZG91YmxlX2FuZ2xlX2JyYWNrZXRfbGVmdCA9IFwiXFx1MjI2QVwiXHJcbmV4cG9ydCBjb25zdCBkb3VibGVfYW5nbGVfYnJhY2tldF9yaWdodCA9IFwiXFx1MjI2QlwiXHJcblxyXG4vLyBib3ggZHJhd2luZ1xyXG5leHBvcnQgY29uc3QgYm94X2hsaW5lID0gXCJcXHUyNTAwXCJcclxuZXhwb3J0IGNvbnN0IGJveF92bGluZSA9IFwiXFx1MjUwMlwiXHJcbmV4cG9ydCBjb25zdCBib3hfdG9wbGVmdCA9IFwiXFx1MjUwY1wiXHJcbmV4cG9ydCBjb25zdCBib3hfdG9wcmlnaHQgPSBcIlxcdTI1MTBcIlxyXG5leHBvcnQgY29uc3QgYm94X2JvdHRvbWxlZnQgPSBcIlxcdTI1MTRcIlxyXG5leHBvcnQgY29uc3QgYm94X2JvdHRvbXJpZ2h0ID0gXCJcXHUyNTE4XCJcclxuXHJcbi8vIGFycm93c1xyXG5leHBvcnQgY29uc3QgYXJyb3dfdXAgPSBcIlxcdTIxOTFcIlxyXG5leHBvcnQgY29uc3QgYXJyb3dfbGVmdCA9IFwiXFx1MjE5MFwiXHJcbmV4cG9ydCBjb25zdCBhcnJvd19yaWdodCA9IFwiXFx1MjE5MlwiXHJcbmV4cG9ydCBjb25zdCBhcnJvd19kb3duID0gXCJcXHUyMTkzXCJcclxuZXhwb3J0IGNvbnN0IGRibF9hcnJvd19sZWZ0ID0gXCJcXHUyMTlFXCJcclxuZXhwb3J0IGNvbnN0IGRibF9hcnJvd191cCA9IFwiXFx1MjE5RlwiXHJcbmV4cG9ydCBjb25zdCBkYmxfYXJyb3dfcmlnaHQgPSBcIlxcdTIxQTBcIlxyXG5leHBvcnQgY29uc3QgZGJsX2Fycm93X2Rvd24gPSBcIlxcdTIxQTFcIlxyXG5cclxuZXhwb3J0IGNvbnN0IGhhbGZfYmxvY2tfbG93ZXIgPSBcIlxcdTI1ODRcIiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/brew_components/symbols.ts\n");

/***/ }),

/***/ "./src/brew_components/turning.ts":
/*!****************************************!*\
  !*** ./src/brew_components/turning.ts ***!
  \****************************************/
/*! exports provided: getAngleBetween */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getAngleBetween\", function() { return getAngleBetween; });\n/* harmony import */ var _brew__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../brew */ \"./src/brew.ts\");\n\r\nfunction getAngleBetween(coord_from, coord_to) {\r\n    let theta_from = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].xyToPolar(coord_from).angle_theta;\r\n    let theta_to = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].xyToPolar(coord_to).angle_theta;\r\n    let raw_diff = theta_to - theta_from;\r\n    // =IF(G6<-PI(),-1*(G6+PI()),IF(G6>PI(),-1*(G6-PI()),G6))\r\n    let pi = Math.PI;\r\n    let neg_pi = -1 * pi;\r\n    let diff;\r\n    if (raw_diff < neg_pi) {\r\n        diff = -1 * (raw_diff + pi);\r\n    }\r\n    else if (raw_diff > pi) {\r\n        diff = -1 * (raw_diff + neg_pi);\r\n    }\r\n    else {\r\n        diff = raw_diff;\r\n    }\r\n    return diff;\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYnJld19jb21wb25lbnRzL3R1cm5pbmcudHM/MGQ4MyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBK0I7QUFHekIseUJBQTBCLFVBQXNCLEVBQUUsUUFBb0I7SUFDeEUsSUFBSSxVQUFVLEdBQUcsMkNBQVUsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUMsV0FBVztJQUM3RCxJQUFJLFFBQVEsR0FBRywyQ0FBVSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxXQUFXO0lBQ3pELElBQUksUUFBUSxHQUFHLFFBQVEsR0FBRyxVQUFVO0lBQ3BDLHlEQUF5RDtJQUN6RCxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRTtJQUNoQixJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFO0lBRXBCLElBQUksSUFBYTtJQUNqQixFQUFFLENBQUMsQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNwQixJQUFJLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO0lBQy9CLENBQUM7SUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDdkIsSUFBSSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQztJQUNuQyxDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDSixJQUFJLEdBQUcsUUFBUTtJQUNuQixDQUFDO0lBQ0QsTUFBTSxDQUFDLElBQUk7QUFDZixDQUFDIiwiZmlsZSI6Ii4vc3JjL2JyZXdfY29tcG9uZW50cy90dXJuaW5nLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgQnJldyBmcm9tICcuLi9icmV3J1xyXG5pbXBvcnQgeyBDb29yZGluYXRlIH0gZnJvbSAnLi4vYnJld19jb21wb25lbnRzL2Nvb3JkaW5hdGUnXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0QW5nbGVCZXR3ZWVuKGNvb3JkX2Zyb206IENvb3JkaW5hdGUsIGNvb3JkX3RvOiBDb29yZGluYXRlKTogbnVtYmVyIHtcclxuICAgIGxldCB0aGV0YV9mcm9tID0gQnJldy5VdGlscy54eVRvUG9sYXIoY29vcmRfZnJvbSkuYW5nbGVfdGhldGFcclxuICAgIGxldCB0aGV0YV90byA9IEJyZXcuVXRpbHMueHlUb1BvbGFyKGNvb3JkX3RvKS5hbmdsZV90aGV0YVxyXG4gICAgbGV0IHJhd19kaWZmID0gdGhldGFfdG8gLSB0aGV0YV9mcm9tXHJcbiAgICAvLyA9SUYoRzY8LVBJKCksLTEqKEc2K1BJKCkpLElGKEc2PlBJKCksLTEqKEc2LVBJKCkpLEc2KSlcclxuICAgIGxldCBwaSA9IE1hdGguUElcclxuICAgIGxldCBuZWdfcGkgPSAtMSAqIHBpXHJcblxyXG4gICAgbGV0IGRpZmYgOiBudW1iZXJcclxuICAgIGlmIChyYXdfZGlmZiA8IG5lZ19waSkge1xyXG4gICAgICAgIGRpZmYgPSAtMSAqIChyYXdfZGlmZiArIHBpKVxyXG4gICAgfSBlbHNlIGlmIChyYXdfZGlmZiA+IHBpKSB7XHJcbiAgICAgICAgZGlmZiA9IC0xICogKHJhd19kaWZmICsgbmVnX3BpKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBkaWZmID0gcmF3X2RpZmZcclxuICAgIH1cclxuICAgIHJldHVybiBkaWZmXHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/brew_components/turning.ts\n");

/***/ }),

/***/ "./src/brew_components/utils.ts":
/*!**************************************!*\
  !*** ./src/brew_components/utils.ts ***!
  \**************************************/
/*! exports provided: generateID, xyToKey, keyToXY, x_and_yToKey, adjacentKeys, randomOf, randomize, remove, mod, clone, getElementsOfEnum, getRandomInt, getDirectionFromKeycode, dist2d, getLineBetweenPoints, getSquarePoints, getCirclePoints, safe_color, getMonstersWithinRadius, getBlastArea, getMonstersWithinCoordinateArea, getPolarOffsetCoordinate, xyToPolar, getTradjectoryCoordinate, intersectionOfCoordinateLists, isCoordinateInListOfCoordinates, roundToPrecision */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"generateID\", function() { return generateID; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"xyToKey\", function() { return xyToKey; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"keyToXY\", function() { return keyToXY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"x_and_yToKey\", function() { return x_and_yToKey; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"adjacentKeys\", function() { return adjacentKeys; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"randomOf\", function() { return randomOf; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"randomize\", function() { return randomize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"remove\", function() { return remove; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mod\", function() { return mod; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clone\", function() { return clone; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getElementsOfEnum\", function() { return getElementsOfEnum; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getRandomInt\", function() { return getRandomInt; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getDirectionFromKeycode\", function() { return getDirectionFromKeycode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dist2d\", function() { return dist2d; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getLineBetweenPoints\", function() { return getLineBetweenPoints; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getSquarePoints\", function() { return getSquarePoints; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getCirclePoints\", function() { return getCirclePoints; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"safe_color\", function() { return safe_color; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getMonstersWithinRadius\", function() { return getMonstersWithinRadius; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getBlastArea\", function() { return getBlastArea; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getMonstersWithinCoordinateArea\", function() { return getMonstersWithinCoordinateArea; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getPolarOffsetCoordinate\", function() { return getPolarOffsetCoordinate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"xyToPolar\", function() { return xyToPolar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getTradjectoryCoordinate\", function() { return getTradjectoryCoordinate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"intersectionOfCoordinateLists\", function() { return intersectionOfCoordinateLists; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isCoordinateInListOfCoordinates\", function() { return isCoordinateInListOfCoordinates; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"roundToPrecision\", function() { return roundToPrecision; });\n/* harmony import */ var rot_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rot-js */ \"./node_modules/rot-js/lib/rot.js\");\n/* harmony import */ var rot_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(rot_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _brew__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../brew */ \"./src/brew.ts\");\n/* harmony import */ var _brew_components_coordinate__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../brew_components/coordinate */ \"./src/brew_components/coordinate.ts\");\n\r\n\r\n\r\nlet init_id = Math.floor(rot_js__WEBPACK_IMPORTED_MODULE_0__[\"RNG\"].getUniform() * 999) + 1;\r\nfunction generateID() {\r\n    init_id += 1;\r\n    return init_id;\r\n}\r\n// let MAX_GRID_SIZE = Brew.Config.MAX_GRID_SIZE\r\nfunction xyToKey(xy) {\r\n    return (xy.y * _brew__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].MAX_GRID_SIZE) + xy.x;\r\n}\r\nfunction keyToXY(key) {\r\n    return new _brew_components_coordinate__WEBPACK_IMPORTED_MODULE_2__[\"Coordinate\"](key % _brew__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].MAX_GRID_SIZE, Math.floor(key / _brew__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].MAX_GRID_SIZE));\r\n}\r\nfunction x_and_yToKey(x, y) {\r\n    return (y * _brew__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].MAX_GRID_SIZE) + x;\r\n}\r\nfunction adjacentKeys(key) {\r\n    // returns keys of 4 adjacent xy coords\r\n    // TODO: cache this\r\n    return keyToXY(key).getAdjacent().map((xy, index, array) => { return xyToKey(xy); });\r\n}\r\nfunction randomOf(some_array, useROT = true) {\r\n    if (!(some_array.length)) {\r\n        return null;\r\n    }\r\n    if (useROT) {\r\n        return some_array[Math.floor(rot_js__WEBPACK_IMPORTED_MODULE_0__[\"RNG\"].getUniform() * some_array.length)];\r\n    }\r\n    else {\r\n        return some_array[Math.floor(Math.random() * some_array.length)];\r\n    }\r\n}\r\nfunction randomize(some_array, useROT = true) {\r\n    let result = [];\r\n    while (some_array.length) {\r\n        let index = some_array.indexOf(randomOf(some_array, useROT));\r\n        result.push(some_array.splice(index, 1)[0]);\r\n    }\r\n    return result;\r\n}\r\nfunction remove(arr, element) {\r\n    let index = arr.indexOf(element);\r\n    if (index > -1) {\r\n        arr.splice(index, 1);\r\n    }\r\n}\r\nfunction mod(m, n) {\r\n    return ((m % n) + n) % n;\r\n}\r\nfunction clone(obj) {\r\n    // https://stackoverflow.com/questions/728360/most-elegant-way-to-clone-a-javascript-object\r\n    var copy;\r\n    // Handle the 3 simple types, and null or undefined\r\n    if (null == obj || \"object\" != typeof obj)\r\n        return obj;\r\n    // handle coords\r\n    if (obj instanceof _brew__WEBPACK_IMPORTED_MODULE_1__[\"Coordinate\"]) {\r\n        return obj.clone();\r\n    }\r\n    // Handle Date\r\n    if (obj instanceof Date) {\r\n        copy = new Date();\r\n        copy.setTime(obj.getTime());\r\n        return copy;\r\n    }\r\n    // Handle Array\r\n    if (obj instanceof Array) {\r\n        copy = [];\r\n        for (var i = 0, len = obj.length; i < len; i++) {\r\n            copy[i] = clone(obj[i]);\r\n        }\r\n        return copy;\r\n    }\r\n    // Handle Object\r\n    if (obj instanceof Object) {\r\n        copy = {};\r\n        for (var attr in obj) {\r\n            if (obj.hasOwnProperty(attr))\r\n                copy[attr] = clone(obj[attr]);\r\n        }\r\n        return copy;\r\n    }\r\n    throw new Error(\"Unable to copy obj! Its type isn't supported.\");\r\n}\r\nfunction getElementsOfEnum(enum_thing) {\r\n    let enum_numbers = [];\r\n    for (let enum_item in enum_thing) {\r\n        if (!(isNaN(Number(enum_item)))) {\r\n            let enum_number = Number(enum_item);\r\n            enum_numbers.push(enum_number);\r\n        }\r\n    }\r\n    return enum_numbers;\r\n}\r\nfunction getRandomInt(a, b) {\r\n    // return random integer [A, B]\r\n    return Math.floor(rot_js__WEBPACK_IMPORTED_MODULE_0__[\"RNG\"].getUniform() * (b - a + 1)) + a;\r\n}\r\n// enum DiffOrUnion {\r\n//     Diff,\r\n//     Union\r\n// }\r\n// function runDiffAndUnion(which: DiffOrUnion, list_a: Array<Brew.Coordinate>, list_b: Array<Brew.Coordinate>) : Array<Brew.Coordinate> {\r\n//     let key_fn = (value, index, array) : number => { return xyToKey(value) }\r\n//     let keys_a : Array<number> = list_a.map(key_fn)\r\n//     let keys_b : Array<number> = list_b.map(key_fn)\r\n//     let keys_diff : Array<number> = []\r\n//     let keys_union : Array<number> = []\r\n//     keys_a.forEach((value, index, array) => {\r\n//         if (keys_b.indexOf(value) > -1) {\r\n//             keys_union.push(value)\r\n//         } else {\r\n//             keys_diff.push(value)\r\n//         }\r\n//     })\r\n//     // console.log(`{0} new keys`, keys_diff.length)\r\n//     keys_b.forEach((value, index, array) => {\r\n//         if (keys_union.indexOf(value) > -1) {\r\n//             // skip\r\n//             ;\r\n//         } else {\r\n//             keys_diff.push(value)\r\n//         }\r\n//     })\r\n//     // console.log(`{0} new keys`, keys_diff.length)\r\n//     if (which == DiffOrUnion.Diff) {\r\n//         let xy_diff : Array<Brew.Coordinate> = keys_diff.map((value, index, array) : Brew.Coordinate => {\r\n//             return keyToXY(value)\r\n//         })\r\n//         return xy_diff\r\n//     } else {\r\n//         let xy_union : Array<Brew.Coordinate> = keys_union.map((value, index, array) : Brew.Coordinate => {\r\n//             return keyToXY(value)\r\n//         })\r\n//         return xy_union\r\n//     }\r\n// }\r\n// export function diffOfCoordinateArrays(list_a: Array<Brew.Coordinate>, list_b: Array<Brew.Coordinate>) : Array<Brew.Coordinate> {\r\n//     // return elements of A not in B and B not in A\r\n//     return runDiffAndUnion(DiffOrUnion.Diff, list_a, list_b)\r\n// }\r\n// export function unionOfCoordinateArrays(list_a: Array<Brew.Coordinate>, list_b: Array<Brew.Coordinate>) : Array<Brew.Coordinate> {\r\n//     // return elements of A + B\r\n//     return runDiffAndUnion(DiffOrUnion.Union, list_a, list_b)\r\n// }\r\nfunction getDirectionFromKeycode(keycode) {\r\n    let direction_xy;\r\n    if (_brew__WEBPACK_IMPORTED_MODULE_1__[\"KeyMap\"].MoveForward.indexOf(keycode) > -1) {\r\n        direction_xy = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Directions\"].UP;\r\n    }\r\n    else if (_brew__WEBPACK_IMPORTED_MODULE_1__[\"KeyMap\"].MoveBackward.indexOf(keycode) > -1) {\r\n        direction_xy = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Directions\"].DOWN;\r\n    }\r\n    else if (_brew__WEBPACK_IMPORTED_MODULE_1__[\"KeyMap\"].RotateBodyCW.indexOf(keycode) > -1) {\r\n        direction_xy = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Directions\"].RIGHT;\r\n    }\r\n    else if (_brew__WEBPACK_IMPORTED_MODULE_1__[\"KeyMap\"].RotateBodyCCW.indexOf(keycode) > -1) {\r\n        direction_xy = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Directions\"].LEFT;\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n    return direction_xy;\r\n}\r\nfunction dist2d(from_xy, to_xy) {\r\n    let xdiff = (from_xy.x - to_xy.x);\r\n    let ydiff = (from_xy.y - to_xy.y);\r\n    return Math.sqrt(xdiff * xdiff + ydiff * ydiff);\r\n}\r\nfunction isInteger(value) {\r\n    return typeof value === 'number' &&\r\n        isFinite(value) &&\r\n        Math.floor(value) === value;\r\n}\r\nfunction getLineBetweenPoints(start_xy, end_xy) {\r\n    // uses bresenham's line algorithm\r\n    if ((!(start_xy)) || (!(end_xy))) {\r\n        console.error(\"invalid coords passed to getLineBetweenPoints\");\r\n    }\r\n    let non_integer = [start_xy.x, start_xy.y, end_xy.x, end_xy.y].some((coord_value) => {\r\n        return (!(isInteger(coord_value)));\r\n    });\r\n    if (non_integer) {\r\n        console.error(\"non-integer coordinates passed in\");\r\n    }\r\n    // Bresenham's line algorithm\r\n    let x0 = start_xy.x;\r\n    let y0 = start_xy.y;\r\n    let x1 = end_xy.x;\r\n    let y1 = end_xy.y;\r\n    let dy = y1 - y0;\r\n    let dx = x1 - x0;\r\n    let t = 0.5;\r\n    let points_lst = [new _brew__WEBPACK_IMPORTED_MODULE_1__[\"Coordinate\"](x0, y0)];\r\n    let m;\r\n    if (start_xy.compare(end_xy)) {\r\n        return points_lst;\r\n    }\r\n    if (Math.abs(dx) > Math.abs(dy)) {\r\n        m = dy / (1.0 * dx);\r\n        t += y0;\r\n        if (dx < 0) {\r\n            dx = -1;\r\n        }\r\n        else {\r\n            dx = 1;\r\n        }\r\n        m *= dx;\r\n        while (x0 != x1) {\r\n            x0 += dx;\r\n            t += m;\r\n            // points_lst.push({x: x0, y: Math.floor(t)}) # Coordinates(x0, int(t)))\r\n            points_lst.push(new _brew__WEBPACK_IMPORTED_MODULE_1__[\"Coordinate\"](x0, Math.floor(t)));\r\n        }\r\n    }\r\n    else {\r\n        m = dx / (1.0 * dy);\r\n        t += x0;\r\n        // dy = if (dy < 0) then -1 else 1\r\n        if (dy < 0) {\r\n            dy = -1;\r\n        }\r\n        else {\r\n            dy = 1;\r\n        }\r\n        m *= dy;\r\n        while (y0 != y1) {\r\n            y0 += dy;\r\n            t += m;\r\n            // points_lst.push({x: Math.floor(t), y: y0}) # Coordinates(int(t), y0))\r\n            points_lst.push(new _brew__WEBPACK_IMPORTED_MODULE_1__[\"Coordinate\"](Math.floor(t), y0));\r\n        }\r\n    }\r\n    return points_lst;\r\n}\r\nfunction getSquarePoints(center_xy, size) {\r\n    let points = [];\r\n    if (size <= 0) {\r\n        points.push(center_xy);\r\n    }\r\n    else {\r\n        let top_y = center_xy.y - size;\r\n        let bottom_y = center_xy.y + size;\r\n        let left_x = center_xy.x - size;\r\n        let right_x = center_xy.x + size;\r\n        // top and bottom (include corners)\r\n        for (let x = left_x; x <= right_x; x++) {\r\n            points.push(new _brew_components_coordinate__WEBPACK_IMPORTED_MODULE_2__[\"Coordinate\"](x, top_y));\r\n            points.push(new _brew_components_coordinate__WEBPACK_IMPORTED_MODULE_2__[\"Coordinate\"](x, bottom_y));\r\n        }\r\n        // left and right sides (exclude corners)\r\n        for (let y = top_y + 1; y < bottom_y; y++) {\r\n            points.push(new _brew_components_coordinate__WEBPACK_IMPORTED_MODULE_2__[\"Coordinate\"](left_x, y));\r\n            points.push(new _brew_components_coordinate__WEBPACK_IMPORTED_MODULE_2__[\"Coordinate\"](right_x, y));\r\n        }\r\n    }\r\n    return points;\r\n}\r\nfunction getCirclePoints(center_xy, radius) {\r\n    // Returns the points that make up the radius of a circle\r\n    // http://en.wikipedia.org/wiki/Midpoint_circle_algorithm\r\n    let x0 = center_xy.x;\r\n    let y0 = center_xy.y;\r\n    let point_lst = [];\r\n    let f = 1 - radius;\r\n    let ddF_x = 1;\r\n    let ddF_y = -2 * radius;\r\n    let x = 0;\r\n    let y = radius;\r\n    point_lst.push([x0, y0 + radius]);\r\n    point_lst.push([x0, y0 - radius]);\r\n    point_lst.push([x0 + radius, y0]);\r\n    point_lst.push([x0 - radius, y0]);\r\n    while (x < y) {\r\n        if (f >= 0) {\r\n            y -= 1;\r\n            ddF_y += 2;\r\n            f += ddF_y;\r\n        }\r\n        x += 1;\r\n        ddF_x += 2;\r\n        f += ddF_x;\r\n        point_lst.push([x0 + x, y0 + y]);\r\n        point_lst.push([x0 - x, y0 + y]);\r\n        point_lst.push([x0 + x, y0 - y]);\r\n        point_lst.push([x0 - x, y0 - y]);\r\n        point_lst.push([x0 + y, y0 + x]);\r\n        point_lst.push([x0 - y, y0 + x]);\r\n        point_lst.push([x0 + y, y0 - x]);\r\n        point_lst.push([x0 - y, y0 - x]);\r\n    }\r\n    let point_xy_lst = [];\r\n    point_lst.forEach((xy_arr, index, array) => {\r\n        point_xy_lst.push(new _brew_components_coordinate__WEBPACK_IMPORTED_MODULE_2__[\"Coordinate\"](xy_arr[0], xy_arr[1]));\r\n    });\r\n    return point_xy_lst;\r\n}\r\nfunction safe_color(rgb_val) {\r\n    return rgb_val.map((c, index) => {\r\n        return Math.floor(Math.max(0, Math.min(255, c)));\r\n    });\r\n}\r\nfunction getMonstersWithinRadius(level, center_xy, radius) {\r\n    let dist;\r\n    return level.monsters.getAllThings().filter((mob, index) => {\r\n        dist = dist2d(mob.location, center_xy);\r\n        return dist <= radius;\r\n    });\r\n}\r\nfunction getBlastArea(level, center_xy, radius) {\r\n    // constrains an area based on radius and blocking walls\r\n    let xy;\r\n    let terrain_at;\r\n    let fn_passable = (x, y) => {\r\n        xy = new _brew_components_coordinate__WEBPACK_IMPORTED_MODULE_2__[\"Coordinate\"](x, y);\r\n        if (!(level.isValid(xy))) {\r\n            return false;\r\n        }\r\n        if (xy.compare(center_xy)) {\r\n            return true;\r\n        }\r\n        terrain_at = level.terrain.getAt(xy);\r\n        return (!(terrain_at.blocks_flying));\r\n    };\r\n    let affected_list = [];\r\n    let fn_update = (x, y, r, intensity) => {\r\n        if (r <= radius) {\r\n            xy = new _brew_components_coordinate__WEBPACK_IMPORTED_MODULE_2__[\"Coordinate\"](x, y);\r\n            affected_list.push(xy);\r\n        }\r\n        return true;\r\n    };\r\n    let rot_fov = new rot_js__WEBPACK_IMPORTED_MODULE_0__[\"FOV\"].RecursiveShadowcasting(fn_passable, {});\r\n    rot_fov.compute(center_xy.x, center_xy.y, radius, fn_update);\r\n    let blast_area = new _brew__WEBPACK_IMPORTED_MODULE_1__[\"CoordinateArea\"](affected_list);\r\n    return blast_area;\r\n}\r\nfunction getMonstersWithinCoordinateArea(level, coord_area) {\r\n    let affected_mobs = [];\r\n    let monster_at;\r\n    coord_area.getCoordinates().forEach((xy) => {\r\n        monster_at = level.monsters.getAt(xy);\r\n        if (monster_at) {\r\n            affected_mobs.push(monster_at);\r\n        }\r\n    });\r\n    return affected_mobs;\r\n}\r\n// export function getMonstersWithinAffectedArea(level: Brew.Level, center_xy, radius: number) : Array<Brew.GridThings.Monster> { \r\n//     let affected_area = getBlastArea(level, center_xy, radius)\r\n//     let affected_mobs : Array<Brew.GridThings.Monster> = []\r\n//     let monster_at : Brew.GridThings.Monster\r\n//     affected_area.getCoordinates().forEach((xy: Coordinate) => {\r\n//         monster_at = level.monsters.getAt(xy)\r\n//         if (monster_at) {\r\n//             affected_mobs.push(monster_at)\r\n//         }\r\n//     })\r\n//     return affected_mobs\r\n// }\r\nfunction getPolarOffsetCoordinate(polar_theta, r_distance) {\r\n    // assuming from origin 0,0\r\n    let x = r_distance * Math.cos(polar_theta);\r\n    let y = r_distance * Math.sin(polar_theta);\r\n    x = roundToPrecision(x, 8);\r\n    y = roundToPrecision(y, 8);\r\n    let x_int = Math.floor(x);\r\n    let y_int = Math.floor(y);\r\n    let polar_xy = new _brew_components_coordinate__WEBPACK_IMPORTED_MODULE_2__[\"Coordinate\"](x_int, y_int);\r\n    return polar_xy;\r\n}\r\nfunction xyToPolar(xy, origin_xy) {\r\n    if (!(origin_xy)) {\r\n        origin_xy = new _brew_components_coordinate__WEBPACK_IMPORTED_MODULE_2__[\"Coordinate\"](0, 0);\r\n    }\r\n    let xdiff = xy.x - origin_xy.x;\r\n    let ydiff = xy.y - origin_xy.y;\r\n    let polar_r = Math.sqrt((xdiff * xdiff) + (ydiff * ydiff));\r\n    let polar_theta = Math.atan2(ydiff, xdiff);\r\n    return {\r\n        angle_theta: polar_theta,\r\n        dist_r: polar_r\r\n    };\r\n}\r\nfunction getTradjectoryCoordinate(origin_xy, target_xy, distance) {\r\n    // use polar coords to pick a distant tradjectory for a given target, based on an origination of force/blast/affect\r\n    // convert target to polar coordinate based on origin\r\n    let polar = xyToPolar(target_xy, origin_xy);\r\n    let polar_r = polar.dist_r;\r\n    let polar_theta = polar.angle_theta;\r\n    // extend radius\r\n    let new_r = polar_r + distance;\r\n    // re-calc relative x-y coord\r\n    // let relative_x = new_r * Math.cos(polar_theta)\r\n    // let relative_y = new_r * Math.sin(polar_theta)\r\n    // let rel_xy = new Coordinate(Math.floor(relative_x), Math.floor(relative_y))\r\n    let rel_xy = getPolarOffsetCoordinate(polar_theta, new_r);\r\n    // re-calc actual x-y coord\r\n    let new_xy = origin_xy.add(rel_xy);\r\n    return new_xy;\r\n}\r\nfunction intersectionOfCoordinateLists(coords_a, coords_b) {\r\n    let intersection = [];\r\n    // convert both arrays to number keys\r\n    let keys_a = coords_a.map((xy) => { return xyToKey(xy); });\r\n    let keys_b = coords_b.map((xy) => { return xyToKey(xy); });\r\n    let intersect_keys = keys_a.filter((key_a) => {\r\n        return (keys_b.indexOf(key_a) > -1);\r\n    });\r\n    intersection = intersect_keys.map((key) => { return keyToXY(key); });\r\n    return intersection;\r\n}\r\nfunction isCoordinateInListOfCoordinates(xy, coords_a) {\r\n    return (intersectionOfCoordinateLists([xy], coords_a).length > 0);\r\n}\r\nfunction roundToPrecision(value, decimals) {\r\n    let amount = Math.pow(10, decimals);\r\n    return Math.round(value * amount) / amount;\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/brew_components/utils.ts\n");

/***/ }),

/***/ "./src/brew_engine/architect.ts":
/*!**************************************!*\
  !*** ./src/brew_engine/architect.ts ***!
  \**************************************/
/*! exports provided: architectAI */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"architectAI\", function() { return architectAI; });\n/* harmony import */ var rot_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rot-js */ \"./node_modules/rot-js/lib/rot.js\");\n/* harmony import */ var rot_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(rot_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _brew__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../brew */ \"./src/brew.ts\");\n\r\n\r\nfunction architectAI(gm, actor) {\r\n    let level = gm.getCurrentLevel();\r\n    // check timers on everything that is not a monster\r\n    for (let timer of gm.timer_monitor.getAllTimers()) {\r\n        if (!(timer.actor instanceof _brew__WEBPACK_IMPORTED_MODULE_1__[\"GridThings\"].Monster)) {\r\n            gm.checkTimersForActor(timer.actor);\r\n        }\r\n    }\r\n    // fireeeee\r\n    level.features.getAllThings().filter((feature) => { return feature.isType(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Definitions\"].FeatureType.Fire); }).forEach((feature) => {\r\n        spreadFire(gm, level, feature);\r\n    });\r\n    // look for ambient effects on on mobs\r\n    level.monsters.getAllThings().forEach((mob) => {\r\n        _brew__WEBPACK_IMPORTED_MODULE_1__[\"Movement\"].checkForAmbientEffects(gm, mob);\r\n    });\r\n    // return an event that does nothing!\r\n    let noEvent = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].BrewEventType.Special, true);\r\n    let noEvent2 = {\r\n        eventType: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].BrewEventType.Special,\r\n        actor: actor,\r\n        playerInitiated: false,\r\n        endsTurn: true\r\n    };\r\n    return noEvent2;\r\n}\r\nfunction spreadFire(gm, level, fire_feature) {\r\n    let terrain_at;\r\n    let feature_at;\r\n    let feature_spawn;\r\n    terrain_at = level.terrain.getAt(fire_feature.location);\r\n    if (rot_js__WEBPACK_IMPORTED_MODULE_0__[\"RNG\"].getUniform() < 0.25) {\r\n        level.features.removeAt(fire_feature.location);\r\n        gm.timer_monitor.setFlagWithTimer(gm, terrain_at, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].Flag.Burnt, 10);\r\n        gm.displayAt(fire_feature.location);\r\n        return;\r\n    }\r\n    fire_feature.location.getAdjacent().forEach((xy) => {\r\n        if (!(level.isValid(xy))) {\r\n            return;\r\n        }\r\n        terrain_at = level.terrain.getAt(xy);\r\n        if (terrain_at.blocks_flying || terrain_at.blocks_walking) {\r\n            return;\r\n        }\r\n        if (terrain_at.hasFlag(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].Flag.Burnt)) {\r\n            return;\r\n        }\r\n        feature_at = level.features.getAt(xy);\r\n        if (feature_at) {\r\n            if (feature_at.isType(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Definitions\"].FeatureType.Fire)) {\r\n                return;\r\n            }\r\n            else {\r\n                level.features.removeAt(xy);\r\n            }\r\n        }\r\n        feature_spawn = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Definitions\"].featureFactory(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Definitions\"].FeatureType.Fire);\r\n        // feature_spawn.setParent(feature_at)\r\n        level.features.setAt(xy, feature_spawn);\r\n        gm.displayAt(xy);\r\n    });\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYnJld19lbmdpbmUvYXJjaGl0ZWN0LnRzPzNjZmYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNkI7QUFDRTtBQUd6QixxQkFBc0IsRUFBbUIsRUFBRSxLQUE4QjtJQUUzRSxJQUFJLEtBQUssR0FBRyxFQUFFLENBQUMsZUFBZSxFQUFFO0lBRWhDLG1EQUFtRDtJQUVuRCxHQUFHLENBQUMsQ0FBQyxJQUFJLEtBQUssSUFBSSxFQUFFLENBQUMsYUFBYSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNoRCxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssWUFBWSxnREFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNwRCxFQUFFLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUN2QyxDQUFDO0lBQ0wsQ0FBQztJQUVELFdBQVc7SUFDWCxLQUFLLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsaURBQWdCLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1FBQ2hJLFVBQVUsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQztJQUNsQyxDQUFDLENBQUM7SUFFRixzQ0FBc0M7SUFDdEMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtRQUMxQyw4Q0FBYSxDQUFDLHNCQUFzQixDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUM7SUFDakQsQ0FBQyxDQUFDO0lBSUYscUNBQXFDO0lBQ3JDLElBQUksT0FBTyxHQUFHLDRDQUFXLENBQUMsd0JBQXdCLENBQUMsRUFBRSxFQUFFLDJDQUFVLENBQUMsYUFBYSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUM7SUFDOUYsSUFBSSxRQUFRLEdBQTJCO1FBQ25DLFNBQVMsRUFBRSwyQ0FBVSxDQUFDLGFBQWEsQ0FBQyxPQUFPO1FBQzNDLEtBQUssRUFBRSxLQUFLO1FBQ1osZUFBZSxFQUFFLEtBQUs7UUFDdEIsUUFBUSxFQUFFLElBQUk7S0FDakI7SUFFRCxNQUFNLENBQUMsUUFBUTtBQUNuQixDQUFDO0FBR0Qsb0JBQW9CLEVBQW1CLEVBQUUsS0FBaUIsRUFBRSxZQUFxQztJQUM3RixJQUFJLFVBQW1DO0lBQ3ZDLElBQUksVUFBbUM7SUFDdkMsSUFBSSxhQUFzQztJQUUxQyxVQUFVLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQztJQUV2RCxFQUFFLENBQUMsQ0FBQywwQ0FBTyxDQUFDLFVBQVUsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDOUIsS0FBSyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQztRQUM5QyxFQUFFLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsRUFBRSxVQUFVLEVBQUUsMkNBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQztRQUM1RSxFQUFFLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUM7UUFDbkMsTUFBTTtJQUNWLENBQUM7SUFFRCxZQUFZLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFO1FBQy9DLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLE1BQU07UUFDVixDQUFDO1FBRUQsVUFBVSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztRQUNwQyxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsYUFBYSxJQUFJLFVBQVUsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO1lBQ3hELE1BQU07UUFDVixDQUFDO1FBRUQsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQywyQ0FBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDNUMsTUFBTTtRQUNWLENBQUM7UUFFRCxVQUFVLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1FBRXJDLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDYixFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLGlEQUFnQixDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3ZELE1BQU07WUFDVixDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ0osS0FBSyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO1lBQy9CLENBQUM7UUFDTCxDQUFDO1FBRUQsYUFBYSxHQUFHLGlEQUFnQixDQUFDLGNBQWMsQ0FBQyxpREFBZ0IsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDO1FBQ2xGLHNDQUFzQztRQUN0QyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsYUFBYSxDQUFDO1FBQ3ZDLEVBQUUsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDO0lBQ3BCLENBQUMsQ0FBQztBQUNOLENBQUMiLCJmaWxlIjoiLi9zcmMvYnJld19lbmdpbmUvYXJjaGl0ZWN0LnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUk9UIGZyb20gJ3JvdC1qcydcclxuaW1wb3J0ICogYXMgQnJldyBmcm9tICcuLi9icmV3J1xyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhcmNoaXRlY3RBSShnbTogQnJldy5HYW1lTWFzdGVyLCBhY3RvcjogQnJldy5HcmlkVGhpbmdzLk1vbnN0ZXIpIDogQnJldy5FbnVtcy5JQnJld0V2ZW50IHtcclxuICAgIFxyXG4gICAgbGV0IGxldmVsID0gZ20uZ2V0Q3VycmVudExldmVsKClcclxuXHJcbiAgICAvLyBjaGVjayB0aW1lcnMgb24gZXZlcnl0aGluZyB0aGF0IGlzIG5vdCBhIG1vbnN0ZXJcclxuXHJcbiAgICBmb3IgKGxldCB0aW1lciBvZiBnbS50aW1lcl9tb25pdG9yLmdldEFsbFRpbWVycygpKSB7XHJcbiAgICAgICAgaWYgKCEodGltZXIuYWN0b3IgaW5zdGFuY2VvZiBCcmV3LkdyaWRUaGluZ3MuTW9uc3RlcikpIHtcclxuICAgICAgICAgICAgZ20uY2hlY2tUaW1lcnNGb3JBY3Rvcih0aW1lci5hY3RvcilcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIGZpcmVlZWVlXHJcbiAgICBsZXZlbC5mZWF0dXJlcy5nZXRBbGxUaGluZ3MoKS5maWx0ZXIoKGZlYXR1cmUpID0+IHsgcmV0dXJuIGZlYXR1cmUuaXNUeXBlKEJyZXcuRGVmaW5pdGlvbnMuRmVhdHVyZVR5cGUuRmlyZSkgfSkuZm9yRWFjaCgoZmVhdHVyZSkgPT4ge1xyXG4gICAgICAgIHNwcmVhZEZpcmUoZ20sIGxldmVsLCBmZWF0dXJlKVxyXG4gICAgfSlcclxuXHJcbiAgICAvLyBsb29rIGZvciBhbWJpZW50IGVmZmVjdHMgb24gb24gbW9ic1xyXG4gICAgbGV2ZWwubW9uc3RlcnMuZ2V0QWxsVGhpbmdzKCkuZm9yRWFjaCgobW9iKSA9PiB7XHJcbiAgICAgICAgQnJldy5Nb3ZlbWVudC5jaGVja0ZvckFtYmllbnRFZmZlY3RzKGdtLCBtb2IpXHJcbiAgICB9KVxyXG5cclxuXHJcblxyXG4gICAgLy8gcmV0dXJuIGFuIGV2ZW50IHRoYXQgZG9lcyBub3RoaW5nIVxyXG4gICAgbGV0IG5vRXZlbnQgPSBCcmV3LkV2ZW50cy5jcmVhdGVHZW5lcmljRXZlbnRPZlR5cGUoZ20sIEJyZXcuRW51bXMuQnJld0V2ZW50VHlwZS5TcGVjaWFsLCB0cnVlKVxyXG4gICAgbGV0IG5vRXZlbnQyIDogQnJldy5FbnVtcy5JQnJld0V2ZW50ID0ge1xyXG4gICAgICAgIGV2ZW50VHlwZTogQnJldy5FbnVtcy5CcmV3RXZlbnRUeXBlLlNwZWNpYWwsXHJcbiAgICAgICAgYWN0b3I6IGFjdG9yLFxyXG4gICAgICAgIHBsYXllckluaXRpYXRlZDogZmFsc2UsXHJcbiAgICAgICAgZW5kc1R1cm46IHRydWVcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIG5vRXZlbnQyXHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBzcHJlYWRGaXJlKGdtOiBCcmV3LkdhbWVNYXN0ZXIsIGxldmVsOiBCcmV3LkxldmVsLCBmaXJlX2ZlYXR1cmU6IEJyZXcuR3JpZFRoaW5ncy5GZWF0dXJlICkge1xyXG4gICAgbGV0IHRlcnJhaW5fYXQ6IEJyZXcuR3JpZFRoaW5ncy5UZXJyYWluXHJcbiAgICBsZXQgZmVhdHVyZV9hdDogQnJldy5HcmlkVGhpbmdzLkZlYXR1cmVcclxuICAgIGxldCBmZWF0dXJlX3NwYXduOiBCcmV3LkdyaWRUaGluZ3MuRmVhdHVyZVxyXG4gICAgXHJcbiAgICB0ZXJyYWluX2F0ID0gbGV2ZWwudGVycmFpbi5nZXRBdChmaXJlX2ZlYXR1cmUubG9jYXRpb24pXHJcblxyXG4gICAgaWYgKFJPVC5STkcuZ2V0VW5pZm9ybSgpIDwgMC4yNSkge1xyXG4gICAgICAgIGxldmVsLmZlYXR1cmVzLnJlbW92ZUF0KGZpcmVfZmVhdHVyZS5sb2NhdGlvbilcclxuICAgICAgICBnbS50aW1lcl9tb25pdG9yLnNldEZsYWdXaXRoVGltZXIoZ20sIHRlcnJhaW5fYXQsIEJyZXcuRW51bXMuRmxhZy5CdXJudCwgMTApXHJcbiAgICAgICAgZ20uZGlzcGxheUF0KGZpcmVfZmVhdHVyZS5sb2NhdGlvbilcclxuICAgICAgICByZXR1cm5cclxuICAgIH1cclxuXHJcbiAgICBmaXJlX2ZlYXR1cmUubG9jYXRpb24uZ2V0QWRqYWNlbnQoKS5mb3JFYWNoKCh4eSkgPT4ge1xyXG4gICAgICAgIGlmICghKGxldmVsLmlzVmFsaWQoeHkpKSkge1xyXG4gICAgICAgICAgICByZXR1cm5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRlcnJhaW5fYXQgPSBsZXZlbC50ZXJyYWluLmdldEF0KHh5KVxyXG4gICAgICAgIGlmICh0ZXJyYWluX2F0LmJsb2Nrc19mbHlpbmcgfHwgdGVycmFpbl9hdC5ibG9ja3Nfd2Fsa2luZykge1xyXG4gICAgICAgICAgICByZXR1cm5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0ZXJyYWluX2F0Lmhhc0ZsYWcoQnJldy5FbnVtcy5GbGFnLkJ1cm50KSkge1xyXG4gICAgICAgICAgICByZXR1cm5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZlYXR1cmVfYXQgPSBsZXZlbC5mZWF0dXJlcy5nZXRBdCh4eSlcclxuXHJcbiAgICAgICAgaWYgKGZlYXR1cmVfYXQpIHtcclxuICAgICAgICAgICAgaWYgKGZlYXR1cmVfYXQuaXNUeXBlKEJyZXcuRGVmaW5pdGlvbnMuRmVhdHVyZVR5cGUuRmlyZSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGV2ZWwuZmVhdHVyZXMucmVtb3ZlQXQoeHkpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZlYXR1cmVfc3Bhd24gPSBCcmV3LkRlZmluaXRpb25zLmZlYXR1cmVGYWN0b3J5KEJyZXcuRGVmaW5pdGlvbnMuRmVhdHVyZVR5cGUuRmlyZSlcclxuICAgICAgICAvLyBmZWF0dXJlX3NwYXduLnNldFBhcmVudChmZWF0dXJlX2F0KVxyXG4gICAgICAgIGxldmVsLmZlYXR1cmVzLnNldEF0KHh5LCBmZWF0dXJlX3NwYXduKVxyXG4gICAgICAgIGdtLmRpc3BsYXlBdCh4eSlcclxuICAgIH0pXHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/brew_engine/architect.ts\n");

/***/ }),

/***/ "./src/brew_engine/debug.ts":
/*!**********************************!*\
  !*** ./src/brew_engine/debug.ts ***!
  \**********************************/
/*! exports provided: Vision, debug_vision, debug_pathmap, toggleFOV, togglePathmap, createMonsterAt, showCreateMonsterAtMenu, createFeatureAt, showCreateFeatureAtMenu, createTerrainAt, showCreateTerrainAtMenu, toggleBackgroundCover, BOSS_MODE, toggleBossMode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Vision\", function() { return Vision; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"debug_vision\", function() { return debug_vision; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"debug_pathmap\", function() { return debug_pathmap; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toggleFOV\", function() { return toggleFOV; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"togglePathmap\", function() { return togglePathmap; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createMonsterAt\", function() { return createMonsterAt; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"showCreateMonsterAtMenu\", function() { return showCreateMonsterAtMenu; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createFeatureAt\", function() { return createFeatureAt; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"showCreateFeatureAtMenu\", function() { return showCreateFeatureAtMenu; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createTerrainAt\", function() { return createTerrainAt; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"showCreateTerrainAtMenu\", function() { return showCreateTerrainAtMenu; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toggleBackgroundCover\", function() { return toggleBackgroundCover; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BOSS_MODE\", function() { return BOSS_MODE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toggleBossMode\", function() { return toggleBossMode; });\n/* harmony import */ var _brew__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../brew */ \"./src/brew.ts\");\n\r\nvar Vision;\r\n(function (Vision) {\r\n    Vision[Vision[\"Normal\"] = 0] = \"Normal\";\r\n    Vision[Vision[\"ShowMobs\"] = 1] = \"ShowMobs\";\r\n    Vision[Vision[\"ShowAll\"] = 2] = \"ShowAll\";\r\n})(Vision || (Vision = {}));\r\nlet debug_vision = Vision.Normal;\r\nlet debug_pathmap = null;\r\nlet debug_pathmap_id = 0;\r\nfunction toggleFOV(gm) {\r\n    let i = debug_vision;\r\n    i = (i + 1) % 3;\r\n    let dv = Vision[i];\r\n    debug_vision = Vision[dv];\r\n    let updatefov = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Intel\"].updateFov(gm, gm.getPlayer());\r\n    console.log(\"debug view:\", dv);\r\n    gm.displayAll();\r\n}\r\nfunction togglePathmap(gm, pm) {\r\n    debug_pathmap_id = (debug_pathmap_id + 1) % 5;\r\n    if (debug_pathmap_id == 0) {\r\n        console.log(\"DEBUG PATHMAP: OFF\");\r\n        debug_pathmap = null;\r\n    }\r\n    else if (debug_pathmap_id == 1) {\r\n        console.log(\"DEBUG PATHMAP: Walk To Player\");\r\n        debug_pathmap = gm.pathmaps.getPathmap(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].PathmapCacheType.ToPlayer_Walk);\r\n    }\r\n    else if (debug_pathmap_id == 2) {\r\n        console.log(\"DEBUG PATHMAP: Fly To Player\");\r\n        debug_pathmap = gm.pathmaps.getPathmap(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].PathmapCacheType.ToPlayer_Fly);\r\n    }\r\n    else if (debug_pathmap_id == 3) {\r\n        console.log(\"DEBUG PATHMAP: Walk Away From Player\");\r\n        // let to_map = Path.createGenericMapToPlayer(gm, gm.getCurrentLevel())\r\n        debug_pathmap = gm.pathmaps.getPathmap(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].PathmapCacheType.FromPlayer_Walk);\r\n    }\r\n    else if (debug_pathmap_id == 4) {\r\n        console.log(\"DEBUG PATHMAP: Fly Away From Player\");\r\n        // let to_map = Path.createGenericMapToPlayer(gm, gm.getCurrentLevel())\r\n        debug_pathmap = gm.pathmaps.getPathmap(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].PathmapCacheType.FromPlayer_Fly);\r\n    }\r\n    gm.displayAll();\r\n}\r\nfunction createMonsterAt(gm, brEvent) {\r\n    let level = gm.getCurrentLevel();\r\n    let target_xy = brEvent.moveData.to_xy;\r\n    let monsterDef = brEvent.debugMenuData.monsterTypeDefinition;\r\n    let newMob = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].monsterFactory(gm, monsterDef, { monster_status: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].MonsterStatus.Wander });\r\n    level.monsters.setAt(target_xy, newMob);\r\n    gm.displayAt(target_xy);\r\n    gm.addActorToScheduler(newMob);\r\n    gm.endEvent(brEvent);\r\n}\r\nfunction showCreateMonsterAtMenu(gm, brEvent) {\r\n    let menu_entries = [];\r\n    // https://stackoverflow.com/questions/39372804/typescript-how-to-loop-through-enum-values-for-display-in-radio-buttons\r\n    for (let enum_item in _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].MonsterType) {\r\n        if (!(isNaN(Number(enum_item)))) {\r\n            let enum_number = Number(enum_item);\r\n            // console.log(enum_item)\r\n            let entryEvent = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.TargetingOn, false);\r\n            entryEvent.startTargetingData = {\r\n                from_xy: gm.getPlayer().location,\r\n                to_xy: gm.getPlayer().location,\r\n                targetingAction: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewTargetingAction.DebugSummonMob\r\n            };\r\n            entryEvent.debugMenuData = {\r\n                monsterTypeDefinition: enum_number\r\n            };\r\n            menu_entries.push({\r\n                entryName: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].MonsterType[enum_number],\r\n                entryType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].GenericMenuEntryType.EventBased,\r\n                entryEvent: entryEvent\r\n            });\r\n        }\r\n    }\r\n    let menuEvent = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.GenericMenuOn);\r\n    menuEvent.genericMenuData = {\r\n        menuTitle: \"Monster\",\r\n        allowCancel: true,\r\n        menuEntriesList: menu_entries\r\n    };\r\n    gm.insertEvent(menuEvent);\r\n    gm.endEvent(brEvent);\r\n}\r\nfunction createFeatureAt(gm, brEvent) {\r\n    let level = gm.getCurrentLevel();\r\n    let target_xy = brEvent.moveData.to_xy;\r\n    let featureDef = brEvent.debugMenuData.featureTypeDefinition;\r\n    let new_feature = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].featureFactory(featureDef);\r\n    level.features.removeAt(target_xy);\r\n    level.features.setAt(target_xy, new_feature);\r\n    gm.displayAt(target_xy);\r\n    gm.endEvent(brEvent);\r\n}\r\nfunction showCreateFeatureAtMenu(gm, brEvent) {\r\n    let menu_entries = [];\r\n    // https://stackoverflow.com/questions/39372804/typescript-how-to-loop-through-enum-values-for-display-in-radio-buttons\r\n    for (let enum_item in _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].FeatureType) {\r\n        if (!(isNaN(Number(enum_item)))) {\r\n            let enum_number = Number(enum_item);\r\n            // console.log(enum_item)\r\n            let entryEvent = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.TargetingOn, false);\r\n            entryEvent.startTargetingData = {\r\n                from_xy: gm.getPlayer().location,\r\n                to_xy: gm.getPlayer().location,\r\n                targetingAction: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewTargetingAction.DebugMakeFeature\r\n            };\r\n            entryEvent.debugMenuData = {\r\n                featureTypeDefinition: enum_number\r\n            };\r\n            menu_entries.push({\r\n                entryName: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].FeatureType[enum_number],\r\n                entryType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].GenericMenuEntryType.EventBased,\r\n                entryEvent: entryEvent\r\n            });\r\n        }\r\n    }\r\n    let menuEvent = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.GenericMenuOn);\r\n    menuEvent.genericMenuData = {\r\n        menuTitle: \"Feature\",\r\n        allowCancel: true,\r\n        menuEntriesList: menu_entries\r\n    };\r\n    gm.insertEvent(menuEvent);\r\n    gm.endEvent(brEvent);\r\n}\r\nfunction createTerrainAt(gm, brEvent) {\r\n    let level = gm.getCurrentLevel();\r\n    let target_xy = brEvent.moveData.to_xy;\r\n    let terrainDef = brEvent.debugMenuData.terrainTypeDefinition;\r\n    let new_terrain = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].terrainFactory(terrainDef);\r\n    level.terrain.removeAt(target_xy);\r\n    level.terrain.setAt(target_xy, new_terrain);\r\n    gm.displayAt(target_xy);\r\n    gm.endEvent(brEvent);\r\n}\r\nfunction showCreateTerrainAtMenu(gm, brEvent) {\r\n    let menu_entries = [];\r\n    // https://stackoverflow.com/questions/39372804/typescript-how-to-loop-through-enum-values-for-display-in-radio-buttons\r\n    for (let enum_item in _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].TerrainType) {\r\n        if (!(isNaN(Number(enum_item)))) {\r\n            let enum_number = Number(enum_item);\r\n            // console.log(enum_item)\r\n            let entryEvent = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.TargetingOn, false);\r\n            entryEvent.startTargetingData = {\r\n                from_xy: gm.getPlayer().location,\r\n                to_xy: gm.getPlayer().location,\r\n                targetingAction: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewTargetingAction.DebugMakeTerrain\r\n            };\r\n            entryEvent.debugMenuData = {\r\n                terrainTypeDefinition: enum_number\r\n            };\r\n            menu_entries.push({\r\n                entryName: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].TerrainType[enum_number],\r\n                entryType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].GenericMenuEntryType.EventBased,\r\n                entryEvent: entryEvent\r\n            });\r\n        }\r\n    }\r\n    let menuEvent = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.GenericMenuOn);\r\n    menuEvent.genericMenuData = {\r\n        menuTitle: \"Terrain\",\r\n        allowCancel: true,\r\n        menuEntriesList: menu_entries\r\n    };\r\n    gm.insertEvent(menuEvent);\r\n    gm.endEvent(brEvent);\r\n}\r\n// export function testPathMaps(gm: Brew.GameMaster) {\r\n//     let start_time = Date.now()\r\n//     console.log(start_time)\r\n//     let elapsed_time : number\r\n//     let N = 100\r\n//     for (let i = 0; i < N; i++) {\r\n//         let pm = Path.testCreateGenericMapToPlayer(gm, gm.getCurrentLevel(), LevelNavigationType.Walk, false)\r\n//     }\r\n//     elapsed_time = Date.now() - start_time\r\n//     let avg_time = elapsed_time / N\r\n//     console.log(\"total time\", elapsed_time)\r\n//     console.log(\"average time\", avg_time)\r\n//     let ppm = Path.testCreateGenericMapToPlayer(gm, gm.getCurrentLevel(), LevelNavigationType.Walk, false)\r\n//     debug_pathmap = ppm\r\n//     gm.displayAll()\r\n// }\r\nlet useBackgroundCover = false;\r\nfunction toggleBackgroundCover(gm) {\r\n    useBackgroundCover = (!(useBackgroundCover));\r\n    if (useBackgroundCover) {\r\n        showBackgroundCover(gm);\r\n    }\r\n    else {\r\n        hideBackgroundCover(gm);\r\n    }\r\n}\r\nfunction showBackgroundCover(gm) {\r\n    let fake_img = 'https://assets.bwbx.io/images/users/iqjWHBFdfxIU/iBdiy3Q_YPhk/v2/800x-1.png';\r\n    let imgBackground = (document.getElementById(\"id_img_backgroundcover\"));\r\n    imgBackground.src = fake_img;\r\n}\r\nfunction hideBackgroundCover(gm) {\r\n    let canvas = (gm.display.getDisplay(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].DisplayNames.Game).getContainer());\r\n    let context = canvas.getContext(\"2d\");\r\n    context.drawImage(null, 0, 0);\r\n    gm.displayAll();\r\n}\r\nlet BOSS_MODE = false;\r\nfunction toggleBossMode(to) {\r\n    BOSS_MODE = to;\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/brew_engine/debug.ts\n");

/***/ }),

/***/ "./src/brew_engine/enums.ts":
/*!**********************************!*\
  !*** ./src/brew_engine/enums.ts ***!
  \**********************************/
/*! exports provided: ComponentPartsBuildingType, BrewObjectType, BrewPowerType, BrewEventType, BrewAnimationType, BrewInputSource, InputHandler, ContextMenuItem, GenericMenuEntryType, BrewTargetingMethod, BrewTargetingAction, BrewVisionSource, Flag, Team, PathmapCacheType, LevelNavigationType, StatName, MonsterStatus, DisplayNames, BrewNoteType, FancyStepType, PowerUpgradeType, FiringArc */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ComponentPartsBuildingType\", function() { return ComponentPartsBuildingType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BrewObjectType\", function() { return BrewObjectType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BrewPowerType\", function() { return BrewPowerType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BrewEventType\", function() { return BrewEventType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BrewAnimationType\", function() { return BrewAnimationType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BrewInputSource\", function() { return BrewInputSource; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"InputHandler\", function() { return InputHandler; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ContextMenuItem\", function() { return ContextMenuItem; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GenericMenuEntryType\", function() { return GenericMenuEntryType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BrewTargetingMethod\", function() { return BrewTargetingMethod; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BrewTargetingAction\", function() { return BrewTargetingAction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BrewVisionSource\", function() { return BrewVisionSource; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Flag\", function() { return Flag; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Team\", function() { return Team; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PathmapCacheType\", function() { return PathmapCacheType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LevelNavigationType\", function() { return LevelNavigationType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"StatName\", function() { return StatName; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MonsterStatus\", function() { return MonsterStatus; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DisplayNames\", function() { return DisplayNames; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BrewNoteType\", function() { return BrewNoteType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FancyStepType\", function() { return FancyStepType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PowerUpgradeType\", function() { return PowerUpgradeType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FiringArc\", function() { return FiringArc; });\nvar ComponentPartsBuildingType;\r\n(function (ComponentPartsBuildingType) {\r\n    ComponentPartsBuildingType[ComponentPartsBuildingType[\"None\"] = 0] = \"None\";\r\n    ComponentPartsBuildingType[ComponentPartsBuildingType[\"Tank\"] = 1] = \"Tank\";\r\n})(ComponentPartsBuildingType || (ComponentPartsBuildingType = {}));\r\nvar BrewObjectType;\r\n(function (BrewObjectType) {\r\n    BrewObjectType[BrewObjectType[\"Thing\"] = 1] = \"Thing\";\r\n    BrewObjectType[BrewObjectType[\"Terrain\"] = 2] = \"Terrain\";\r\n    BrewObjectType[BrewObjectType[\"Item\"] = 3] = \"Item\";\r\n    BrewObjectType[BrewObjectType[\"Monster\"] = 4] = \"Monster\";\r\n    BrewObjectType[BrewObjectType[\"Feature\"] = 5] = \"Feature\";\r\n    BrewObjectType[BrewObjectType[\"Above\"] = 6] = \"Above\";\r\n})(BrewObjectType || (BrewObjectType = {}));\r\nvar BrewPowerType;\r\n(function (BrewPowerType) {\r\n    BrewPowerType[BrewPowerType[\"EmptyNone\"] = 1] = \"EmptyNone\";\r\n    BrewPowerType[BrewPowerType[\"TurretCannon\"] = 2] = \"TurretCannon\";\r\n    BrewPowerType[BrewPowerType[\"MachineGun\"] = 3] = \"MachineGun\";\r\n    BrewPowerType[BrewPowerType[\"Scanner\"] = 4] = \"Scanner\";\r\n})(BrewPowerType || (BrewPowerType = {}));\r\nvar BrewEventType;\r\n(function (BrewEventType) {\r\n    BrewEventType[BrewEventType[\"Error\"] = 0] = \"Error\";\r\n    BrewEventType[BrewEventType[\"Info\"] = 1] = \"Info\";\r\n    BrewEventType[BrewEventType[\"Wait\"] = 2] = \"Wait\";\r\n    BrewEventType[BrewEventType[\"Move\"] = 3] = \"Move\";\r\n    BrewEventType[BrewEventType[\"Attack\"] = 4] = \"Attack\";\r\n    BrewEventType[BrewEventType[\"Pickup\"] = 5] = \"Pickup\";\r\n    BrewEventType[BrewEventType[\"Drop\"] = 6] = \"Drop\";\r\n    BrewEventType[BrewEventType[\"Land\"] = 7] = \"Land\";\r\n    BrewEventType[BrewEventType[\"Heave\"] = 8] = \"Heave\";\r\n    BrewEventType[BrewEventType[\"UseItem\"] = 9] = \"UseItem\";\r\n    BrewEventType[BrewEventType[\"SmashAttack\"] = 10] = \"SmashAttack\";\r\n    BrewEventType[BrewEventType[\"ApplyDamage\"] = 11] = \"ApplyDamage\";\r\n    BrewEventType[BrewEventType[\"MassDamage\"] = 12] = \"MassDamage\";\r\n    BrewEventType[BrewEventType[\"Hack\"] = 13] = \"Hack\";\r\n    BrewEventType[BrewEventType[\"HeavyAxeThrow\"] = 14] = \"HeavyAxeThrow\";\r\n    BrewEventType[BrewEventType[\"HeavyAxeRecall\"] = 15] = \"HeavyAxeRecall\";\r\n    BrewEventType[BrewEventType[\"ShieldsUp\"] = 16] = \"ShieldsUp\";\r\n    BrewEventType[BrewEventType[\"CloakOn\"] = 17] = \"CloakOn\";\r\n    BrewEventType[BrewEventType[\"PhaseWalkOn\"] = 18] = \"PhaseWalkOn\";\r\n    BrewEventType[BrewEventType[\"RocketPunch\"] = 19] = \"RocketPunch\";\r\n    BrewEventType[BrewEventType[\"RunAnimation\"] = 20] = \"RunAnimation\";\r\n    BrewEventType[BrewEventType[\"PowerUninstall\"] = 21] = \"PowerUninstall\";\r\n    BrewEventType[BrewEventType[\"PowerSwapSelectMenuOn\"] = 22] = \"PowerSwapSelectMenuOn\";\r\n    BrewEventType[BrewEventType[\"PowerSwapFinalize\"] = 23] = \"PowerSwapFinalize\";\r\n    BrewEventType[BrewEventType[\"PowerInstallPromptOn\"] = 24] = \"PowerInstallPromptOn\";\r\n    BrewEventType[BrewEventType[\"PowerInstallReplacementOn\"] = 25] = \"PowerInstallReplacementOn\";\r\n    BrewEventType[BrewEventType[\"PowerInstallFinalize\"] = 26] = \"PowerInstallFinalize\";\r\n    BrewEventType[BrewEventType[\"TargetingOn\"] = 27] = \"TargetingOn\";\r\n    BrewEventType[BrewEventType[\"TargetingCancel\"] = 28] = \"TargetingCancel\";\r\n    BrewEventType[BrewEventType[\"TargetingFinish\"] = 29] = \"TargetingFinish\";\r\n    BrewEventType[BrewEventType[\"TargetingMove\"] = 30] = \"TargetingMove\";\r\n    BrewEventType[BrewEventType[\"InventoryOn\"] = 31] = \"InventoryOn\";\r\n    BrewEventType[BrewEventType[\"ContextMenuOn\"] = 32] = \"ContextMenuOn\";\r\n    BrewEventType[BrewEventType[\"PowerMenuOn\"] = 33] = \"PowerMenuOn\";\r\n    BrewEventType[BrewEventType[\"HeadsUpDisplayOn\"] = 34] = \"HeadsUpDisplayOn\";\r\n    BrewEventType[BrewEventType[\"GenericMenuOn\"] = 35] = \"GenericMenuOn\";\r\n    BrewEventType[BrewEventType[\"GenericMenuMove\"] = 36] = \"GenericMenuMove\";\r\n    BrewEventType[BrewEventType[\"GenericMenuSelect\"] = 37] = \"GenericMenuSelect\";\r\n    BrewEventType[BrewEventType[\"GenericMenuOff\"] = 38] = \"GenericMenuOff\";\r\n    BrewEventType[BrewEventType[\"PlayerDeath\"] = 39] = \"PlayerDeath\";\r\n    BrewEventType[BrewEventType[\"Victory\"] = 40] = \"Victory\";\r\n    BrewEventType[BrewEventType[\"RestartGame\"] = 41] = \"RestartGame\";\r\n    BrewEventType[BrewEventType[\"UsePortal\"] = 42] = \"UsePortal\";\r\n    BrewEventType[BrewEventType[\"ChangeLevel\"] = 43] = \"ChangeLevel\";\r\n    BrewEventType[BrewEventType[\"DebugCreateMobMenuOn\"] = 44] = \"DebugCreateMobMenuOn\";\r\n    BrewEventType[BrewEventType[\"DebugCreateMobAt\"] = 45] = \"DebugCreateMobAt\";\r\n    BrewEventType[BrewEventType[\"DebugCreateFeatureMenuOn\"] = 46] = \"DebugCreateFeatureMenuOn\";\r\n    BrewEventType[BrewEventType[\"DebugCreateFeatureAt\"] = 47] = \"DebugCreateFeatureAt\";\r\n    BrewEventType[BrewEventType[\"DebugCreateTerrainMenuOn\"] = 48] = \"DebugCreateTerrainMenuOn\";\r\n    BrewEventType[BrewEventType[\"DebugCreateTerrainAt\"] = 49] = \"DebugCreateTerrainAt\";\r\n    BrewEventType[BrewEventType[\"ConfirmPathsOn\"] = 50] = \"ConfirmPathsOn\";\r\n    BrewEventType[BrewEventType[\"ConfirmPathsFinalize\"] = 51] = \"ConfirmPathsFinalize\";\r\n    BrewEventType[BrewEventType[\"ConfirmPathsCancel\"] = 52] = \"ConfirmPathsCancel\";\r\n    BrewEventType[BrewEventType[\"Special\"] = 53] = \"Special\";\r\n    BrewEventType[BrewEventType[\"Knockback\"] = 54] = \"Knockback\";\r\n    BrewEventType[BrewEventType[\"AcquireTarget\"] = 55] = \"AcquireTarget\";\r\n    BrewEventType[BrewEventType[\"WarpBeaconUpgradePower\"] = 56] = \"WarpBeaconUpgradePower\";\r\n    BrewEventType[BrewEventType[\"WarpBeaconIncreasePower\"] = 57] = \"WarpBeaconIncreasePower\";\r\n    BrewEventType[BrewEventType[\"WarpBeaconRechargePower\"] = 58] = \"WarpBeaconRechargePower\";\r\n    BrewEventType[BrewEventType[\"WarpBeaconHeal\"] = 59] = \"WarpBeaconHeal\";\r\n    BrewEventType[BrewEventType[\"WarpBeaconAllyDrop\"] = 60] = \"WarpBeaconAllyDrop\";\r\n    BrewEventType[BrewEventType[\"RotateBody\"] = 61] = \"RotateBody\";\r\n    BrewEventType[BrewEventType[\"RotateWeapon\"] = 62] = \"RotateWeapon\";\r\n    BrewEventType[BrewEventType[\"HelpOn\"] = 63] = \"HelpOn\";\r\n})(BrewEventType || (BrewEventType = {}));\r\nvar BrewAnimationType;\r\n(function (BrewAnimationType) {\r\n    BrewAnimationType[BrewAnimationType[\"Flash\"] = 0] = \"Flash\";\r\n    BrewAnimationType[BrewAnimationType[\"OverPath\"] = 1] = \"OverPath\";\r\n    BrewAnimationType[BrewAnimationType[\"CircleOut\"] = 2] = \"CircleOut\";\r\n    BrewAnimationType[BrewAnimationType[\"CircleIn\"] = 3] = \"CircleIn\";\r\n})(BrewAnimationType || (BrewAnimationType = {}));\r\nvar BrewInputSource;\r\n(function (BrewInputSource) {\r\n    BrewInputSource[BrewInputSource[\"Keyboard\"] = 0] = \"Keyboard\";\r\n    BrewInputSource[BrewInputSource[\"Mouse\"] = 1] = \"Mouse\";\r\n    BrewInputSource[BrewInputSource[\"Touch\"] = 2] = \"Touch\";\r\n})(BrewInputSource || (BrewInputSource = {}));\r\nvar InputHandler;\r\n(function (InputHandler) {\r\n    InputHandler[InputHandler[\"Main\"] = 0] = \"Main\";\r\n    InputHandler[InputHandler[\"Targeting\"] = 1] = \"Targeting\";\r\n    InputHandler[InputHandler[\"ConfirmPaths\"] = 2] = \"ConfirmPaths\";\r\n    InputHandler[InputHandler[\"GenericMenu\"] = 3] = \"GenericMenu\";\r\n    InputHandler[InputHandler[\"WaitToDismiss\"] = 4] = \"WaitToDismiss\";\r\n    InputHandler[InputHandler[\"HeadsUpDisplay\"] = 5] = \"HeadsUpDisplay\";\r\n    InputHandler[InputHandler[\"HelpMenu\"] = 6] = \"HelpMenu\";\r\n})(InputHandler || (InputHandler = {}));\r\nvar ContextMenuItem;\r\n(function (ContextMenuItem) {\r\n    ContextMenuItem[ContextMenuItem[\"Drop\"] = 1] = \"Drop\";\r\n    ContextMenuItem[ContextMenuItem[\"Use\"] = 2] = \"Use\";\r\n    ContextMenuItem[ContextMenuItem[\"Throw\"] = 3] = \"Throw\"; // todo: replace these with generic menu items\r\n})(ContextMenuItem || (ContextMenuItem = {}));\r\nvar GenericMenuEntryType;\r\n(function (GenericMenuEntryType) {\r\n    GenericMenuEntryType[GenericMenuEntryType[\"Yes\"] = 1] = \"Yes\";\r\n    GenericMenuEntryType[GenericMenuEntryType[\"No\"] = 2] = \"No\";\r\n    GenericMenuEntryType[GenericMenuEntryType[\"InventoryItem\"] = 3] = \"InventoryItem\";\r\n    GenericMenuEntryType[GenericMenuEntryType[\"ItemContextAction\"] = 4] = \"ItemContextAction\";\r\n    // PowerSelect,\r\n    GenericMenuEntryType[GenericMenuEntryType[\"Quit\"] = 5] = \"Quit\";\r\n    GenericMenuEntryType[GenericMenuEntryType[\"EventBased\"] = 6] = \"EventBased\";\r\n    GenericMenuEntryType[GenericMenuEntryType[\"Cancel\"] = 7] = \"Cancel\";\r\n})(GenericMenuEntryType || (GenericMenuEntryType = {}));\r\nvar BrewTargetingMethod;\r\n(function (BrewTargetingMethod) {\r\n    BrewTargetingMethod[BrewTargetingMethod[\"PointOnly\"] = 0] = \"PointOnly\";\r\n    BrewTargetingMethod[BrewTargetingMethod[\"StraightLine\"] = 1] = \"StraightLine\";\r\n})(BrewTargetingMethod || (BrewTargetingMethod = {}));\r\nvar BrewTargetingAction;\r\n(function (BrewTargetingAction) {\r\n    BrewTargetingAction[BrewTargetingAction[\"Examine\"] = 0] = \"Examine\";\r\n    BrewTargetingAction[BrewTargetingAction[\"Teleport\"] = 1] = \"Teleport\";\r\n    BrewTargetingAction[BrewTargetingAction[\"ThrowItem\"] = 2] = \"ThrowItem\";\r\n    BrewTargetingAction[BrewTargetingAction[\"HeaveItem\"] = 3] = \"HeaveItem\";\r\n    BrewTargetingAction[BrewTargetingAction[\"RangedAttack\"] = 4] = \"RangedAttack\";\r\n    BrewTargetingAction[BrewTargetingAction[\"Hack\"] = 5] = \"Hack\";\r\n    BrewTargetingAction[BrewTargetingAction[\"RocketPunch\"] = 6] = \"RocketPunch\";\r\n    BrewTargetingAction[BrewTargetingAction[\"ThrowHeavyAxe\"] = 7] = \"ThrowHeavyAxe\";\r\n    BrewTargetingAction[BrewTargetingAction[\"DebugSummonMob\"] = 8] = \"DebugSummonMob\";\r\n    BrewTargetingAction[BrewTargetingAction[\"DebugMakeFeature\"] = 9] = \"DebugMakeFeature\";\r\n    BrewTargetingAction[BrewTargetingAction[\"DebugMakeTerrain\"] = 10] = \"DebugMakeTerrain\";\r\n})(BrewTargetingAction || (BrewTargetingAction = {}));\r\nvar BrewVisionSource;\r\n(function (BrewVisionSource) {\r\n    BrewVisionSource[BrewVisionSource[\"xNoVision\"] = 0] = \"xNoVision\";\r\n    BrewVisionSource[BrewVisionSource[\"xSelf\"] = 1] = \"xSelf\";\r\n    BrewVisionSource[BrewVisionSource[\"xRemote\"] = 2] = \"xRemote\";\r\n})(BrewVisionSource || (BrewVisionSource = {}));\r\nvar Flag;\r\n(function (Flag) {\r\n    Flag[Flag[\"Stunned\"] = 0] = \"Stunned\";\r\n    Flag[Flag[\"Immobile\"] = 1] = \"Immobile\";\r\n    Flag[Flag[\"PackAttack\"] = 2] = \"PackAttack\";\r\n    Flag[Flag[\"KeepsDistance\"] = 3] = \"KeepsDistance\";\r\n    Flag[Flag[\"SeeAll\"] = 4] = \"SeeAll\";\r\n    Flag[Flag[\"Invisible\"] = 5] = \"Invisible\";\r\n    Flag[Flag[\"RemoteScan\"] = 6] = \"RemoteScan\";\r\n    Flag[Flag[\"PhaseWalk\"] = 7] = \"PhaseWalk\";\r\n    Flag[Flag[\"Hacked\"] = 8] = \"Hacked\";\r\n    Flag[Flag[\"Flying\"] = 9] = \"Flying\";\r\n    Flag[Flag[\"Weak\"] = 10] = \"Weak\";\r\n    Flag[Flag[\"Invulnerable\"] = 11] = \"Invulnerable\";\r\n    Flag[Flag[\"CausesWeak\"] = 12] = \"CausesWeak\";\r\n    Flag[Flag[\"CausesStun\"] = 13] = \"CausesStun\";\r\n    Flag[Flag[\"CausesKnockback\"] = 14] = \"CausesKnockback\";\r\n    Flag[Flag[\"OnDeathKnockback\"] = 15] = \"OnDeathKnockback\";\r\n    Flag[Flag[\"CausesInvulnerable\"] = 16] = \"CausesInvulnerable\";\r\n    Flag[Flag[\"NeedsTargetLock\"] = 17] = \"NeedsTargetLock\";\r\n    Flag[Flag[\"Burnt\"] = 18] = \"Burnt\";\r\n    Flag[Flag[\"CausesExplosion\"] = 19] = \"CausesExplosion\";\r\n})(Flag || (Flag = {}));\r\nvar Team;\r\n(function (Team) {\r\n    Team[Team[\"Player\"] = 1] = \"Player\";\r\n    Team[Team[\"PlayerAllied\"] = 2] = \"PlayerAllied\";\r\n    Team[Team[\"Enemy\"] = 3] = \"Enemy\";\r\n})(Team || (Team = {}));\r\nvar PathmapCacheType;\r\n(function (PathmapCacheType) {\r\n    PathmapCacheType[PathmapCacheType[\"ToPlayer_Walk\"] = 0] = \"ToPlayer_Walk\";\r\n    PathmapCacheType[PathmapCacheType[\"ToPlayer_Fly\"] = 1] = \"ToPlayer_Fly\";\r\n    PathmapCacheType[PathmapCacheType[\"FromPlayer_Walk\"] = 2] = \"FromPlayer_Walk\";\r\n    PathmapCacheType[PathmapCacheType[\"FromPlayer_Fly\"] = 3] = \"FromPlayer_Fly\";\r\n})(PathmapCacheType || (PathmapCacheType = {}));\r\nvar LevelNavigationType;\r\n(function (LevelNavigationType) {\r\n    LevelNavigationType[LevelNavigationType[\"Walk\"] = 0] = \"Walk\";\r\n    LevelNavigationType[LevelNavigationType[\"Fly\"] = 1] = \"Fly\";\r\n    //walkable no items no exits\r\n    //ignore radiation\r\n    //walkable safe from radiation\r\n})(LevelNavigationType || (LevelNavigationType = {}));\r\nvar StatName;\r\n(function (StatName) {\r\n    StatName[StatName[\"Health\"] = 1] = \"Health\";\r\n    StatName[StatName[\"Shields\"] = 2] = \"Shields\";\r\n    StatName[StatName[\"PowerCharge\"] = 3] = \"PowerCharge\";\r\n    StatName[StatName[\"StrengthRank\"] = 4] = \"StrengthRank\";\r\n    StatName[StatName[\"Score\"] = 5] = \"Score\";\r\n})(StatName || (StatName = {}));\r\n// module Brew.Flags {\r\n//     export const keeps_distance : IBrewFlag = {\r\n//         // name: \"keeps_distance\",\r\n//         desc_player: null,\r\n//         desc_enemy: \"attacks from a distance\"\r\n//     }\r\n//     export const see_all : IBrewFlag = {\r\n//         desc_player: \"all-seeing\",\r\n//         desc_enemy: \"sees everywhere\"\r\n//     }\r\n//     export const is_invisible: IBrewFlag = {\r\n//         desc_player: \"is invisible\",\r\n//         desc_enemy: \"is invisible\"\r\n//     }\r\n// }\r\nvar MonsterStatus;\r\n(function (MonsterStatus) {\r\n    MonsterStatus[MonsterStatus[\"Sleep\"] = 0] = \"Sleep\";\r\n    MonsterStatus[MonsterStatus[\"Wander\"] = 1] = \"Wander\";\r\n    MonsterStatus[MonsterStatus[\"Hunt\"] = 2] = \"Hunt\";\r\n    MonsterStatus[MonsterStatus[\"Escape\"] = 3] = \"Escape\";\r\n})(MonsterStatus || (MonsterStatus = {}));\r\nvar DisplayNames;\r\n(function (DisplayNames) {\r\n    DisplayNames[DisplayNames[\"Game\"] = 0] = \"Game\";\r\n    // Layer,\r\n    DisplayNames[DisplayNames[\"HUD\"] = 1] = \"HUD\";\r\n    DisplayNames[DisplayNames[\"Footer\"] = 2] = \"Footer\";\r\n    DisplayNames[DisplayNames[\"Header\"] = 3] = \"Header\";\r\n})(DisplayNames || (DisplayNames = {}));\r\n// export enum BrewNoteType {\r\n//     StatusEffect,\r\n//     MonsterInfo\r\n// }\r\nvar BrewNoteType;\r\n(function (BrewNoteType) {\r\n    BrewNoteType[BrewNoteType[\"TimedEffect\"] = 0] = \"TimedEffect\";\r\n    BrewNoteType[BrewNoteType[\"Health\"] = 1] = \"Health\";\r\n    BrewNoteType[BrewNoteType[\"BehavioralFlag\"] = 2] = \"BehavioralFlag\";\r\n    BrewNoteType[BrewNoteType[\"Terrain\"] = 3] = \"Terrain\";\r\n    BrewNoteType[BrewNoteType[\"Feature\"] = 4] = \"Feature\";\r\n    BrewNoteType[BrewNoteType[\"NotableItem\"] = 5] = \"NotableItem\";\r\n    BrewNoteType[BrewNoteType[\"TargetingLock\"] = 6] = \"TargetingLock\";\r\n    BrewNoteType[BrewNoteType[\"Speed\"] = 7] = \"Speed\";\r\n})(BrewNoteType || (BrewNoteType = {}));\r\nvar FancyStepType;\r\n(function (FancyStepType) {\r\n    FancyStepType[FancyStepType[\"None\"] = 0] = \"None\";\r\n    FancyStepType[FancyStepType[\"Squarestep\"] = 1] = \"Squarestep\";\r\n    FancyStepType[FancyStepType[\"Lunge\"] = 2] = \"Lunge\";\r\n})(FancyStepType || (FancyStepType = {}));\r\nvar PowerUpgradeType;\r\n(function (PowerUpgradeType) {\r\n    PowerUpgradeType[PowerUpgradeType[\"IncreaseStrength\"] = 1] = \"IncreaseStrength\";\r\n    PowerUpgradeType[PowerUpgradeType[\"IncreaseNumberOfCharges\"] = 2] = \"IncreaseNumberOfCharges\";\r\n})(PowerUpgradeType || (PowerUpgradeType = {}));\r\nvar FiringArc;\r\n(function (FiringArc) {\r\n    FiringArc[FiringArc[\"OctantArc\"] = 1] = \"OctantArc\";\r\n    FiringArc[FiringArc[\"QuarterArc\"] = 2] = \"QuarterArc\";\r\n    FiringArc[FiringArc[\"ThreeOctantArc\"] = 3] = \"ThreeOctantArc\";\r\n    FiringArc[FiringArc[\"HalfArc\"] = 4] = \"HalfArc\";\r\n    FiringArc[FiringArc[\"ThreeQuarterArc\"] = 5] = \"ThreeQuarterArc\";\r\n    FiringArc[FiringArc[\"FullArc\"] = 6] = \"FullArc\";\r\n})(FiringArc || (FiringArc = {}));\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/brew_engine/enums.ts\n");

/***/ }),

/***/ "./src/brew_engine/events.ts":
/*!***********************************!*\
  !*** ./src/brew_engine/events.ts ***!
  \***********************************/
/*! exports provided: mainEventhandler, createGenericEventOfType, addDataToEvent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mainEventhandler\", function() { return mainEventhandler; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createGenericEventOfType\", function() { return createGenericEventOfType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addDataToEvent\", function() { return addDataToEvent; });\n/* harmony import */ var _brew__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../brew */ \"./src/brew.ts\");\n/* harmony import */ var _start__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../start */ \"./src/start.ts\");\n\r\n\r\n// called from postal.js channel\r\nfunction mainEventhandler(gm, data, envelope) {\r\n    if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.Error) {\r\n        if (data.errorMsg) {\r\n            console.log(data.errorMsg);\r\n        }\r\n        return;\r\n    }\r\n    if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.Info) {\r\n        display_info(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.Move) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Movement\"].move(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.RotateBody) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Tank\"].rotate_body(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.RotateWeapon) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Tank\"].rotate_weapon(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.HelpOn) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Menus\"].showHelpMenu(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.Wait) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Movement\"].rest(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.Pickup) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"ItemInteraction\"].pickup(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.Drop) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"ItemInteraction\"].dropItemAttempt(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.Land) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"ItemInteraction\"].doLandingEventAfterThrown(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.Heave) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"ItemInteraction\"].doLandingEventAfterHeave(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.UseItem) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"ItemInteraction\"].useItem(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.Special) {\r\n        special(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.ApplyDamage) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Combat\"].applyDamage(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.Attack) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Combat\"].attack(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.SmashAttack) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Combat\"].smash_attack(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.Hack) {\r\n        remote_hack(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.ShieldsUp) {\r\n        shields_up(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.CloakOn) {\r\n        cloak_on(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.PhaseWalkOn) {\r\n        phasewalk_on(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.RocketPunch) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Powers\"].rocketPunch(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.TargetingOn) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Targeting\"].targetingOn(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.TargetingCancel) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Targeting\"].targetingCancel(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.TargetingFinish) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Targeting\"].targetingFinish(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.TargetingMove) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Targeting\"].targetingMove(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.InventoryOn) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Menus\"].showInventoryList(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.ContextMenuOn) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Menus\"].showContextMenu(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.HeadsUpDisplayOn) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Menus\"].showHeadsUpDisplay(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.PowerMenuOn) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Menus\"].showPowerManagementMenu(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.PowerUninstall) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Powers\"].uninstallPower(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.PowerSwapSelectMenuOn) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Menus\"].showPowerSwapSelectMenu(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.PowerSwapFinalize) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Powers\"].swapPower(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.PowerInstallPromptOn) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Menus\"].showPowerInstallPromptMenu(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.PowerInstallReplacementOn) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Menus\"].showPowerInstallSelectMenu(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.PowerInstallFinalize) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Powers\"].installPower(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.PlayerDeath) {\r\n        game_over(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.Victory) {\r\n        game_victory(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.RestartGame) {\r\n        restart_game(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.UsePortal) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Movement\"].triggerPortalUse(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.ChangeLevel) {\r\n        change_level(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.RunAnimation) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Animations\"].runAnimationEvent(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.GenericMenuOn) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Menus\"].showGenericMenu(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.GenericMenuOff) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Menus\"].stopShowingGenericMenu(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.GenericMenuMove) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Menus\"].updateGenericMenu(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.GenericMenuSelect) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Menus\"].selectFromGenericMenu(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.ConfirmPathsOn) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Menus\"].showConfirmPaths(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.ConfirmPathsFinalize) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Menus\"].finalizeConfirmPaths(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.ConfirmPathsCancel) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Menus\"].cancelConfirmPaths(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.HeavyAxeThrow) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Powers\"].throw_axe(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.HeavyAxeRecall) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Powers\"].recall_axe(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.DebugCreateMobMenuOn) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Debug\"].showCreateMonsterAtMenu(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.DebugCreateMobAt) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Debug\"].createMonsterAt(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.DebugCreateFeatureMenuOn) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Debug\"].showCreateFeatureAtMenu(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.DebugCreateFeatureAt) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Debug\"].createFeatureAt(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.DebugCreateTerrainAt) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Debug\"].createTerrainAt(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.DebugCreateTerrainMenuOn) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Debug\"].showCreateTerrainAtMenu(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.MassDamage) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Combat\"].applyMassDamage(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.Knockback) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Movement\"].knockback(gm, data);\r\n    }\r\n    else if (data.eventType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.AcquireTarget) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Targeting\"].aquireTargetLockEvent(gm, data);\r\n    }\r\n    else {\r\n        console.error(\"received unknown event type\", data);\r\n    }\r\n}\r\nfunction change_level(gm, data) {\r\n    let portal = data.portalData.portal_used;\r\n    let level_audit = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Tank\"].processInventory(gm);\r\n    gm.getCurrentLevel().monsters.removeAt(gm.getPlayer().location);\r\n    gm.setupLevel(portal.dest_level_id, portal.dest_location_xy);\r\n    // gm.displayAll()\r\n    gm.insertEvent(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Tank\"].getLevelAuditReport(gm, level_audit));\r\n    gm.endEvent(data);\r\n}\r\nfunction special(gm, data) {\r\n    // gm.displayAt(data.actor.location)\r\n    gm.endEvent(data);\r\n}\r\nfunction display_info(gm, data) {\r\n    let level = gm.getCurrentLevel();\r\n    // todo: this is the in-depth highlight tool, vs cursor overview\r\n    // debug show what's there\r\n    let divDebug = (document.getElementById(\"id_div_debug\"));\r\n    divDebug.innerHTML = \"<p>\" + data.moveData.to_xy.toString() + \"</p>\";\r\n    gm.display.drawFooter();\r\n    gm.endEvent(data);\r\n}\r\nfunction remote_hack(gm, data) {\r\n    let target_xy = data.moveData.to_xy;\r\n    let target = gm.getCurrentLevel().monsters.getAt(target_xy);\r\n    // decrement power charge on success\r\n    data.powerData.power.charge_stat.decrement(1);\r\n    if (target.team != _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].Team.Player) {\r\n        target.team = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].Team.PlayerAllied;\r\n        console.log(`${target.name} has been hacked!!`);\r\n        target.color = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].hero_blue;\r\n        gm.displayAt(target.location);\r\n    }\r\n    gm.endEvent(data);\r\n}\r\nfunction shields_up(gm, data) {\r\n    data.actor.shields = new _brew__WEBPACK_IMPORTED_MODULE_0__[\"Stat\"](_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].StatName.Shields, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Config\"].player_shield_amount);\r\n    gm.getPlayer().color = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].power_shield;\r\n    console.log(\"shields activated\");\r\n    // Brew.Animations.animateCircle(gm, data.actor.location, 3, Brew.Color.power_shield, data)\r\n    let animationEvent = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Animations\"].createCircleAnimationEvent(data, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].power_shield, 3);\r\n    // let animationEvent = Brew.Animations.createReverseCircleAnimationEvent(data, Brew.Color.power_shield, 3)\r\n    gm.insertEvent(animationEvent);\r\n    gm.endEvent(data);\r\n}\r\nfunction cloak_on(gm, data) {\r\n    data.actor.setFlag(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].Flag.Invisible);\r\n    gm.timer_monitor.addTimer(new _brew__WEBPACK_IMPORTED_MODULE_0__[\"Timers\"].TurnTimer(data.actor, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].Flag.Invisible, gm.turn_count, 20)); //todo: tie power duration to power level/strengh\r\n    console.log(\"going dark\");\r\n    let animationEvent = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Animations\"].createCircleAnimationEvent(data, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].power_cloak, 3);\r\n    gm.insertEvent(animationEvent);\r\n    gm.endEvent(data);\r\n}\r\nfunction phasewalk_on(gm, data) {\r\n    data.actor.setFlag(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].Flag.PhaseWalk);\r\n    gm.timer_monitor.addTimer(new _brew__WEBPACK_IMPORTED_MODULE_0__[\"Timers\"].TurnTimer(data.actor, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].Flag.PhaseWalk, gm.turn_count, 10));\r\n    console.log(\"ghost mode activated\");\r\n    // Brew.Animations.animateCircle(gm, data.actor.location, 3, Brew.Color.power_phasewalk, data)\r\n    let animationEvent = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Animations\"].createCircleAnimationEvent(data, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].power_phasewalk, 3);\r\n    gm.insertEvent(animationEvent);\r\n    gm.endEvent(data);\r\n}\r\nfunction game_over(gm, data) {\r\n    // gm.display.gameOverDraw()\r\n    // gm.input_handler = InputHandler.WaitToRestart\r\n    // clear out other actors\r\n    gm.getCurrentLevel().monsters.getAllThings().forEach((mob) => {\r\n        if (!(mob.isSameThing(gm.getPlayer()))) {\r\n            gm.scheduler.remove(mob);\r\n        }\r\n    });\r\n    // clear out non-level actors\r\n    gm.scheduler.remove(gm.getArchitect());\r\n    let menu_entries = [];\r\n    menu_entries.push({\r\n        entryName: \"New Game\",\r\n        entryType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].GenericMenuEntryType.EventBased,\r\n        entryEvent: {\r\n            eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.RestartGame,\r\n            actor: gm.getPlayer(),\r\n            playerInitiated: true,\r\n            endsTurn: true\r\n        }\r\n    });\r\n    menu_entries.push({\r\n        entryName: \"Restart Seed\",\r\n        entryType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].GenericMenuEntryType.EventBased,\r\n        entryEvent: {\r\n            eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.RestartGame,\r\n            actor: gm.getPlayer(),\r\n            playerInitiated: true,\r\n            endsTurn: true,\r\n            restartData: { seed: gm.getSeed() }\r\n        }\r\n    });\r\n    let deathMenuEvent = {\r\n        eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.GenericMenuOn,\r\n        actor: gm.getPlayer(),\r\n        playerInitiated: false,\r\n        endsTurn: false,\r\n        genericMenuData: {\r\n            menuTitle: \"Congratulations\",\r\n            menuDescription: \"You have died!\",\r\n            allowCancel: false,\r\n            menuEntriesList: menu_entries\r\n        }\r\n    };\r\n    // clear out pending event queue\r\n    gm.clearEventQueue();\r\n    gm.insertEvent(deathMenuEvent);\r\n    gm.endEvent(data);\r\n}\r\nfunction restart_game(gm, brEvent) {\r\n    let given_seed = null;\r\n    if (brEvent.restartData) {\r\n        // starting_seed = brEvent.restartData.seed\r\n        given_seed = brEvent.restartData.seed;\r\n    }\r\n    Object(_start__WEBPACK_IMPORTED_MODULE_1__[\"startGame\"])(given_seed);\r\n}\r\nfunction createGenericEventOfType(gm, event_type, ends_turn = false) {\r\n    return {\r\n        eventType: event_type,\r\n        actor: gm.getPlayer(),\r\n        playerInitiated: true,\r\n        endsTurn: ends_turn\r\n    };\r\n}\r\nfunction addDataToEvent(brEvent, extraData) {\r\n    let newEvent = Object.assign({}, brEvent);\r\n    for (var key in extraData) {\r\n        if (extraData.hasOwnProperty(key)) {\r\n            var element = extraData[key];\r\n            newEvent[key] = element;\r\n        }\r\n    }\r\n    return newEvent;\r\n}\r\nfunction game_victory(gm, data) {\r\n    // gm.display.gameOverDraw()\r\n    // gm.input_handler = InputHandler.WaitToRestart\r\n    // clear out other actors\r\n    gm.getCurrentLevel().monsters.getAllThings().forEach((mob) => {\r\n        if (!(mob.isSameThing(gm.getPlayer()))) {\r\n            gm.scheduler.remove(mob);\r\n        }\r\n    });\r\n    // clear out non-level actors\r\n    gm.scheduler.remove(gm.getArchitect());\r\n    let menu_entries = [];\r\n    menu_entries.push({\r\n        entryName: \"New Game\",\r\n        entryType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].GenericMenuEntryType.EventBased,\r\n        entryEvent: {\r\n            eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.RestartGame,\r\n            actor: gm.getPlayer(),\r\n            playerInitiated: true,\r\n            endsTurn: true\r\n        }\r\n    });\r\n    menu_entries.push({\r\n        entryName: \"Restart Seed\",\r\n        entryType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].GenericMenuEntryType.EventBased,\r\n        entryEvent: {\r\n            eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.RestartGame,\r\n            actor: gm.getPlayer(),\r\n            playerInitiated: true,\r\n            endsTurn: true,\r\n            restartData: { seed: gm.getSeed() }\r\n        }\r\n    });\r\n    let victoryMenuEvent = {\r\n        eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.GenericMenuOn,\r\n        actor: gm.getPlayer(),\r\n        playerInitiated: false,\r\n        endsTurn: false,\r\n        genericMenuData: {\r\n            menuTitle: \"V I C T O R Y\",\r\n            menuDescription: \"You did it! Congratulations! This victory screen will have to do for now, until high scores are implemented.\",\r\n            allowCancel: false,\r\n            menuEntriesList: menu_entries\r\n        }\r\n    };\r\n    // clear out pending event queue\r\n    gm.clearEventQueue();\r\n    gm.insertEvent(victoryMenuEvent);\r\n    gm.endEvent(data);\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/brew_engine/events.ts\n");

/***/ }),

/***/ "./src/brew_engine/fastdijkstramap.ts":
/*!********************************************!*\
  !*** ./src/brew_engine/fastdijkstramap.ts ***!
  \********************************************/
/*! exports provided: MAX_INT, PathFunctionWalkable, PathFunctionFlyable, setupDijkstraMap, solveDijkstraMap, getMaxAndMinDijkstraMapValues */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MAX_INT\", function() { return MAX_INT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PathFunctionWalkable\", function() { return PathFunctionWalkable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PathFunctionFlyable\", function() { return PathFunctionFlyable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setupDijkstraMap\", function() { return setupDijkstraMap; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"solveDijkstraMap\", function() { return solveDijkstraMap; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getMaxAndMinDijkstraMapValues\", function() { return getMaxAndMinDijkstraMapValues; });\n/* harmony import */ var _brew__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../brew */ \"./src/brew.ts\");\n\r\nconst MAX_INT = 1 / 0;\r\nlet MAX_GRID_SIZE = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Config\"].MAX_GRID_SIZE;\r\nlet flood_fill_fn = (x, y, level, pathable_fn, local_map, passable, blocked) => {\r\n    // stop condition: out of bounds\r\n    if ((x < 0) ||\r\n        (y < 0) ||\r\n        (x >= level.width) ||\r\n        (y >= level.height)) {\r\n        return;\r\n    }\r\n    let key = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].x_and_yToKey(x, y).toString();\r\n    // stop condition: already visited\r\n    if (local_map.hasOwnProperty(key)) {\r\n        return;\r\n    }\r\n    // stop condition: blocked\r\n    if (blocked.hasOwnProperty(key)) {\r\n        return;\r\n    }\r\n    // stop condition: hit a wall\r\n    let terrain_at = level.terrain.things[key];\r\n    if (!(pathable_fn(terrain_at))) {\r\n        blocked[key] = true;\r\n        return;\r\n    }\r\n    // otherwise, set value \r\n    local_map[key] = MAX_INT;\r\n    // keep track of passable tiles\r\n    passable[key] = true;\r\n    // recursion\r\n    flood_fill_fn(x + 1, y, level, pathable_fn, local_map, passable, blocked);\r\n    flood_fill_fn(x - 1, y, level, pathable_fn, local_map, passable, blocked);\r\n    flood_fill_fn(x, y + 1, level, pathable_fn, local_map, passable, blocked);\r\n    flood_fill_fn(x, y - 1, level, pathable_fn, local_map, passable, blocked);\r\n    return;\r\n};\r\nlet PathFunctionWalkable;\r\nPathFunctionWalkable = function (terrain_at) {\r\n    return (!(terrain_at.blocks_walking));\r\n};\r\nlet PathFunctionFlyable;\r\nPathFunctionFlyable = function (terrain_at) {\r\n    return (!(terrain_at.blocks_flying));\r\n};\r\nfunction setupDijkstraMap(level, start_xy, pathable_fn) {\r\n    let djMap = {};\r\n    let blocked = {};\r\n    let passable = {};\r\n    // set all passable tiles to MAX-INT\r\n    flood_fill_fn(start_xy.x, start_xy.y, level, pathable_fn, djMap, passable, blocked);\r\n    // set target/goal to 0\r\n    // djMap[Brew.Utils.x_and_yToKey(start_xy.x, start_xy.y)] = 0\r\n    return djMap;\r\n}\r\nfunction getAdjacentKeys(at_key) {\r\n    return [at_key - 1, at_key + 1, at_key - MAX_GRID_SIZE, at_key + MAX_GRID_SIZE];\r\n}\r\nfunction solveDijkstraMap(djMap) {\r\n    let adjacent_map = {};\r\n    let adjacent_keys;\r\n    // let madeChanges = true\r\n    let count_passes = 0;\r\n    let lowest_neighbor_val;\r\n    let map_value;\r\n    let neighbor_val;\r\n    let neighbor_values;\r\n    // let key: string\r\n    // let i : number\r\n    let current_queue = [];\r\n    let next_queue = [];\r\n    for (let kkey in djMap) {\r\n        current_queue.push(Number(kkey));\r\n    }\r\n    while (current_queue.length) {\r\n        count_passes += 1;\r\n        current_queue.forEach((num_key, index, array) => {\r\n            map_value = djMap[num_key];\r\n            // find adjacent neighbor tiles\r\n            if (num_key in adjacent_map) {\r\n                adjacent_keys = adjacent_map[num_key];\r\n            }\r\n            else {\r\n                // if we haven't already looked them up, then calculate them \r\n                adjacent_keys = getAdjacentKeys(num_key).filter((my_key, index, array) => {\r\n                    return (my_key in djMap);\r\n                });\r\n                // .. and store them for later\r\n                adjacent_map[num_key] = adjacent_keys;\r\n            }\r\n            // go through each neighbors and find the lowest value\r\n            lowest_neighbor_val = MAX_INT; // 1/0\r\n            adjacent_keys.forEach((neighbor_key, index, array) => {\r\n                neighbor_val = djMap[neighbor_key];\r\n                if (neighbor_val < lowest_neighbor_val) {\r\n                    lowest_neighbor_val = neighbor_val;\r\n                }\r\n            });\r\n            if ((map_value - lowest_neighbor_val) >= 2) {\r\n                djMap[num_key] = lowest_neighbor_val + 1;\r\n                next_queue = next_queue.concat(adjacent_keys);\r\n                // next_queue.push(num_key)\r\n            }\r\n        });\r\n        current_queue = next_queue.concat([]);\r\n        next_queue = [];\r\n    }\r\n    return count_passes;\r\n}\r\nfunction getMaxAndMinDijkstraMapValues(djmap) {\r\n    let max_value = -(1 / 0);\r\n    let min_value = 1 / 0;\r\n    for (let key in djmap) {\r\n        // if (djmap.hasOwnProperty(key)) {\r\n        let map_value = djmap[key];\r\n        if (map_value != MAX_INT) {\r\n            if (map_value < min_value) {\r\n                min_value = map_value;\r\n            }\r\n            if (map_value > max_value) {\r\n                max_value = map_value;\r\n            }\r\n        }\r\n        // }\r\n    }\r\n    return {\r\n        max: max_value,\r\n        min: min_value\r\n    };\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/brew_engine/fastdijkstramap.ts\n");

/***/ }),

/***/ "./src/brew_engine/game_master.ts":
/*!****************************************!*\
  !*** ./src/brew_engine/game_master.ts ***!
  \****************************************/
/*! exports provided: GameMaster */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GameMaster\", function() { return GameMaster; });\n/* harmony import */ var postal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! postal */ \"./node_modules/postal/lib/postal.js\");\n/* harmony import */ var postal__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(postal__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var rot_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rot-js */ \"./node_modules/rot-js/lib/rot.js\");\n/* harmony import */ var rot_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(rot_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _brew__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../brew */ \"./src/brew.ts\");\n\r\n\r\n\r\nclass GameMaster {\r\n    constructor(given_seed, div_container, input_fn, event_fn, ai_fn, preplayer_fn, postplayer_fn) {\r\n        this.turn_count = 0;\r\n        this.event_queue = [];\r\n        // private postturn_fn : any\r\n        this.input_handler = _brew__WEBPACK_IMPORTED_MODULE_2__[\"Enums\"].InputHandler.Main;\r\n        this.levels = {};\r\n        // init RNG\r\n        this.initRNG(given_seed);\r\n        // instantiate ROTjs engine\r\n        this.scheduler = new rot_js__WEBPACK_IMPORTED_MODULE_1__[\"Scheduler\"].Speed();\r\n        this.engine = new rot_js__WEBPACK_IMPORTED_MODULE_1__[\"Engine\"](this.scheduler);\r\n        this.block_input = true;\r\n        // initiate internal utility classes\r\n        this.timer_monitor = new _brew__WEBPACK_IMPORTED_MODULE_2__[\"Timers\"].TimerMonitor();\r\n        this.pathmaps = new _brew__WEBPACK_IMPORTED_MODULE_2__[\"Path\"].PathmapCache();\r\n        // display class will handle setting up canvas, etc\r\n        this.display = new _brew__WEBPACK_IMPORTED_MODULE_2__[\"Display\"](this, div_container);\r\n        // setup event/input handlers\r\n        // this.initEventListener(div_container)\r\n        // instantiate postal.js channels\r\n        this.channel_event = postal__WEBPACK_IMPORTED_MODULE_0__[\"channel\"](\"event\");\r\n        this.channel_turn = postal__WEBPACK_IMPORTED_MODULE_0__[\"channel\"](\"turn\");\r\n        this.channel_input = postal__WEBPACK_IMPORTED_MODULE_0__[\"channel\"](\"input\");\r\n        this.channel_display = postal__WEBPACK_IMPORTED_MODULE_0__[\"channel\"](\"display\");\r\n        // outsourced functions\r\n        this.event_fn = event_fn;\r\n        this.input_fn = input_fn;\r\n        this.ai_fn = ai_fn;\r\n        this.preplayer_fn = preplayer_fn;\r\n        this.postplayer_fn = postplayer_fn;\r\n        // this.postturn_fn = postturn_fn\r\n        // start feed listeners\r\n        this.feed_turn_start = this.channel_turn.subscribe(\"turn.start\", (data, envelope) => { this.handleTurnStart(data, envelope); });\r\n        this.feed_turn_end = this.channel_turn.subscribe(\"turn.end\", (data, envelope) => { this.handleTurnEnd(data, envelope); });\r\n        this.feed_event = this.channel_event.subscribe(\"event.start\", (data, envelope) => { this.eventFunctionWrapper(data, envelope); });\r\n        this.feed_event = this.channel_event.subscribe(\"event.end\", (data, envelope) => { this.handleEventEnd(data, envelope); });\r\n        this.feed_input = this.channel_input.subscribe(\"input.*\", (data, envelope) => { this.inputFunctionWrapper(data, envelope); });\r\n        this.feed_display = this.channel_display.subscribe(\"display.*\", (data, envelope) => { this.handleDisplay(data, envelope); });\r\n        // set up first level, start engine, define player, etc\r\n        this.setupGame();\r\n        // if (BREW_FIRST_STARTUP) {\r\n        //     this.startMenu()\r\n        // }\r\n    }\r\n    initRNG(given_seed) {\r\n        if (given_seed) {\r\n            this.start_seed = given_seed;\r\n        }\r\n        else {\r\n            this.start_seed = Math.floor(rot_js__WEBPACK_IMPORTED_MODULE_1__[\"RNG\"].getUniform() * 9999);\r\n        }\r\n        rot_js__WEBPACK_IMPORTED_MODULE_1__[\"RNG\"].setSeed(this.start_seed);\r\n        console.log(\"starting with SEED \", this.start_seed);\r\n    }\r\n    getSeed() { return this.start_seed; }\r\n    setupGame() {\r\n        // init player for the first time and add to the scheduler\r\n        let player = buildPlayer(this);\r\n        this.player = player;\r\n        // architect is like a non-mob environmental manager\r\n        this.architect = _brew__WEBPACK_IMPORTED_MODULE_2__[\"Definitions\"].monsterFactory(this, _brew__WEBPACK_IMPORTED_MODULE_2__[\"Definitions\"].MonsterType.Architect);\r\n        // build first level\r\n        let first_level = _brew__WEBPACK_IMPORTED_MODULE_2__[\"LevelGenerator\"].buildLevel(this, 1, false);\r\n        this.addLevel(first_level);\r\n        this.setupLevel(first_level.id, first_level.simple_start_xy);\r\n        this.engine.start();\r\n    }\r\n    addLevel(new_level) {\r\n        let key = new_level.id;\r\n        this.levels[key] = new_level;\r\n    }\r\n    removeLevel(level_id) {\r\n        delete this.levels[level_id];\r\n    }\r\n    getLevelByID(level_id) {\r\n        return this.levels[level_id];\r\n    }\r\n    hasLevel(level_id) {\r\n        return level_id in this.levels;\r\n    }\r\n    setupLevel(level_id, player_start_xy) {\r\n        let player = this.getPlayer();\r\n        this.engine.lock();\r\n        if (!(this.hasLevel(level_id))) {\r\n            throw new Error(`Level with id ${level_id} does not exist`);\r\n        }\r\n        if (this.current_level) {\r\n            player.memory_archive.saveLevelMemory(this.current_level.id, player.memory);\r\n        }\r\n        let new_level = this.levels[level_id];\r\n        // set this as our current level\r\n        this.current_level = new_level;\r\n        // make sure we add player to the level somewhere \r\n        // todo: better starting coords based on entrance/exit portals\r\n        if (new_level.monsters.hasAt(player_start_xy)) {\r\n            console.error(\"monster already exists at player's starting location\");\r\n        }\r\n        new_level.monsters.setAt(player_start_xy, player);\r\n        // figure out facing direction\r\n        let half_x = _brew__WEBPACK_IMPORTED_MODULE_2__[\"Config\"].map_width_tiles / 2;\r\n        let half_y = _brew__WEBPACK_IMPORTED_MODULE_2__[\"Config\"].map_height_tiles / 2;\r\n        let turret = player.getPowers().getPowerOfType(_brew__WEBPACK_IMPORTED_MODULE_2__[\"Enums\"].BrewPowerType.TurretCannon);\r\n        if ((player_start_xy.x < half_x) && (player_start_xy.y < half_y)) {\r\n            turret.facing_direction = _brew__WEBPACK_IMPORTED_MODULE_2__[\"Directions\"].RIGHT.clone();\r\n        }\r\n        else if ((player_start_xy.x < half_x) && (player_start_xy.y >= half_y)) {\r\n            turret.facing_direction = _brew__WEBPACK_IMPORTED_MODULE_2__[\"Directions\"].UP.clone();\r\n        }\r\n        else if ((player_start_xy.x >= half_x) && (player_start_xy.y < half_y)) {\r\n            turret.facing_direction = _brew__WEBPACK_IMPORTED_MODULE_2__[\"Directions\"].LEFT.clone();\r\n        }\r\n        else {\r\n            turret.facing_direction = _brew__WEBPACK_IMPORTED_MODULE_2__[\"Directions\"].DOWN.clone();\r\n        }\r\n        _brew__WEBPACK_IMPORTED_MODULE_2__[\"Parts\"].updateMonsterParts(this, player);\r\n        _brew__WEBPACK_IMPORTED_MODULE_2__[\"Parts\"].placeMonsterPartsOnGrid(this, player);\r\n        // clear memory and reset if we've been on this level before\r\n        this.player.memory.clearAll();\r\n        if (player.memory_archive.hasLevelMemory(new_level.id)) {\r\n            player.memory = player.memory_archive.getLevelMemory(new_level.id);\r\n        }\r\n        _brew__WEBPACK_IMPORTED_MODULE_2__[\"Intel\"].runBeforePlayerTurn(this, player);\r\n        // redo all Brew.Pathmaps\r\n        this.updateAllPathmaps();\r\n        //this.preplayer_fn(this, this.player)\r\n        //this.display.drawAll()\r\n        // schedule all mobs in the level\r\n        this.scheduler.clear();\r\n        this.addActorToScheduler(this.player);\r\n        for (let m of new_level.monsters.getAllThings()) {\r\n            if (!(m.isSameThing(this.player))) {\r\n                this.addActorToScheduler(m);\r\n                _brew__WEBPACK_IMPORTED_MODULE_2__[\"Parts\"].updateMonsterParts(this, m);\r\n                _brew__WEBPACK_IMPORTED_MODULE_2__[\"Parts\"].placeMonsterPartsOnGrid(this, m);\r\n            }\r\n        }\r\n        this.addActorToScheduler(this.getArchitect());\r\n        // this.addActorToScheduler(Definitions.monsterFactory(this, Brew.Definitions.MonsterType.Architect))\r\n        this.displayAll();\r\n        this.display.drawHeader();\r\n        this.engine.unlock();\r\n    }\r\n    updateAllPathmaps() {\r\n        let level = this.getCurrentLevel();\r\n        let to_path_walk = _brew__WEBPACK_IMPORTED_MODULE_2__[\"Path\"].createGenericMapToPlayer(this, level, _brew__WEBPACK_IMPORTED_MODULE_2__[\"Enums\"].LevelNavigationType.Walk, true);\r\n        this.pathmaps.updateCache(_brew__WEBPACK_IMPORTED_MODULE_2__[\"Enums\"].PathmapCacheType.ToPlayer_Walk, to_path_walk);\r\n        this.pathmaps.updateCache(_brew__WEBPACK_IMPORTED_MODULE_2__[\"Enums\"].PathmapCacheType.FromPlayer_Walk, _brew__WEBPACK_IMPORTED_MODULE_2__[\"Path\"].createMapFromPlayer(this, level, to_path_walk, true));\r\n        // update flight maps if we need to\r\n        // let has_flyers : boolean = level.monsters.getAllThings().some((mob: Brew.GridThings.Monster) => {\r\n        //     return mob.hasFlag(Brew.Enums.Flag.Flying)\r\n        // })\r\n        // changing this to always true in case targeters need to use it to shoot over chasms\r\n        let needs_flying_map = true;\r\n        if (needs_flying_map) {\r\n            let to_path_fly = _brew__WEBPACK_IMPORTED_MODULE_2__[\"Path\"].createGenericMapToPlayer(this, level, _brew__WEBPACK_IMPORTED_MODULE_2__[\"Enums\"].LevelNavigationType.Fly, true);\r\n            this.pathmaps.updateCache(_brew__WEBPACK_IMPORTED_MODULE_2__[\"Enums\"].PathmapCacheType.ToPlayer_Fly, to_path_fly);\r\n            this.pathmaps.updateCache(_brew__WEBPACK_IMPORTED_MODULE_2__[\"Enums\"].PathmapCacheType.FromPlayer_Fly, _brew__WEBPACK_IMPORTED_MODULE_2__[\"Path\"].createMapFromPlayer(this, level, to_path_fly, true));\r\n        }\r\n    }\r\n    addActorToScheduler(mob) {\r\n        this.scheduler.add(mob, true);\r\n    }\r\n    removeActorFromScheduler(mob) {\r\n        this.scheduler.remove(mob);\r\n    }\r\n    inputFunctionWrapper(data, envelope) {\r\n        if (this.block_input == true) {\r\n            // console.warn(\"input blocked\")\r\n            ;\r\n        }\r\n        else {\r\n            this.input_fn(this, data, envelope);\r\n        }\r\n    }\r\n    eventFunctionWrapper(data, envelope) {\r\n        if (data.eventType != _brew__WEBPACK_IMPORTED_MODULE_2__[\"Enums\"].BrewEventType.Error) {\r\n            this.block_input = true;\r\n        }\r\n        this.event_fn(this, data, envelope);\r\n    }\r\n    handleDisplay(data, envelope) {\r\n        if (!(data)) {\r\n            // console.warn(\"passed null display data\", data)\r\n            return;\r\n        }\r\n        if (envelope.topic == \"display.all\") {\r\n            this.display.drawAll(data);\r\n        }\r\n        else if (envelope.topic == \"display.at\") {\r\n            this.display.drawAt(data);\r\n        }\r\n        else if (envelope.topic == \"display.list\") {\r\n            for (let i = 0; i < data.length; i++) {\r\n                this.display.drawAt(data[i]);\r\n            }\r\n        }\r\n        else {\r\n            console.error(\"invalid display data\", data);\r\n        }\r\n    }\r\n    handleEventEnd(data, envelope) {\r\n        this.lastEventIncludeErrors = data; // keep track of last events including errors \r\n        if (data.eventType != _brew__WEBPACK_IMPORTED_MODULE_2__[\"Enums\"].BrewEventType.Error) {\r\n            this.lastEvent = data; // keep track of the last non-error event\r\n        }\r\n        if (this.event_queue.length > 0) {\r\n            let nextEvent = this.event_queue.pop();\r\n            // propogate EndsTurn if this event is supposed to end the turn\r\n            if (data.endsTurn == true) {\r\n                // swap/propogate true endsTurn\r\n                data.endsTurn = false;\r\n                nextEvent.endsTurn = true;\r\n            }\r\n            this.channel_event.publish(\"event.start\", nextEvent);\r\n        }\r\n        else {\r\n            if (data.endsTurn) {\r\n                // console.log(\"event end: turn end\")\r\n                this.channel_turn.publish(\"turn.end\", { actor: data.actor });\r\n            }\r\n            else {\r\n                // if it doesn't end turn, allow the player to put in input again\r\n                if (data.actor.isType(_brew__WEBPACK_IMPORTED_MODULE_2__[\"Definitions\"].MonsterType.Hero)) {\r\n                    // console.log(\"input blocking OFF\")\r\n                    this.block_input = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    initEventListener(div_container) {\r\n        // add event listeners to page/canvas\r\n        div_container.ownerDocument.addEventListener(\"keydown\", (e) => {\r\n            if (_brew__WEBPACK_IMPORTED_MODULE_2__[\"KeyMap\"].MovementKeys.concat(_brew__WEBPACK_IMPORTED_MODULE_2__[\"KeyMap\"].Action).indexOf(e.keyCode) > -1) {\r\n                e.preventDefault();\r\n            }\r\n            this.channel_input.publish(\"input.keyboard\", {\r\n                source: _brew__WEBPACK_IMPORTED_MODULE_2__[\"Enums\"].BrewInputSource.Keyboard,\r\n                code: e.keyCode,\r\n                jsevent: e\r\n            });\r\n        });\r\n        div_container.addEventListener(\"mousedown\", (e) => {\r\n            this.channel_input.publish(\"input.mouse\", {\r\n                source: _brew__WEBPACK_IMPORTED_MODULE_2__[\"Enums\"].BrewInputSource.Mouse,\r\n                button: e.button,\r\n                jsevent: e\r\n            });\r\n        });\r\n        div_container.addEventListener(\"mousemove\", (e) => {\r\n            this.channel_input.publish(\"input.mouse\", {\r\n                source: _brew__WEBPACK_IMPORTED_MODULE_2__[\"Enums\"].BrewInputSource.Mouse,\r\n                button: e.button,\r\n                jsevent: e\r\n            });\r\n        });\r\n    }\r\n    getPlayer() {\r\n        return this.player;\r\n    }\r\n    getArchitect() {\r\n        return this.architect;\r\n    }\r\n    getCurrentLevel() {\r\n        return this.current_level;\r\n    }\r\n    setPlayer(new_player) {\r\n        this.player = new_player;\r\n    }\r\n    setCurrentLevel(new_level) {\r\n        this.current_level = new_level;\r\n    }\r\n    // postal feed handlers\r\n    handleTurnEnd(data, envelope) {\r\n        let mob = data.actor;\r\n        // console.log(`END TURN: ${mob.name}`)\r\n        // this.postturn_fn(this, mob)\r\n        if (mob.isType(_brew__WEBPACK_IMPORTED_MODULE_2__[\"Definitions\"].MonsterType.Hero)) {\r\n            // console.log(\"input blocking OFF\")\r\n            this.postplayer_fn(this, mob);\r\n        }\r\n        this.engine.unlock();\r\n    }\r\n    handleTurnStart(data, envelope) {\r\n        let mob = data.actor;\r\n        // console.log(`START TURN: ${mob.name}`)\r\n        this.current_turn_actor = mob;\r\n        this.engine.lock();\r\n        this.checkTimersForActor(mob);\r\n        // Movement.checkForAmbientEffects(this, mob)\r\n        if (mob.isType(_brew__WEBPACK_IMPORTED_MODULE_2__[\"Definitions\"].MonsterType.Hero)) {\r\n            // console.log(\"input blocking OFF\")\r\n            this.preplayer_fn(this, mob);\r\n            this.block_input = false;\r\n        }\r\n        else {\r\n            let ai_event;\r\n            ai_event = this.ai_fn(this, mob);\r\n            this.channel_event.publish(\"event.start\", ai_event);\r\n        }\r\n    }\r\n    //endEvent(data: Brew.Enums.IBrewEvent, nextEventData? : Brew.Enums.IBrewEvent) {\r\n    endEvent(data) {\r\n        this.channel_event.publish(\"event.end\", data);\r\n        //twp: need to handle inserted events first\r\n        // if (nextEventData) {\r\n        //     this.channel_event.publish(\"event.start\", nextEventData)\r\n        // }\r\n    }\r\n    insertEvent_Next(inserted_event) {\r\n        // inserts event after the next upcoming event (2nd from the end)\r\n        this.event_queue.splice(-2, 0, inserted_event);\r\n        return true;\r\n    }\r\n    insertEvent(inserted_event) {\r\n        // insert into a waiting queue to trigger before we go back to the pipeline\r\n        this.event_queue.unshift(inserted_event);\r\n        return true;\r\n    }\r\n    clearEventQueue() {\r\n        this.event_queue = [];\r\n    }\r\n    getLastEvent(includeErrors = false) {\r\n        if (includeErrors) {\r\n            return this.lastEventIncludeErrors;\r\n        }\r\n        else {\r\n            return this.lastEvent;\r\n        }\r\n    }\r\n    copyEventDataFromLastEvent(modified_event) {\r\n        let lastEvent = this.getLastEvent();\r\n        let ignoreList = [\"actor\", \"playerInitiated\", \"endsTurn\", \"eventType\"];\r\n        for (let key in lastEvent) {\r\n            if (lastEvent.hasOwnProperty(key)) {\r\n                if (ignoreList.indexOf(key) == -1) {\r\n                    var element = lastEvent[key];\r\n                    modified_event[key] = element;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // display shortcuts\r\n    displayAt(xy) {\r\n        if (!(xy)) {\r\n            console.warn(\"passed in null xy coords to displayAt\", xy);\r\n        }\r\n        this.channel_display.publish(\"display.at\", xy);\r\n    }\r\n    displayAll(display_options = {}) {\r\n        this.channel_display.publish(\"display.all\", display_options);\r\n    }\r\n    displayList(xy_list) {\r\n        this.channel_display.publish(\"display.list\", xy_list);\r\n    }\r\n    // turn Brew.Timers\r\n    checkTimersForActor(actor) {\r\n        let timer_list = this.timer_monitor.getAllTimersTriggeredFor(actor, this.turn_count);\r\n        if (timer_list.length > 0) {\r\n            for (let timer of timer_list) {\r\n                actor.removeFlag(timer.flag);\r\n                this.displayAt(actor.location);\r\n                this.timer_monitor.removeTimer(timer.actor, timer.flag); //todo: need centralized way of doing Brew.Timers\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction buildPlayer(gm, player_name = \"Hero\") {\r\n    let player = _brew__WEBPACK_IMPORTED_MODULE_2__[\"Definitions\"].monsterFactory(gm, _brew__WEBPACK_IMPORTED_MODULE_2__[\"Definitions\"].MonsterType.Hero);\r\n    player.name = player_name;\r\n    // player.code = Symbols.smiley_face\r\n    player.inventory = new _brew__WEBPACK_IMPORTED_MODULE_2__[\"Inventory\"](_brew__WEBPACK_IMPORTED_MODULE_2__[\"Config\"].max_items);\r\n    player.power_suite = new _brew__WEBPACK_IMPORTED_MODULE_2__[\"Powers\"].PowerSuite(_brew__WEBPACK_IMPORTED_MODULE_2__[\"Config\"].max_powers);\r\n    player.team = _brew__WEBPACK_IMPORTED_MODULE_2__[\"Enums\"].Team.Player;\r\n    player.setFacing(_brew__WEBPACK_IMPORTED_MODULE_2__[\"Directions\"].DOWN.clone());\r\n    player.building_type = _brew__WEBPACK_IMPORTED_MODULE_2__[\"Enums\"].ComponentPartsBuildingType.Tank;\r\n    let turretPower = _brew__WEBPACK_IMPORTED_MODULE_2__[\"Powers\"].createBasicPowerOfType(_brew__WEBPACK_IMPORTED_MODULE_2__[\"Enums\"].BrewPowerType.TurretCannon);\r\n    turretPower.facing_direction = _brew__WEBPACK_IMPORTED_MODULE_2__[\"Directions\"].DOWN.clone();\r\n    turretPower.firing_arc = _brew__WEBPACK_IMPORTED_MODULE_2__[\"Enums\"].FiringArc.QuarterArc;\r\n    turretPower.charge_stat.setTo(8);\r\n    let machineGun = _brew__WEBPACK_IMPORTED_MODULE_2__[\"Powers\"].createBasicPowerOfType(_brew__WEBPACK_IMPORTED_MODULE_2__[\"Enums\"].BrewPowerType.MachineGun);\r\n    machineGun.charge_stat.setTo(16);\r\n    player.power_suite.addPower(turretPower);\r\n    player.power_suite.addPower(machineGun);\r\n    // for (let i = 0; i < 8; i++) {\r\n    //     player.inventory.addItem(Brew.Definitions.itemFactory(Brew.Definitions.ItemType.Supplies))\r\n    // }\r\n    return player;\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/brew_engine/game_master.ts\n");

/***/ }),

/***/ "./src/brew_engine/input.ts":
/*!**********************************!*\
  !*** ./src/brew_engine/input.ts ***!
  \**********************************/
/*! exports provided: handleAllInput */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"handleAllInput\", function() { return handleAllInput; });\n/* harmony import */ var _brew__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../brew */ \"./src/brew.ts\");\n\r\nfunction inputError(errorMsg) {\r\n    return {\r\n        eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.Error,\r\n        actor: null,\r\n        playerInitiated: true,\r\n        endsTurn: false,\r\n        errorMsg: errorMsg\r\n    };\r\n}\r\n// called from postal.js channel\r\nfunction handleAllInput(gm, data, envelope) {\r\n    let myEvent;\r\n    // default main handler\r\n    if (gm.input_handler == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].InputHandler.Main) {\r\n        myEvent = mainInputHandler(gm, data, envelope);\r\n        // targeting handler\r\n    }\r\n    else if (gm.input_handler == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].InputHandler.Targeting) {\r\n        myEvent = targetingInputHandler(gm, data, envelope);\r\n        // generic menu handler\r\n    }\r\n    else if (gm.input_handler == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].InputHandler.GenericMenu) {\r\n        myEvent = genericMenuHandler(gm, data);\r\n    }\r\n    else if (gm.input_handler == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].InputHandler.WaitToDismiss) {\r\n        myEvent = waitToDismissHandler(gm, data);\r\n    }\r\n    else if (gm.input_handler == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].InputHandler.HeadsUpDisplay) {\r\n        myEvent = headsUpDisplayHandler(gm, data);\r\n    }\r\n    else if (gm.input_handler == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].InputHandler.HelpMenu) {\r\n        myEvent = helpMenuHandler(gm, data);\r\n        // } else if (gm.input_handler == Brew.Enums.InputHandler.WaitToRestart) {\r\n        //     myEvent = waitToRestartHandler(gm, data, envelope)\r\n    }\r\n    else if (gm.input_handler == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].InputHandler.ConfirmPaths) {\r\n        myEvent = confirmPathsHandler(gm, data, envelope);\r\n    }\r\n    else {\r\n        console.error(`unknown input handler ${gm.input_handler}`);\r\n    }\r\n    // post to events channel here ?\r\n    gm.channel_event.publish(\"event.start\", myEvent);\r\n}\r\n// function waitToRestartHandler(gm: Brew.GameMaster, data: Brew.Enums.IBrewInputData, envelope) : Brew.Enums.IBrewEvent {\r\n//     let keycode = data.code\r\n//     if (KeyMap.Action.indexOf(keycode) > -1) {\r\n//         let resetEvent : Brew.Enums.IBrewEvent = {\r\n//             eventType: Brew.Enums.BrewEventType.RestartGame,\r\n//             actor: gm.getPlayer(),\r\n//             playerInitiated: true,\r\n//             endsTurn: true\r\n//         }\r\n//         return resetEvent\r\n//     } else {\r\n//         return inputError(\"game over - press ACTION to restart\")\r\n//     }\r\n// }\r\nfunction waitToDismissHandler(gm, data) {\r\n    let keycode = data.code;\r\n    if ((_brew__WEBPACK_IMPORTED_MODULE_0__[\"KeyMap\"].Escape.indexOf(keycode) > -1) || (_brew__WEBPACK_IMPORTED_MODULE_0__[\"KeyMap\"].Action.indexOf(keycode) > -1)) {\r\n        return _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.GenericMenuOff, false);\r\n    }\r\n    else {\r\n        return inputError(\"waiting to dismiss first\");\r\n    }\r\n}\r\nfunction headsUpDisplayHandler(gm, brEvent) {\r\n    let keycode = brEvent.code;\r\n    let hudEvent;\r\n    let prevMenuEvent = gm.getLastEvent();\r\n    if ((_brew__WEBPACK_IMPORTED_MODULE_0__[\"KeyMap\"].Escape.indexOf(keycode) > -1) || (_brew__WEBPACK_IMPORTED_MODULE_0__[\"KeyMap\"].Action.indexOf(keycode) > -1) || (_brew__WEBPACK_IMPORTED_MODULE_0__[\"KeyMap\"].HeadsUp.indexOf(keycode) > -1)) {\r\n        return _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.GenericMenuOff, false);\r\n    }\r\n    else if (_brew__WEBPACK_IMPORTED_MODULE_0__[\"KeyMap\"].MovementKeys.indexOf(keycode) > -1) {\r\n        let cycle_dir = getCycleIncrementValueFromKeypress(keycode);\r\n        let new_page_index = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].mod(prevMenuEvent.headsUpData.selected_index + cycle_dir, prevMenuEvent.headsUpData.headsUpDisplayNotePages.length);\r\n        console.log(new_page_index, prevMenuEvent.headsUpData.headsUpDisplayNotePages.length);\r\n        hudEvent = {\r\n            eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.HeadsUpDisplayOn,\r\n            actor: gm.getPlayer(),\r\n            playerInitiated: true,\r\n            endsTurn: false,\r\n            headsUpData: {\r\n                headsUpDisplayNotePages: prevMenuEvent.headsUpData.headsUpDisplayNotePages,\r\n                selected_index: new_page_index,\r\n            }\r\n        };\r\n        return hudEvent;\r\n    }\r\n    else {\r\n        return inputError(\"generic menu - unknown keypress\");\r\n    }\r\n}\r\nfunction confirmPathsHandler(gm, data, envelope) {\r\n    let keycode = data.code;\r\n    let confirmPathsEvent;\r\n    // make sure path was actually valid\r\n    let lastEvent = gm.getLastEvent();\r\n    let valid_path = lastEvent.confirmPathsData.valid_path;\r\n    if ((_brew__WEBPACK_IMPORTED_MODULE_0__[\"KeyMap\"].Action.indexOf(keycode) > -1) && (valid_path)) {\r\n        confirmPathsEvent = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.ConfirmPathsFinalize, false);\r\n    }\r\n    else {\r\n        confirmPathsEvent = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.ConfirmPathsCancel, false);\r\n    }\r\n    return confirmPathsEvent;\r\n}\r\nfunction getCycleIncrementValueFromKeypress(keycode) {\r\n    // return 1 or -1 depending on which keys were pressed, for menu/toggling\r\n    let cycle_dir;\r\n    let offset_xy = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].getDirectionFromKeycode(keycode);\r\n    if ((offset_xy.x < 0) || (offset_xy.y < 0)) {\r\n        cycle_dir = -1;\r\n    }\r\n    else if ((offset_xy.x > 0) || (offset_xy.y > 0)) {\r\n        cycle_dir = 1;\r\n    }\r\n    else {\r\n        throw new Error(\"Some kind of weird direction thingy happened\");\r\n    }\r\n    return cycle_dir;\r\n}\r\nfunction genericMenuHandler(gm, brEvent) {\r\n    let keycode = brEvent.code;\r\n    let genericMenuEvent;\r\n    let prevMenuEvent = gm.getLastEvent();\r\n    let allowCancel = prevMenuEvent.genericMenuData.allowCancel;\r\n    if ((_brew__WEBPACK_IMPORTED_MODULE_0__[\"KeyMap\"].Escape.indexOf(keycode) > -1) && allowCancel) {\r\n        genericMenuEvent = {\r\n            eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.GenericMenuOff,\r\n            actor: gm.getPlayer(),\r\n            playerInitiated: true,\r\n            endsTurn: false\r\n        };\r\n        return genericMenuEvent;\r\n    }\r\n    else if (_brew__WEBPACK_IMPORTED_MODULE_0__[\"KeyMap\"].MovementKeys.indexOf(keycode) > -1) {\r\n        let cycle_dir = getCycleIncrementValueFromKeypress(keycode);\r\n        genericMenuEvent = {\r\n            eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.GenericMenuMove,\r\n            actor: gm.getPlayer(),\r\n            playerInitiated: true,\r\n            endsTurn: false,\r\n            genericMenuData: {\r\n                menuTitle: prevMenuEvent.genericMenuData.menuTitle,\r\n                menuDescription: prevMenuEvent.genericMenuData.menuDescription,\r\n                allowCancel: allowCancel,\r\n                direction: cycle_dir\r\n            }\r\n        };\r\n        return genericMenuEvent;\r\n    }\r\n    else if (_brew__WEBPACK_IMPORTED_MODULE_0__[\"KeyMap\"].Action.indexOf(keycode) > -1) {\r\n        genericMenuEvent = {\r\n            eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.GenericMenuSelect,\r\n            actor: gm.getPlayer(),\r\n            playerInitiated: true,\r\n            endsTurn: false\r\n        };\r\n        return genericMenuEvent;\r\n    }\r\n    else {\r\n        return inputError(\"generic menu - unknown keypress\");\r\n    }\r\n}\r\nfunction targetingInputHandler(gm, data, envelope) {\r\n    let tgtEvent;\r\n    let lastEvent = gm.getLastEvent();\r\n    if (data.source == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewInputSource.Keyboard) {\r\n        let keycode = data.code;\r\n        if (_brew__WEBPACK_IMPORTED_MODULE_0__[\"KeyMap\"].MovementKeys.indexOf(keycode) > -1) {\r\n            // move target\r\n            let offset_xy = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].getDirectionFromKeycode(keycode);\r\n            let current_target_xy = lastEvent.targetingData.to_xy.clone();\r\n            let new_target_xy = current_target_xy.add(offset_xy);\r\n            if (!(gm.getCurrentLevel().isValid(new_target_xy))) {\r\n                return inputError(\"can't move target over there\");\r\n            }\r\n            // new move event\r\n            tgtEvent = {\r\n                eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.TargetingMove,\r\n                actor: gm.getPlayer(),\r\n                playerInitiated: true,\r\n                endsTurn: false,\r\n                offsetData: {\r\n                    offset_xy: offset_xy\r\n                }\r\n            };\r\n            // copy targeting data over from last event\r\n            tgtEvent.targetingData = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].clone(lastEvent.targetingData);\r\n            tgtEvent.targetingData.to_xy = lastEvent.targetingData.to_xy.clone();\r\n            tgtEvent.targetingData.from_xy = lastEvent.targetingData.from_xy.clone();\r\n        }\r\n        else if ((_brew__WEBPACK_IMPORTED_MODULE_0__[\"KeyMap\"].Action.indexOf(keycode) > -1) || (_brew__WEBPACK_IMPORTED_MODULE_0__[\"KeyMap\"].Examine.indexOf(keycode) > -1) || (_brew__WEBPACK_IMPORTED_MODULE_0__[\"KeyMap\"].HotKeys.indexOf(keycode) > -1)) {\r\n            // todo: make this trigger the actual thing we are targeting for\r\n            // finish targeting\r\n            tgtEvent = {\r\n                eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.TargetingFinish,\r\n                actor: gm.getPlayer(),\r\n                playerInitiated: true,\r\n                endsTurn: false\r\n            };\r\n            // copy targeting data over from last event\r\n            tgtEvent.targetingData = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].clone(gm.getLastEvent().targetingData);\r\n        }\r\n        else {\r\n            // cancel it\r\n            tgtEvent = {\r\n                eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.TargetingCancel,\r\n                actor: gm.getPlayer(),\r\n                playerInitiated: true,\r\n                endsTurn: false\r\n            };\r\n        }\r\n    }\r\n    else if (data.source == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewInputSource.Mouse) {\r\n        let screen_xy = getScreenCoordsFromMouseEvent(gm, data);\r\n        if (!(screen_xy)) {\r\n            return inputError(\"click outside of screen\");\r\n        }\r\n        let map_xy = gm.display.convertScreenToMap(screen_xy);\r\n        if (data.jsevent.type == \"mousedown\") {\r\n            // finish targeting\r\n            tgtEvent = {\r\n                eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.TargetingFinish,\r\n                actor: gm.getPlayer(),\r\n                playerInitiated: true,\r\n                endsTurn: false\r\n            };\r\n            // copy targeting data over from last event\r\n            tgtEvent.targetingData = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].clone(gm.getLastEvent().targetingData);\r\n        }\r\n        else if (data.jsevent.type == \"mousemove\") {\r\n            let current_target_xy = lastEvent.targetingData.to_xy.clone();\r\n            let new_target_xy = map_xy;\r\n            // new move event\r\n            tgtEvent = {\r\n                eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.TargetingMove,\r\n                actor: gm.getPlayer(),\r\n                playerInitiated: true,\r\n                endsTurn: false,\r\n                offsetData: {\r\n                    offset_xy: map_xy.subtract(current_target_xy)\r\n                }\r\n            };\r\n            // copy targeting data over from last event\r\n            tgtEvent.targetingData = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].clone(lastEvent.targetingData);\r\n            tgtEvent.targetingData.to_xy = lastEvent.targetingData.to_xy.clone();\r\n            tgtEvent.targetingData.from_xy = lastEvent.targetingData.from_xy.clone();\r\n        }\r\n    }\r\n    return tgtEvent;\r\n}\r\nfunction mainInputHandler(gm, data, envelope) {\r\n    let playerEvent;\r\n    if (data.source == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewInputSource.Keyboard) {\r\n        playerEvent = translateKeyboardInputIntoEvent(gm, data, envelope);\r\n    }\r\n    else if (data.source == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewInputSource.Mouse) {\r\n        playerEvent = translateMouseInputIntoEvent(gm, data, envelope);\r\n    }\r\n    else {\r\n        console.error(\"unexpected input type\");\r\n    }\r\n    return playerEvent;\r\n}\r\nfunction translateKeyboardInputIntoEvent(gm, data, envelope) {\r\n    let ev;\r\n    ev = {\r\n        eventType: null,\r\n        actor: gm.getPlayer(),\r\n        playerInitiated: true\r\n    };\r\n    let keycode = data.code;\r\n    if (_brew__WEBPACK_IMPORTED_MODULE_0__[\"KeyMap\"].DirectionalMovementKeys.indexOf(keycode) > -1) {\r\n        return inputDirectionalMovement(gm, keycode);\r\n    }\r\n    else if (_brew__WEBPACK_IMPORTED_MODULE_0__[\"KeyMap\"].RotationalMovementKeys.indexOf(keycode) > -1) {\r\n        return inputRotationalMovement(gm, keycode);\r\n    }\r\n    else if (_brew__WEBPACK_IMPORTED_MODULE_0__[\"KeyMap\"].RotationalWeaponKeys.indexOf(keycode) > -1) {\r\n        return inputRotationalWeapon(gm, keycode);\r\n    }\r\n    else if (_brew__WEBPACK_IMPORTED_MODULE_0__[\"KeyMap\"].Help.indexOf(keycode) > -1) {\r\n        return inputHelp(gm);\r\n    }\r\n    else if (_brew__WEBPACK_IMPORTED_MODULE_0__[\"KeyMap\"].Action.indexOf(keycode) > -1) {\r\n        return inputAction(gm, keycode);\r\n    }\r\n    else if (_brew__WEBPACK_IMPORTED_MODULE_0__[\"KeyMap\"].Examine.indexOf(keycode) > -1) {\r\n        return inputExamine(gm, keycode);\r\n    }\r\n    else if (_brew__WEBPACK_IMPORTED_MODULE_0__[\"KeyMap\"].HeadsUp.indexOf(keycode) > -1) {\r\n        return inputHeadsUp(gm, keycode);\r\n    }\r\n    else if (_brew__WEBPACK_IMPORTED_MODULE_0__[\"KeyMap\"].DebugFOV.indexOf(keycode) > -1) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Debug\"].toggleFOV(gm);\r\n        // } else if (Brew.KeyMap.DebugPaths.indexOf(keycode) > -1) {\r\n        //     Brew.Debug.togglePathmap(gm, null)\r\n    }\r\n    else if (_brew__WEBPACK_IMPORTED_MODULE_0__[\"KeyMap\"].Inventory.indexOf(keycode) > -1) {\r\n        return inputInventory(gm, keycode);\r\n    }\r\n    else if (_brew__WEBPACK_IMPORTED_MODULE_0__[\"KeyMap\"].Menu.indexOf(keycode) > -1) {\r\n        return inputPowerMenu(gm, keycode);\r\n    }\r\n    else if (_brew__WEBPACK_IMPORTED_MODULE_0__[\"KeyMap\"].HotKeys.indexOf(keycode) > -1) {\r\n        return inputHotkey(gm, keycode, keycode - 49);\r\n    }\r\n    else if (_brew__WEBPACK_IMPORTED_MODULE_0__[\"KeyMap\"].DebugMenu.indexOf(keycode) > -1) {\r\n        return inputDebugMenu(gm, keycode);\r\n    }\r\n    else if (_brew__WEBPACK_IMPORTED_MODULE_0__[\"KeyMap\"].BossMode.indexOf(keycode) > -1) {\r\n        return inputBossMode(gm, keycode);\r\n    }\r\n    else if (_brew__WEBPACK_IMPORTED_MODULE_0__[\"KeyMap\"].ScreenSizeControl.indexOf(keycode) > -1) {\r\n        return inputScreenResize(gm, keycode);\r\n    }\r\n    return inputError(\"\");\r\n}\r\nfunction inputRotationalMovement(gm, keycode) {\r\n    let player = gm.getPlayer();\r\n    let new_facing_dir_xy = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Tank\"].getRotatedFacingDirectionFromKeycode(player.facing_direction, keycode);\r\n    // player.facing_direction = new_facing_dir_xy\r\n    let rotateEvent = {\r\n        eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.RotateBody,\r\n        actor: gm.getPlayer(),\r\n        playerInitiated: true,\r\n        endsTurn: true,\r\n        rotateData: {\r\n            old_facing_xy: player.facing_direction.clone(),\r\n            new_facing_xy: new_facing_dir_xy\r\n        }\r\n    };\r\n    return rotateEvent;\r\n}\r\nfunction inputRotationalWeapon(gm, keycode) {\r\n    let player = gm.getPlayer();\r\n    let turretPower = player.getPowers().getPowerOfType(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewPowerType.TurretCannon);\r\n    let new_facing_dir_xy = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Tank\"].getRotatedFacingDirectionFromKeycode(turretPower.facing_direction, keycode);\r\n    // player.facing_direction = new_facing_dir_xy\r\n    let moveEvent = {\r\n        eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.RotateWeapon,\r\n        actor: gm.getPlayer(),\r\n        playerInitiated: true,\r\n        endsTurn: true,\r\n        rotateData: {\r\n            old_facing_xy: player.facing_direction.clone(),\r\n            new_facing_xy: new_facing_dir_xy,\r\n            weaponPower: turretPower\r\n        }\r\n    };\r\n    return moveEvent;\r\n}\r\nfunction inputDirectionalMovement(gm, keycode) {\r\n    let level = gm.getCurrentLevel();\r\n    // determine offset\r\n    // let offset_xy : Brew.Coordinate = Brew.Utils.getDirectionFromKeycode(keycode)\r\n    let offset_xy = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Tank\"].getDirectionFromKeycode(gm.getPlayer(), keycode);\r\n    if (!(offset_xy)) {\r\n        return inputError(\"invalid movement key - no direction\");\r\n    }\r\n    // check whats over there\r\n    let new_xy = gm.getPlayer().location.add(offset_xy);\r\n    if (!(level.isValid(new_xy))) {\r\n        return inputError(\"You can't go there\");\r\n    }\r\n    // let t: Brew.Terrain = level.terrain.getAt(new_xy)\r\n    if (!(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Movement\"].canMoveToLocation(gm, gm.getPlayer(), new_xy))) {\r\n        return inputError(\"You can't go to there\");\r\n    }\r\n    let old_xy = gm.getPlayer().location.clone();\r\n    let m = level.monsters.getAt(new_xy);\r\n    if (m) {\r\n        return playerMeleeAttack(gm, m);\r\n    }\r\n    // move event\r\n    let moveEvent = {\r\n        eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.Move,\r\n        actor: gm.getPlayer(),\r\n        playerInitiated: true,\r\n        endsTurn: true,\r\n        moveData: {\r\n            from_xy: old_xy,\r\n            to_xy: new_xy\r\n        }\r\n    };\r\n    return moveEvent;\r\n}\r\nfunction playerMeleeAttack(gm, target) {\r\n    let player = gm.getPlayer();\r\n    let level = gm.getCurrentLevel();\r\n    let player_damage = 1;\r\n    let attack_type = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.Attack;\r\n    // check for wall smashing\r\n    // let can_wallsmash = Brew.Combat.checkForWallSmash(gm, player, target)\r\n    // if (can_wallsmash) {\r\n    //     attack_type = Brew.Enums.BrewEventType.SmashAttack\r\n    //     player_damage = 2\r\n    // }\r\n    let attackEvent = {\r\n        eventType: attack_type,\r\n        actor: gm.getPlayer(),\r\n        playerInitiated: true,\r\n        endsTurn: true,\r\n        attackData: {\r\n            from_xy: gm.getPlayer().location,\r\n            to_xy: target.location,\r\n            target: target,\r\n            isMelee: true,\r\n            damage: player_damage\r\n        }\r\n    };\r\n    attackEvent = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Combat\"].possiblyConvertAttackToSmashAttack(gm, attackEvent);\r\n    return attackEvent;\r\n}\r\nfunction inputAction(gm, keycode) {\r\n    // pickup / rest\r\n    // lets see whats here\r\n    let level = gm.getCurrentLevel();\r\n    let player = gm.getPlayer();\r\n    let item_here = level.items.getAt(player.location);\r\n    // if the item here is a power system then it is a special case\r\n    let system_item_here = null;\r\n    if ((item_here) && (item_here.isType(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemType.PowerSystem))) {\r\n        system_item_here = item_here;\r\n        item_here = null;\r\n    }\r\n    let portal_here = level.portals.getAt(player.location);\r\n    let monster_nearby;\r\n    // find out if there is a monster nearby\r\n    monster_nearby = false;\r\n    player.knowledge.getAllThings().forEach((thingy, index, array) => {\r\n        if ((thingy instanceof _brew__WEBPACK_IMPORTED_MODULE_0__[\"GridThings\"].Monster) && (!(thingy.isSameThing(player))) && (_brew__WEBPACK_IMPORTED_MODULE_0__[\"Intel\"].isEnemy(player, thingy))) {\r\n            monster_nearby = true;\r\n        }\r\n    });\r\n    if (monster_nearby) {\r\n        gm.display.drawPopupMessage(\"Waiting - enemy in range\", player.location, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].violet);\r\n        return _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.Wait, true);\r\n    }\r\n    // build up a list of options and then show a menu only if we need to\r\n    let menu_entries = [];\r\n    if (portal_here) {\r\n        // menu_entries.push({\r\n        //     entryType: Brew.Enums.GenericMenuEntryType.EventBased,\r\n        //     entryEvent: Brew.Events.addDataToEvent(Brew.Events.createGenericEventOfType(gm, Brew.Enums.BrewEventType.UsePortal), {portalData: {portal_used: portal_here}})\r\n        // })\r\n        return _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].addDataToEvent(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.UsePortal), { portalData: { portal_used: portal_here } });\r\n    }\r\n    let can_pickup = player.inventory.hasCapacity();\r\n    if (item_here && (!(can_pickup))) {\r\n        gm.display.drawPopupMessage(\"Inventory is full!\", player.location, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].violet);\r\n    }\r\n    if (item_here && can_pickup && item_here.canPickup) {\r\n        // menu_entries.push({\r\n        //     entryType: Brew.Enums.GenericMenuEntryType.EventBased,\r\n        //     entryEvent: {\r\n        //         eventType: Brew.Enums.BrewEventType.Pickup,\r\n        //         actor: player,\r\n        //         playerInitiated: true,\r\n        //         endsTurn: true,\r\n        //             itemData: {\r\n        //                 item: item_here\r\n        //         }\r\n        //     }\r\n        // })\r\n        return {\r\n            eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.Pickup,\r\n            actor: player,\r\n            playerInitiated: true,\r\n            endsTurn: true,\r\n            itemData: {\r\n                item: item_here\r\n            }\r\n        };\r\n    }\r\n    // if (item_here && item_here.canHeave) {\r\n    //     let heaveEvent = Brew.Events.createGenericEventOfType(gm, Brew.Enums.BrewEventType.TargetingOn, false)\r\n    //     heaveEvent.itemData = {\r\n    //         item: item_here\r\n    //     }\r\n    //     heaveEvent.startTargetingData = {\r\n    //         from_xy: player.location,\r\n    //         to_xy: player.location,\r\n    //         targetingAction: Brew.Enums.BrewTargetingAction.HeaveItem\r\n    //     }\r\n    //     menu_entries.push({\r\n    //         entryName: \"Heave\",\r\n    //         entryDescription: \"Dramatically heave this wreckage into another target\",\r\n    //         entryType: Brew.Enums.GenericMenuEntryType.EventBased,\r\n    //         entryEvent: heaveEvent\r\n    //     })\r\n    // }\r\n    // // handle powers/systems\r\n    // if (system_item_here) {\r\n    //     menu_entries.push({\r\n    //         entryType: Brew.Enums.GenericMenuEntryType.EventBased,\r\n    //         entryName: \"Install this Power\",\r\n    //         entryDescription: \"Brings up the power installation menu - will prompt you to swap out an existing power.\",\r\n    //         entryEvent: {\r\n    //             eventType: Brew.Enums.BrewEventType.PowerInstallPromptOn,\r\n    //             actor: player,\r\n    //             playerInitiated: true,\r\n    //             endsTurn: false,\r\n    //             powerData: {\r\n    //                 power: system_item_here.power\r\n    //             }\r\n    //         }\r\n    //     })\r\n    // }\r\n    return _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.Wait, true);\r\n    // put together a menu if we need to, or just generate the most obvious event action\r\n    // let finalEvent : Brew.Enums.IBrewEvent\r\n    // let waitEvent = Brew.Events.createGenericEventOfType(gm, Brew.Enums.BrewEventType.Wait, true)\r\n    // // console.log(\"monster nearby?\", monster_nearby)\r\n    // if (menu_entries.length == 0) {\r\n    //     finalEvent = waitEvent\r\n    // } else if ((menu_entries.length == 1) && (!(monster_nearby))) {    \r\n    //     finalEvent = menu_entries[0].entryEvent\r\n    // } else {\r\n    //     let menuEvent = Brew.Events.createGenericEventOfType(gm, Brew.Enums.BrewEventType.GenericMenuOn)\r\n    //     menu_entries.push({\r\n    //         entryType: Brew.Enums.GenericMenuEntryType.EventBased,\r\n    //         entryDescription: \"Rest (ends your turn)\",\r\n    //         entryEvent: waitEvent\r\n    //     })\r\n    //     menu_entries.unshift({\r\n    //         entryType: Brew.Enums.GenericMenuEntryType.Cancel,\r\n    //         entryEvent: Brew.Events.createGenericEventOfType(gm, Brew.Enums.BrewEventType.GenericMenuOff)\r\n    //     })\r\n    //     menuEvent.genericMenuData = {\r\n    //         menuTitle: \"Ambiguous Input\",\r\n    //         menuDescription: \"There are multiple actions you may be trying to take and there is an enemy near by, confirm your action.\",\r\n    //         allowCancel: true,\r\n    //         menuEntriesList: menu_entries\r\n    //     }\r\n    //     finalEvent = menuEvent\r\n    // }\r\n    // return finalEvent\r\n}\r\nfunction inputExamine(gm, keycode) {\r\n    let examineEvent = {\r\n        eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.TargetingOn,\r\n        actor: gm.getPlayer(),\r\n        playerInitiated: true,\r\n        endsTurn: false,\r\n        startTargetingData: {\r\n            from_xy: gm.getPlayer().location,\r\n            to_xy: gm.getPlayer().location,\r\n            targetingAction: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewTargetingAction.Examine\r\n        }\r\n    };\r\n    return examineEvent;\r\n}\r\nfunction inputHeadsUp(gm, keycode) {\r\n    let notes = _brew__WEBPACK_IMPORTED_MODULE_0__[\"HUD\"].getCurrentNotes(gm);\r\n    let note_pages = _brew__WEBPACK_IMPORTED_MODULE_0__[\"HUD\"].getHUDPages(gm, notes);\r\n    let hudEvent = {\r\n        eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.HeadsUpDisplayOn,\r\n        actor: gm.getPlayer(),\r\n        playerInitiated: true,\r\n        endsTurn: false,\r\n        headsUpData: {\r\n            selected_index: 0,\r\n            headsUpDisplayNotePages: note_pages\r\n        }\r\n    };\r\n    return hudEvent;\r\n}\r\nfunction inputHotkey(gm, keycode, hotkey) {\r\n    let player = gm.getPlayer();\r\n    let validPower = player.getPowers().getPowerByIndex(hotkey);\r\n    if (!(validPower)) {\r\n        return inputError(\"hotkey not assigned to a valid power\");\r\n    }\r\n    // if its empty and not already activated, no dice\r\n    if (validPower.charge_stat.isEmpty() && (!(validPower.activated))) {\r\n        return inputError(\"Not enough charges on that power\");\r\n    }\r\n    let powerEvent = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Powers\"].triggerPower(gm, player, validPower);\r\n    return powerEvent;\r\n}\r\nfunction inputInventory(gm, keycode) {\r\n    let invEvent = {\r\n        eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.InventoryOn,\r\n        actor: gm.getPlayer(),\r\n        playerInitiated: true,\r\n        endsTurn: false,\r\n        inventoryData: {\r\n            inventory: gm.getPlayer().inventory\r\n        }\r\n    };\r\n    return invEvent;\r\n}\r\nfunction inputPowerMenu(gm, keycode) {\r\n    let player = gm.getPlayer();\r\n    let power_entries = [];\r\n    let powers = player.getPowers();\r\n    power_entries = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Menus\"].getMenuData_Entries_for_Powers(gm, player, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.PowerMenuOn, false);\r\n    let menuEvent = {\r\n        eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.GenericMenuOn,\r\n        actor: gm.getPlayer(),\r\n        playerInitiated: true,\r\n        endsTurn: false,\r\n        genericMenuData: {\r\n            menuTitle: \"Active Powers\",\r\n            allowCancel: true,\r\n            menuEntriesList: power_entries\r\n        },\r\n    };\r\n    return menuEvent;\r\n}\r\nfunction inputDebugMenu(gm, keycode) {\r\n    let player = gm.getPlayer();\r\n    let menu_entries = [];\r\n    let powers = player.getPowers();\r\n    menu_entries.push({\r\n        entryName: \"Create Mob\",\r\n        entryType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].GenericMenuEntryType.EventBased,\r\n        entryEvent: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.DebugCreateMobMenuOn, false)\r\n    });\r\n    menu_entries.push({\r\n        entryName: \"Create Feature\",\r\n        entryType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].GenericMenuEntryType.EventBased,\r\n        entryEvent: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.DebugCreateFeatureMenuOn, false)\r\n    });\r\n    menu_entries.push({\r\n        entryName: \"Create Terrain\",\r\n        entryType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].GenericMenuEntryType.EventBased,\r\n        entryEvent: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.DebugCreateTerrainMenuOn, false)\r\n    });\r\n    let menuEvent = {\r\n        eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.GenericMenuOn,\r\n        actor: gm.getPlayer(),\r\n        playerInitiated: true,\r\n        endsTurn: false,\r\n        genericMenuData: {\r\n            menuTitle: \"Debug\",\r\n            allowCancel: true,\r\n            menuEntriesList: menu_entries\r\n        }\r\n    };\r\n    return menuEvent;\r\n}\r\nfunction getScreenCoordsFromMouseEvent(gm, data) {\r\n    // use ROT to translate on screen coords\r\n    let rot_coords;\r\n    rot_coords = gm.display.getDisplay(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].DisplayNames.Game).eventToPosition(data.jsevent);\r\n    if (rot_coords[0] == -1) {\r\n        return null;\r\n    }\r\n    let screen_xy = new _brew__WEBPACK_IMPORTED_MODULE_0__[\"Coordinate\"](rot_coords[0], rot_coords[1]);\r\n    return screen_xy;\r\n}\r\nfunction translateMouseInputIntoEvent(gm, data, envelope) {\r\n    let screen_xy = getScreenCoordsFromMouseEvent(gm, data);\r\n    if (!(screen_xy)) {\r\n        return inputError(\"click outside of screen\");\r\n    }\r\n    let map_xy = gm.display.convertScreenToMap(screen_xy);\r\n    if (data.jsevent.type != \"mousedown\") {\r\n        return inputHover(gm, map_xy);\r\n    }\r\n    if (data.button == 0) {\r\n        // regular click\r\n        // return inputClick(gm, map_xy)\r\n        return inputError(\"temporarily disabled clicking\");\r\n    }\r\n    else {\r\n        // return inputAltClick(gm, data, map_xy)\r\n        return inputError(\"no alt clicking allowed\");\r\n    }\r\n}\r\nfunction inputHover(gm, map_xy) {\r\n    let infoEvent = {\r\n        eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.Info,\r\n        actor: gm.getPlayer(),\r\n        playerInitiated: true,\r\n        endsTurn: false,\r\n        moveData: {\r\n            from_xy: map_xy,\r\n            to_xy: map_xy\r\n        }\r\n    };\r\n    return infoEvent;\r\n}\r\nfunction inputClick(gm, map_xy) {\r\n    let specialEvent = {\r\n        eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.Special,\r\n        actor: gm.getPlayer(),\r\n        playerInitiated: true,\r\n        endsTurn: true,\r\n        moveData: {\r\n            from_xy: null,\r\n            to_xy: map_xy\r\n        }\r\n    };\r\n    return specialEvent;\r\n}\r\nfunction inputBossMode(gm, keycode) {\r\n    _brew__WEBPACK_IMPORTED_MODULE_0__[\"Debug\"].toggleBackgroundCover(gm);\r\n    return inputError(\"ok\");\r\n}\r\nfunction inputScreenResize(gm, keycode) {\r\n    let font_size = gm.display.getDisplay(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].DisplayNames.Game).getOptions().fontSize;\r\n    let new_font_size;\r\n    if (_brew__WEBPACK_IMPORTED_MODULE_0__[\"KeyMap\"].ScreenEnlarge.indexOf(keycode) > -1) {\r\n        new_font_size = font_size + 2;\r\n    }\r\n    else {\r\n        new_font_size = font_size - 2;\r\n    }\r\n    for (let disp of [_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].DisplayNames.Game, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].DisplayNames.HUD, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].DisplayNames.Footer, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].DisplayNames.Header]) {\r\n        gm.display.getDisplay(disp).setOptions({ fontSize: new_font_size });\r\n    }\r\n    gm.display.drawAll({});\r\n    return inputError(\"ok\");\r\n}\r\nfunction inputHelp(gm) {\r\n    let helpEvent = {\r\n        eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.HelpOn,\r\n        actor: gm.getPlayer(),\r\n        playerInitiated: true,\r\n        endsTurn: false,\r\n        helpData: {\r\n            selected_index: 0\r\n        }\r\n    };\r\n    return helpEvent;\r\n}\r\nfunction helpMenuHandler(gm, brEvent) {\r\n    let keycode = brEvent.code;\r\n    let helpEvent;\r\n    let prevMenuEvent = gm.getLastEvent();\r\n    if ((_brew__WEBPACK_IMPORTED_MODULE_0__[\"KeyMap\"].Escape.indexOf(keycode) > -1) || (_brew__WEBPACK_IMPORTED_MODULE_0__[\"KeyMap\"].Action.indexOf(keycode) > -1) || (_brew__WEBPACK_IMPORTED_MODULE_0__[\"KeyMap\"].Help.indexOf(keycode) > -1)) {\r\n        return _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.GenericMenuOff, false);\r\n    }\r\n    else if (_brew__WEBPACK_IMPORTED_MODULE_0__[\"KeyMap\"].MovementKeys.indexOf(keycode) > -1) {\r\n        let cycle_dir = getCycleIncrementValueFromKeypress(keycode);\r\n        let new_page_index = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].mod(prevMenuEvent.helpData.selected_index + cycle_dir, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Tank\"].helpMessages.length);\r\n        // console.log(new_page_index, prevMenuEvent.headsUpData.headsUpDisplayNotePages.length)\r\n        helpEvent = {\r\n            eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.HelpOn,\r\n            actor: gm.getPlayer(),\r\n            playerInitiated: true,\r\n            endsTurn: false,\r\n            helpData: {\r\n                // headsUpDisplayNotePages: prevMenuEvent.headsUpData.headsUpDisplayNotePages,\r\n                selected_index: new_page_index,\r\n            }\r\n        };\r\n        return helpEvent;\r\n    }\r\n    else {\r\n        return inputError(\"help menu - unknown keypress\");\r\n    }\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/brew_engine/input.ts\n");

/***/ }),

/***/ "./src/brew_engine/intel.ts":
/*!**********************************!*\
  !*** ./src/brew_engine/intel.ts ***!
  \**********************************/
/*! exports provided: mainAiHandler, getPathFromAStar, runBeforePlayerTurn, runAfterPlayerTurn, isPlayer, updateFov, updateMemoryAt, isEnemy, getMonstersKnownBy, getItemsKnownBy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mainAiHandler\", function() { return mainAiHandler; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getPathFromAStar\", function() { return getPathFromAStar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"runBeforePlayerTurn\", function() { return runBeforePlayerTurn; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"runAfterPlayerTurn\", function() { return runAfterPlayerTurn; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isPlayer\", function() { return isPlayer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"updateFov\", function() { return updateFov; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"updateMemoryAt\", function() { return updateMemoryAt; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isEnemy\", function() { return isEnemy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getMonstersKnownBy\", function() { return getMonstersKnownBy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getItemsKnownBy\", function() { return getItemsKnownBy; });\n/* harmony import */ var rot_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rot-js */ \"./node_modules/rot-js/lib/rot.js\");\n/* harmony import */ var rot_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(rot_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _brew__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../brew */ \"./src/brew.ts\");\n\r\n\r\nfunction alliedMonsterHandler(gm, actor) {\r\n    let allyEvent;\r\n    let target_list = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Targeting\"].getClosestTargets(gm, actor).filter((m, index, array) => {\r\n        return m.team == _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].Team.Enemy;\r\n    });\r\n    if (target_list.length == 0) {\r\n        // no targets, do we know where the player is?\r\n        if (!(actor.hasKnowledgeOf(gm.getPlayer()))) {\r\n            let movingNotWaiting = false;\r\n            // do we have a last known location for the player?\r\n            if (actor.destination_xy) {\r\n                let move_xy = getNextStepFromAStar(gm, actor, actor.destination_xy);\r\n                if (move_xy) {\r\n                    movingNotWaiting = true;\r\n                    allyEvent = {\r\n                        eventType: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].BrewEventType.Move,\r\n                        actor: actor,\r\n                        endsTurn: true,\r\n                        playerInitiated: false,\r\n                        moveData: {\r\n                            from_xy: actor.location.clone(),\r\n                            to_xy: move_xy.clone()\r\n                        }\r\n                    };\r\n                }\r\n            }\r\n            if (!(movingNotWaiting)) {\r\n                // if not, wait\r\n                allyEvent = {\r\n                    eventType: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].BrewEventType.Wait,\r\n                    actor: actor,\r\n                    endsTurn: true,\r\n                    playerInitiated: false\r\n                };\r\n            }\r\n        }\r\n        else {\r\n            // got the player, hover around\r\n            let dist_from_player = Math.floor(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Utils\"].dist2d(actor.location, gm.getPlayer().location));\r\n            let hover_range = Math.max(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].ally_hover_range, actor.attack_range);\r\n            // let hover_range = Config.ally_hover_range\r\n            let move_xy = actor.location;\r\n            // update last known location\r\n            actor.destination_xy = gm.getPlayer().location.clone();\r\n            let goal_type;\r\n            let event_type = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].BrewEventType.Move;\r\n            if (dist_from_player < hover_range) {\r\n                goal_type = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Path\"].PathmapGoalType.EscapeTarget;\r\n                let travel_pathmap = getAppropriatePathmap(gm, goal_type, actor, false);\r\n                move_xy = travel_pathmap.getUnblockedDownhillNeighbor(actor.location, gm.getCurrentLevel(), true);\r\n                if ((!(move_xy)) || (move_xy.compare(actor.location))) {\r\n                    event_type = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].BrewEventType.Wait;\r\n                }\r\n            }\r\n            else {\r\n                // goal_type = Brew.Path.PathmapGoalType.ToTarget\r\n                move_xy = getNextStepFromAStar(gm, actor, actor.destination_xy);\r\n                if ((!(move_xy)) || (move_xy.compare(actor.location))) {\r\n                    event_type = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].BrewEventType.Wait;\r\n                }\r\n            }\r\n            allyEvent = {\r\n                eventType: event_type,\r\n                actor: actor,\r\n                endsTurn: true,\r\n                playerInitiated: false,\r\n                moveData: {\r\n                    from_xy: actor.location.clone(),\r\n                    to_xy: move_xy.clone()\r\n                }\r\n            };\r\n        }\r\n    }\r\n    else {\r\n        // let's hunt the nearest target...\r\n        // let first_target = target_list[0]\r\n        // let reposition_result = aiHuntReposition(gm, actor, first_target)\r\n        // if (reposition_result.shouldMove) {\r\n        // allyEvent = reposition_result.moveEvent\r\n        // } else {\r\n        // allyEvent = aiHuntTarget(gm, actor, first_target)\r\n        // }\r\n        let first_target = target_list[0];\r\n        allyEvent = aiHuntTarget(gm, actor, first_target);\r\n        // allyEvent = {\r\n        //     eventType: Brew.Enums.BrewEventType.Attack,\r\n        //     actor: actor,\r\n        //     endsTurn: true,\r\n        //     playerInitiated: false,\r\n        //     attackData: {\r\n        //         from_xy: actor.location.clone(),\r\n        //         to_xy: target.location.clone(),\r\n        //         target: target,\r\n        //         isMelee: (actor.attack_range == 1),\r\n        //         damage: 1\r\n        //     }\r\n        // }\r\n    }\r\n    return allyEvent;\r\n}\r\nfunction aiWander(gm, actor) {\r\n    // if we dont have a wander destination, get one\r\n    if (!(actor.destination_xy)) {\r\n        actor.destination_xy = getSafeLocation(gm, actor);\r\n        actor.giveup = 0;\r\n    }\r\n    if (actor.location.compare(actor.destination_xy)) {\r\n        // reached our destination, get a new one\r\n        actor.destination_xy = getSafeLocation(gm, actor);\r\n        actor.giveup = 0;\r\n    }\r\n    else {\r\n        // haven't reached our destination yet\r\n        if (actor.giveup > 4) {\r\n            // waited too long, get a new one\r\n            actor.destination_xy = getSafeLocation(gm, actor);\r\n            actor.giveup = 0;\r\n            console.log(`${actor.name} gives up`);\r\n        }\r\n        else {\r\n            // keep our existing destination\r\n        }\r\n    }\r\n    // go toward destination if possible\r\n    let wanderEvent;\r\n    let new_xy = getNextStepFromAStar(gm, actor, actor.destination_xy);\r\n    if (new_xy) {\r\n        // got a valid path\r\n        wanderEvent = {\r\n            eventType: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].BrewEventType.Move,\r\n            actor: actor,\r\n            playerInitiated: false,\r\n            endsTurn: true,\r\n            moveData: {\r\n                from_xy: actor.location.clone(),\r\n                to_xy: new_xy\r\n            }\r\n        };\r\n    }\r\n    else {\r\n        // couldn't pathfind, increase giveup count\r\n        actor.giveup += 1;\r\n        wanderEvent = {\r\n            eventType: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].BrewEventType.Wait,\r\n            actor: actor,\r\n            playerInitiated: false,\r\n            endsTurn: true\r\n        };\r\n    }\r\n    return wanderEvent;\r\n}\r\nfunction findNearbyPackMembers(gm, actor, target) {\r\n    let level = gm.getCurrentLevel();\r\n    let monsters = level.monsters.getAllThings().filter((m, index, array) => {\r\n        return ((actor.hasKnowledgeOf(m)) &&\r\n            (!(m.isSameThing(actor))) &&\r\n            (!(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Intel\"].isEnemy(actor, m))) &&\r\n            (m.isType(actor.getDefinition())));\r\n    });\r\n    return monsters;\r\n}\r\nfunction aiHuntReposition(gm, actor, target) {\r\n    //\r\n    let repositionEvent;\r\n    let dist;\r\n    let pathmap;\r\n    let new_xy;\r\n    // \r\n    let response = {\r\n        shouldMove: false\r\n    };\r\n    if (actor.hasFlag(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].Flag.Immobile)) {\r\n        return response;\r\n    }\r\n    // figure out how close we are to our closest target\r\n    dist = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Utils\"].dist2d(actor.location, target.location);\r\n    // let pathmap_to = getAppropriatePathmap(gm, Brew.Path.PathmapGoalType.ToTarget, actor)\r\n    // let path_value = pathmap_to.field.getAt(actor.location)\r\n    // if (!(path_value)) { throw new Error(\"missing pathmap value at location\")}\r\n    // use distance because we may not be able to see someone\r\n    // check pack\r\n    let pack_attack = actor.hasFlag(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].Flag.PackAttack);\r\n    let pack_members = findNearbyPackMembers(gm, actor, target);\r\n    let attack_range;\r\n    let keeps_distance;\r\n    if (pack_attack && (pack_members.length < (_brew__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].pack_attack_size - 1))) {\r\n        attack_range = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].pack_distance;\r\n        keeps_distance = true;\r\n    }\r\n    else {\r\n        attack_range = actor.attack_range;\r\n        keeps_distance = actor.hasFlag(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].Flag.KeepsDistance);\r\n    }\r\n    // check keeps distance\r\n    if (keeps_distance) {\r\n        if (dist < (attack_range - 1)) {\r\n            // move away\r\n            response.shouldMove = true;\r\n            pathmap = getAppropriatePathmap(gm, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Path\"].PathmapGoalType.EscapeTarget, actor, false);\r\n            new_xy = pathmap.getUnblockedDownhillNeighbor(actor.location, gm.getCurrentLevel());\r\n        }\r\n        else if (dist > attack_range) {\r\n            // move closer\r\n            response.shouldMove = true;\r\n            // ranged shooters can still probably (??) shoot over chasms\r\n            let useRangedAttackOverride = (actor.attack_range > 1);\r\n            pathmap = getAppropriatePathmap(gm, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Path\"].PathmapGoalType.ToTarget, actor, useRangedAttackOverride);\r\n            new_xy = pathmap.getUnblockedDownhillNeighbor(actor.location, gm.getCurrentLevel());\r\n            if (useRangedAttackOverride && (!(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Movement\"].canMoveToLocation(gm, actor, new_xy)))) {\r\n                pathmap = getAppropriatePathmap(gm, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Path\"].PathmapGoalType.EscapeTarget, actor, false);\r\n                new_xy = pathmap.getUnblockedDownhillNeighbor(actor.location, gm.getCurrentLevel());\r\n            }\r\n        }\r\n        if (response.shouldMove) {\r\n            if (new_xy) {\r\n                // valid movement from pathmap\r\n                response.moveEvent = {\r\n                    eventType: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].BrewEventType.Move,\r\n                    actor: actor,\r\n                    playerInitiated: false,\r\n                    endsTurn: true,\r\n                    moveData: {\r\n                        from_xy: actor.location.clone(),\r\n                        to_xy: new_xy\r\n                    }\r\n                };\r\n            }\r\n            else {\r\n                // invalid pathmap response, no move event\r\n                response.shouldMove = false;\r\n            }\r\n        }\r\n    }\r\n    // for everyone else, move unless we can attack\r\n    if ((!(response.shouldMove)) && (dist > actor.attack_range)) {\r\n        // move closer\r\n        response.shouldMove = true;\r\n        new_xy = getNextStepFromAStar(gm, actor, target.location.clone());\r\n        if (new_xy) {\r\n            // valid movement from AStar\r\n            response.moveEvent = {\r\n                eventType: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].BrewEventType.Move,\r\n                actor: actor,\r\n                playerInitiated: false,\r\n                endsTurn: true,\r\n                moveData: {\r\n                    from_xy: actor.location.clone(),\r\n                    to_xy: new_xy\r\n                }\r\n            };\r\n        }\r\n        else {\r\n            // invalid AStar response, no move event\r\n            response.shouldMove = false;\r\n        }\r\n    }\r\n    return response;\r\n}\r\nfunction aiHunt(gm, actor) {\r\n    // step 0 - find closest threat\r\n    let target;\r\n    target = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Targeting\"].getClosestTarget(gm, actor);\r\n    return aiHuntTarget(gm, actor, target);\r\n}\r\nfunction aiHuntTarget(gm, actor, target) {\r\n    let dist;\r\n    let new_xy;\r\n    let pathmap;\r\n    let huntEvent;\r\n    let is_melee;\r\n    // step 1 - reposition if we need to\r\n    let reposition_result = aiHuntReposition(gm, actor, target);\r\n    if (reposition_result.shouldMove) {\r\n        huntEvent = reposition_result.moveEvent;\r\n        return huntEvent;\r\n    }\r\n    // step 2 - try and attack since we seem to be well positioned\r\n    let valid_attack = false;\r\n    dist = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Utils\"].dist2d(actor.location, target.location);\r\n    if (dist <= actor.attack_range) {\r\n        // inside attack range - make sure we can hit something\r\n        is_melee = (dist == 1);\r\n        huntEvent = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Targeting\"].createTestTargetingEvent(actor, target, 1, 2);\r\n        // make sure out path is clear\r\n        let rangedAttackCheck = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Targeting\"].checkTargetingPath(gm, huntEvent);\r\n        if (rangedAttackCheck.is_valid || is_melee) {\r\n            valid_attack = true;\r\n        }\r\n    }\r\n    if (!(valid_attack)) {\r\n        // one of two things - \r\n        // within range but something is blocking us\r\n        // outside attack range but apparently we didnt need to move?\r\n        console.log(`${actor.name}:${actor.getID()} is stuck`);\r\n        huntEvent = {\r\n            eventType: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].BrewEventType.Wait,\r\n            actor: actor,\r\n            playerInitiated: false,\r\n            endsTurn: true\r\n        };\r\n    }\r\n    return huntEvent;\r\n}\r\n// called from postal.js channel\r\nfunction mainAiHandler(gm, actor) {\r\n    if (actor.isType(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Definitions\"].MonsterType.Architect)) {\r\n        return _brew__WEBPACK_IMPORTED_MODULE_1__[\"Architect\"].architectAI(gm, actor);\r\n    }\r\n    // handle hacked/allied monsters\r\n    if (actor.team == _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].Team.PlayerAllied) {\r\n        return alliedMonsterHandler(gm, actor);\r\n    }\r\n    if (actor.hasFlag(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].Flag.Stunned)) {\r\n        let stunnedEvent = {\r\n            eventType: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].BrewEventType.Wait,\r\n            actor: actor,\r\n            playerInitiated: false,\r\n            endsTurn: true\r\n        };\r\n        return stunnedEvent;\r\n    }\r\n    let level = gm.getCurrentLevel();\r\n    let player = gm.getPlayer();\r\n    // update FOV\r\n    // todo: need this every turn for each monster?\r\n    updateFov(gm, actor);\r\n    // change status\r\n    let is_changed;\r\n    is_changed = updateMonsterStatus(gm, actor);\r\n    // find action\r\n    let aiActionEvent;\r\n    if (actor.monster_status == _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].MonsterStatus.Sleep) {\r\n        // do nothing\r\n        aiActionEvent = {\r\n            eventType: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].BrewEventType.Wait,\r\n            actor: actor,\r\n            playerInitiated: false,\r\n            endsTurn: true\r\n        };\r\n    }\r\n    else if (actor.monster_status == _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].MonsterStatus.Wander) {\r\n        aiActionEvent = aiWander(gm, actor);\r\n    }\r\n    else if (actor.monster_status == _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].MonsterStatus.Hunt) {\r\n        aiActionEvent = aiHunt(gm, actor);\r\n    }\r\n    else if (actor.monster_status == _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].MonsterStatus.Escape) {\r\n        // todo: escape\r\n    }\r\n    else {\r\n        throw new Error(`unknown monster status ${actor.monster_status} for ${actor.getID()}`);\r\n    }\r\n    // adjust for targeting locks\r\n    if (aiActionEvent.eventType == _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].BrewEventType.Attack) {\r\n        let needs_lock = actor.hasFlag(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].Flag.NeedsTargetLock);\r\n        let has_lock = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Targeting\"].hasTargetLock(actor, aiActionEvent.attackData.target);\r\n        if (needs_lock && (!(has_lock))) {\r\n            aiActionEvent.eventType = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].BrewEventType.AcquireTarget;\r\n        }\r\n    }\r\n    return aiActionEvent;\r\n}\r\nfunction updateMonsterStatus(gm, actor) {\r\n    let init_status = actor.monster_status;\r\n    let new_status;\r\n    let player_in_fov = actor.inFOV(gm.getPlayer()) && (!(gm.getPlayer().hasFlag(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].Flag.Invisible)));\r\n    let enemy_in_view = false;\r\n    _brew__WEBPACK_IMPORTED_MODULE_1__[\"Targeting\"].getClosestTargets(gm, actor).forEach((m, index, array) => {\r\n        if ([_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].Team.Player, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].Team.PlayerAllied].indexOf(m.team) > -1) {\r\n            enemy_in_view = true;\r\n        }\r\n    });\r\n    if (actor.monster_status == _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].MonsterStatus.Sleep) {\r\n        new_status = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].MonsterStatus.Sleep;\r\n    }\r\n    else if (actor.monster_status == _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].MonsterStatus.Wander) {\r\n        if (player_in_fov || enemy_in_view) {\r\n            // see the player for the 'first' time\r\n            new_status = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].MonsterStatus.Hunt;\r\n            actor.destination_xy = gm.getPlayer().location;\r\n        }\r\n        else {\r\n            // keep wandering\r\n            new_status = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].MonsterStatus.Wander;\r\n        }\r\n    }\r\n    else if (actor.monster_status == _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].MonsterStatus.Hunt) {\r\n        if (player_in_fov || enemy_in_view) {\r\n            // still hunting\r\n            new_status = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].MonsterStatus.Hunt;\r\n            actor.destination_xy = gm.getPlayer().location; // keep track of where we last saw the player\r\n        }\r\n        else {\r\n            // stop hunting\r\n            new_status = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].MonsterStatus.Wander;\r\n        }\r\n    }\r\n    else if (actor.monster_status == _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].MonsterStatus.Escape) {\r\n        // todo: escape\r\n        new_status = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].MonsterStatus.Escape;\r\n    }\r\n    else {\r\n        throw new Error(`unknown monster status ${actor.monster_status} for ${actor.getID()}`);\r\n    }\r\n    actor.monster_status = new_status;\r\n    return init_status == new_status;\r\n}\r\nfunction getAppropriatePathmap(gm, goal_type, actor, rangedAttackOverride) {\r\n    let is_flying = actor.hasFlag(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].Flag.Flying) || rangedAttackOverride;\r\n    let use_escape = goal_type == _brew__WEBPACK_IMPORTED_MODULE_1__[\"Path\"].PathmapGoalType.EscapeTarget;\r\n    let pathmap;\r\n    if (is_flying && use_escape) {\r\n        pathmap = gm.pathmaps.getPathmap(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].PathmapCacheType.FromPlayer_Fly);\r\n    }\r\n    else if (is_flying && (!(use_escape))) {\r\n        pathmap = gm.pathmaps.getPathmap(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].PathmapCacheType.ToPlayer_Fly);\r\n    }\r\n    else if ((!(is_flying)) && use_escape) {\r\n        pathmap = gm.pathmaps.getPathmap(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].PathmapCacheType.FromPlayer_Walk);\r\n    }\r\n    else if ((!(is_flying)) && (!(use_escape))) {\r\n        pathmap = gm.pathmaps.getPathmap(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].PathmapCacheType.ToPlayer_Walk);\r\n    }\r\n    return pathmap;\r\n}\r\nfunction getNavigationType(gm, actor) {\r\n    if (actor.hasFlag(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].Flag.Flying)) {\r\n        return _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].LevelNavigationType.Fly;\r\n    }\r\n    else {\r\n        return _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].LevelNavigationType.Walk;\r\n    }\r\n}\r\nfunction getNextStepFromAStar(gm, actor, destination_xy) {\r\n    let path = getPathFromAStar(gm, actor, destination_xy);\r\n    if (path.length <= 1) {\r\n        return null;\r\n    }\r\n    else {\r\n        return path[1];\r\n    }\r\n}\r\nfunction getPathFromAStar(gm, actor, destination_xy, ignoreOtherMonsters = false) {\r\n    let level = gm.getCurrentLevel();\r\n    let fn_passable = (x, y) => {\r\n        let xy = new _brew__WEBPACK_IMPORTED_MODULE_1__[\"Coordinate\"](x, y);\r\n        if (!(level.isValid(xy))) {\r\n            return false;\r\n        }\r\n        if (level.monsters.hasAt(xy)) {\r\n            let monster_at = level.monsters.getAt(xy);\r\n            if (monster_at.isSameThing(actor)) {\r\n                return true;\r\n            }\r\n            else if (xy.compare(destination_xy)) {\r\n                return true;\r\n            }\r\n            else if (ignoreOtherMonsters) {\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        // if (level.monsters.hasAt(xy) && (!(actor.location.compare(xy))))  {\r\n        //     return false\r\n        // }\r\n        let t = level.terrain.getAt(xy);\r\n        let can_move = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Movement\"].canMoveToLocation(gm, actor, xy);\r\n        return can_move;\r\n    };\r\n    let path = [];\r\n    let fn_update_path = (x, y) => {\r\n        // let xy = new Brew.Coordinate(x, y)\r\n        path.push(new _brew__WEBPACK_IMPORTED_MODULE_1__[\"Coordinate\"](x, y));\r\n    };\r\n    let astar = new rot_js__WEBPACK_IMPORTED_MODULE_0__[\"Path\"].AStar(destination_xy.x, destination_xy.y, fn_passable, { topology: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].rotjs_topology });\r\n    // let astar = new ROT.Path.Dijkstra(destination_xy.x, destination_xy.y, fn_passable, {topology: Brew.Config.rotjs_topology})\r\n    astar.compute(actor.location.x, actor.location.y, fn_update_path);\r\n    return path;\r\n}\r\nfunction getSafeLocation(gm, actor) {\r\n    // returns a walkable, monster-free location\r\n    let xy;\r\n    let tries = 0;\r\n    while (tries < 50) {\r\n        xy = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Utils\"].randomOf(gm.getCurrentLevel().getWalkableTiles());\r\n        if (!(gm.getCurrentLevel().monsters.hasAt(xy))) {\r\n            return xy;\r\n        }\r\n        tries += 1;\r\n    }\r\n    console.error(\"unable to find safe location\");\r\n    return null;\r\n}\r\nfunction runBeforePlayerTurn(gm, actor) {\r\n    gm.updateAllPathmaps();\r\n    let updates = updateFov(gm, actor);\r\n    gm.display.drawFooter();\r\n    gm.displayList(updates);\r\n}\r\nfunction runAfterPlayerTurn(gm, actor) {\r\n    // gm.pathmap_to_player = Brew.Path.createGenericMapToPlayer(gm, gm.getCurrentLevel())\r\n    // gm.pathmap_to_playerally = Brew.Path.createGenericMapToPlayerAlly(gm, gm.getCurrentLevel())\r\n    // gm.pathmap_from_player = Brew.Path.createMapFromPlayer(gm, gm.getCurrentLevel(), gm.pathmap_to_player)\r\n    // gm.pathmap_from_playerally = Brew.Path.createMapFromPlayer(gm, gm.getCurrentLevel(), gm.pathmap_to_playerally)\r\n    let updates;\r\n    let all_updates = [];\r\n    // update fov for everyone\r\n    gm.getCurrentLevel().monsters.getAllThings().forEach((mob) => {\r\n        if (isPlayer(gm, mob)) {\r\n            return;\r\n        }\r\n        updates = updateFov(gm, mob);\r\n        all_updates.concat(updates);\r\n    });\r\n    gm.displayList(all_updates);\r\n    gm.updateAllPathmaps();\r\n    gm.turn_count += 1;\r\n}\r\nfunction isPlayer(gm, actor) {\r\n    // return actor.isType(Brew.Definitions.MonsterType.Hero)\r\n    return actor.isSameThing(gm.getPlayer());\r\n}\r\nfunction createAllowVisionFn(gm, actor, active_range) {\r\n    let xy;\r\n    let level = gm.getCurrentLevel();\r\n    let t;\r\n    let fn_allow_vision = (x, y) => {\r\n        xy = new _brew__WEBPACK_IMPORTED_MODULE_1__[\"Coordinate\"](x, y);\r\n        // can never see outside the level\r\n        if (!(level.isValid(xy))) {\r\n            return false;\r\n        }\r\n        //  can always see where you are standing\r\n        if (xy.compare(actor.location)) {\r\n            return true;\r\n        }\r\n        if (_brew__WEBPACK_IMPORTED_MODULE_1__[\"Utils\"].dist2d(actor.location, xy) > active_range) {\r\n            return false;\r\n        }\r\n        t = level.terrain.getAt(xy);\r\n        return (!(t.blocks_vision));\r\n    };\r\n    return fn_allow_vision;\r\n}\r\nfunction updateFov(gm, actor) {\r\n    let old_fov = actor.fov.getAllCoordinates();\r\n    let xy;\r\n    let numberkey;\r\n    actor.clearFov();\r\n    actor.clearKnowledge();\r\n    let level = gm.getCurrentLevel();\r\n    let t;\r\n    let fn_allow_vision = createAllowVisionFn(gm, actor, actor.sight_range);\r\n    let fn_allow_vision_limited = createAllowVisionFn(gm, actor, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].local_sight_range);\r\n    // let fn_update_fov = (x, y, r, visibility) => {\r\n    let fn_update_fov = (x, y) => {\r\n        // TODO: also update level for lightcasting\r\n        // ye_level.setLightAt(new Brew.Coordinate(x, y), 1)\r\n        xy = new _brew__WEBPACK_IMPORTED_MODULE_1__[\"Coordinate\"](x, y);\r\n        if (level.isValid(xy)) {\r\n            actor.fov.setAt(xy, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].BrewVisionSource.xSelf);\r\n            updateMemoryAt(gm, actor, gm.getCurrentLevel().id, xy);\r\n            // check for monsters and add them to our knowledge\r\n            let m_at = level.monsters.getAt(xy);\r\n            if ((m_at) && (!(m_at.hasFlag(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].Flag.Invisible)))) {\r\n                actor.knowledge.setAt(xy, m_at);\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    // debug fov: see all\r\n    if (isPlayer(gm, actor) && (_brew__WEBPACK_IMPORTED_MODULE_1__[\"Debug\"].debug_vision == _brew__WEBPACK_IMPORTED_MODULE_1__[\"Debug\"].Vision.ShowAll)) {\r\n        level.terrain.getAllCoordinates().forEach((xy, index, array) => {\r\n            actor.fov.setAt(xy, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].BrewVisionSource.xSelf);\r\n        });\r\n    }\r\n    else {\r\n        // otherwise, run FOV normally\r\n        // let rot_fov = new ROT.FOV.PreciseShadowcasting(fn_allow_vision, {})\r\n        // rot_fov.compute(actor.location.x, actor.location.y, actor.sight_range, fn_update_fov)\r\n        let view_direction = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Tank\"].getPrimaryFacingDirection(gm, actor);\r\n        let turretPower = actor.getPowers().getPowerOfType(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].BrewPowerType.TurretCannon);\r\n        _brew__WEBPACK_IMPORTED_MODULE_1__[\"FieldOfView\"].symmetricRecursiveShadowcasting_Directional(actor.location.x, actor.location.y, fn_allow_vision, fn_update_fov, view_direction);\r\n        _brew__WEBPACK_IMPORTED_MODULE_1__[\"FieldOfView\"].symmetricRecursiveShadowcasting(actor.location.x, actor.location.y, fn_allow_vision_limited, fn_update_fov);\r\n    }\r\n    // debug fov: add other monster view\r\n    // todo: add different types of view for shading/whatever (e.g. not just boolean true/false)\r\n    if (isPlayer(gm, actor) && (_brew__WEBPACK_IMPORTED_MODULE_1__[\"Debug\"].debug_vision == _brew__WEBPACK_IMPORTED_MODULE_1__[\"Debug\"].Vision.ShowMobs)) {\r\n        actor.clearFov();\r\n    }\r\n    // if player has remote scan on, then show other mob FOV\r\n    if ((isPlayer(gm, actor) && (_brew__WEBPACK_IMPORTED_MODULE_1__[\"Debug\"].debug_vision == _brew__WEBPACK_IMPORTED_MODULE_1__[\"Debug\"].Vision.ShowMobs)) ||\r\n        (isPlayer(gm, actor) && (actor.hasFlag(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].Flag.RemoteScan)))) {\r\n        // actor.clearFov()\r\n        level.monsters.getAllThings().forEach((mob, index, array) => {\r\n            if (mob.isSameThing(actor)) {\r\n                return;\r\n            }\r\n            mob.fov.getAllCoordinates().forEach((xy, index, array) => {\r\n                actor.fov.setAt(xy, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].BrewVisionSource.xRemote);\r\n            });\r\n        });\r\n    }\r\n    // let diff_xy_list = Brew.Utils.diffOfCoordinateArrays(old_fov, actor.fov.getAllCoordinates())\r\n    let old_fov_coords = new _brew__WEBPACK_IMPORTED_MODULE_1__[\"CoordinateArea\"](old_fov);\r\n    let new_fov_coords = new _brew__WEBPACK_IMPORTED_MODULE_1__[\"CoordinateArea\"](actor.fov.getAllCoordinates());\r\n    let diff_xy_list = old_fov_coords.getSymmetricDiff(new_fov_coords).getCoordinates();\r\n    return diff_xy_list;\r\n}\r\nfunction updateMemoryAt(gm, actor, level_id, xy) {\r\n    let level = gm.getCurrentLevel();\r\n    if (actor.memory.hasAt(xy)) {\r\n        actor.memory.removeAt(xy);\r\n    }\r\n    let terrain = level.terrain.getAt(xy);\r\n    actor.memory.setAt(xy, terrain);\r\n    let feature = level.features.getAt(xy);\r\n    if (feature && (!(terrain.alwaysOnTop))) {\r\n        actor.memory.removeAt(xy);\r\n        actor.memory.setAt(xy, feature);\r\n    }\r\n    let it = level.items.getAt(xy);\r\n    if (it) {\r\n        actor.memory.removeAt(xy);\r\n        actor.memory.setAt(xy, it);\r\n    }\r\n}\r\nfunction isEnemy(actor1, actor2) {\r\n    // todo: move this and canMove / can / is stuff to Brew.Utils or some other useful area\r\n    let is_enemy;\r\n    if (actor1.team == actor2.team) {\r\n        is_enemy = false;\r\n    }\r\n    else if (actor1.team == _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].Team.Enemy) {\r\n        // is_enemy = ([Team.Player, Team.PlayerAllied].indexOf(actor2.team) > -1)\r\n        is_enemy = (actor2.team != _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].Team.Enemy);\r\n    }\r\n    else {\r\n        is_enemy = (actor2.team == _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].Team.Enemy);\r\n    }\r\n    return is_enemy;\r\n}\r\nfunction getMonstersKnownBy(gm, actor) {\r\n    // return all monsters that I know about except myself\r\n    let level = gm.getCurrentLevel();\r\n    return level.monsters.getAllThings().filter((m, index, array) => {\r\n        // let dist2d = Math.floor(Brew.Utils.dist2d(actor.location, m.location))\r\n        return ((actor.hasKnowledgeOf(m)) &&\r\n            (actor.fov.hasAt(m.location)) &&\r\n            (!(m.isSameThing(actor))));\r\n    });\r\n}\r\nfunction getItemsKnownBy(gm, actor) {\r\n    // return all monsters that I know about except myself\r\n    let level = gm.getCurrentLevel();\r\n    return level.items.getAllThings().filter((i, index, array) => {\r\n        // let dist2d = Math.floor(Brew.Utils.dist2d(actor.location, m.location))\r\n        return (\r\n        // (actor.hasKnowledgeOf(i)) &&\r\n        (actor.fov.hasAt(i.location)));\r\n    });\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/brew_engine/intel.ts\n");

/***/ }),

/***/ "./src/brew_engine/keymap.ts":
/*!***********************************!*\
  !*** ./src/brew_engine/keymap.ts ***!
  \***********************************/
/*! exports provided: MoveForward, MoveBackward, RotateBodyCW, RotateBodyCCW, MovementKeys, RotateWeaponCW, RotateWeaponCCW, Action, Examine, HeadsUp, Inventory, Menu, Escape, DebugFOV, DebugMenu, HotKey_1, HotKey_2, HotKey_3, HotKey_4, BossMode, ScreenEnlarge, ScreenShrink, DirectionalMovementKeys, RotationalMovementKeys, RotationalWeaponKeys, CWRotateKeys, CCWRotateKeys, HotKeys, ScreenSizeControl, Help */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MoveForward\", function() { return MoveForward; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MoveBackward\", function() { return MoveBackward; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RotateBodyCW\", function() { return RotateBodyCW; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RotateBodyCCW\", function() { return RotateBodyCCW; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MovementKeys\", function() { return MovementKeys; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RotateWeaponCW\", function() { return RotateWeaponCW; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RotateWeaponCCW\", function() { return RotateWeaponCCW; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Action\", function() { return Action; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Examine\", function() { return Examine; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HeadsUp\", function() { return HeadsUp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Inventory\", function() { return Inventory; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Menu\", function() { return Menu; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Escape\", function() { return Escape; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DebugFOV\", function() { return DebugFOV; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DebugMenu\", function() { return DebugMenu; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HotKey_1\", function() { return HotKey_1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HotKey_2\", function() { return HotKey_2; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HotKey_3\", function() { return HotKey_3; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HotKey_4\", function() { return HotKey_4; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BossMode\", function() { return BossMode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ScreenEnlarge\", function() { return ScreenEnlarge; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ScreenShrink\", function() { return ScreenShrink; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DirectionalMovementKeys\", function() { return DirectionalMovementKeys; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RotationalMovementKeys\", function() { return RotationalMovementKeys; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RotationalWeaponKeys\", function() { return RotationalWeaponKeys; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CWRotateKeys\", function() { return CWRotateKeys; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CCWRotateKeys\", function() { return CCWRotateKeys; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HotKeys\", function() { return HotKeys; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ScreenSizeControl\", function() { return ScreenSizeControl; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Help\", function() { return Help; });\n/* harmony import */ var rot_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rot-js */ \"./node_modules/rot-js/lib/rot.js\");\n/* harmony import */ var rot_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(rot_js__WEBPACK_IMPORTED_MODULE_0__);\n\r\n// export const MoveRight = [ROT.VK_RIGHT, ROT.VK_D]\r\n// export const MoveLeft = [ROT.VK_LEFT, ROT.VK_A]\r\n// export const MoveUp = [ROT.VK_UP, ROT.VK_W]\r\n// export const MoveDown = [ROT.VK_DOWN, ROT.VK_S]\r\nconst MoveForward = [rot_js__WEBPACK_IMPORTED_MODULE_0__[\"VK_UP\"], rot_js__WEBPACK_IMPORTED_MODULE_0__[\"VK_W\"]];\r\nconst MoveBackward = [rot_js__WEBPACK_IMPORTED_MODULE_0__[\"VK_DOWN\"], rot_js__WEBPACK_IMPORTED_MODULE_0__[\"VK_S\"]];\r\nconst RotateBodyCW = [rot_js__WEBPACK_IMPORTED_MODULE_0__[\"VK_RIGHT\"], rot_js__WEBPACK_IMPORTED_MODULE_0__[\"VK_D\"]];\r\nconst RotateBodyCCW = [rot_js__WEBPACK_IMPORTED_MODULE_0__[\"VK_LEFT\"], rot_js__WEBPACK_IMPORTED_MODULE_0__[\"VK_A\"]];\r\nconst MovementKeys = [].concat(MoveForward, MoveBackward, RotateBodyCCW, RotateBodyCW);\r\nconst RotateWeaponCW = [rot_js__WEBPACK_IMPORTED_MODULE_0__[\"VK_E\"]];\r\nconst RotateWeaponCCW = [rot_js__WEBPACK_IMPORTED_MODULE_0__[\"VK_Q\"]];\r\nconst Action = [rot_js__WEBPACK_IMPORTED_MODULE_0__[\"VK_SPACE\"], rot_js__WEBPACK_IMPORTED_MODULE_0__[\"VK_RETURN\"]];\r\nconst Examine = [rot_js__WEBPACK_IMPORTED_MODULE_0__[\"VK_X\"]];\r\nconst HeadsUp = [rot_js__WEBPACK_IMPORTED_MODULE_0__[\"VK_Z\"]];\r\nconst Inventory = [rot_js__WEBPACK_IMPORTED_MODULE_0__[\"VK_I\"]];\r\nconst Menu = [rot_js__WEBPACK_IMPORTED_MODULE_0__[\"VK_M\"]];\r\nconst Escape = [rot_js__WEBPACK_IMPORTED_MODULE_0__[\"VK_ESCAPE\"]];\r\nconst DebugFOV = [rot_js__WEBPACK_IMPORTED_MODULE_0__[\"VK_SLASH\"]];\r\n// export const DebugPaths = [ROT.VK_Q]\r\nconst DebugMenu = [rot_js__WEBPACK_IMPORTED_MODULE_0__[\"VK_BACK_QUOTE\"]];\r\nconst HotKey_1 = [rot_js__WEBPACK_IMPORTED_MODULE_0__[\"VK_1\"]];\r\nconst HotKey_2 = [rot_js__WEBPACK_IMPORTED_MODULE_0__[\"VK_2\"]];\r\nconst HotKey_3 = [rot_js__WEBPACK_IMPORTED_MODULE_0__[\"VK_3\"]];\r\nconst HotKey_4 = [rot_js__WEBPACK_IMPORTED_MODULE_0__[\"VK_4\"]];\r\nconst BossMode = [rot_js__WEBPACK_IMPORTED_MODULE_0__[\"VK_B\"]];\r\nconst ScreenEnlarge = [rot_js__WEBPACK_IMPORTED_MODULE_0__[\"VK_0\"]];\r\nconst ScreenShrink = [rot_js__WEBPACK_IMPORTED_MODULE_0__[\"VK_9\"]];\r\nconst DirectionalMovementKeys = [].concat(MoveForward, MoveBackward);\r\nconst RotationalMovementKeys = [].concat(RotateBodyCCW, RotateBodyCW);\r\nconst RotationalWeaponKeys = [].concat(RotateWeaponCCW, RotateWeaponCW);\r\nconst CWRotateKeys = [].concat(RotateBodyCW, RotateWeaponCW);\r\nconst CCWRotateKeys = [].concat(RotateBodyCCW, RotateWeaponCCW);\r\nconst HotKeys = [].concat(HotKey_1, HotKey_2, HotKey_3, HotKey_4);\r\nconst ScreenSizeControl = [].concat(ScreenEnlarge, ScreenShrink);\r\nconst Help = [rot_js__WEBPACK_IMPORTED_MODULE_0__[\"VK_QUESTION_MARK\"], rot_js__WEBPACK_IMPORTED_MODULE_0__[\"VK_SLASH\"]];\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYnJld19lbmdpbmUva2V5bWFwLnRzPzFjYzMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTZCO0FBRTdCLG9EQUFvRDtBQUNwRCxrREFBa0Q7QUFDbEQsOENBQThDO0FBQzlDLGtEQUFrRDtBQUUzQyxNQUFNLFdBQVcsR0FBRyxDQUFDLDRDQUFTLEVBQUUsMkNBQVEsQ0FBQztBQUN6QyxNQUFNLFlBQVksR0FBRyxDQUFDLDhDQUFXLEVBQUUsMkNBQVEsQ0FBQztBQUM1QyxNQUFNLFlBQVksR0FBRyxDQUFDLCtDQUFZLEVBQUUsMkNBQVEsQ0FBQztBQUM3QyxNQUFNLGFBQWEsR0FBRyxDQUFDLDhDQUFXLEVBQUUsMkNBQVEsQ0FBQztBQUU3QyxNQUFNLFlBQVksR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFLFlBQVksQ0FBQztBQUN0RixNQUFNLGNBQWMsR0FBRyxDQUFDLDJDQUFRLENBQUM7QUFDakMsTUFBTSxlQUFlLEdBQUcsQ0FBQywyQ0FBUSxDQUFDO0FBRWxDLE1BQU0sTUFBTSxHQUFHLENBQUMsK0NBQVksRUFBRSxnREFBYSxDQUFDO0FBQzVDLE1BQU0sT0FBTyxHQUFHLENBQUMsMkNBQVEsQ0FBQztBQUMxQixNQUFNLE9BQU8sR0FBRyxDQUFDLDJDQUFRLENBQUM7QUFDMUIsTUFBTSxTQUFTLEdBQUcsQ0FBQywyQ0FBUSxDQUFDO0FBRTVCLE1BQU0sSUFBSSxHQUFHLENBQUMsMkNBQVEsQ0FBQztBQUN2QixNQUFNLE1BQU0sR0FBRyxDQUFDLGdEQUFhLENBQUM7QUFFOUIsTUFBTSxRQUFRLEdBQUcsQ0FBQywrQ0FBWSxDQUFDO0FBQ3RDLHVDQUF1QztBQUNoQyxNQUFNLFNBQVMsR0FBRyxDQUFDLG9EQUFpQixDQUFDO0FBRXJDLE1BQU0sUUFBUSxHQUFHLENBQUMsMkNBQVEsQ0FBQztBQUMzQixNQUFNLFFBQVEsR0FBRyxDQUFDLDJDQUFRLENBQUM7QUFDM0IsTUFBTSxRQUFRLEdBQUcsQ0FBQywyQ0FBUSxDQUFDO0FBQzNCLE1BQU0sUUFBUSxHQUFHLENBQUMsMkNBQVEsQ0FBQztBQUUzQixNQUFNLFFBQVEsR0FBRyxDQUFDLDJDQUFRLENBQUM7QUFFM0IsTUFBTSxhQUFhLEdBQUcsQ0FBQywyQ0FBUSxDQUFDO0FBQ2hDLE1BQU0sWUFBWSxHQUFHLENBQUMsMkNBQVEsQ0FBQztBQUUvQixNQUFNLHVCQUF1QixHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLFlBQVksQ0FBQztBQUNwRSxNQUFNLHNCQUFzQixHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLFlBQVksQ0FBQztBQUNyRSxNQUFNLG9CQUFvQixHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsZUFBZSxFQUFFLGNBQWMsQ0FBQztBQUN2RSxNQUFNLFlBQVksR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxjQUFjLENBQUM7QUFDNUQsTUFBTSxhQUFhLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsZUFBZSxDQUFDO0FBQy9ELE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDO0FBQ2pFLE1BQU0saUJBQWlCLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsWUFBWSxDQUFDO0FBRWhFLE1BQU0sSUFBSSxHQUFHLENBQUMsdURBQW9CLEVBQUUsK0NBQVksQ0FBQyIsImZpbGUiOiIuL3NyYy9icmV3X2VuZ2luZS9rZXltYXAudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBST1QgZnJvbSAncm90LWpzJ1xyXG5cclxuLy8gZXhwb3J0IGNvbnN0IE1vdmVSaWdodCA9IFtST1QuVktfUklHSFQsIFJPVC5WS19EXVxyXG4vLyBleHBvcnQgY29uc3QgTW92ZUxlZnQgPSBbUk9ULlZLX0xFRlQsIFJPVC5WS19BXVxyXG4vLyBleHBvcnQgY29uc3QgTW92ZVVwID0gW1JPVC5WS19VUCwgUk9ULlZLX1ddXHJcbi8vIGV4cG9ydCBjb25zdCBNb3ZlRG93biA9IFtST1QuVktfRE9XTiwgUk9ULlZLX1NdXHJcblxyXG5leHBvcnQgY29uc3QgTW92ZUZvcndhcmQgPSBbUk9ULlZLX1VQLCBST1QuVktfV11cclxuZXhwb3J0IGNvbnN0IE1vdmVCYWNrd2FyZCA9IFtST1QuVktfRE9XTiwgUk9ULlZLX1NdXHJcbmV4cG9ydCBjb25zdCBSb3RhdGVCb2R5Q1cgPSBbUk9ULlZLX1JJR0hULCBST1QuVktfRF1cclxuZXhwb3J0IGNvbnN0IFJvdGF0ZUJvZHlDQ1cgPSBbUk9ULlZLX0xFRlQsIFJPVC5WS19BXVxyXG5cclxuZXhwb3J0IGNvbnN0IE1vdmVtZW50S2V5cyA9IFtdLmNvbmNhdChNb3ZlRm9yd2FyZCwgTW92ZUJhY2t3YXJkLCBSb3RhdGVCb2R5Q0NXLCBSb3RhdGVCb2R5Q1cpXHJcbmV4cG9ydCBjb25zdCBSb3RhdGVXZWFwb25DVyA9IFtST1QuVktfRV1cclxuZXhwb3J0IGNvbnN0IFJvdGF0ZVdlYXBvbkNDVyA9IFtST1QuVktfUV1cclxuXHJcbmV4cG9ydCBjb25zdCBBY3Rpb24gPSBbUk9ULlZLX1NQQUNFLCBST1QuVktfUkVUVVJOXVxyXG5leHBvcnQgY29uc3QgRXhhbWluZSA9IFtST1QuVktfWF1cclxuZXhwb3J0IGNvbnN0IEhlYWRzVXAgPSBbUk9ULlZLX1pdXHJcbmV4cG9ydCBjb25zdCBJbnZlbnRvcnkgPSBbUk9ULlZLX0ldXHJcblxyXG5leHBvcnQgY29uc3QgTWVudSA9IFtST1QuVktfTV1cclxuZXhwb3J0IGNvbnN0IEVzY2FwZSA9IFtST1QuVktfRVNDQVBFXVxyXG5cclxuZXhwb3J0IGNvbnN0IERlYnVnRk9WID0gW1JPVC5WS19TTEFTSF1cclxuLy8gZXhwb3J0IGNvbnN0IERlYnVnUGF0aHMgPSBbUk9ULlZLX1FdXHJcbmV4cG9ydCBjb25zdCBEZWJ1Z01lbnUgPSBbUk9ULlZLX0JBQ0tfUVVPVEVdXHJcblxyXG5leHBvcnQgY29uc3QgSG90S2V5XzEgPSBbUk9ULlZLXzFdXHJcbmV4cG9ydCBjb25zdCBIb3RLZXlfMiA9IFtST1QuVktfMl1cclxuZXhwb3J0IGNvbnN0IEhvdEtleV8zID0gW1JPVC5WS18zXVxyXG5leHBvcnQgY29uc3QgSG90S2V5XzQgPSBbUk9ULlZLXzRdXHJcblxyXG5leHBvcnQgY29uc3QgQm9zc01vZGUgPSBbUk9ULlZLX0JdXHJcblxyXG5leHBvcnQgY29uc3QgU2NyZWVuRW5sYXJnZSA9IFtST1QuVktfMF1cclxuZXhwb3J0IGNvbnN0IFNjcmVlblNocmluayA9IFtST1QuVktfOV1cclxuXHJcbmV4cG9ydCBjb25zdCBEaXJlY3Rpb25hbE1vdmVtZW50S2V5cyA9IFtdLmNvbmNhdChNb3ZlRm9yd2FyZCwgTW92ZUJhY2t3YXJkKVxyXG5leHBvcnQgY29uc3QgUm90YXRpb25hbE1vdmVtZW50S2V5cyA9IFtdLmNvbmNhdChSb3RhdGVCb2R5Q0NXLCBSb3RhdGVCb2R5Q1cpXHJcbmV4cG9ydCBjb25zdCBSb3RhdGlvbmFsV2VhcG9uS2V5cyA9IFtdLmNvbmNhdChSb3RhdGVXZWFwb25DQ1csIFJvdGF0ZVdlYXBvbkNXKVxyXG5leHBvcnQgY29uc3QgQ1dSb3RhdGVLZXlzID0gW10uY29uY2F0KFJvdGF0ZUJvZHlDVywgUm90YXRlV2VhcG9uQ1cpXHJcbmV4cG9ydCBjb25zdCBDQ1dSb3RhdGVLZXlzID0gW10uY29uY2F0KFJvdGF0ZUJvZHlDQ1csIFJvdGF0ZVdlYXBvbkNDVylcclxuZXhwb3J0IGNvbnN0IEhvdEtleXMgPSBbXS5jb25jYXQoSG90S2V5XzEsIEhvdEtleV8yLCBIb3RLZXlfMywgSG90S2V5XzQpXHJcbmV4cG9ydCBjb25zdCBTY3JlZW5TaXplQ29udHJvbCA9IFtdLmNvbmNhdChTY3JlZW5FbmxhcmdlLCBTY3JlZW5TaHJpbmspXHJcblxyXG5leHBvcnQgY29uc3QgSGVscCA9IFtST1QuVktfUVVFU1RJT05fTUFSSywgUk9ULlZLX1NMQVNIXSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/brew_engine/keymap.ts\n");

/***/ }),

/***/ "./src/brew_engine/pathmap.ts":
/*!************************************!*\
  !*** ./src/brew_engine/pathmap.ts ***!
  \************************************/
/*! exports provided: PathmapGoalType, PathmapCache, Pathmap, createGenericMapToPlayer, createMapFromPlayer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PathmapGoalType\", function() { return PathmapGoalType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PathmapCache\", function() { return PathmapCache; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Pathmap\", function() { return Pathmap; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createGenericMapToPlayer\", function() { return createGenericMapToPlayer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createMapFromPlayer\", function() { return createMapFromPlayer; });\n/* harmony import */ var _brew__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../brew */ \"./src/brew.ts\");\n/* harmony import */ var _fastdijkstramap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fastdijkstramap */ \"./src/brew_engine/fastdijkstramap.ts\");\n\r\n\r\nvar PathmapGoalType;\r\n(function (PathmapGoalType) {\r\n    PathmapGoalType[PathmapGoalType[\"ToTarget\"] = 0] = \"ToTarget\";\r\n    PathmapGoalType[PathmapGoalType[\"EscapeTarget\"] = 1] = \"EscapeTarget\";\r\n})(PathmapGoalType || (PathmapGoalType = {}));\r\n// todo: find other instances of cacheing stuff like this and generalize the class <T>\r\nclass PathmapCache {\r\n    constructor() {\r\n        this.my_pathmaps = {};\r\n        // getPathmapCacheType(goalType: PathmapGoalType, includeAllies: boolean, navigationMethod: Brew.Enums.LevelNavigationType) : PathmapCacheType {\r\n        //     let cacheType : PathmapCacheType\r\n        //     if ((goalType == PathmapGoalType.EscapeTarget) && (includeAllies == true) && (navigationMethod == Brew.Enums.LevelNavigationType.Fly)) {\r\n        //         cacheType = PathmapCacheType.FromPlayerAllies_Fly\r\n        //     } else if ((goalType == PathmapGoalType.EscapeTarget) && (includeAllies == true) && (navigationMethod == Brew.Enums.LevelNavigationType.Walk)) {\r\n        //         cacheType = PathmapCacheType.FromPlayerAllies_Walk\r\n        //     } else if ((goalType == PathmapGoalType.EscapeTarget) && (includeAllies == false) && (navigationMethod == Brew.Enums.LevelNavigationType.Fly)) {\r\n        //         cacheType = PathmapCacheType.FromPlayerOnly_Fly\r\n        //     } else if ((goalType == PathmapGoalType.EscapeTarget) && (includeAllies == false) && (navigationMethod == Brew.Enums.LevelNavigationType.Walk)) {\r\n        //         cacheType = PathmapCacheType.FromPlayerOnly_Walk\r\n        //     } else if ((goalType == PathmapGoalType.ToTarget) && (includeAllies == true) && (navigationMethod == Brew.Enums.LevelNavigationType.Fly)) {\r\n        //         cacheType = PathmapCacheType.ToPlayerAllies_Fly\r\n        //     } else if ((goalType == PathmapGoalType.ToTarget) && (includeAllies == true) && (navigationMethod == Brew.Enums.LevelNavigationType.Walk)) {\r\n        //         cacheType = PathmapCacheType.ToPlayerAllies_Walk\r\n        //     } else if ((goalType == PathmapGoalType.ToTarget) && (includeAllies == false) && (navigationMethod == Brew.Enums.LevelNavigationType.Fly)) {\r\n        //         cacheType = PathmapCacheType.ToPlayerOnly_Fly\r\n        //     } else if ((goalType == PathmapGoalType.ToTarget) && (includeAllies == false) && (navigationMethod == Brew.Enums.LevelNavigationType.Walk)) {\r\n        //         cacheType = PathmapCacheType.ToPlayerOnly_Walk\r\n        //     }\r\n        //     return cacheType\r\n        // }\r\n        // getPathmap(goalType: PathmapGoalType, includeAllies: boolean, navigationMethod: Brew.Enums.LevelNavigationType) : Pathmap {\r\n        //     let cacheType = this.getPathmapCacheType(goalType, includeAllies, navigationMethod)\r\n        //     return this.getCache(cacheType)\r\n        // }\r\n    }\r\n    updateCache(cacheType, pm) {\r\n        this.my_pathmaps[cacheType] = pm;\r\n    }\r\n    getPathmap(cacheType) {\r\n        if (cacheType in this.my_pathmaps) {\r\n            return this.my_pathmaps[cacheType];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\nclass Pathmap {\r\n    constructor(level, pathtype, navigationType = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].LevelNavigationType.Walk) {\r\n        this.field = new _brew__WEBPACK_IMPORTED_MODULE_0__[\"GridOfThings\"]();\r\n        this.pathtype = pathtype;\r\n        this.width = level.width;\r\n        this.height = level.height;\r\n        // pick a spot to start the flood fill for passable tiles\r\n        let valid_start_xy = level.navigation_tiles[navigationType][0];\r\n        // initiate the map\r\n        let pathable_fn;\r\n        if (navigationType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].LevelNavigationType.Walk) {\r\n            pathable_fn = _fastdijkstramap__WEBPACK_IMPORTED_MODULE_1__[\"PathFunctionWalkable\"];\r\n        }\r\n        else if (navigationType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].LevelNavigationType.Fly) {\r\n            pathable_fn = _fastdijkstramap__WEBPACK_IMPORTED_MODULE_1__[\"PathFunctionFlyable\"];\r\n        }\r\n        else {\r\n            throw new Error(`unknown level navigation type: ${navigationType}`);\r\n        }\r\n        this.djmap = _fastdijkstramap__WEBPACK_IMPORTED_MODULE_1__[\"setupDijkstraMap\"](level, valid_start_xy, pathable_fn);\r\n    }\r\n    setDijkstraMapTargets(target_xy, goal_value) {\r\n        let key = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].xyToKey(target_xy);\r\n        this.djmap[key] = goal_value;\r\n    }\r\n    solve() {\r\n        // run the solver\r\n        _fastdijkstramap__WEBPACK_IMPORTED_MODULE_1__[\"solveDijkstraMap\"](this.djmap);\r\n        // find max/min values\r\n        let maxmin = _fastdijkstramap__WEBPACK_IMPORTED_MODULE_1__[\"getMaxAndMinDijkstraMapValues\"](this.djmap);\r\n        this.max_value = maxmin.max;\r\n        this.min_value = maxmin.min;\r\n        // convert back to grid of things\r\n        let key;\r\n        let xy;\r\n        // let num_key\r\n        for (key in this.djmap) {\r\n            xy = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].keyToXY(Number(key));\r\n            this.field.setAt(xy, this.djmap[key]);\r\n        }\r\n        // console.log(`number of passes: ${num_passes}`)\r\n    }\r\n    getDownhillNeighbor(from_xy) {\r\n        let lowest_xy = from_xy;\r\n        let lowest_val = this.field.getAt(lowest_xy);\r\n        lowest_xy.getAdjacent().forEach((xy, index, array) => {\r\n            let temp_val = this.field.getAt(xy);\r\n            if (temp_val) {\r\n                if (temp_val < lowest_val) {\r\n                    lowest_val = temp_val;\r\n                    lowest_xy = xy;\r\n                }\r\n            }\r\n        });\r\n        return lowest_xy;\r\n    }\r\n    // getUnblockedDownhillNeighbor(from_xy: Brew.Coordinate, level: Brew.Level, except_mob?: Brew.GridThings.Monster) : Brew.Coordinate {\r\n    getUnblockedDownhillNeighbor(from_xy, level, ally_mode = false) {\r\n        // return lowest-value cell not blocked by another something\r\n        let lowest_xy = from_xy;\r\n        let lowest_val;\r\n        if (ally_mode) {\r\n            lowest_val = Number.MAX_VALUE;\r\n        }\r\n        else {\r\n            lowest_val = this.field.getAt(lowest_xy);\r\n        }\r\n        lowest_xy.getAdjacent().forEach((xy, index, array) => {\r\n            let temp_val = this.field.getAt(xy);\r\n            if (ally_mode && (temp_val == 0)) {\r\n                return;\r\n            }\r\n            if (temp_val) {\r\n                let mob_at = level.monsters.getAt(xy);\r\n                if (mob_at) {\r\n                    return;\r\n                }\r\n                if (temp_val < lowest_val) {\r\n                    lowest_val = temp_val;\r\n                    lowest_xy = xy;\r\n                }\r\n            }\r\n        });\r\n        return lowest_xy;\r\n    }\r\n} //end class\r\nfunction createGenericMapToPlayer(gm, level, navigationMethod, includeAllies) {\r\n    let pm = new Pathmap(level, PathmapGoalType.ToTarget, navigationMethod);\r\n    let player = gm.getPlayer();\r\n    // set player as target\r\n    pm.setDijkstraMapTargets(player.location, 0);\r\n    // set allies if necessary\r\n    if (includeAllies) {\r\n        level.monsters.getAllThings().forEach((m, index, array) => {\r\n            if (m.team == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].Team.PlayerAllied) {\r\n                pm.setDijkstraMapTargets(m.location, 0);\r\n            }\r\n        });\r\n    }\r\n    pm.solve();\r\n    return pm;\r\n}\r\nfunction createMapFromPlayer(gm, level, to_map, includeAllies) {\r\n    let from_map = new Pathmap(level, PathmapGoalType.EscapeTarget);\r\n    let escape_factor = -1.2;\r\n    let player = gm.getPlayer();\r\n    // invert the to-map\r\n    let key;\r\n    for (key in to_map.field.things) {\r\n        from_map.djmap[key] = to_map.djmap[key] * escape_factor;\r\n    }\r\n    // reset player to high peak\r\n    from_map.setDijkstraMapTargets(player.location, _fastdijkstramap__WEBPACK_IMPORTED_MODULE_1__[\"MAX_INT\"]);\r\n    // set allies if necessary\r\n    if (includeAllies) {\r\n        level.monsters.getAllThings().forEach((m, index, array) => {\r\n            if (m.team == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].Team.PlayerAllied) {\r\n                from_map.setDijkstraMapTargets(m.location, _fastdijkstramap__WEBPACK_IMPORTED_MODULE_1__[\"MAX_INT\"]);\r\n            }\r\n        });\r\n    }\r\n    from_map.solve();\r\n    return from_map;\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/brew_engine/pathmap.ts\n");

/***/ }),

/***/ "./src/brew_engine/timers.ts":
/*!***********************************!*\
  !*** ./src/brew_engine/timers.ts ***!
  \***********************************/
/*! exports provided: TurnTimer, TimerMonitor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TurnTimer\", function() { return TurnTimer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TimerMonitor\", function() { return TimerMonitor; });\n/* harmony import */ var _brew__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../brew */ \"./src/brew.ts\");\n\r\n// interface ITimerID {\r\n//     monster_id: number,\r\n//     flag : Brew.Enums.Flag\r\n// }\r\nclass TurnTimer {\r\n    constructor(actor, flag, start_turn, duration) {\r\n        this.actor = actor;\r\n        this.flag = flag;\r\n        this.start_turn = start_turn;\r\n        this.duration = duration;\r\n        this.trigger_turn = start_turn + duration;\r\n        this.extensions_count = 0;\r\n    }\r\n    checkTrigger(current_turn) {\r\n        return current_turn >= this.trigger_turn;\r\n    }\r\n    getKey() {\r\n        return makeTurnTimerKey(this.actor, this.flag);\r\n    }\r\n    extendDuration(extra_turns) {\r\n        this.duration += extra_turns;\r\n        this.trigger_turn += extra_turns;\r\n        this.extensions_count += 1;\r\n    }\r\n    getTurnsRemaining(current_turn) {\r\n        return (this.trigger_turn - current_turn);\r\n    }\r\n}\r\nfunction makeTurnTimerKey(actor, flag) {\r\n    return actor.getID().toString() + '_' + _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].Flag[flag];\r\n}\r\nclass TimerMonitor {\r\n    constructor() {\r\n        this.dictionaryOfTimers = {};\r\n    }\r\n    hasTimer(actor, flag) {\r\n        let key = makeTurnTimerKey(actor, flag);\r\n        return (key in this.dictionaryOfTimers);\r\n    }\r\n    getTimer(actor, flag) {\r\n        if (this.hasTimer(actor, flag)) {\r\n            let key = makeTurnTimerKey(actor, flag);\r\n            return this.dictionaryOfTimers[key];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    removeTimer(actor, flag) {\r\n        if (this.hasTimer(actor, flag)) {\r\n            let key = makeTurnTimerKey(actor, flag);\r\n            delete this.dictionaryOfTimers[key];\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    setFlagWithTimer(gm, actor, flag, turn_duration) {\r\n        let new_timer = new TurnTimer(actor, flag, gm.turn_count, turn_duration);\r\n        actor.setFlag(flag);\r\n        this.addTimer(new_timer);\r\n    }\r\n    addTimer(new_timer) {\r\n        // if has an existing timer, extend it instead\r\n        if (this.hasTimer(new_timer.actor, new_timer.flag)) {\r\n            // this.removeTimer(new_timer.actor, new_timer.flag)\r\n            let existing_timer = this.getTimer(new_timer.actor, new_timer.flag);\r\n            existing_timer.extendDuration(new_timer.duration);\r\n        }\r\n        else {\r\n            let key = makeTurnTimerKey(new_timer.actor, new_timer.flag);\r\n            this.dictionaryOfTimers[key] = new_timer;\r\n        }\r\n    }\r\n    getAllTimers() {\r\n        let all_timers = [];\r\n        for (var key in this.dictionaryOfTimers) {\r\n            if (this.dictionaryOfTimers.hasOwnProperty(key)) {\r\n                var element = this.dictionaryOfTimers[key];\r\n                all_timers.push(element);\r\n            }\r\n        }\r\n        return all_timers;\r\n        // return (let tt of this.dictionaryOfTimers)\r\n    }\r\n    getAllTimersTriggeredFor(actor, current_turn) {\r\n        let all_timers = this.getAllTimers();\r\n        let their_timers = all_timers.filter((timer, index, array) => {\r\n            return (timer.actor.isSameThing(actor) && (timer.checkTrigger(current_turn)));\r\n        });\r\n        return their_timers;\r\n    }\r\n    getAllTimersFor(actor) {\r\n        let all_timers = this.getAllTimers();\r\n        let their_timers = all_timers.filter((timer, index, array) => {\r\n            return timer.actor.isSameThing(actor);\r\n        });\r\n        return their_timers;\r\n    }\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/brew_engine/timers.ts\n");

/***/ }),

/***/ "./src/brew_game/animations.ts":
/*!*************************************!*\
  !*** ./src/brew_game/animations.ts ***!
  \*************************************/
/*! exports provided: runAnimationEvent, runAnimation_OverPath, runAnimation_Flash, runAnimation_Circle, createCircleAnimationEvent, createReverseCircleAnimationEvent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"runAnimationEvent\", function() { return runAnimationEvent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"runAnimation_OverPath\", function() { return runAnimation_OverPath; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"runAnimation_Flash\", function() { return runAnimation_Flash; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"runAnimation_Circle\", function() { return runAnimation_Circle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createCircleAnimationEvent\", function() { return createCircleAnimationEvent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createReverseCircleAnimationEvent\", function() { return createReverseCircleAnimationEvent; });\n/* harmony import */ var _brew__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../brew */ \"./src/brew.ts\");\n\r\nfunction runAnimationEvent(gm, brEvent) {\r\n    // console.log(\"running animation \", brEvent.animationData.animationType)\r\n    if (brEvent.animationData.animationType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewAnimationType.Flash) {\r\n        runAnimation_Flash(gm, brEvent);\r\n    }\r\n    else if (brEvent.animationData.animationType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewAnimationType.OverPath) {\r\n        runAnimation_OverPath(gm, brEvent);\r\n    }\r\n    else if (brEvent.animationData.animationType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewAnimationType.CircleOut) {\r\n        runAnimation_Circle(gm, false, brEvent);\r\n    }\r\n    else if (brEvent.animationData.animationType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewAnimationType.CircleIn) {\r\n        runAnimation_Circle(gm, true, brEvent);\r\n    }\r\n    else {\r\n        console.error(`unknown animation type ${brEvent.animationData.animationType}`);\r\n    }\r\n}\r\nfunction runAnimation_OverPath(gm, brEvent) {\r\n    let path;\r\n    if (brEvent.animationData.path) {\r\n        path = brEvent.animationData.path;\r\n        // path.splice(path.length-1,1)\r\n    }\r\n    else if ((brEvent.animationData.from_xy) && (brEvent.animationData.to_xy)) {\r\n        let to_xy = brEvent.animationData.to_xy;\r\n        let from_xy = brEvent.animationData.from_xy;\r\n        path = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].getLineBetweenPoints(from_xy, to_xy);\r\n        // path.splice(0, 1)\r\n    }\r\n    else {\r\n        console.log(\"can't run animation over path without path or to/from xy\");\r\n        gm.endEvent(brEvent);\r\n    }\r\n    if (path.length <= 1) {\r\n        console.warn(\"skipping path animation with path <= 1\");\r\n        gm.endEvent(brEvent);\r\n        return;\r\n    }\r\n    // if (path.length == 0) {\r\n    //     console.warn(\"tried running animation OverPath event without a path\")\r\n    //     gm.endEvent(brEvent)\r\n    // }\r\n    let level = gm.getCurrentLevel();\r\n    path.forEach((xy, index, array) => {\r\n        setTimeout(() => {\r\n            if (index == path.length - 1) {\r\n                level.above.removeAt(path[index - 1]);\r\n                gm.displayAt(path[index - 1]);\r\n                gm.endEvent(brEvent);\r\n            }\r\n            else {\r\n                if (index > 0) {\r\n                    // remove old one\r\n                    level.above.removeAt(path[index - 1]);\r\n                    gm.displayAt(path[index - 1]);\r\n                }\r\n                level.above.removeAt(xy);\r\n                level.above.setAt(xy, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].aboveFactory(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].AboveType.Projectile, { code: brEvent.animationData.code, color: brEvent.animationData.color }));\r\n                gm.displayAt(xy);\r\n            }\r\n        }, (index * _brew__WEBPACK_IMPORTED_MODULE_0__[\"Config\"].animation_speed));\r\n    });\r\n}\r\nfunction runAnimation_Flash(gm, data) {\r\n    let to_xy = data.animationData.to_xy;\r\n    let level = gm.getCurrentLevel();\r\n    let hasExisting = level.above.hasAt(to_xy);\r\n    let existing_above;\r\n    let flash_color = data.animationData.color;\r\n    // show flash immediately\r\n    if (hasExisting) {\r\n        existing_above = level.above.getAt(to_xy);\r\n        level.above.removeAt(to_xy);\r\n    }\r\n    level.above.setAt(to_xy, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].aboveFactory(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].AboveType.Flash, { color: flash_color }));\r\n    gm.displayAt(to_xy);\r\n    // wait a bit then replace everything and end the event\r\n    setTimeout(() => {\r\n        level.above.removeAt(to_xy);\r\n        if (hasExisting) {\r\n            level.above.setAt(to_xy, existing_above);\r\n        }\r\n        gm.displayAt(to_xy);\r\n        gm.endEvent(data);\r\n    }, (1 * _brew__WEBPACK_IMPORTED_MODULE_0__[\"Config\"].animation_speed));\r\n}\r\nfunction runAnimation_Circle(gm, reverse, data) {\r\n    let level = gm.getCurrentLevel();\r\n    let xy_lst;\r\n    //center_xy: Brew.Coordinate, radius: number, flash_color : number[], \r\n    let center_xy = data.animationData.to_xy;\r\n    let radius = data.animationData.range;\r\n    let flash_color = data.animationData.color;\r\n    if (reverse) {\r\n        radius += 1;\r\n    }\r\n    let range_lst = [...Array(radius + 1).keys()]; // [0, 1, 2]\r\n    if (reverse) {\r\n        // range_lst = range_lst.sort((a, b) => { return range_lst[a] - range_lst[b] })\r\n        range_lst = range_lst.reverse();\r\n    }\r\n    // console.log(range_lst)\r\n    range_lst.forEach((r, index) => {\r\n        setTimeout(() => {\r\n            // console.log(\"triggered r = \", r)\r\n            if (index > 0) {\r\n                // clear previous circle\r\n                xy_lst = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].getCirclePoints(center_xy, r);\r\n                // xy_lst.forEach((xy, index, array) => {\r\n                xy_lst.forEach((xy, r, array) => {\r\n                    level.above.removeAt(xy);\r\n                });\r\n                gm.displayList(xy_lst);\r\n            }\r\n            if (index < range_lst.length - 1) {\r\n                // draw new circle\r\n                let last_r = reverse ? (r - 1) : (r + 1);\r\n                xy_lst = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].getCirclePoints(center_xy, last_r);\r\n                // xy_lst.forEach((xy, index, array) => {\r\n                xy_lst.forEach((xy) => {\r\n                    if (level.isValid(xy)) {\r\n                        level.above.removeAt(xy);\r\n                        level.above.setAt(xy, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].aboveFactory(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].AboveType.Flash, { color: flash_color }));\r\n                    }\r\n                });\r\n                gm.displayList(xy_lst);\r\n            }\r\n            if (index == range_lst.length - 1) {\r\n                gm.endEvent(data);\r\n            }\r\n        }, (index * _brew__WEBPACK_IMPORTED_MODULE_0__[\"Config\"].animation_speed));\r\n    });\r\n}\r\n// export function animateRocketPunch(gm: Brew.GameMaster, data: Brew.Enums.IBrewEvent) {\r\n//     let from_xy = data.targetingData.from_xy\r\n//     let to_xy = data.targetingData.to_xy\r\n//     let path = Utils.getLineBetweenPoints(from_xy, to_xy)\r\n//     path.splice(0, 1)\r\n//     let level = gm.getCurrentLevel()\r\n//     path.forEach((xy: Brew.Coordinate, index, array) => {\r\n//         setTimeout(() => {\r\n//             if (index == path.length - 1) {\r\n//                 level.above.removeAt(path[index-1])\r\n//                 // todo: need a way to block or knock items already there\r\n//                 // level.items.removeAt(path[index])\r\n//                 // level.items.setAt(path[index], item)\r\n//                 gm.displayAt(path[index-1])\r\n//                 // gm.displayAt(path[index])\r\n//                 gm.endEvent(data)\r\n//             } else {\r\n//                 if (index > 0) {\r\n//                     // remove old one\r\n//                     level.above.removeAt(path[index-1])\r\n//                     gm.displayAt(path[index-1])\r\n//                 } \r\n//                 level.above.removeAt(xy)\r\n//                 level.above.setAt(xy, Brew.Definitions.aboveFactory(Brew.Definitions.AboveType.Flash, {code: '@', color: Brew.Color.red} ))\r\n//                 gm.displayAt(xy)\r\n//             }\r\n//         },\r\n//         (index * Brew.Config.animation_speed)\r\n//         )\r\n//     })\r\n// }\r\nfunction createCircleAnimationEvent(predecessorEvent, circle_color, radius) {\r\n    return createCircleAnimation_Helper(predecessorEvent, false, circle_color, radius);\r\n}\r\nfunction createReverseCircleAnimationEvent(predecessorEvent, circle_color, radius) {\r\n    return createCircleAnimation_Helper(predecessorEvent, true, circle_color, radius);\r\n}\r\nfunction createCircleAnimation_Helper(predecessorEvent, reversed, circle_color, radius) {\r\n    let circleType;\r\n    if (reversed) {\r\n        circleType = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewAnimationType.CircleIn;\r\n    }\r\n    else {\r\n        circleType = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewAnimationType.CircleOut;\r\n    }\r\n    let animationEvent = {\r\n        eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.RunAnimation,\r\n        actor: predecessorEvent.actor,\r\n        playerInitiated: predecessorEvent.playerInitiated,\r\n        endsTurn: false,\r\n        animationData: {\r\n            animationType: circleType,\r\n            range: radius,\r\n            color: circle_color,\r\n            to_xy: predecessorEvent.actor.location.clone(),\r\n            from_xy: predecessorEvent.actor.location.clone()\r\n        }\r\n    };\r\n    return animationEvent;\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/brew_game/animations.ts\n");

/***/ }),

/***/ "./src/brew_game/combat.ts":
/*!*********************************!*\
  !*** ./src/brew_game/combat.ts ***!
  \*********************************/
/*! exports provided: killMonster, triggerKnockbackBlast, calcDamage, applyDamage, possiblyConvertAttackToSmashAttack, attack, checkForWallSmash, smash_attack, applyMassDamage, filterDamageEffects */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"killMonster\", function() { return killMonster; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"triggerKnockbackBlast\", function() { return triggerKnockbackBlast; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"calcDamage\", function() { return calcDamage; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"applyDamage\", function() { return applyDamage; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"possiblyConvertAttackToSmashAttack\", function() { return possiblyConvertAttackToSmashAttack; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"attack\", function() { return attack; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"checkForWallSmash\", function() { return checkForWallSmash; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"smash_attack\", function() { return smash_attack; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"applyMassDamage\", function() { return applyMassDamage; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"filterDamageEffects\", function() { return filterDamageEffects; });\n/* harmony import */ var _brew__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../brew */ \"./src/brew.ts\");\n\r\nfunction killMonster(gm, victim) {\r\n    let level = gm.getCurrentLevel();\r\n    let xy = victim.location.clone();\r\n    level.monsters.removeAt(xy);\r\n    gm.displayAt(xy);\r\n    gm.removeActorFromScheduler(victim);\r\n    // todo: animate parts/blood spray\r\n    // let surrounding_xy_list = xy.getAdjacent()\r\n    let nearby_xy;\r\n    let item_at;\r\n    // todo: randomize/configurize # of parts\r\n    // for (let i = 0; i < 4; i++) {\r\n    //     let random_angle = Math.floor(Math.random()*2*Math.PI)\r\n    //     let random_distance = Brew.Utils.getRandomInt(1, 3)\r\n    //     let offset_xy = Brew.Utils.getPolarOffsetCoordinate(random_angle, random_distance)\r\n    //     nearby_xy = xy.add(offset_xy)\r\n    //     // nearby_xy = randomOf(surrounding_xy_list)\r\n    //     if (!(level.isValid(nearby_xy))) {\r\n    //         continue\r\n    //     }\r\n    //     if (level.terrain.getAt(nearby_xy).blocks_flying) {\r\n    //         continue\r\n    //     }\r\n    //     item_at = level.items.getAt(nearby_xy)\r\n    //     if (item_at) {\r\n    //         continue\r\n    //     }\r\n    //     level.features.setAt(nearby_xy, Brew.Definitions.featureFactory(Brew.Definitions.FeatureType.Scrap))\r\n    //     gm.displayAt(nearby_xy)\r\n    // }        \r\n    // level.features.setAt(xy, Brew.Definitions.featureFactory(Definitions.FeatureType.RepairGoo))\r\n    // leave corpses for all HP > 1\r\n    // if (victim.hp.getMaxLevel() > 1) {\r\n    //     let corpse_xy : Brew.Coordinate\r\n    //     item_at = level.items.getAt(xy)\r\n    //     if (item_at) {\r\n    //         let nearby_xy = level.getSafeLocationNear(xy, true)\r\n    //         level.items.removeAt(xy)\r\n    //         level.items.setAt(nearby_xy, item_at)\r\n    //         gm.displayAt(nearby_xy)\r\n    //     }\r\n    //     level.items.setAt(xy, Brew.Definitions.itemFactory(Brew.Definitions.ItemType.Wreckage))\r\n    //     gm.displayAt(xy)\r\n    // }\r\n    let didTrigger = triggerOnDeath(gm, victim);\r\n}\r\nfunction triggerOnDeath(gm, victim) {\r\n    let num_events = 0;\r\n    if (victim.hasFlag(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].Flag.OnDeathKnockback)) {\r\n        num_events += triggerKnockbackBlast(gm, victim.location.clone(), 10, [victim]); // todo: config blast radius\r\n    }\r\n    return (num_events > 0);\r\n}\r\nfunction triggerKnockbackBlast(gm, origin_xy, magnitude, excluded_mobs = []) {\r\n    let num_events = 0;\r\n    let level = gm.getCurrentLevel();\r\n    let dist;\r\n    // figure out which targets are affected by the blast\r\n    // also build a distance map so we dont have to recalc everything again\r\n    let area = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].getBlastArea(level, origin_xy, magnitude);\r\n    area.removeCoordinate(origin_xy);\r\n    let affected_mobs = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].getMonstersWithinCoordinateArea(level, area);\r\n    affected_mobs.sort((mob_a, mob_b) => {\r\n        return _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].dist2d(origin_xy, mob_b.location) - _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].dist2d(origin_xy, mob_a.location);\r\n    });\r\n    // console.log(affected_mobs)\r\n    let trigger_actor = level.monsters.getAt(origin_xy);\r\n    if (!(trigger_actor)) {\r\n        trigger_actor = gm.getArchitect();\r\n    }\r\n    let kdist;\r\n    let knockbackEvent;\r\n    affected_mobs.forEach((mob) => {\r\n        kdist = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Movement\"].calculateKnockbackDistance(gm, origin_xy, magnitude, mob);\r\n        knockbackEvent = {\r\n            eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.Knockback,\r\n            actor: trigger_actor,\r\n            playerInitiated: false,\r\n            endsTurn: false,\r\n            knockbackData: {\r\n                magnitude: magnitude,\r\n                origin_xy: origin_xy,\r\n                target: mob\r\n            }\r\n        };\r\n        gm.insertEvent(knockbackEvent);\r\n        num_events += 1;\r\n    });\r\n    gm.insertEvent({\r\n        eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.RunAnimation,\r\n        actor: trigger_actor,\r\n        playerInitiated: false,\r\n        endsTurn: false,\r\n        animationData: {\r\n            animationType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewAnimationType.CircleOut,\r\n            color: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].color_force,\r\n            from_xy: origin_xy,\r\n            to_xy: origin_xy,\r\n            range: magnitude\r\n        }\r\n    });\r\n    return num_events;\r\n}\r\nfunction calcDamage(gm, attacker, victim, damage) {\r\n    // see how much damage victim can absorb\r\n    // let shield_strength = 0\r\n    // let shield : Brew.Power = victim.getPowers().getPowerOfType(BrewPowerType.Shield)\r\n    // if ((shield) && (shield.currentCharge > 0)) {\r\n    //     shield_strength = shield.currentCharge\r\n    // }\r\n    let shield_strength = 0;\r\n    if (victim) {\r\n        shield_strength = victim.shields.getCurrentLevel();\r\n    }\r\n    let hp_damage;\r\n    let shield_damage;\r\n    let is_fatal = false;\r\n    if (shield_strength >= damage) {\r\n        hp_damage = 0;\r\n        shield_damage = damage;\r\n        if ((shield_strength == shield_damage) && (victim.isSameThing(gm.getPlayer()))) {\r\n            // if we just lost our shield, recolor\r\n            victim.color = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].hero_blue;\r\n        }\r\n    }\r\n    else if ((victim) && (victim.hasFlag(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].Flag.Invulnerable))) {\r\n        hp_damage = 0;\r\n    }\r\n    else {\r\n        hp_damage = damage - shield_strength;\r\n        shield_damage = shield_strength;\r\n        if (victim) {\r\n            is_fatal = ((victim.hp.getCurrentLevel() - hp_damage) <= 0);\r\n        }\r\n        else {\r\n            is_fatal = false;\r\n        }\r\n    }\r\n    // if target is already WEAK, every attack with damage over 1 is fatal\r\n    if (victim) {\r\n        let is_weakened = victim.hasFlag(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].Flag.Weak);\r\n        if (is_weakened && (hp_damage > 0)) {\r\n            is_fatal = true;\r\n        }\r\n    }\r\n    return {\r\n        target: victim,\r\n        damageToHP: hp_damage,\r\n        damageToShields: shield_damage,\r\n        shieldUsed: null,\r\n        isFatal: is_fatal\r\n    };\r\n}\r\nfunction applyDamage(gm, data) {\r\n    let victim = data.damageData.target;\r\n    // console.log(\"applying damage\")\r\n    let calc_damage = data.damageData;\r\n    if (victim) {\r\n        // apply damage\r\n        if (calc_damage.damageToShields > 0) {\r\n            victim.shields.decrement(calc_damage.damageToShields);\r\n        }\r\n        if (calc_damage.damageToHP > 0) {\r\n            victim.hp.decrement(calc_damage.damageToHP);\r\n        }\r\n        let flash_color;\r\n        if (data.damageData.damageToShields > data.damageData.damageToHP) {\r\n            flash_color = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].power_shield;\r\n        }\r\n        else {\r\n            flash_color = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].damage_flash;\r\n        }\r\n        let animationEvent = {\r\n            eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.RunAnimation,\r\n            actor: data.actor,\r\n            endsTurn: false,\r\n            playerInitiated: true,\r\n            animationData: {\r\n                animationType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewAnimationType.Flash,\r\n                from_xy: null,\r\n                to_xy: data.damageData.target.location,\r\n                color: flash_color\r\n            }\r\n        };\r\n        gm.insertEvent(animationEvent);\r\n    }\r\n    if ((victim) && (calc_damage.isFatal) && (victim.isSameThing(gm.getPlayer()))) {\r\n        let fatalEvent = {\r\n            eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.PlayerDeath,\r\n            actor: data.actor,\r\n            playerInitiated: false,\r\n            endsTurn: true\r\n        };\r\n        // data.endsTurn = false\r\n        gm.insertEvent(fatalEvent);\r\n        gm.endEvent(data);\r\n    }\r\n    else {\r\n        if ((victim) && (calc_damage.isFatal)) {\r\n            // someone else died\r\n            killMonster(gm, victim);\r\n        }\r\n        if (data.damageData.effects) {\r\n            if (victim) {\r\n                applyCombatEffects(gm, data.actor, victim, data.damageData.effects);\r\n            }\r\n            else {\r\n                applyCombatEffects(gm, data.actor, null, data.damageData.effects, data.attackData.to_xy);\r\n            }\r\n        }\r\n        gm.endEvent(data);\r\n    }\r\n}\r\nfunction applyCombatEffects(gm, attacker, victim, effects, nonvictim_target_xy) {\r\n    if (victim) {\r\n        if (effects.indexOf(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].Flag.CausesStun) > -1) {\r\n            gm.timer_monitor.setFlagWithTimer(gm, victim, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].Flag.Stunned, 5);\r\n            gm.displayAt(victim.location);\r\n        }\r\n        if (effects.indexOf(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].Flag.CausesWeak) > -1) {\r\n            gm.timer_monitor.setFlagWithTimer(gm, victim, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].Flag.Weak, 5);\r\n            gm.displayAt(victim.location);\r\n        }\r\n        if (effects.indexOf(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].Flag.CausesInvulnerable) > -1) {\r\n            gm.timer_monitor.setFlagWithTimer(gm, victim, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].Flag.Invulnerable, 5);\r\n            gm.displayAt(victim.location);\r\n        }\r\n    }\r\n    if (effects.indexOf(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].Flag.CausesExplosion) > -1) {\r\n        // let explosion_damage = 2\r\n        let fake_grenade = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].itemFactory(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemType.Grenade, { damage: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Config\"].explosion_damage });\r\n        fake_grenade.subtype = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemSubtype.G_Explosive;\r\n        let target_xy;\r\n        if (victim) {\r\n            target_xy = victim.location.clone();\r\n        }\r\n        else if (nonvictim_target_xy) {\r\n            target_xy = nonvictim_target_xy;\r\n        }\r\n        else {\r\n            throw new Error(\"missing target coord for non-victim explosion\");\r\n        }\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"ItemInteraction\"].triggerGrenade(gm, fake_grenade, target_xy);\r\n    }\r\n    if (effects.indexOf(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].Flag.CausesKnockback) > -1) {\r\n        let magnitude = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Movement\"].calculateKnockbackDistance(gm, attacker.location, 10, victim);\r\n        let knockbackEvent = {\r\n            eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.Knockback,\r\n            actor: attacker,\r\n            playerInitiated: false,\r\n            endsTurn: false,\r\n            knockbackData: {\r\n                magnitude: magnitude,\r\n                origin_xy: attacker.location.clone(),\r\n                target: victim\r\n            }\r\n        };\r\n        gm.insertEvent(knockbackEvent);\r\n    }\r\n}\r\nfunction possiblyConvertAttackToSmashAttack(gm, attackEvent) {\r\n    if (!(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Intel\"].isPlayer(gm, attackEvent.actor))) {\r\n        // only player can wall smash (for now?)\r\n        return attackEvent;\r\n    }\r\n    let wallsmash_response = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Combat\"].checkForWallSmash(gm, attackEvent.actor, attackEvent.attackData.target);\r\n    if (wallsmash_response.is_wall_smash) {\r\n        attackEvent.eventType = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.SmashAttack;\r\n        attackEvent.attackData.damage *= 2;\r\n        attackEvent.attackData.behind_xy = wallsmash_response.behind_target_xy;\r\n    }\r\n    return attackEvent;\r\n}\r\nfunction attack(gm, data) {\r\n    let animationEvent;\r\n    let victim = data.attackData.target;\r\n    if (data.powerData) {\r\n        data.powerData.power.charge_stat.decrement(1);\r\n    }\r\n    // when you get attacked go into hunting mode no matter what\r\n    if (victim) {\r\n        if (!(victim.isSameThing(gm.getPlayer()))) {\r\n            victim.monster_status = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].MonsterStatus.Hunt;\r\n        }\r\n    }\r\n    let damageEvent = Object.assign({}, data);\r\n    damageEvent.eventType = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.ApplyDamage;\r\n    // if we already have damage calcs passed in, use them, if not, calculate now\r\n    if (!(damageEvent.damageData)) {\r\n        damageEvent.damageData = calcDamage(gm, data.actor, victim, data.attackData.damage);\r\n    }\r\n    // add any effects to the damage event\r\n    if (data.attackData.effects) {\r\n        damageEvent.damageData.effects = data.attackData.effects.concat([]);\r\n    }\r\n    if ((data.attackData.isMelee) || ((victim) && (victim.location.compare(data.actor.location)))) {\r\n        console.log(`${data.actor.name} attacks ${data.attackData.target.name}`);\r\n        gm.insertEvent(damageEvent);\r\n        gm.endEvent(data);\r\n    }\r\n    else {\r\n        // handle ranged attacks\r\n        // console.log(`${data.actor.name} SHOOTS ${data.attackData.target.name}`)\r\n        animationEvent = {\r\n            eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.RunAnimation,\r\n            actor: data.actor,\r\n            endsTurn: false,\r\n            playerInitiated: true,\r\n            animationData: {\r\n                animationType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewAnimationType.OverPath,\r\n                from_xy: data.attackData.from_xy,\r\n                to_xy: data.attackData.to_xy,\r\n                color: data.actor.color,\r\n                code: '*'\r\n            }\r\n        };\r\n        gm.insertEvent_Next(animationEvent);\r\n        gm.insertEvent(damageEvent);\r\n        gm.endEvent(data);\r\n    }\r\n}\r\nfunction checkForWallSmash(gm, attacker, target) {\r\n    // check for wall smashing\r\n    let attack_offset_xy = target.location.subtract(attacker.location).toUnit();\r\n    // let behind_target_xy = attacker.location.add(attack_offset_xy.multiplyScalar(2))\r\n    let behind_target_xy = target.location.add(attack_offset_xy.multiplyScalar(1));\r\n    let level = gm.getCurrentLevel();\r\n    if (level.isValid(behind_target_xy)) {\r\n        let terrain_at = level.terrain.getAt(behind_target_xy);\r\n        // if (terrain_at.blocks_walking) {\r\n        if ((terrain_at.blocks_flying) || terrain_at.is_solid) {\r\n            return {\r\n                is_wall_smash: true,\r\n                behind_target_xy: behind_target_xy\r\n            };\r\n        }\r\n    }\r\n    return {\r\n        is_wall_smash: false,\r\n        behind_target_xy: behind_target_xy\r\n    };\r\n}\r\nfunction smash_attack(gm, data) {\r\n    if (data.powerData) {\r\n        data.powerData.power.charge_stat.decrement(1);\r\n    }\r\n    let victim = data.attackData.target;\r\n    let calc_damage = calcDamage(gm, data.actor, victim, data.attackData.damage);\r\n    // depending on what was behind the attack, maybe break something\r\n    let level = gm.getCurrentLevel();\r\n    if (data.attackData.behind_xy) {\r\n        let terrain_at = level.terrain.getAt(data.attackData.behind_xy);\r\n        if (_brew__WEBPACK_IMPORTED_MODULE_0__[\"Movement\"].isDoor(terrain_at)) {\r\n            level.terrain.removeAt(data.attackData.behind_xy);\r\n            level.terrain.setAt(data.attackData.behind_xy, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].terrainFactory(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].TerrainType.DoorBroken));\r\n            gm.displayAt(data.attackData.behind_xy);\r\n        }\r\n    }\r\n    if (calc_damage.isFatal) {\r\n        // when smash attacks are fatal, move player into dead victims spot\r\n        // move the player into that spot\r\n        let level = gm.getCurrentLevel();\r\n        let old_xy = gm.getPlayer().location;\r\n        let new_xy = victim.location.clone();\r\n        killMonster(gm, victim);\r\n        level.monsters.removeAt(old_xy);\r\n        level.monsters.setAt(new_xy, gm.getPlayer());\r\n        gm.displayList([old_xy, new_xy]);\r\n        let animationEvent = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Animations\"].createCircleAnimationEvent(data, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].damage_flash, 3);\r\n        animationEvent.animationData.to_xy = data.attackData.to_xy;\r\n        gm.insertEvent(animationEvent);\r\n        // Brew.Animations.animateCircle(gm, data.attackData.to_xy, 3, Brew.Color.damage_flash, data)\r\n        gm.endEvent(data);\r\n    }\r\n    else {\r\n        data.damageData = calc_damage;\r\n        attack(gm, data);\r\n    }\r\n}\r\nfunction applyMassDamage(gm, brEvent) {\r\n    let xy_list = brEvent.pathsData.path;\r\n    let attackData = brEvent.attackData;\r\n    let level = gm.getCurrentLevel();\r\n    xy_list.forEach((xy, index, array) => {\r\n        let mob_at = level.monsters.getAt(xy);\r\n        // todo: damage/affect terrain, items, etc.\r\n        if (mob_at) {\r\n            let damageData = calcDamage(gm, brEvent.actor, mob_at, attackData.damage);\r\n            let damageEvent = {\r\n                eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.ApplyDamage,\r\n                actor: brEvent.actor,\r\n                playerInitiated: false,\r\n                endsTurn: false,\r\n                damageData: damageData\r\n            };\r\n            damageEvent.damageData.effects = brEvent.attackData.effects;\r\n            gm.insertEvent(damageEvent);\r\n        }\r\n    });\r\n    gm.endEvent(brEvent);\r\n}\r\nfunction filterDamageEffects(listOfFlags) {\r\n    let combat_effects_list = [\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].Flag.CausesKnockback,\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].Flag.CausesStun,\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].Flag.CausesExplosion,\r\n    ];\r\n    return listOfFlags.filter((my_flag) => {\r\n        return (combat_effects_list.indexOf(my_flag) > -1);\r\n    });\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/brew_game/combat.ts\n");

/***/ }),

/***/ "./src/brew_game/display.ts":
/*!**********************************!*\
  !*** ./src/brew_game/display.ts ***!
  \**********************************/
/*! exports provided: Display */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Display\", function() { return Display; });\n/* harmony import */ var rot_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rot-js */ \"./node_modules/rot-js/lib/rot.js\");\n/* harmony import */ var rot_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(rot_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _brew__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../brew */ \"./src/brew.ts\");\n\r\n\r\nclass ROTDisplay2 extends rot_js__WEBPACK_IMPORTED_MODULE_0__[\"Display\"] {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.my_context = null;\r\n    }\r\n    getWidth() {\r\n        return Number(this.getContainer().attributes.getNamedItem(\"width\").value);\r\n    }\r\n    getHeight() {\r\n        return Number(this.getContainer().attributes.getNamedItem(\"height\").value);\r\n    }\r\n    getTileWidth() {\r\n        return this.getWidth() / _brew__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].screen_width_tiles;\r\n    }\r\n    getTileHeight() {\r\n        return this.getHeight() / _brew__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].screen_height_tiles;\r\n    }\r\n    clearRect(x, y, width, height) {\r\n        // this._context = <HTMLElement>(this.getContainer())\r\n        // this._context = this.getContainer().firstChild(\r\n        if (!(this.my_context)) {\r\n            // let canvas = <HTMLCanvasElement>this.getContainer()\r\n            // this.my_context = canvas.getContext(\"2d\")\r\n            this.my_context = this.getContainer().getContext(\"2d\");\r\n        }\r\n        this.my_context.clearRect(x * width, y * height, width, height);\r\n    }\r\n    clearRect_Tiles(x, y, width_in_tiles, height_in_tiles) {\r\n        if (!(this.my_context)) {\r\n            this.my_context = this.getContainer().getContext(\"2d\");\r\n        }\r\n        let tile_width = this.getTileWidth();\r\n        let tile_height = this.getTileHeight();\r\n        this.my_context.clearRect(x * tile_width, y * tile_height, width_in_tiles * tile_width, height_in_tiles * tile_height);\r\n    }\r\n}\r\nclass Display {\r\n    constructor(gm, div_container) {\r\n        this.rot_displays = {};\r\n        this.gm = gm;\r\n        this.highlights = new _brew__WEBPACK_IMPORTED_MODULE_1__[\"GridOfThings\"]();\r\n        // setup ROTjs canvas(es)\r\n        this.initCanvas(div_container, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].screen_width_tiles, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].screen_height_tiles);\r\n        // this.my_tile_width = this.getDisplay(Brew.Enums.DisplayNames.Game).getContainer().width / Brew.Config.screen_width_tiles\r\n        // this.my_tile_height = this.getDisplay(Brew.Enums.DisplayNames.Game).getContainer().height / Brew.Config.screen_height_tiles\r\n        this.my_tile_width = Number(this.getDisplay(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].DisplayNames.Game).getContainer().attributes.getNamedItem(\"width\").value) / _brew__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].screen_width_tiles;\r\n        this.my_tile_height = Number(this.getDisplay(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].DisplayNames.Game).getContainer().attributes.getNamedItem(\"height\").value) / _brew__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].screen_height_tiles;\r\n    }\r\n    initCanvas(div_container, width, height) {\r\n        // if we already have containers, destroy/recreate them when game restarts\r\n        if (div_container.children.length > 0) {\r\n            while (div_container.firstChild) {\r\n                div_container.removeChild(div_container.firstChild);\r\n            }\r\n        }\r\n        let bg_color;\r\n        if (_brew__WEBPACK_IMPORTED_MODULE_1__[\"Debug\"].BOSS_MODE) {\r\n            bg_color = \"transparent\";\r\n        }\r\n        else {\r\n            bg_color = rot_js__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].toHex(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].charcoal);\r\n        }\r\n        // game - main screen\r\n        let canvas_bg_color;\r\n        canvas_bg_color = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].bg_unexplored;\r\n        let font_size = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].font_size;\r\n        let gameDisplay = new ROTDisplay2({\r\n            width: width,\r\n            height: height,\r\n            border: 0,\r\n            spacing: 1.15,\r\n            fontSize: font_size,\r\n            bg: bg_color,\r\n            // bg: \"transparent\",\r\n            forceSquareRatio: false,\r\n        });\r\n        let game_canvas = (gameDisplay.getContainer());\r\n        div_container.appendChild(game_canvas);\r\n        this.addDisplay(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].DisplayNames.Game, gameDisplay);\r\n        // hud - targeting, highlighting, etc\r\n        let hudDisplay = new ROTDisplay2({\r\n            width: width,\r\n            height: height,\r\n            border: 0,\r\n            spacing: 1.15,\r\n            fontSize: font_size,\r\n            // bg:  ROT.Color.toHex(Brew.Color.blue), \r\n            bg: \"transparent\",\r\n            forceSquareRatio: false,\r\n        });\r\n        let hud_canvas = (hudDisplay.getContainer());\r\n        div_container.appendChild(hud_canvas);\r\n        let top_height = hudDisplay.getTileHeight();\r\n        hud_canvas.setAttribute(\"style\", `position: absolute; top: ${top_height}; left: 0`);\r\n        this.addDisplay(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].DisplayNames.HUD, hudDisplay);\r\n        // BOSS MODE\r\n        if (_brew__WEBPACK_IMPORTED_MODULE_1__[\"Debug\"].BOSS_MODE) {\r\n            bg_color = rot_js__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].toHex(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].white); // \"transparent\"\r\n        }\r\n        else {\r\n            bg_color = rot_js__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].toHex(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].charcoal);\r\n        }\r\n        // footer\r\n        let footerDisplay = new ROTDisplay2({\r\n            width: width,\r\n            height: 3,\r\n            border: 0,\r\n            spacing: 1.15,\r\n            fontSize: font_size,\r\n            bg: bg_color,\r\n            forceSquareRatio: false,\r\n        });\r\n        let footer_div = document.createElement(\"div\");\r\n        footer_div.setAttribute(\"id\", \"id_div_footer\");\r\n        footer_div.appendChild(footerDisplay.getContainer());\r\n        div_container.appendChild(footer_div);\r\n        this.addDisplay(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].DisplayNames.Footer, footerDisplay);\r\n        // header\r\n        let headerDisplay = new ROTDisplay2({\r\n            width: width,\r\n            height: 1,\r\n            border: 0,\r\n            spacing: 1.15,\r\n            fontSize: font_size,\r\n            bg: bg_color,\r\n            forceSquareRatio: false,\r\n        });\r\n        let header_div = document.createElement(\"div\");\r\n        header_div.setAttribute(\"id\", \"id_div_header\");\r\n        header_div.appendChild(headerDisplay.getContainer());\r\n        div_container.insertBefore(header_div, game_canvas);\r\n        // div_container.appendChild(header_div)\r\n        this.addDisplay(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].DisplayNames.Header, headerDisplay);\r\n    }\r\n    // Display management\r\n    addDisplay(name, disp) {\r\n        this.rot_displays[name] = disp;\r\n    }\r\n    getDisplay(name) {\r\n        // make sure display exists\r\n        if (!(name in this.rot_displays)) {\r\n            throw new RangeError(`cannot find ROT display named ${name}`);\r\n        }\r\n        return this.rot_displays[name];\r\n    }\r\n    clearAll() {\r\n        for (let name in this.rot_displays) {\r\n            let displayName = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].DisplayNames[name];\r\n            this.clearDisplay(displayName);\r\n        }\r\n    }\r\n    clearDisplay(name) {\r\n        let display = this.getDisplay(name);\r\n        display.clearRect(0, 0, display.getWidth(), display.getHeight());\r\n        // display.clear()\r\n    }\r\n    clearDisplayAt(name, x, y) {\r\n        let display = this.getDisplay(name);\r\n        //twp\r\n        display.clearRect(x, y, this.my_tile_width, this.my_tile_height);\r\n    }\r\n    // Drawing on the grid\r\n    drawAll(display_options) {\r\n        for (let x = 0; x < _brew__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].screen_width_tiles; x++) {\r\n            for (let y = 0; y < _brew__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].screen_height_tiles; y++) {\r\n                this.drawAt(new _brew__WEBPACK_IMPORTED_MODULE_1__[\"Coordinate\"](x, y), display_options);\r\n            }\r\n        }\r\n    }\r\n    drawAt(xy, display_options) {\r\n        let draw;\r\n        let level = this.gm.getCurrentLevel();\r\n        if (_brew__WEBPACK_IMPORTED_MODULE_1__[\"Debug\"].debug_pathmap) {\r\n            let pc_of_max;\r\n            let color_value;\r\n            let path_value = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Debug\"].debug_pathmap.field.getAt(xy);\r\n            if (path_value) {\r\n                // if (path_value < Brew.Debug.debug_pathmap.max_value) {\r\n                // if (path_value == FastDijkstraMap.MAX_INT) {\r\n                //     color_value = Brew.Color.white\r\n                // } else if (path_value == null) {\r\n                //     color_value = Brew.Color.white\r\n                // if (path_value == 0) {\r\n                //     color_value = Brew.Color.violet\r\n                // } else if (path_value == Number.MAX_VALUE) {\r\n                //     color_value = Brew.Color.green\r\n                if (path_value < 0) {\r\n                    pc_of_max = (path_value / _brew__WEBPACK_IMPORTED_MODULE_1__[\"Debug\"].debug_pathmap.min_value);\r\n                    color_value = rot_js__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].interpolate(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].blue, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].white, 1 - pc_of_max);\r\n                }\r\n                else {\r\n                    pc_of_max = (path_value / _brew__WEBPACK_IMPORTED_MODULE_1__[\"Debug\"].debug_pathmap.max_value);\r\n                    color_value = rot_js__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].interpolate(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].blue, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].white, pc_of_max);\r\n                }\r\n            }\r\n            else {\r\n                color_value = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].violet;\r\n            }\r\n            this.getDisplay(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].DisplayNames.Game).draw(xy.x, xy.y, \" \", rot_js__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].toHex(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].white), rot_js__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].toHex(color_value));\r\n            return true;\r\n        }\r\n        // 0. PLAYER FOV\r\n        let in_fov;\r\n        in_fov = this.gm.getPlayer().fov.hasAt(xy);\r\n        if (!(in_fov)) {\r\n            // not in view, check memory\r\n            let mem = this.gm.getPlayer().memory.getAt(xy);\r\n            // draw = [' ', Brew.Color.black, Brew.Color.bg_unexplored]\r\n            if (mem) {\r\n                // saw it before\r\n                draw = [mem.code, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].memory, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].bg_memory];\r\n            }\r\n            else {\r\n                // never seen it\r\n                draw = [' ', _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].black, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].bg_unexplored];\r\n            }\r\n        }\r\n        else {\r\n            // IN VIEW\r\n            // 1. TERRAIN\r\n            let terrain = level.terrain.getAt(xy);\r\n            if (terrain == null) {\r\n                // debugger\r\n            }\r\n            draw = [terrain.code, terrain.color, terrain.bg_color];\r\n            // 2. FEATURES\r\n            let feature = level.features.getAt(xy);\r\n            let portal_at = level.portals.getAt(xy); // don't draw features on top of stairs\r\n            if (feature && (!(portal_at)) && (!(terrain.alwaysOnTop))) {\r\n                draw[0] = feature.code;\r\n                if (feature.color) {\r\n                    draw[1] = feature.color;\r\n                }\r\n                if (feature.bg_color) {\r\n                    draw[2] = feature.bg_color;\r\n                }\r\n            }\r\n            // 3. ITEMS\r\n            let item = level.items.getAt(xy);\r\n            if (item) {\r\n                draw[0] = item.code;\r\n                draw[1] = item.color;\r\n            }\r\n            // 4. MONSTERS\r\n            let mob = level.monsters.getAt(xy);\r\n            if (mob) {\r\n                draw[0] = mob.code;\r\n                draw[1] = mob.color;\r\n                if (mob.hasFlag(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].Flag.Stunned)) {\r\n                    draw[2] = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].green;\r\n                }\r\n                let range_threat = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Targeting\"].isRangedAttackThreat(this.gm, mob, this.gm.getPlayer());\r\n                if (range_threat) {\r\n                    draw[2] = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].red;\r\n                }\r\n            }\r\n            // 4.5 : PARTS\r\n            let part = level.parts.getAt(xy);\r\n            if (part) {\r\n                draw[0] = part.code;\r\n                draw[1] = part.color;\r\n            }\r\n            // 5. ABOVE / OVERHEAD\r\n            let ab = level.above.getAt(xy);\r\n            if (ab) {\r\n                draw[0] = ab.code;\r\n                draw[1] = ab.color;\r\n            }\r\n            // REMOTE VISION\r\n            let fov_type = this.gm.getPlayer().fov.getAt(xy);\r\n            if (fov_type == _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].BrewVisionSource.xRemote) {\r\n                draw[1] = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].bg_remote_vision;\r\n            }\r\n        }\r\n        // boss mode\r\n        if (_brew__WEBPACK_IMPORTED_MODULE_1__[\"Debug\"].BOSS_MODE) {\r\n            draw[2] = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].white;\r\n            // let faded_color = ROT.Color.interpolate(draw[1], Brew.Color.white, 0.6667)\r\n            draw[1] = rot_js__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].interpolate(draw[1], _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].white, 0.6667);\r\n        }\r\n        // highlights\r\n        let highlight = this.highlights.getAt(xy);\r\n        if (highlight) {\r\n            // this.getDisplay(Brew.Enums.DisplayNames.HUD).draw(xy.x, xy.y, \" \", ROT.Color.toHex(Color.black), ROT.Color.toHex(highlight.color))\r\n            draw[2] = highlight.color;\r\n        }\r\n        else {\r\n            // this.getDisplay(Brew.Enums.DisplayNames.HUD)._context.clearRect(xy.x * this.my_tile_width, xy.y * this.my_tile_height, this.my_tile_width, this.my_tile_height)\r\n        }\r\n        if ((display_options) && (display_options.blackAndWhiteMode)) {\r\n            draw[1] = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].gray;\r\n            draw[2] = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].dark_gray;\r\n        }\r\n        if (_brew__WEBPACK_IMPORTED_MODULE_1__[\"Debug\"].BOSS_MODE) {\r\n            this.clearDisplayAt(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].DisplayNames.Game, xy.x, xy.y);\r\n            if (highlight) {\r\n                this.getDisplay(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].DisplayNames.Game).draw(xy.x, xy.y, draw[0], rot_js__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].toHex(draw[1]), rot_js__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].toHex(draw[2]));\r\n            }\r\n            else {\r\n                this.getDisplay(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].DisplayNames.Game).draw(xy.x, xy.y, draw[0], rot_js__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].toHex(draw[1]));\r\n            }\r\n        }\r\n        else {\r\n            this.getDisplay(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].DisplayNames.Game).draw(xy.x, xy.y, draw[0], rot_js__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].toHex(draw[1]), rot_js__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].toHex(draw[2]));\r\n        }\r\n        return true; // TODO: make this return false if nothing new to draw (cache?)\r\n    }\r\n    convertScreenToMap(screen_xy) {\r\n        // TODO: screen offset goes here\r\n        let offset_xy = new _brew__WEBPACK_IMPORTED_MODULE_1__[\"Coordinate\"](0, 0);\r\n        return screen_xy.add(offset_xy);\r\n    }\r\n    // inventory\r\n    // inventoryDraw(inv: Brew.Inventory, selected_item_index: number) : void {\r\n    //     this.clearDisplay(Brew.Enums.DisplayNames.HUD)\r\n    //     this.drawAll({blackAndWhiteMode: true})\r\n    //     let item_text : string\r\n    //     let keys = inv.getKeys()\r\n    //     let toggleText: string\r\n    //     for (let i = 0; i < keys.length; i++) {\r\n    //         let invkey = keys[i]\r\n    //         let invitem = inv.getInventoryItemByKey(invkey)\r\n    //         if (selected_item_index == i) {\r\n    //             toggleText = \"+ \"\r\n    //         } else {\r\n    //             toggleText = \"- \"\r\n    //         }\r\n    //         this.getDisplay(Brew.Enums.DisplayNames.HUD).draw(0, i, invkey, ROT.Color.toHex(Brew.Color.white))\r\n    //         item_text = toggleText + invitem.item.getDefinition() + invitem.item.getID().toString() + invitem.item.name\r\n    //         item_text = item_text.slice(0, Brew.Config.screen_width_tiles - 2)\r\n    //         this.getDisplay(Brew.Enums.DisplayNames.HUD).drawText(2, i, item_text)\r\n    //         // .draw(0, i, invkey, ROT.Color.toHex(Color.white))\r\n    //     }\r\n    // }\r\n    // context menu\r\n    contextMenuDraw(context_list, selected_item_index) {\r\n        this.clearDisplay(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].DisplayNames.HUD);\r\n        this.drawAll({ blackAndWhiteMode: true });\r\n        let item_text;\r\n        let toggleText;\r\n        for (let i = 0; i < context_list.length; i++) {\r\n            if (selected_item_index == i) {\r\n                toggleText = \"+ \";\r\n            }\r\n            else {\r\n                toggleText = \"- \";\r\n            }\r\n            item_text = toggleText + _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].ContextMenuItem[context_list[i]];\r\n            item_text = item_text.slice(0, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].screen_width_tiles - 2);\r\n            this.getDisplay(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].DisplayNames.HUD).drawText(2, i, item_text);\r\n        }\r\n    }\r\n    drawFrame(disp_name, topleft_xy, bottomright_xy, frame_color, bg_frame_color, title) {\r\n        let frDisplay = this.getDisplay(disp_name);\r\n        let frame_hex = rot_js__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].toHex(frame_color);\r\n        let bg_hex = rot_js__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].toHex(bg_frame_color);\r\n        // draw corners\r\n        frDisplay.draw(topleft_xy.x, topleft_xy.y, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Symbols\"].box_topleft, frame_hex, bg_hex);\r\n        frDisplay.draw(bottomright_xy.x, topleft_xy.y, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Symbols\"].box_topright, frame_hex, bg_hex);\r\n        frDisplay.draw(topleft_xy.x, bottomright_xy.y, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Symbols\"].box_bottomleft, frame_hex, bg_hex);\r\n        frDisplay.draw(bottomright_xy.x, bottomright_xy.y, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Symbols\"].box_bottomright, frame_hex, bg_hex);\r\n        // draw left & right sides\r\n        for (let y = topleft_xy.y + 1; y <= bottomright_xy.y - 1; y++) {\r\n            frDisplay.draw(topleft_xy.x, y, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Symbols\"].box_vline, frame_hex, bg_hex);\r\n            frDisplay.draw(bottomright_xy.x, y, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Symbols\"].box_vline, frame_hex, bg_hex);\r\n        }\r\n        // draw top & bottom side\r\n        for (let x = topleft_xy.x + 1; x <= bottomright_xy.x - 1; x++) {\r\n            frDisplay.draw(x, bottomright_xy.y, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Symbols\"].box_hline, frame_hex, bg_hex);\r\n            if (!(title)) {\r\n                frDisplay.draw(x, topleft_xy.y, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Symbols\"].box_hline, frame_hex, bg_hex);\r\n            }\r\n        }\r\n        if (title) {\r\n            // center title\r\n            let frame_width = bottomright_xy.x - topleft_xy.x;\r\n            let half_width = Math.floor(frame_width / 2);\r\n            title = \"[ \" + title + \" ]\";\r\n            let title_x = Math.max(0, Math.floor((frame_width - title.length) / 2));\r\n            for (let x = 1; x < title_x; x++) {\r\n                frDisplay.draw(topleft_xy.x + x, topleft_xy.y, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Symbols\"].box_hline, frame_hex, bg_hex);\r\n            }\r\n            for (let x = 0; x < title.length; x++) {\r\n                frDisplay.draw(topleft_xy.x + title_x + x, topleft_xy.y, title[x], frame_hex, bg_hex);\r\n            }\r\n            for (let x = title_x + title.length + 1; x <= bottomright_xy.x - 1; x++) {\r\n                frDisplay.draw(x, topleft_xy.y, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Symbols\"].box_hline, frame_hex, bg_hex);\r\n            }\r\n        }\r\n    }\r\n    drawVerticalLine(disp_name, x, y_top, y_bottom, line_color, bg_line_color) {\r\n        let frDisplay = this.getDisplay(disp_name);\r\n        let line_hex = rot_js__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].toHex(line_color);\r\n        let bg_hex = rot_js__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].toHex(bg_line_color);\r\n        for (let y = y_top; y <= y_bottom; y++) {\r\n            frDisplay.draw(x, y, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Symbols\"].box_vline, line_hex, bg_hex);\r\n        }\r\n    }\r\n    // generic menu\r\n    genericMenuDraw(title, given_desc, entries, selected_index) {\r\n        // this.clearDisplay(Brew.Enums.DisplayNames.HUD)\r\n        this.drawAll({ blackAndWhiteMode: true });\r\n        // define our work around\r\n        let topleft_xy = new _brew__WEBPACK_IMPORTED_MODULE_1__[\"Coordinate\"](1, 1);\r\n        let bottomright_xy = new _brew__WEBPACK_IMPORTED_MODULE_1__[\"Coordinate\"](_brew__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].screen_width_tiles - 2, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].screen_height_tiles - 2);\r\n        let full_width = (bottomright_xy.x - topleft_xy.x);\r\n        let half_width = Math.floor(full_width / 2);\r\n        // todo: add menu colors to genericMenu options\r\n        let menu_frame_color = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].goldenrod;\r\n        let desc_height = 3;\r\n        // this.drawFrame(Brew.Enums.DisplayNames.HUD, topleft_xy, bottomright_xy, menu_frame_color, title)\r\n        // this.drawVerticalLine(Brew.Enums.DisplayNames.HUD, half_width, topleft_xy.y + desc_height, bottomright_xy.y - 1, menu_frame_color)\r\n        // draw[1] = Brew.Color.gray\r\n        let bg_frame_color = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].dark_gray;\r\n        this.drawFrame(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].DisplayNames.Game, topleft_xy, bottomright_xy, menu_frame_color, bg_frame_color, title);\r\n        this.drawVerticalLine(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].DisplayNames.Game, half_width, topleft_xy.y + desc_height, bottomright_xy.y - 1, menu_frame_color, bg_frame_color);\r\n        let entry_text;\r\n        let toggleText;\r\n        let description;\r\n        if (given_desc) {\r\n            description = given_desc;\r\n        }\r\n        else {\r\n            description = \"\";\r\n        }\r\n        description = \"%b{\" + rot_js__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].toHex(bg_frame_color) + \"}\" + description;\r\n        // let frDisplay = this.getDisplay(Brew.Enums.DisplayNames.HUD)\r\n        let frDisplay = this.getDisplay(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].DisplayNames.Game);\r\n        frDisplay.drawText(topleft_xy.x + 1, topleft_xy.y + 1, description, full_width - 1);\r\n        let items_start_y = topleft_xy.y + desc_height + 1;\r\n        let selected_entry;\r\n        for (let i = 0; i < entries.length; i++) {\r\n            if (selected_index == i) {\r\n                // toggleText = (i+1).toString() + \">\"\r\n                toggleText = \"> \";\r\n                selected_entry = entries[i];\r\n            }\r\n            else {\r\n                // toggleText = (i+1).toString() + \" \"\r\n                toggleText = \"- \";\r\n            }\r\n            entry_text = toggleText + _brew__WEBPACK_IMPORTED_MODULE_1__[\"Menus\"].getEntryName(entries[i]);\r\n            entry_text = entry_text.slice(0, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].screen_width_tiles - 2);\r\n            entry_text = \"%b{\" + rot_js__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].toHex(bg_frame_color) + \"}\" + entry_text;\r\n            frDisplay.drawText(topleft_xy.x + 1, items_start_y + i, entry_text);\r\n        }\r\n        if (selected_entry) {\r\n            let entry_desc = \"%b{\" + rot_js__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].toHex(bg_frame_color) + \"}\";\r\n            if (selected_entry.entryDescription) {\r\n                entry_desc += selected_entry.entryDescription;\r\n            }\r\n            frDisplay.drawText(half_width + 1, items_start_y, entry_desc, half_width - 1);\r\n        }\r\n    }\r\n    gameOverDraw() {\r\n        this.clearDisplay(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].DisplayNames.HUD);\r\n        this.drawAll({ blackAndWhiteMode: true });\r\n        this.getDisplay(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].DisplayNames.HUD).drawText(2, 2, \"Congratulations!\");\r\n        this.getDisplay(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].DisplayNames.HUD).drawText(2, 4, \"You have died.\");\r\n    }\r\n    updateDescriptionFooterForPoint(map_xy) {\r\n        let player = this.gm.getPlayer();\r\n        let level = this.gm.getCurrentLevel();\r\n        let desc;\r\n        let footer_disp = this.getDisplay(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].DisplayNames.Footer);\r\n        let in_fov = player.fov.hasAt(map_xy);\r\n        let has_memory = player.memory.hasAt(map_xy);\r\n        if (in_fov || has_memory) {\r\n            if (in_fov) {\r\n                desc = \"You see \";\r\n            }\r\n            else {\r\n                desc = \"You remember seeing \";\r\n            }\r\n            let mob_at = level.monsters.getAt(map_xy);\r\n            let terrain_at = level.terrain.getAt(map_xy);\r\n            let feature_at = level.features.getAt(map_xy);\r\n            let item_at = level.items.getAt(map_xy);\r\n            let portal_at = level.portals.getAt(map_xy);\r\n            // todo: get description() for Things\r\n            footer_disp.clear();\r\n            if (mob_at && in_fov) {\r\n                footer_disp.drawText(0, 0, mob_at.getName());\r\n                let mob_notes = _brew__WEBPACK_IMPORTED_MODULE_1__[\"HUD\"].getCurrentNotes(this.gm).filter((note) => {\r\n                    return note.subject.isSameThing(mob_at);\r\n                });\r\n                this.drawNotesOntoFooter(mob_notes, 1, 2);\r\n            }\r\n            else if (item_at) {\r\n                footer_disp.drawText(0, 0, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Glossary\"].getItemName(item_at));\r\n                let item_desc = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Glossary\"].getItemDescription(item_at);\r\n                footer_disp.drawText(0, 1, item_desc.typeDesc);\r\n                if (item_desc.subTypeDesc) {\r\n                    footer_disp.drawText(0, 2, item_desc.subTypeDesc);\r\n                }\r\n                // } else if (overhead_at) {\r\n                //     desc += Brew.Definitions.AboveType[overhead_at.getDefinition()] + \" overhead\"\r\n            }\r\n            else if (feature_at) {\r\n                footer_disp.drawText(0, 0, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Glossary\"].getFeatureName(feature_at));\r\n                footer_disp.drawText(0, 1, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Glossary\"].getFeatureDescription(feature_at));\r\n            }\r\n            else {\r\n                footer_disp.drawText(0, 0, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Definitions\"].TerrainType[terrain_at.getDefinition()]);\r\n            }\r\n        }\r\n        // todo: eventually make this into a canvas / ROT display element (?)\r\n        // let divDebug = <HTMLDivElement> (document.getElementById(\"id_div_debug\"))\r\n        // divDebug.innerHTML = `<p>${desc}</p>`\r\n        // this.getDisplay(Brew.Enums.DisplayNames.Footer).drawText(0, 0, desc)\r\n        // log some debug stuff\r\n        // console.log(`-- debug info for ${map_xy.x}, ${map_xy.y} --`)\r\n        // console.log(\"path to player\", this.gm.pathmaps.getPathmap(Brew.Enums.PathmapCacheType.ToPlayer_Walk).field.getAt(map_xy))\r\n        // console.log(\"path from player\", this.gm.pathmaps.getPathmap(Brew.Enums.PathmapCacheType.FromPlayer_Walk).field.getAt(map_xy))\r\n        // console.log(\"flypath to player\", this.gm.pathmaps.getPathmap(Brew.Enums.PathmapCacheType.ToPlayer_Fly).field.getAt(map_xy))\r\n        // console.log(\"flypath from player\", this.gm.pathmaps.getPathmap(Brew.Enums.PathmapCacheType.FromPlayer_Fly).field.getAt(map_xy))\r\n    }\r\n    drawPowerInfo() {\r\n        // draw a strip across the bottom of the footer with the power info\r\n        let powers = this.gm.getPlayer().getPowers();\r\n        let current_row = 2;\r\n        let col = 0;\r\n        for (let pow of powers.listOfPowers) {\r\n            let line_desc = \"[ \" + _brew__WEBPACK_IMPORTED_MODULE_1__[\"Glossary\"].getPowerShortName(pow) + \" \" + pow.charge_stat.getCurrentLevel() + \" ]\";\r\n            this.getDisplay(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].DisplayNames.Footer).drawText(col, current_row, line_desc);\r\n            col += line_desc.length;\r\n        }\r\n    }\r\n    drawFooter() {\r\n        // this.clearDisplay(Brew.Enums.DisplayNames.Footer)\r\n        this.getDisplay(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].DisplayNames.Footer).clear();\r\n        this.drawPowerInfo();\r\n        // draw all notes a the bottom except behavioral ones\r\n        let hud_notes = _brew__WEBPACK_IMPORTED_MODULE_1__[\"HUD\"].getCurrentNotes(this.gm);\r\n        this.drawNotesOntoFooter(hud_notes, 0, 2);\r\n    }\r\n    drawHeader() {\r\n        // this.clearDisplay(Brew.Enums.DisplayNames.Footer)\r\n        let header_disp = this.getDisplay(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].DisplayNames.Header);\r\n        header_disp.clear();\r\n        let score_text = \"SCORE: \" + this.gm.getPlayer().score.getCurrentLevel();\r\n        header_disp.drawText(0, 0, score_text);\r\n        let level_text = \"AREA: \" + this.gm.getCurrentLevel().depth;\r\n        let x = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].map_width_tiles - level_text.length;\r\n        header_disp.drawText(x - 1, 0, level_text);\r\n        let middle_text = \"Tank Control! (? for HELP)\";\r\n        x = (_brew__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].map_width_tiles / 2) - (middle_text.length / 2);\r\n        header_disp.drawText(x, 0, middle_text);\r\n        // this.drawPowerInfo()\r\n        // draw all notes a the bottom except behavioral ones\r\n        // let hud_notes = Brew.HUD.getCurrentNotes(this.gm)\r\n        // this.drawNotesOntoFooter(hud_notes, 0, 2)\r\n    }\r\n    // headsUpDisplayDraw(hudDisplayType : Brew.Enums.BrewHeadsUpDisplayType) {\r\n    headsUpDisplayDraw(pageOfNotes) {\r\n        let level = this.gm.getCurrentLevel();\r\n        let letter;\r\n        // this.clearDisplay(Brew.Enums.DisplayNames.HUD)\r\n        this.drawAll({ blackAndWhiteMode: true });\r\n        // treat letters as a grid\r\n        let hud_lettergrid = pageOfNotes.grid; // Brew.HUD.getHUDLetterGrid(this.gm, listOfNotes)\r\n        // draw the letter grid\r\n        hud_lettergrid.getAllCoordinates().forEach((xy, index) => {\r\n            letter = hud_lettergrid.getAt(xy).char;\r\n            // this.getDisplay(Brew.Enums.DisplayNames.HUD).draw(xy.x, xy.y, letter)\r\n            this.getDisplay(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].DisplayNames.Game).draw(xy.x, xy.y, letter, rot_js__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].toHex(hud_lettergrid.getAt(xy).color));\r\n        });\r\n    }\r\n    drawNotesOntoFooter(notes_list, start_row, max_rows) {\r\n        let new_text;\r\n        let running_width = 0;\r\n        let current_row = start_row;\r\n        let max_width = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].screen_width_tiles;\r\n        let text_color;\r\n        if (_brew__WEBPACK_IMPORTED_MODULE_1__[\"Debug\"].BOSS_MODE) {\r\n            text_color = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].black;\r\n        }\r\n        else {\r\n            text_color = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].normal;\r\n        }\r\n        for (let i = 0; i < notes_list.length; i++) {\r\n            new_text = notes_list[i].getNoteText() + \" \";\r\n            if ((running_width + new_text.length) > max_width) {\r\n                current_row += 1;\r\n                running_width = 0;\r\n            }\r\n            if (current_row >= (start_row + max_rows)) {\r\n                return;\r\n            }\r\n            for (let w = 0; w < new_text.length; w++) {\r\n                let write_color;\r\n                if ((w == 0) && (notes_list[i].subject.color)) {\r\n                    write_color = (notes_list[i].subject.color);\r\n                }\r\n                else {\r\n                    write_color = text_color;\r\n                }\r\n                this.getDisplay(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].DisplayNames.Footer).draw(running_width + w, current_row, new_text[w], rot_js__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].toHex(write_color));\r\n            }\r\n            running_width += new_text.length;\r\n        }\r\n    }\r\n    drawPopupMessage(msg_text, location_xy, color, delay) {\r\n        if (!(delay)) {\r\n            delay = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].popup_msg_speed;\r\n        }\r\n        let hud_display = this.getDisplay(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].DisplayNames.HUD);\r\n        let max_width = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].screen_width_tiles;\r\n        let msg_width = Math.min(max_width, msg_text.length);\r\n        let msg_text_trimmed = msg_text; //.substring(0, msg_width)\r\n        let blank_letter_grid = new _brew__WEBPACK_IMPORTED_MODULE_1__[\"GridOfThings\"]();\r\n        let success = _brew__WEBPACK_IMPORTED_MODULE_1__[\"HUD\"].placeWordsOnLetterGrid(blank_letter_grid, msg_text_trimmed, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].white, location_xy);\r\n        blank_letter_grid.getAllCoordinates().forEach((xy, index) => {\r\n            let letter = blank_letter_grid.getAt(xy).char;\r\n            // this.getDisplay(Brew.Enums.DisplayNames.HUD).draw(xy.x, xy.y, letter)\r\n            this.getDisplay(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].DisplayNames.HUD).draw(xy.x, xy.y, letter, rot_js__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].toHex(blank_letter_grid.getAt(xy).color));\r\n        });\r\n        // hud_display.drawText(location_xy.x, location_xy.y, msg_text, max_width)\r\n        setTimeout(() => {\r\n            // hud_display.clearRect_Tiles(location_xy.x, location_xy.y, msg_width, 1)\r\n            blank_letter_grid.getAllCoordinates().forEach((xy, index) => {\r\n                hud_display.clearRect_Tiles(xy.x, xy.y, 1, 1);\r\n            });\r\n        }, delay);\r\n    }\r\n    drawHelpMenu(helpMsgIndex) {\r\n        this.drawAll({ blackAndWhiteMode: true });\r\n        // define our work around\r\n        let topleft_xy = new _brew__WEBPACK_IMPORTED_MODULE_1__[\"Coordinate\"](1, 1);\r\n        let bottomright_xy = new _brew__WEBPACK_IMPORTED_MODULE_1__[\"Coordinate\"](_brew__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].screen_width_tiles - 2, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].screen_height_tiles - 2);\r\n        let full_width = (bottomright_xy.x - topleft_xy.x);\r\n        let half_width = Math.floor(full_width / 2);\r\n        let menu_frame_color = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].goldenrod;\r\n        let bg_frame_color = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].dark_gray;\r\n        this.drawFrame(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].DisplayNames.Game, topleft_xy, bottomright_xy, menu_frame_color, bg_frame_color, \"HELP\");\r\n        let bgcolor_text = \"%b{\" + rot_js__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].toHex(bg_frame_color) + \"}\";\r\n        let frDisplay = this.getDisplay(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].DisplayNames.Game);\r\n        let current_y = topleft_xy.y + 1;\r\n        let max_y = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].map_height_tiles - 2;\r\n        while (helpMsgIndex < _brew__WEBPACK_IMPORTED_MODULE_1__[\"Tank\"].helpMessages.length) {\r\n            let line_count = frDisplay.drawText(topleft_xy.x + 1, current_y, bgcolor_text + _brew__WEBPACK_IMPORTED_MODULE_1__[\"Tank\"].helpMessages[helpMsgIndex], full_width - 1);\r\n            if ((current_y + line_count + 1) > max_y) {\r\n                break;\r\n            }\r\n            current_y += line_count + 1;\r\n            helpMsgIndex += 1;\r\n        }\r\n    }\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/brew_game/display.ts\n");

/***/ }),

/***/ "./src/brew_game/glossary.ts":
/*!***********************************!*\
  !*** ./src/brew_game/glossary.ts ***!
  \***********************************/
/*! exports provided: getPowerName, getPowerShortName, getPowerDesc, getItemDescription, getItemName, getFeatureName, getFeatureDescription */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getPowerName\", function() { return getPowerName; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getPowerShortName\", function() { return getPowerShortName; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getPowerDesc\", function() { return getPowerDesc; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getItemDescription\", function() { return getItemDescription; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getItemName\", function() { return getItemName; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getFeatureName\", function() { return getFeatureName; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getFeatureDescription\", function() { return getFeatureDescription; });\n/* harmony import */ var _brew__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../brew */ \"./src/brew.ts\");\n// store all (or most) text-based descriptions and names of things that get displayed\r\n\r\nfunction getPowerName(power) {\r\n    return GlossaryPower[power.powerType].longName;\r\n}\r\nfunction getPowerShortName(power) {\r\n    return GlossaryPower[power.powerType].shortName;\r\n}\r\nfunction getPowerDesc(pow) {\r\n    // return GlossaryPower[power.powerType].description\r\n    let desc;\r\n    if (pow.powerType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewPowerType.EmptyNone) {\r\n        desc = \"Nothing installed\";\r\n    }\r\n    else {\r\n        desc = GlossaryPower[pow.powerType].description;\r\n    }\r\n    desc += \"\\n\\nAmmo: \" + pow.charge_stat.getCurrentLevel() + \" / \" + pow.charge_stat.getMaxLevel();\r\n    // desc += \"\\nLevel: \" + pow.strength.getCurrentLevel()\r\n    return desc;\r\n}\r\nlet GlossaryPower = {};\r\nGlossaryPower[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewPowerType.TurretCannon] = {\r\n    longName: \"Turret Gun\",\r\n    shortName: \"TURRET\",\r\n    description: \"Giant turret cannon\",\r\n};\r\nGlossaryPower[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewPowerType.MachineGun] = {\r\n    longName: \"Machine Gun\",\r\n    shortName: \"M85\",\r\n    description: \"Smaller more manueverable machine gun\",\r\n};\r\nGlossaryPower[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewPowerType.Scanner] = {\r\n    longName: \"Scanner\",\r\n    shortName: \"SCAN\",\r\n    description: \"Long range scanner\",\r\n};\r\n// GlossaryPower[Enums.BrewPowerType.] = {\r\n//     longName: \"\",\r\n//     shortName: \"\",\r\n//     description: \"\",\r\n// }\r\nlet GlossaryItemType = {};\r\nGlossaryItemType[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemType.Grenade] = \"A small grenade, light enough to throw.\";\r\n// GlossaryItemType[Brew.Definitions.ItemType.KeyCard] = \"Used for accessing secure areas\"\r\n// GlossaryItemType[Brew.Definitions.ItemType.Nanotech] = \"Small phial of inert nanites.\"// When shattered, nanites will interact with the immediate surroundings in strange ways.\"\r\nGlossaryItemType[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemType.PowerRelatedItem] = \"Special Item\";\r\nGlossaryItemType[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemType.PowerSystem] = \"Power modules give special abilities\";\r\n// GlossaryItemType[Brew.Definitions.ItemType.Wreckage] = \"Smoldering shell of a destroyed robot\"\r\n// GlossaryItemType[Brew.Definitions.ItemType.MacGuffin] = \"This is how you win the game for now!\"\r\n// GlossaryItemType[Brew.Definitions.ItemType.WarpCrystal] = \"Functions as a unique fuel for telewarp technology\"// - essential for communicating with home base\" // transponder\r\nGlossaryItemType[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemType.Bullets] = \"Reloads machine gun after each area checkpoint\";\r\nGlossaryItemType[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemType.Civilian] = \"Successful rescues add to your score\";\r\nGlossaryItemType[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemType.Shells] = \"Reloads turret gun after each area checkpoint\";\r\nGlossaryItemType[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemType.Supplies] = \"Restores armor after each area checkpoint\";\r\nlet GlossaryItemSubType = {};\r\nGlossaryItemSubType[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemSubtype.G_Concusive] = {\r\n    longName: \"Blast Grenade\",\r\n    description: \"Unleases a blast of force, knocking back any targets\",\r\n};\r\nGlossaryItemSubType[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemSubtype.G_Explosive] = {\r\n    longName: \"Grenade\",\r\n    description: \"Explodes and does direct damage to any targets caught in the blast\"\r\n};\r\nGlossaryItemSubType[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemSubtype.G_Stun] = {\r\n    longName: \"Stun Grenade\",\r\n    description: \"Temporarily stuns any targets in range, but otherwise does no damage.\"\r\n};\r\nGlossaryItemSubType[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemSubtype.N_Acid] = {\r\n    longName: \"Nanotech (Corrosive)\",\r\n    description: \"Causes corrision - infected target can be destroyed in one hit\" //& brittle armor\r\n};\r\nGlossaryItemSubType[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemSubtype.N_Armor] = {\r\n    longName: \"Nanotech (Armor)\",\r\n    description: \"Hardens armor, making infected targets temporarily invincible\"\r\n};\r\nGlossaryItemSubType[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemSubtype.N_Health] = {\r\n    longName: \"Nanotech (Repair)\",\r\n    description: \"Has a regenerative affect - heals any target exposed\"\r\n};\r\n// GlossaryItemSubType[Brew.Definitions.ItemSubtype.NonSpecific]\r\nGlossaryItemSubType[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemSubtype.PowerItem_Axe] = {\r\n    longName: \"Heavy Axe\",\r\n    description: \"The heavy axe, quantum-bound to whomever threw it here\"\r\n};\r\nGlossaryItemSubType[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemSubtype.PowerItem_Gun] = {\r\n    longName: \"???\",\r\n    description: \"NOT SEEN?\"\r\n};\r\nfunction getItemDescription(item) {\r\n    let item_desc;\r\n    if (item.subtype != _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemSubtype.NonSpecific) {\r\n        item_desc = {\r\n            typeDesc: GlossaryItemType[item.getDefinition()],\r\n            subTypeDesc: GlossaryItemSubType[item.subtype].description\r\n        };\r\n    }\r\n    else {\r\n        item_desc = {\r\n            typeDesc: GlossaryItemType[item.getDefinition()]\r\n        };\r\n    }\r\n    return item_desc;\r\n}\r\nfunction getItemName(item) {\r\n    let name = \"unnamed item\";\r\n    if (item.isType(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemType.PowerSystem)) {\r\n        name = \"Power: \" + getPowerShortName(item.power);\r\n    }\r\n    else if (item.subtype == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemSubtype.NonSpecific) {\r\n        name = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemType[item.getDefinition()];\r\n    }\r\n    else {\r\n        // if (item.getDefinition() == Brew.Definitions.ItemType.Grenade) {\r\n        //     name = Brew.Definitions.ItemSubtype[item.subtype]\r\n        // } \r\n        name = GlossaryItemSubType[item.subtype].longName;\r\n    }\r\n    return name;\r\n}\r\nlet GlossaryFeature = {};\r\nGlossaryFeature[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].FeatureType.CorrosiveAcid] = {\r\n    longName: \"Corrosive Nanobots\",\r\n    description: GlossaryItemSubType[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemSubtype.N_Acid].description\r\n};\r\nGlossaryFeature[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].FeatureType.Fire] = {\r\n    longName: \"Fire\",\r\n    description: \"The flames flicker dangerously\"\r\n};\r\nGlossaryFeature[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].FeatureType.ProtectiveGoo] = {\r\n    longName: \"Armor Nanobots\",\r\n    description: GlossaryItemSubType[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemSubtype.N_Armor].description\r\n};\r\nGlossaryFeature[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].FeatureType.RepairGoo] = {\r\n    longName: \"Repair Nanobots\",\r\n    description: GlossaryItemSubType[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemSubtype.N_Health].description\r\n};\r\nGlossaryFeature[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].FeatureType.Scrap] = {\r\n    longName: \"Scrap\",\r\n    description: \"Debris from a previous battle\"\r\n};\r\n// GlossaryFeature[Brew.Definitions.FeatureType.] = {\r\n//     longName: \"\",\r\n//     description: \"\"\r\n// }\r\nfunction getFeatureName(feature) {\r\n    return GlossaryFeature[feature.getDefinition()].longName;\r\n}\r\nfunction getFeatureDescription(feature) {\r\n    return GlossaryFeature[feature.getDefinition()].description;\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/brew_game/glossary.ts\n");

/***/ }),

/***/ "./src/brew_game/hud_info.ts":
/*!***********************************!*\
  !*** ./src/brew_game/hud_info.ts ***!
  \***********************************/
/*! exports provided: HUDNote, getCurrentNotes, getLabelOffsetsForPoint, usefulLabelArrowLookup, getLabelArrowForOffset, getHUDPages, placeWordsOnLetterGrid */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HUDNote\", function() { return HUDNote; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getCurrentNotes\", function() { return getCurrentNotes; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getLabelOffsetsForPoint\", function() { return getLabelOffsetsForPoint; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"usefulLabelArrowLookup\", function() { return usefulLabelArrowLookup; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getLabelArrowForOffset\", function() { return getLabelArrowForOffset; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getHUDPages\", function() { return getHUDPages; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"placeWordsOnLetterGrid\", function() { return placeWordsOnLetterGrid; });\n/* harmony import */ var rot_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rot-js */ \"./node_modules/rot-js/lib/rot.js\");\n/* harmony import */ var rot_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(rot_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _brew__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../brew */ \"./src/brew.ts\");\n/* harmony import */ var _brew_components_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../brew_components/utils */ \"./src/brew_components/utils.ts\");\n\r\n\r\n\r\nlet PRIORITY_PLAYER_HEALTH = 10000;\r\nlet PRIORITY_PLAYER_EFFECTS = 9000;\r\nlet PRIORITY_TARGETLOCK = 8000;\r\nlet PRIORITY_MOB_HEALTH = 7000;\r\nlet PRIORITY_MOB_EFFECTS = 6000;\r\n//// \r\nlet PRIORITY_ITEMS = 5000;\r\nlet PRIORITY_MOB_FLAGS = 4000;\r\nlet PRIORITY_PLAYER_FLAGS = 4000;\r\nlet PRIORITY_FEATURE = 3000;\r\nlet PRIORITY_TERRAIN = 2000;\r\nclass HUDNote {\r\n    constructor(noteType, subject, priority, note_color) {\r\n        this.noteType = noteType;\r\n        this.subject = subject;\r\n        this.priority = priority;\r\n        this.note_color = note_color;\r\n        this.noteID = Object(_brew_components_utils__WEBPACK_IMPORTED_MODULE_2__[\"generateID\"])();\r\n    }\r\n    getNoteText() {\r\n        return \"\";\r\n    }\r\n    getOverlayText() {\r\n        return \"\";\r\n    }\r\n    setColor(new_color) {\r\n        this.note_color = new_color;\r\n    }\r\n    getColor() {\r\n        return this.note_color;\r\n    }\r\n}\r\nclass NoteTerrain extends HUDNote {\r\n    constructor(subject, priority, note_color) {\r\n        super(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].BrewNoteType.Terrain, subject, priority, note_color);\r\n        this.subject = subject;\r\n        this.priority = priority;\r\n        this.note_color = note_color;\r\n    }\r\n    getNoteText() {\r\n        return this.subject.code + \" \" + this.getOverlayText();\r\n    }\r\n    getOverlayText() {\r\n        return _brew__WEBPACK_IMPORTED_MODULE_1__[\"Definitions\"].TerrainType[this.subject.getDefinition()];\r\n    }\r\n}\r\nclass NoteFeature extends HUDNote {\r\n    constructor(subject, priority, note_color) {\r\n        super(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].BrewNoteType.Feature, subject, priority, note_color);\r\n        this.subject = subject;\r\n        this.priority = priority;\r\n        this.note_color = note_color;\r\n    }\r\n    getNoteText() {\r\n        return this.subject.code + \" \" + this.getOverlayText();\r\n    }\r\n    getOverlayText() {\r\n        return _brew__WEBPACK_IMPORTED_MODULE_1__[\"Glossary\"].getFeatureName(this.subject);\r\n    }\r\n}\r\nclass NoteTimedEffect extends HUDNote {\r\n    constructor(turn_timer, current_turn, priority, note_color) {\r\n        super(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].BrewNoteType.TimedEffect, turn_timer.actor, priority, note_color);\r\n        this.turn_timer = turn_timer;\r\n        this.current_turn = current_turn;\r\n        this.note_color = note_color;\r\n    }\r\n    getNoteText() {\r\n        return this.turn_timer.actor.code + \" \" + this.getOverlayText();\r\n    }\r\n    getOverlayText() {\r\n        // return `${this.subject.code} ${Brew.Enums.Flag[this.flag]}`\r\n        let turns_remaining = this.turn_timer.getTurnsRemaining(this.current_turn);\r\n        return `${_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].Flag[this.turn_timer.flag]} ${turns_remaining}`;\r\n    }\r\n}\r\nclass NoteMonsterHealth extends HUDNote {\r\n    constructor(subject, priority, note_color) {\r\n        super(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].BrewNoteType.Health, subject, priority, note_color);\r\n        this.subject = subject;\r\n        this.note_color = note_color;\r\n    }\r\n    getNoteText() {\r\n        return this.subject.code + \" \" + this.getOverlayText();\r\n    }\r\n    getOverlayText() {\r\n        let text = \"\";\r\n        // for (let i = 0; i < this.subject.hp.getCurrentLevel(); i++) {\r\n        for (let i = 1; i <= this.subject.hp.getMaxLevel(); i++) {\r\n            if (i <= this.subject.hp.getCurrentLevel()) {\r\n                text += _brew__WEBPACK_IMPORTED_MODULE_1__[\"Symbols\"].heart_full;\r\n            }\r\n            else {\r\n                text += _brew__WEBPACK_IMPORTED_MODULE_1__[\"Symbols\"].heart_empty;\r\n            }\r\n        }\r\n        if (this.subject.shields.getMaxLevel() > 0) {\r\n            // text += \" \"\r\n            for (let i = 0; i < this.subject.shields.getMaxLevel(); i++) {\r\n                if (i < this.subject.shields.getCurrentLevel()) {\r\n                    text += _brew__WEBPACK_IMPORTED_MODULE_1__[\"Symbols\"].diamond_full;\r\n                }\r\n                else {\r\n                    text += _brew__WEBPACK_IMPORTED_MODULE_1__[\"Symbols\"].diamond_empty;\r\n                }\r\n            }\r\n        }\r\n        return text;\r\n    }\r\n}\r\nclass NoteMonsterFlag extends HUDNote {\r\n    constructor(subject, flag, priority, note_color) {\r\n        super(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].BrewNoteType.BehavioralFlag, subject, priority, note_color);\r\n        this.subject = subject;\r\n        this.flag = flag;\r\n        this.note_color = note_color;\r\n    }\r\n    getNoteText() {\r\n        return this.subject.code + \" \" + this.getOverlayText();\r\n    }\r\n    getOverlayText() {\r\n        return _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].Flag[this.flag];\r\n    }\r\n}\r\nclass NoteMonsterSpeed extends HUDNote {\r\n    constructor(subject, speed, priority, note_color) {\r\n        super(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].BrewNoteType.Speed, subject, priority, note_color);\r\n        this.subject = subject;\r\n        this.speed = speed;\r\n        this.note_color = note_color;\r\n    }\r\n    getNoteText() {\r\n        return this.subject.code + \" \" + this.getOverlayText();\r\n    }\r\n    getOverlayText() {\r\n        if (this.speed < 12) {\r\n            return \"Moves Slowly\";\r\n        }\r\n        else {\r\n            return \"Moves Fast!\";\r\n        }\r\n    }\r\n}\r\nclass NoteTargetingLock extends HUDNote {\r\n    constructor(subject, lock_on, priority, note_color) {\r\n        super(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].BrewNoteType.TargetingLock, subject, priority, note_color);\r\n        this.subject = subject;\r\n        this.lock_on = lock_on;\r\n        this.note_color = note_color;\r\n    }\r\n    getNoteText() {\r\n        return this.subject.code + \" \" + this.getOverlayText();\r\n    }\r\n    getOverlayText() {\r\n        return `TLock [${this.lock_on.code}]`;\r\n    }\r\n}\r\nclass NoteItemOnFloor extends HUDNote {\r\n    constructor(subject, priority, note_color) {\r\n        super(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].BrewNoteType.NotableItem, subject, priority, note_color);\r\n        this.subject = subject;\r\n        this.note_color = note_color;\r\n    }\r\n    getNoteText() {\r\n        return this.subject.code + \" \" + this.getOverlayText();\r\n    }\r\n    getOverlayText() {\r\n        return _brew__WEBPACK_IMPORTED_MODULE_1__[\"Glossary\"].getItemName(this.subject);\r\n    }\r\n}\r\nfunction getCurrentNotes(gm) {\r\n    let hud_notes = [];\r\n    let current_turn = gm.turn_count;\r\n    let player = gm.getPlayer();\r\n    let level = gm.getCurrentLevel();\r\n    // always show player health/shield\r\n    hud_notes.push(new NoteMonsterHealth(player, PRIORITY_PLAYER_HEALTH, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].color_notes_player));\r\n    // show player timed effects / flags\r\n    let timed_effects = gm.timer_monitor.getAllTimersFor(player);\r\n    let covered_flags = [];\r\n    timed_effects.forEach((turn_timer) => {\r\n        hud_notes.push(new NoteTimedEffect(turn_timer, current_turn, PRIORITY_PLAYER_EFFECTS, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].color_notes_player));\r\n        covered_flags.push(turn_timer.flag);\r\n    });\r\n    // any other flags that player has? (flight)\r\n    for (let player_flag of player.getFlags()) {\r\n        if (covered_flags.indexOf(player_flag) == -1) {\r\n            hud_notes.push(new NoteMonsterFlag(player, player_flag, PRIORITY_PLAYER_FLAGS, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].color_notes_player));\r\n        }\r\n    }\r\n    // monsters nearby\r\n    let dist;\r\n    let priority;\r\n    let mob_list = [];\r\n    let distMap = {};\r\n    let max_dist;\r\n    let mob_note_color;\r\n    // create simple distance map from player, to gauge relative threat\r\n    _brew__WEBPACK_IMPORTED_MODULE_1__[\"Intel\"].getMonstersKnownBy(gm, player).forEach((mob) => {\r\n        mob_list.push(mob);\r\n        dist = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Utils\"].dist2d(player.location, mob.location);\r\n        distMap[mob.getID()] = dist;\r\n        max_dist = Math.max(dist, max_dist);\r\n    });\r\n    mob_list.forEach((mob, index) => {\r\n        mob_note_color = getDifferentiatedColor(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].dark_red, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].goldenrod, mob_list.length, index);\r\n        covered_flags = []; // reset for each new mob\r\n        dist = distMap[mob.getID()];\r\n        // at least one note for health/shield\r\n        hud_notes.push(new NoteMonsterHealth(mob, PRIORITY_MOB_HEALTH, mob_note_color));\r\n        timed_effects = gm.timer_monitor.getAllTimersFor(mob);\r\n        // potentially multiple notes for timed status effects (burning, weakened, etc)\r\n        for (let i = 0; i < timed_effects.length; i++) {\r\n            // hud_notes.push(new NoteTimedEffect(timed_effects[i], current_turn, PRIORITY_MOB_EFFECTS - (max_dist - dist), mob_note_color))\r\n            hud_notes.push(new NoteTimedEffect(timed_effects[i], current_turn, PRIORITY_MOB_EFFECTS, mob_note_color));\r\n            if (covered_flags.indexOf(timed_effects[i].flag) == -1) {\r\n                covered_flags.push(timed_effects[i].flag);\r\n            }\r\n        }\r\n        // list all behavioral (non-timed) effects/flags\r\n        for (let i = 0; i < mob.flags.length; i++) {\r\n            let mob_flag = mob.flags[i];\r\n            if (covered_flags.indexOf(mob_flag) == -1) {\r\n                // not previously covered\r\n                hud_notes.push(new NoteMonsterFlag(mob, mob_flag, PRIORITY_MOB_FLAGS, mob_note_color));\r\n            }\r\n        }\r\n        if (mob.speed != 12) {\r\n            hud_notes.push(new NoteMonsterSpeed(mob, mob.speed, PRIORITY_MOB_FLAGS, mob_note_color));\r\n        }\r\n    });\r\n    // items\r\n    let item_list = [];\r\n    _brew__WEBPACK_IMPORTED_MODULE_1__[\"Intel\"].getItemsKnownBy(gm, gm.getPlayer()).forEach((item) => {\r\n        item_list.push(item);\r\n        dist = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Utils\"].dist2d(player.location, item.location);\r\n        // priority = inverse of distance\r\n        distMap[item.getID()] = dist;\r\n        max_dist = Math.max(dist, max_dist);\r\n    });\r\n    item_list.forEach((item) => {\r\n        dist = distMap[item.getID()];\r\n        priority = PRIORITY_ITEMS; // - (max_dist - dist)\r\n        hud_notes.push(new NoteItemOnFloor(item, priority, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].blue));\r\n    });\r\n    // terrain and features -- only need 1 of each\r\n    let generic_content_notes = getGenericContentNotes(gm);\r\n    let shown_terrain = {};\r\n    let shown_features = {};\r\n    let already_shown;\r\n    let combined_generic_notes = [];\r\n    combined_generic_notes = combined_generic_notes.concat(generic_content_notes.featureNotes);\r\n    combined_generic_notes = combined_generic_notes.concat(generic_content_notes.terrainNotes);\r\n    for (let note of combined_generic_notes) {\r\n        already_shown = false;\r\n        if (note.subject instanceof _brew__WEBPACK_IMPORTED_MODULE_1__[\"GridThings\"].Terrain) {\r\n            if (note.subject.getDefinition() in shown_terrain) {\r\n                already_shown = true;\r\n            }\r\n        }\r\n        else if (note.subject instanceof _brew__WEBPACK_IMPORTED_MODULE_1__[\"GridThings\"].Feature) {\r\n            if (note.subject.getDefinition() in shown_features) {\r\n                already_shown = true;\r\n            }\r\n        }\r\n        if (!(already_shown)) {\r\n            if (note.subject instanceof _brew__WEBPACK_IMPORTED_MODULE_1__[\"GridThings\"].Terrain) {\r\n                shown_terrain[note.subject.getDefinition()] = true;\r\n            }\r\n            else if (note.subject instanceof _brew__WEBPACK_IMPORTED_MODULE_1__[\"GridThings\"].Feature) {\r\n                shown_features[note.subject.getDefinition()] = true;\r\n            }\r\n            hud_notes.push(note);\r\n        }\r\n    }\r\n    hud_notes = hud_notes.concat(getTargetLockNotes(gm));\r\n    hud_notes.sort((note_a, note_b) => {\r\n        return note_b.priority - note_a.priority;\r\n    });\r\n    return hud_notes;\r\n}\r\nfunction getLabelOffsetsForPoint() {\r\n    let list_all = [_brew__WEBPACK_IMPORTED_MODULE_1__[\"Directions\"].LEFT, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Directions\"].RIGHT, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Directions\"].UP_RIGHT, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Directions\"].DOWN_RIGHT, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Directions\"].UP_LEFT, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Directions\"].DOWN_LEFT];\r\n    // return list_all\r\n    return _brew__WEBPACK_IMPORTED_MODULE_1__[\"Utils\"].randomize(list_all, false);\r\n}\r\nconst usefulLabelArrowLookup = {};\r\nusefulLabelArrowLookup[_brew__WEBPACK_IMPORTED_MODULE_1__[\"Utils\"].xyToKey(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Directions\"].RIGHT)] = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Symbols\"].pointer_left;\r\nusefulLabelArrowLookup[_brew__WEBPACK_IMPORTED_MODULE_1__[\"Utils\"].xyToKey(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Directions\"].LEFT)] = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Symbols\"].pointer_right;\r\nusefulLabelArrowLookup[_brew__WEBPACK_IMPORTED_MODULE_1__[\"Utils\"].xyToKey(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Directions\"].UP)] = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Symbols\"].pointer_down;\r\nusefulLabelArrowLookup[_brew__WEBPACK_IMPORTED_MODULE_1__[\"Utils\"].xyToKey(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Directions\"].DOWN)] = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Symbols\"].pointer_up;\r\nusefulLabelArrowLookup[_brew__WEBPACK_IMPORTED_MODULE_1__[\"Utils\"].xyToKey(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Directions\"].DOWN_LEFT)] = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Symbols\"].pointer_upright;\r\nusefulLabelArrowLookup[_brew__WEBPACK_IMPORTED_MODULE_1__[\"Utils\"].xyToKey(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Directions\"].DOWN_RIGHT)] = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Symbols\"].pointer_upleft;\r\nusefulLabelArrowLookup[_brew__WEBPACK_IMPORTED_MODULE_1__[\"Utils\"].xyToKey(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Directions\"].UP_RIGHT)] = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Symbols\"].pointer_downleft;\r\nusefulLabelArrowLookup[_brew__WEBPACK_IMPORTED_MODULE_1__[\"Utils\"].xyToKey(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Directions\"].UP_LEFT)] = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Symbols\"].pointer_downright;\r\nfunction getLabelArrowForOffset(offset_xy) {\r\n    return usefulLabelArrowLookup[_brew__WEBPACK_IMPORTED_MODULE_1__[\"Utils\"].xyToKey(offset_xy)];\r\n}\r\nfunction getHUDPages(gm, given_notes) {\r\n    // sort by priority\r\n    given_notes.sort((note_a, note_b) => {\r\n        return note_b.priority - note_a.priority;\r\n    });\r\n    let max_notes_per_page = 6;\r\n    let makeNewPage = true;\r\n    let all_pages = [];\r\n    let currentPage;\r\n    let skipped_notes = [];\r\n    let note_idx = 0;\r\n    while (note_idx < given_notes.length) {\r\n        if (makeNewPage) {\r\n            currentPage = {\r\n                grid: new _brew__WEBPACK_IMPORTED_MODULE_1__[\"GridOfThings\"](),\r\n                note: []\r\n            };\r\n            makeNewPage = false;\r\n        }\r\n        let success = false;\r\n        let text;\r\n        let note = given_notes[note_idx];\r\n        let existing_char = currentPage.grid.getAt(note.subject.location);\r\n        if (existing_char) {\r\n            success = false;\r\n        }\r\n        else {\r\n            text = note.getOverlayText();\r\n            success = placeWordsOnLetterGrid(currentPage.grid, text, note.getColor(), note.subject.location);\r\n        }\r\n        if (success) {\r\n            currentPage.grid.setAt(note.subject.location, { char: note.subject.code, color: note.getColor() });\r\n            currentPage.note.push(note);\r\n            note_idx += 1;\r\n        }\r\n        makeNewPage = (!(success)) || (currentPage.note.length == max_notes_per_page);\r\n        if (makeNewPage) {\r\n            all_pages.push(currentPage);\r\n        }\r\n    }\r\n    all_pages.push(currentPage);\r\n    return all_pages;\r\n}\r\nfunction calcWordsStartCoordinate(spot_xy, offset_xy, words) {\r\n    let pointer_xy = spot_xy.add(offset_xy);\r\n    let words_start_xy = null;\r\n    if (offset_xy.x > 0) {\r\n        // text flows to the right\r\n        words_start_xy = spot_xy.add(offset_xy);\r\n    }\r\n    else if (offset_xy.x < 0) {\r\n        // text flows from the left\r\n        words_start_xy = spot_xy.add(offset_xy).add(new _brew__WEBPACK_IMPORTED_MODULE_1__[\"Coordinate\"](-1 * (words.length - 1), 0));\r\n    }\r\n    else {\r\n        throw new Error(\"function not designed for xy.x = 0\");\r\n    }\r\n    return words_start_xy;\r\n}\r\nfunction placeWordsOnLetterGrid(grid, words, color, spot_xy) {\r\n    let is_open;\r\n    let pointer_char;\r\n    let full_text;\r\n    let i;\r\n    let xy;\r\n    let offset_xy_list = getLabelOffsetsForPoint();\r\n    let offset_xy;\r\n    let words_start_xy;\r\n    // for (let words_start_xy of offset_list) {\r\n    for (let j = 0; j < offset_xy_list.length; j++) {\r\n        offset_xy = offset_xy_list[j];\r\n        pointer_char = getLabelArrowForOffset(offset_xy);\r\n        if (offset_xy.x > 0) {\r\n            full_text = pointer_char + words;\r\n        }\r\n        else if (offset_xy.x < 0) {\r\n            full_text = words + pointer_char;\r\n        }\r\n        else {\r\n            throw new Error(\"function not designed for xy.x = 0\");\r\n        }\r\n        words_start_xy = calcWordsStartCoordinate(spot_xy, offset_xy, full_text);\r\n        is_open = checkIfBlankSpaceExistsOnLetterGrid(grid, full_text, words_start_xy);\r\n        if (is_open) {\r\n            for (i = 0; i < full_text.length; i++) {\r\n                xy = words_start_xy.add(new _brew__WEBPACK_IMPORTED_MODULE_1__[\"Coordinate\"](i, 0));\r\n                grid.setAt(xy, { char: full_text[i], color: color });\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n    console.log(\"unable to find a spot for \", words);\r\n    return false;\r\n}\r\nfunction checkIfBlankSpaceExistsOnLetterGrid(grid, words, words_start_xy) {\r\n    // return true if we were able to place the words on the grid\r\n    let xy;\r\n    // make sure it is in bounds\r\n    if ((words_start_xy.x < 0) || (words_start_xy.y < 0)) {\r\n        return false;\r\n    }\r\n    if ((words_start_xy.x >= _brew__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].screen_width_tiles) || (words_start_xy.y >= _brew__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].screen_height_tiles)) {\r\n        return false;\r\n    }\r\n    if ((words_start_xy.x + words.length - 1) >= _brew__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].screen_width_tiles) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < words.length; i++) {\r\n        xy = words_start_xy.add(new _brew__WEBPACK_IMPORTED_MODULE_1__[\"Coordinate\"](i, 0));\r\n        if (grid.hasAt(xy)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction getGenericContentNotes(gm) {\r\n    let player = gm.getPlayer();\r\n    let level = gm.getCurrentLevel();\r\n    let terrain_at;\r\n    let feature_at;\r\n    let terrain_notes = [];\r\n    let feature_notes = [];\r\n    // let locations : Array<Brew.Coordinate> = Brew.Utils.randomize(player.fov.getAllCoordinates(), false)\r\n    let locations = player.fov.getAllCoordinates();\r\n    for (let xy of locations) {\r\n        terrain_at = level.terrain.getAt(xy);\r\n        if (terrain_at) {\r\n            terrain_notes.push(new NoteTerrain(terrain_at, PRIORITY_TERRAIN, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].normal));\r\n        }\r\n        feature_at = level.features.getAt(xy);\r\n        if (feature_at) {\r\n            feature_notes.push(new NoteFeature(feature_at, PRIORITY_FEATURE, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].normal));\r\n        }\r\n    }\r\n    return {\r\n        terrainNotes: terrain_notes,\r\n        featureNotes: feature_notes\r\n    };\r\n}\r\nfunction getTargetLockNotes(gm) {\r\n    let lock_notes = [];\r\n    let player = gm.getPlayer();\r\n    let level = gm.getCurrentLevel();\r\n    for (let mob of level.monsters.getAllThings()) {\r\n        if (_brew__WEBPACK_IMPORTED_MODULE_1__[\"Targeting\"].hasTargetLock(mob, player)) {\r\n            lock_notes.push(new NoteTargetingLock(mob, player, PRIORITY_TARGETLOCK, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].orange));\r\n        }\r\n    }\r\n    return lock_notes;\r\n}\r\nfunction getDifferentiatedColor(high_color, low_color, num_items, this_item_num) {\r\n    let factor = this_item_num / num_items;\r\n    return rot_js__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].interpolate(low_color, high_color, factor);\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/brew_game/hud_info.ts\n");

/***/ }),

/***/ "./src/brew_game/item_interaction.ts":
/*!*******************************************!*\
  !*** ./src/brew_game/item_interaction.ts ***!
  \*******************************************/
/*! exports provided: useItem, dropItemAttempt, pickup, doLandingEventAfterThrown, doLandingEventAfterHeave, triggerNanoCore, triggerGrenade */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"useItem\", function() { return useItem; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dropItemAttempt\", function() { return dropItemAttempt; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"pickup\", function() { return pickup; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"doLandingEventAfterThrown\", function() { return doLandingEventAfterThrown; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"doLandingEventAfterHeave\", function() { return doLandingEventAfterHeave; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"triggerNanoCore\", function() { return triggerNanoCore; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"triggerGrenade\", function() { return triggerGrenade; });\n/* harmony import */ var _brew__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../brew */ \"./src/brew.ts\");\n\r\nfunction useItem(gm, brEvent) {\r\n    // todo: replace this with a proper use event (also what is there to use)\r\n    // for now just consume and give health\r\n    let item = brEvent.itemData.item;\r\n    let invkey = brEvent.itemData.invkey;\r\n    let player = gm.getPlayer();\r\n    player.inventory.removeItemByKey(invkey);\r\n    player.hp.increment(1);\r\n    console.log(\"+1 health\");\r\n    gm.endEvent(brEvent);\r\n}\r\nfunction dropItemAttempt(gm, data) {\r\n    let drop_xy = data.itemData.to_xy;\r\n    let it = gm.getCurrentLevel().items.getAt(drop_xy);\r\n    if (it) {\r\n        // let dropError : Brew.Enums.IBrewEvent = {\r\n        //     eventType: Brew.Enums.BrewEventType.Error,\r\n        //     actor: null, // gm.getPlayer(),\r\n        //     playerInitiated: true,\r\n        //     endsTurn: false,\r\n        //     errorMsg: \"something is already here\"\r\n        // }\r\n        // data.endsTurn = false\r\n        // gm.insertEvent(dropError)\r\n        // console.log(\"something already is here\")\r\n        gm.display.drawPopupMessage(\"Already something here\", gm.getPlayer().location, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].white);\r\n        data.endsTurn = false;\r\n        gm.endEvent(data);\r\n    }\r\n    else {\r\n        let invkey = data.itemData.invkey;\r\n        let item = data.itemData.item;\r\n        gm.getPlayer().inventory.removeItemByKey(invkey); // already happens in landing event\r\n        gm.getCurrentLevel().items.setAt(drop_xy, item);\r\n        gm.displayAt(drop_xy);\r\n        gm.endEvent(data);\r\n    }\r\n}\r\nfunction pickup(gm, data) {\r\n    // remove it from the floor\r\n    let it = data.itemData.item;\r\n    gm.getCurrentLevel().items.removeAt(it.location);\r\n    // console.log(\"removed from level\", it.location)\r\n    // Intel.updateMemoryAt(gm, gm.getPlayer(), it.location)\r\n    // add to inventory\r\n    let ok = gm.getPlayer().inventory.addItem(it);\r\n    gm.display.drawPopupMessage(\"Picked up \" + _brew__WEBPACK_IMPORTED_MODULE_0__[\"Glossary\"].getItemName(it), data.actor.location, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].violet);\r\n    if (!(ok)) {\r\n        gm.display.drawPopupMessage(\"No more room!\", it.location, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].violet);\r\n        throw new Error(\"inventory full - we shouldn't be here\");\r\n    }\r\n    console.log(`Picked up ${it.name}`);\r\n    gm.endEvent(data);\r\n}\r\nfunction doLandingEventAfterThrown(gm, brEvent) {\r\n    let item = brEvent.itemData.item;\r\n    let level = gm.getCurrentLevel();\r\n    // if it explodes...\r\n    if (item.isType(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemType.Grenade) || item.isType(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemType.Nanotech)) {\r\n        // remove the item from inventory\r\n        gm.getPlayer().inventory.removeItemByKey(brEvent.itemData.invkey);\r\n        if (item.isType(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemType.Grenade)) {\r\n            triggerGrenade(gm, brEvent.itemData.item, brEvent.itemData.to_xy);\r\n        }\r\n        else if (item.isType(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemType.Nanotech)) {\r\n            triggerNanoCore(gm, brEvent.itemData.item, brEvent.itemData.to_xy);\r\n        }\r\n        gm.endEvent(brEvent);\r\n    }\r\n    else {\r\n        dropItemAttempt(gm, brEvent);\r\n        return;\r\n    }\r\n}\r\nfunction doLandingEventAfterHeave(gm, brEvent) {\r\n    let item = brEvent.itemData.item;\r\n    let level = gm.getCurrentLevel();\r\n    // clear item from the original location\r\n    level.items.removeAt(brEvent.itemData.item.location);\r\n    // check for target\r\n    let mob_at = level.monsters.getAt(brEvent.itemData.to_xy);\r\n    if (mob_at) {\r\n        let hitUpsideYoHeadEvent = {\r\n            eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.Attack,\r\n            actor: brEvent.actor,\r\n            playerInitiated: true,\r\n            endsTurn: false,\r\n            attackData: {\r\n                from_xy: brEvent.itemData.item.location,\r\n                to_xy: brEvent.itemData.to_xy,\r\n                isMelee: true,\r\n                damage: 1,\r\n                target: mob_at,\r\n            }\r\n        };\r\n        gm.insertEvent(hitUpsideYoHeadEvent);\r\n    }\r\n    else {\r\n        // item removed so no need to do anything extra.. dont think we want heaving multiple times\r\n    }\r\n    gm.endEvent(brEvent);\r\n}\r\nfunction triggerNanoCore(gm, nano_item, target_xy) {\r\n    let level = gm.getCurrentLevel();\r\n    let terrain_at;\r\n    let feature_at;\r\n    // feature map\r\n    let feature_type;\r\n    if (nano_item.subtype == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemSubtype.N_Health) {\r\n        feature_type = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].FeatureType.RepairGoo;\r\n    }\r\n    else if (nano_item.subtype == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemSubtype.N_Acid) {\r\n        feature_type = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].FeatureType.CorrosiveAcid;\r\n    }\r\n    else if (nano_item.subtype == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemSubtype.N_Armor) {\r\n        feature_type = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].FeatureType.ProtectiveGoo;\r\n    }\r\n    else {\r\n        console.error(\"unknown nano goo\");\r\n    }\r\n    let max_tiles = 5;\r\n    let num_tiles = 1;\r\n    let affected_area = [target_xy];\r\n    let offset_list = [_brew__WEBPACK_IMPORTED_MODULE_0__[\"Directions\"].UP.clone(), _brew__WEBPACK_IMPORTED_MODULE_0__[\"Directions\"].DOWN.clone(), _brew__WEBPACK_IMPORTED_MODULE_0__[\"Directions\"].LEFT.clone(), _brew__WEBPACK_IMPORTED_MODULE_0__[\"Directions\"].RIGHT.clone()];\r\n    let avoid_indices = [];\r\n    let offset_i;\r\n    let dist = 1;\r\n    let xy;\r\n    while (num_tiles < max_tiles) {\r\n        for (offset_i = 0; offset_i < offset_list.length; offset_i++) {\r\n            if (avoid_indices.indexOf(offset_i) > -1) {\r\n                // don't grow in this direction\r\n                continue;\r\n            }\r\n            xy = target_xy.add(offset_list[offset_i].multiplyScalar(dist));\r\n            if (!(level.isValid(xy))) {\r\n                continue;\r\n            }\r\n            terrain_at = level.terrain.getAt(xy);\r\n            if (terrain_at.blocks_walking) {\r\n                avoid_indices.push(offset_i);\r\n                continue;\r\n            }\r\n            feature_at = level.features.getAt(xy);\r\n            if (feature_at && feature_at.getDefinition() == feature_type) {\r\n                avoid_indices.push(offset_i);\r\n                continue;\r\n            }\r\n            affected_area.push(xy);\r\n            num_tiles += 1;\r\n            if (num_tiles == max_tiles) {\r\n                break;\r\n            }\r\n        }\r\n        dist += 1;\r\n    }\r\n    affected_area.forEach((xy, index) => {\r\n        feature_at = level.features.getAt(xy);\r\n        if (feature_at) {\r\n            level.features.removeAt(xy);\r\n        }\r\n        level.features.setAt(xy, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].featureFactory(feature_type));\r\n    });\r\n    gm.displayList(affected_area);\r\n}\r\nfunction triggerGrenade(gm, grenade_item, target_xy) {\r\n    // for concussion grenades use existing knockback event caller\r\n    if (grenade_item.subtype == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemSubtype.G_Concusive) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Combat\"].triggerKnockbackBlast(gm, target_xy, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Config\"].grenade_radius);\r\n        return;\r\n    }\r\n    // otherwise go through and apply damage / effects\r\n    let level = gm.getCurrentLevel();\r\n    let player = gm.getPlayer();\r\n    let blast_radius = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Config\"].grenade_radius;\r\n    // let affected_mobs = Utils.getMonstersWithinRadius(level, target_xy, Brew.Config.grenade_radius)\r\n    let area = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].getBlastArea(level, target_xy, blast_radius);\r\n    let affected_mobs = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].getMonstersWithinCoordinateArea(level, area);\r\n    let affected_area = affected_mobs.map((mob) => { return mob.location; });\r\n    let damage;\r\n    let effect_flags;\r\n    let blast_color;\r\n    if (grenade_item.subtype == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemSubtype.G_Explosive) {\r\n        damage = grenade_item.damage;\r\n        effect_flags = [];\r\n        blast_color = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].color_explosion;\r\n    }\r\n    else if (grenade_item.subtype == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemSubtype.G_Stun) {\r\n        damage = 0;\r\n        effect_flags = [_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].Flag.CausesStun];\r\n        blast_color = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].color_stun;\r\n    }\r\n    else {\r\n        throw new Error(`unknown grenade type ${grenade_item.subtype}`);\r\n    }\r\n    let massEvent = {\r\n        eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.MassDamage,\r\n        actor: gm.getPlayer(),\r\n        playerInitiated: true,\r\n        endsTurn: false,\r\n        attackData: {\r\n            from_xy: player.location,\r\n            to_xy: target_xy,\r\n            isMelee: false,\r\n            target: null,\r\n            damage: damage,\r\n            effects: effect_flags,\r\n        },\r\n        pathsData: {\r\n            from_xy: null,\r\n            to_xy: null,\r\n            path: affected_area,\r\n        }\r\n    };\r\n    gm.insertEvent({\r\n        eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.RunAnimation,\r\n        actor: gm.getPlayer(),\r\n        playerInitiated: false,\r\n        endsTurn: false,\r\n        animationData: {\r\n            animationType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewAnimationType.CircleOut,\r\n            color: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].color_force,\r\n            from_xy: target_xy,\r\n            to_xy: target_xy,\r\n            range: blast_radius\r\n        }\r\n    });\r\n    gm.insertEvent(massEvent);\r\n}\r\n// export function setItemAtLocation(level: Level, item: Brew.GridThings.Item, target_xy: Brew.Coordinate) {\r\n//     let existing_item = level.items.getAt(target_xy)\r\n//     if (existing_item) {\r\n//         pushExistingItemAwayToSafeSpot(level, existing_item)\r\n//     }\r\n//     level.items.setAt(target_xy, item)\r\n// }\r\n// export function pushExistingItemAwayToSafeSpot(level: Level, item_at: Brew.GridThings.Item) {\r\n//     let item_xy = item_at.location.clone()\r\n//     let near_xy = level.getSafeLocationNear(item_xy, true)\r\n//     level.items.removeAt(item_xy)\r\n//     level.items.setAt(near_xy, item_at)\r\n// }\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/brew_game/item_interaction.ts\n");

/***/ }),

/***/ "./src/brew_game/levelgen.ts":
/*!***********************************!*\
  !*** ./src/brew_game/levelgen.ts ***!
  \***********************************/
/*! exports provided: buildLevel, buildAndAttachNewLevel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildLevel\", function() { return buildLevel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildAndAttachNewLevel\", function() { return buildAndAttachNewLevel; });\n/* harmony import */ var rot_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rot-js */ \"./node_modules/rot-js/lib/rot.js\");\n/* harmony import */ var rot_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(rot_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _brew__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../brew */ \"./src/brew.ts\");\n\r\n\r\nfunction buildLevel(gm, depth, lastLevel) {\r\n    let success;\r\n    let my_level = new _brew__WEBPACK_IMPORTED_MODULE_1__[\"Level\"](_brew__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].map_width_tiles, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].map_height_tiles, depth);\r\n    // todo: make this an array and use some/all to make sure its a good level\r\n    success = false;\r\n    let num_tries = 0;\r\n    while (!(success)) {\r\n        num_tries += 1;\r\n        success = setupTerrain_Simple(my_level, lastLevel);\r\n    }\r\n    console.log(`depth ${depth}: ${num_tries} tries`);\r\n    my_level.updateNavigation();\r\n    addTerrainSpice(my_level);\r\n    my_level.updateNavigation();\r\n    success = setupExitLocations(my_level, lastLevel);\r\n    success = setupPortals(gm, my_level);\r\n    success = setupItems(my_level, lastLevel);\r\n    success = setupMonsters(gm, my_level, lastLevel);\r\n    my_level.isConstructed = true;\r\n    return my_level;\r\n}\r\nfunction buildAndAttachNewLevel(gm, currentLevel, portal) {\r\n    let next_level = buildLevel(gm, currentLevel.depth + 1, false);\r\n    gm.addLevel(next_level);\r\n    portal.attachDestination(next_level.id, next_level.simple_start_xy);\r\n}\r\nfunction setupPortals(gm, lair) {\r\n    let portal_forward;\r\n    portal_forward = new _brew__WEBPACK_IMPORTED_MODULE_1__[\"Portal\"](lair.id, lair.simple_exit_xy);\r\n    // portal_forward.attachDestination(listLevels[i+1].id, listLevels[i+1].simple_start_xy)\r\n    lair.portals.setAt(lair.simple_exit_xy, portal_forward);\r\n    return true;\r\n}\r\nfunction setupTerrain_Simple(lair, lastLevel) {\r\n    let terrain;\r\n    let easyMap = (x, y, what) => {\r\n        let xy = new _brew__WEBPACK_IMPORTED_MODULE_1__[\"Coordinate\"](x, y);\r\n        // walls override\r\n        // if ((x == 0) || (y == 0) || (x == lair.width - 1) || (y == lair.height - 1)) {\r\n        //     terrain = Brew.Definitions.terrainFactory(Brew.Definitions.TerrainType.Wall)\r\n        // } else {\r\n        if (what == 1) {\r\n            terrain = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Definitions\"].terrainFactory(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Definitions\"].TerrainType.Rock);\r\n        }\r\n        else if (what == 0) {\r\n            terrain = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Definitions\"].terrainFactory(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Definitions\"].TerrainType.Sand);\r\n        }\r\n        else {\r\n            throw new RangeError(`Unexpected levelgen return value ${what}`);\r\n        }\r\n        // }\r\n        lair.terrain.setAt(xy, terrain);\r\n    };\r\n    // let rotMap = new ROT.Map.Arena(lair.width, lair.height)\r\n    let rotMap = new rot_js__WEBPACK_IMPORTED_MODULE_0__[\"Map\"].Cellular(lair.width, lair.height, { connected: true });\r\n    rotMap.randomize(0.4);\r\n    rotMap.create(easyMap);\r\n    // rotMap.create(easyMap)\r\n    // rotMap.create(easyMap)\r\n    // make terrain interesting\r\n    let noise = new rot_js__WEBPACK_IMPORTED_MODULE_0__[\"Noise\"].Simplex(10);\r\n    let terrain_at;\r\n    for (let x = 1; x < (lair.width - 1); x++) {\r\n        for (let y = 1; y < (lair.height - 1); y++) {\r\n            let xy = new _brew__WEBPACK_IMPORTED_MODULE_1__[\"Coordinate\"](x, y);\r\n            let p = noise.get(x / 10, y / 10);\r\n            if ((p > .5) && (!(lastLevel))) {\r\n                terrain_at = lair.terrain.getAt(xy);\r\n                if (terrain_at.isType(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Definitions\"].TerrainType.Sand)) {\r\n                    lair.terrain.removeAt(xy);\r\n                    lair.terrain.setAt(xy, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Definitions\"].terrainFactory(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Definitions\"].TerrainType.Grass));\r\n                }\r\n            }\r\n            if (p < -0.5) {\r\n                terrain_at = lair.terrain.getAt(xy);\r\n                if (terrain_at.isType(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Definitions\"].TerrainType.Sand)) {\r\n                    lair.terrain.removeAt(xy);\r\n                    lair.terrain.setAt(xy, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Definitions\"].terrainFactory(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Definitions\"].TerrainType.Rubble));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction setupExitLocations(lair, lastLevel) {\r\n    // get all available floor spots\r\n    let floors = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Utils\"].randomize(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Utils\"].clone(lair.navigation_tiles[_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].LevelNavigationType.Walk]), true);\r\n    // unless otherwise specified, pick a random start location\r\n    // todo: ensure minimum distance between start and end\r\n    let start_xy = floors[0];\r\n    let exit_xy = floors[1];\r\n    let min_distance = Math.max(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].map_height_tiles, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].map_width_tiles) / 2;\r\n    while (_brew__WEBPACK_IMPORTED_MODULE_1__[\"Utils\"].dist2d(start_xy, exit_xy) < min_distance) {\r\n        exit_xy = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Utils\"].randomOf(floors, true);\r\n    }\r\n    // console.log(\"start\", start_xy)\r\n    // console.log(\"exit\", exit_xy)\r\n    lair.simple_start_xy = start_xy;\r\n    lair.simple_exit_xy = exit_xy;\r\n    // let start_xy = lair.simple_start_xy\r\n    // let exit_xy = lair.simple_exit_xy\r\n    // let entrance_stairs = Brew.Definitions.terrainFactory(Brew.Definitions.TerrainType.UpStairs)\r\n    // lair.terrain.removeAt(start_xy)\r\n    // lair.terrain.setAt(start_xy, entrance_stairs)\r\n    // if (lair.depth == 1) {\r\n    //     entrance_stairs.code = Brew.Symbols.double_angle_bracket_left\r\n    // }\r\n    // if (lair.depth < Brew.Config.max_depth) {\r\n    if (!(lastLevel)) {\r\n        lair.terrain.removeAt(exit_xy);\r\n        lair.terrain.setAt(exit_xy, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Definitions\"].terrainFactory(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Definitions\"].TerrainType.LevelCheckPoint));\r\n    }\r\n    // todo: eventually this will be fail-able\r\n    return true;\r\n}\r\nfunction setupItems(lair, lastLevel) {\r\n    // some items\r\n    let it;\r\n    let num_civilians = 5;\r\n    let num_supplies = 5;\r\n    let num_bullets = 5;\r\n    let num_shells = 5;\r\n    for (let i = 0; i < num_civilians; i++) {\r\n        it = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Definitions\"].itemFactory(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Definitions\"].ItemType.Civilian);\r\n        lair.items.setAt(lair.getSafeLocation(), it);\r\n    }\r\n    for (let i = 0; i < num_supplies; i++) {\r\n        it = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Definitions\"].itemFactory(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Definitions\"].ItemType.Supplies);\r\n        lair.items.setAt(lair.getSafeLocation(), it);\r\n    }\r\n    for (let i = 0; i < num_shells; i++) {\r\n        it = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Definitions\"].itemFactory(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Definitions\"].ItemType.Shells);\r\n        lair.items.setAt(lair.getSafeLocation(), it);\r\n    }\r\n    for (let i = 0; i < num_bullets; i++) {\r\n        it = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Definitions\"].itemFactory(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Definitions\"].ItemType.Bullets);\r\n        lair.items.setAt(lair.getSafeLocation(), it);\r\n    }\r\n    return true;\r\n}\r\nfunction setupMonsters(gm, lair, lastLevel) {\r\n    let weightedMonsters = {\r\n        \"Mercenary\": 5,\r\n        \"Soldier\": 5,\r\n    };\r\n    if (lair.depth > 5) {\r\n        weightedMonsters[\"Grenadier\"] = Math.min(5, (lair.depth - 5));\r\n    }\r\n    let num_monsters = 10 + (lair.depth * 2);\r\n    for (let i = 0; i < num_monsters; i++) {\r\n        // let mdef : Brew.Definitions.MonsterType\r\n        // if (ROT.RNG.getUniform() < 0.7) {\r\n        //     mdef = Brew.Definitions.MonsterType.Killbot\r\n        // } else {\r\n        //     mdef = Brew.Definitions.MonsterType.Guardguy\r\n        // }\r\n        let mdef = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Definitions\"].MonsterType[rot_js__WEBPACK_IMPORTED_MODULE_0__[\"RNG\"].getWeightedValue(weightedMonsters)];\r\n        // let mob = Brew.Definitions.monsterFactory(gm, Brew.Definitions.MonsterType.Killbot, {monster_status: Brew.GridThings.MonsterStatus.Wander })\r\n        let mob = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Definitions\"].monsterFactory(gm, mdef, { monster_status: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].MonsterStatus.Wander });\r\n        // mob.code = i.toString()\r\n        mob.name = \"Monster \" + i.toString();\r\n        // mob.code = i.toString()\r\n        // mob.monster_status = Brew.GridThings.MonsterStatus.Wander\r\n        // todo: ensure monsters dont start too near the starting location\r\n        let xy = lair.getSafeLocation();\r\n        // let xy : Brew.Coordinate = Brew.randomOf(level.floors)\r\n        lair.monsters.setAt(xy, mob);\r\n        // gm.scheduler.add(mob, true)\r\n    }\r\n    return true;\r\n}\r\nfunction addTerrainSpice(level) {\r\n    let floors = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Utils\"].randomize(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Utils\"].clone(level.navigation_tiles[_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].LevelNavigationType.Walk]), true);\r\n    let num_buildings = rot_js__WEBPACK_IMPORTED_MODULE_0__[\"RNG\"].getUniformInt(0, 3);\r\n    let building_tiles = new _brew__WEBPACK_IMPORTED_MODULE_1__[\"CoordinateArea\"]();\r\n    for (let i = 0; i < num_buildings; i++) {\r\n        let size = Math.max(3, Math.floor(rot_js__WEBPACK_IMPORTED_MODULE_0__[\"RNG\"].getNormal(10, 1)));\r\n        let center_xy = floors[i];\r\n        let structure;\r\n        if (rot_js__WEBPACK_IMPORTED_MODULE_0__[\"RNG\"].getUniform() < 0.5) {\r\n            structure = new _brew__WEBPACK_IMPORTED_MODULE_1__[\"Rooms\"].OvalRoom(new _brew__WEBPACK_IMPORTED_MODULE_1__[\"Rooms\"].Rectangle(center_xy.x, center_xy.y, size, size));\r\n        }\r\n        else {\r\n            structure = new _brew__WEBPACK_IMPORTED_MODULE_1__[\"Rooms\"].RectangleRoom(new _brew__WEBPACK_IMPORTED_MODULE_1__[\"Rooms\"].Rectangle(center_xy.x, center_xy.y, size, size));\r\n        }\r\n        for (let xy of structure.getWalls()) {\r\n            if (building_tiles.hasCoordinate(xy)) {\r\n                continue;\r\n            }\r\n            if (rot_js__WEBPACK_IMPORTED_MODULE_0__[\"RNG\"].getUniform() > 0.25) {\r\n                if (level.isValid_PointsOnly(xy)) {\r\n                    level.terrain.removeAt(xy);\r\n                    level.terrain.setAt(xy, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Definitions\"].terrainFactory(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Definitions\"].TerrainType.Broken_Wall));\r\n                }\r\n            }\r\n            building_tiles.addCoordinate(xy);\r\n        }\r\n        for (let xy of structure.getFloors()) {\r\n            // if (building_tiles.hasCoordinate)\r\n            if (level.isValid_PointsOnly(xy)) {\r\n                level.terrain.removeAt(xy);\r\n                level.terrain.setAt(xy, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Definitions\"].terrainFactory(_brew__WEBPACK_IMPORTED_MODULE_1__[\"Definitions\"].TerrainType.Rubble));\r\n            }\r\n            // building_tiles.addCoordinate(xy)\r\n        }\r\n    }\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/brew_game/levelgen.ts\n");

/***/ }),

/***/ "./src/brew_game/menus.ts":
/*!********************************!*\
  !*** ./src/brew_game/menus.ts ***!
  \********************************/
/*! exports provided: showContextMenu, showInventoryList, showPowerManagementMenu, showPowerInstallPromptMenu, showPowerInstallSelectMenu, showPowerSwapSelectMenu, getMenuData_Entries_for_Powers, showHeadsUpDisplay, showGenericMenu, stopShowingGenericMenu, getEntryName, updateGenericMenu, selectFromGenericMenu, showConfirmPaths, finalizeConfirmPaths, cancelConfirmPaths, getWarpBeaconMenuEvent, showHelpMenu */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"showContextMenu\", function() { return showContextMenu; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"showInventoryList\", function() { return showInventoryList; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"showPowerManagementMenu\", function() { return showPowerManagementMenu; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"showPowerInstallPromptMenu\", function() { return showPowerInstallPromptMenu; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"showPowerInstallSelectMenu\", function() { return showPowerInstallSelectMenu; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"showPowerSwapSelectMenu\", function() { return showPowerSwapSelectMenu; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getMenuData_Entries_for_Powers\", function() { return getMenuData_Entries_for_Powers; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"showHeadsUpDisplay\", function() { return showHeadsUpDisplay; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"showGenericMenu\", function() { return showGenericMenu; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"stopShowingGenericMenu\", function() { return stopShowingGenericMenu; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getEntryName\", function() { return getEntryName; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"updateGenericMenu\", function() { return updateGenericMenu; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"selectFromGenericMenu\", function() { return selectFromGenericMenu; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"showConfirmPaths\", function() { return showConfirmPaths; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"finalizeConfirmPaths\", function() { return finalizeConfirmPaths; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cancelConfirmPaths\", function() { return cancelConfirmPaths; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getWarpBeaconMenuEvent\", function() { return getWarpBeaconMenuEvent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"showHelpMenu\", function() { return showHelpMenu; });\n/* harmony import */ var _brew__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../brew */ \"./src/brew.ts\");\n\r\nfunction resetHUDToGame(gm) {\r\n    gm.input_handler = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].InputHandler.Main;\r\n    gm.display.clearDisplay(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].DisplayNames.HUD);\r\n    gm.displayAll();\r\n}\r\n//////////////////// context menu\r\nfunction showContextMenu(gm, brEvent) {\r\n    let context_action_list = brEvent.contextMenuData.context_list;\r\n    let item = brEvent.contextMenuData.item;\r\n    let invkey = brEvent.contextMenuData.invkey;\r\n    let entries = [];\r\n    let menuEvent = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.GenericMenuOn);\r\n    context_action_list.forEach((context_action, index, array) => {\r\n        let entryEvent;\r\n        let entryName = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].ContextMenuItem[context_action];\r\n        if (context_action == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].ContextMenuItem.Drop) {\r\n            entryEvent = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].addDataToEvent(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.Drop, true), {\r\n                itemData: {\r\n                    item: item,\r\n                    invkey: invkey,\r\n                    to_xy: gm.getPlayer().location.clone()\r\n                }\r\n            });\r\n        }\r\n        else if (context_action == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].ContextMenuItem.Throw) {\r\n            entryEvent = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.TargetingOn, false);\r\n            entryEvent.itemData = {\r\n                item: item,\r\n                invkey: invkey\r\n            };\r\n            entryEvent.startTargetingData = {\r\n                from_xy: gm.getPlayer().location,\r\n                to_xy: gm.getPlayer().location,\r\n                targetingAction: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewTargetingAction.ThrowItem\r\n            };\r\n        }\r\n        else if (context_action == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].ContextMenuItem.Use) {\r\n            entryEvent = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.UseItem, true);\r\n            entryEvent.itemData = {\r\n                item: item,\r\n                invkey: invkey\r\n            };\r\n        }\r\n        else {\r\n            throw new Error(\"bad context given\");\r\n        }\r\n        entries.push({\r\n            entryType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].GenericMenuEntryType.ItemContextAction,\r\n            entryName: entryName,\r\n            entryEvent: entryEvent\r\n        });\r\n    });\r\n    menuEvent.genericMenuData = {\r\n        menuTitle: item.getName(),\r\n        allowCancel: true,\r\n        menuEntriesList: entries\r\n    };\r\n    // gm.input_handler = Brew.Enums.InputHandler.ContextMenu\r\n    // gm.display.contextMenuDraw(contextList, 0)\r\n    // data.contextMenuData.selected_item_index = 0\r\n    gm.insertEvent(menuEvent);\r\n    gm.endEvent(brEvent);\r\n}\r\n//////////////////// inventory\r\nfunction showInventoryList(gm, data) {\r\n    let inv = data.inventoryData.inventory;\r\n    // gm.input_handler = Brew.Enums.InputHandler.InventoryList\r\n    // gm.display.inventoryDraw(inv, 0)\r\n    // data.inventoryData.selected_item_index = 0\r\n    let entries = [];\r\n    let menuEvent = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.GenericMenuOn);\r\n    let item1;\r\n    let item2;\r\n    let inv_keys = inv.getKeys();\r\n    inv_keys.sort((key1, key2) => {\r\n        item1 = inv.getItemByKey(key1);\r\n        item2 = inv.getItemByKey(key2);\r\n        if (item1.getDefinition() == item2.getDefinition()) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return (item1.getDefinition() < item2.getDefinition()) ? -1 : 1;\r\n        }\r\n    });\r\n    inv_keys.forEach((invkey, index, array) => {\r\n        let invitem = inv.getInventoryItemByKey(invkey);\r\n        entries.push({\r\n            entryType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].GenericMenuEntryType.InventoryItem,\r\n            entryEvent: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].addDataToEvent(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.ContextMenuOn), {\r\n                contextMenuData: {\r\n                    item: invitem.item,\r\n                    invkey: invkey,\r\n                    context_list: [_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].ContextMenuItem.Drop, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].ContextMenuItem.Throw] //, Brew.Enums.ContextMenuItem.Use]//todo: figure out allowed contexts based on item type\r\n                }\r\n            })\r\n        });\r\n    });\r\n    entries.push({\r\n        entryType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].GenericMenuEntryType.Cancel,\r\n        entryName: (_brew__WEBPACK_IMPORTED_MODULE_0__[\"Config\"].max_items - inv.getItems().length) + \" spaces remaining\",\r\n        entryDescription: \"Your inventory has \" + (_brew__WEBPACK_IMPORTED_MODULE_0__[\"Config\"].max_items - inv.getItems().length) + \" spaces remaining\",\r\n        entryEvent: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.GenericMenuOff, false)\r\n    });\r\n    menuEvent.genericMenuData = {\r\n        menuTitle: \"Inventory\",\r\n        allowCancel: true,\r\n        menuEntriesList: entries\r\n    };\r\n    gm.insertEvent(menuEvent);\r\n    gm.endEvent(data);\r\n}\r\n//////////////////////////////////////////////////\r\n// power management screen + uninstall + swap\r\n//////////////////////////////////////////////////\r\nfunction showPowerManagementMenu(gm, brEvent) {\r\n    let selected_power = brEvent.powerData.power;\r\n    let entries = [];\r\n    let menuEvent = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.GenericMenuOn);\r\n    entries.push({\r\n        entryName: \"Swap\",\r\n        entryType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].GenericMenuEntryType.EventBased,\r\n        entryEvent: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].addDataToEvent(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.PowerSwapSelectMenuOn, false), {\r\n            powerData: {\r\n                power: selected_power\r\n            }\r\n        })\r\n    });\r\n    entries.push({\r\n        entryName: \"Uninstall\",\r\n        entryType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].GenericMenuEntryType.EventBased,\r\n        entryEvent: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].addDataToEvent(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.PowerUninstall, true), {\r\n            powerData: {\r\n                power: selected_power\r\n            }\r\n        })\r\n    });\r\n    menuEvent.genericMenuData = {\r\n        menuTitle: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewPowerType[selected_power.powerType],\r\n        allowCancel: true,\r\n        menuEntriesList: entries\r\n    };\r\n    gm.insertEvent(menuEvent);\r\n    gm.endEvent(brEvent);\r\n}\r\n//////////////////// list of powers menu helper\r\n// function showListOfPowersMenu_Helper(gm: Brew.GameMaster, brEvent: Brew.Enums.IBrewEvent, eventOnSelection : Brew.Enums.BrewEventType, endsTurn : boolean) {\r\n//     let selected_power  = brEvent.powerData.power\r\n//     let player = gm.getPlayer()\r\n//     let power_entries : Array<Brew.Enums.IBrewGenericMenuEntry> = []\r\n//     let powers = player.getPowers()\r\n//     powers.listOfPowers.forEach((pow, index, array) => {\r\n//         power_entries.push({\r\n//             entryName: Brew.Enums.BrewPowerType[pow.powerType] + ` ${pow.charge_stat.getCurrentLevel()} / ${pow.charge_stat.getMaxLevel()}` ,\r\n//             entryType: Brew.Enums.GenericMenuEntryType.PowerSelect,\r\n//             entryEvent: Brew.Events.addDataToEvent(Brew.Events.createGenericEventOfType(gm, eventOnSelection, endsTurn), {\r\n//                 powerData: {\r\n//                     power: selected_power\r\n//                 },\r\n//                 swapPowerData: {\r\n//                     power: pow\r\n//                 }\r\n//             })\r\n//         })\r\n//     })\r\n//     let menuEvent = Brew.Events.createGenericEventOfType(gm, Brew.Enums.BrewEventType.GenericMenuOn)\r\n//     menuEvent.genericMenuData = {\r\n//         menuTitle: Brew.Enums.BrewEventType[eventOnSelection],\r\n//         allowCancel: true,\r\n//         menuEntriesList: power_entries\r\n//     }\r\n//     gm.insertEvent(menuEvent)\r\n//     gm.endEvent(brEvent)\r\n// }\r\n//////////////////////////////////////////////////\r\n// power install\r\n//////////////////////////////////////////////////\r\nfunction showPowerInstallPromptMenu(gm, brEvent) {\r\n    let power = brEvent.powerData.power;\r\n    let entries = [];\r\n    entries.push({\r\n        entryType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].GenericMenuEntryType.EventBased,\r\n        entryName: \"Yes, Install\",\r\n        entryDescription: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Glossary\"].getPowerDesc(power),\r\n        entryEvent: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].addDataToEvent(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.PowerInstallReplacementOn, false), {\r\n            powerData: {\r\n                power: power\r\n            }\r\n        })\r\n    });\r\n    entries.push({\r\n        entryType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].GenericMenuEntryType.Cancel,\r\n        entryName: \"No, Cancel\",\r\n        entryDescription: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Glossary\"].getPowerDesc(power),\r\n        entryEvent: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.GenericMenuOff)\r\n    });\r\n    let menuEvent = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.GenericMenuOn);\r\n    menuEvent.genericMenuData = {\r\n        menuTitle: \"Install This?\",\r\n        allowCancel: true,\r\n        menuEntriesList: entries,\r\n        menuDescription: \"Install this new power in an empty slot or replace an existing power\",\r\n    };\r\n    gm.insertEvent(menuEvent);\r\n    gm.endEvent(brEvent);\r\n}\r\nfunction showPowerInstallSelectMenu(gm, brEvent) {\r\n    // showListOfPowersMenu_Helper(gm, brEvent, Brew.Enums.BrewEventType.PowerInstallFinalize, true)\r\n    let menuEvent = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.GenericMenuOn);\r\n    menuEvent.genericMenuData = {\r\n        menuTitle: \"Replace Which?\",\r\n        allowCancel: true,\r\n        menuEntriesList: getMenuData_Entries_for_Powers(gm, brEvent.actor, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.PowerInstallFinalize, true, brEvent.powerData.power)\r\n    };\r\n    gm.insertEvent(menuEvent);\r\n    gm.endEvent(brEvent);\r\n}\r\nfunction showPowerSwapSelectMenu(gm, brEvent) {\r\n    // showListOfPowersMenu_Helper(gm, brEvent, Brew.Enums.BrewEventType.PowerSwapFinalize, false)\r\n    let menuEvent = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.GenericMenuOn);\r\n    menuEvent.genericMenuData = {\r\n        menuTitle: \"Swap With?\",\r\n        allowCancel: true,\r\n        menuEntriesList: getMenuData_Entries_for_Powers(gm, brEvent.actor, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.PowerSwapFinalize, false, brEvent.powerData.power)\r\n    };\r\n    gm.insertEvent(menuEvent);\r\n    gm.endEvent(brEvent);\r\n}\r\n//////////////////////////////////////////////////\r\n// power list\r\n//////////////////////////////////////////////////\r\nfunction getMenuData_Entries_for_Powers(gm, power_user, eventOnSelection, eventEndsTurn, swapPowerWith) {\r\n    // let player = gm.getPlayer()\r\n    let power_entries = [];\r\n    let powers = power_user.getPowers();\r\n    let basePower;\r\n    let swapPower;\r\n    let entry;\r\n    powers.listOfPowers.forEach((pow, index, array) => {\r\n        entry = {\r\n            entryName: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Glossary\"].getPowerName(pow),\r\n            entryType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].GenericMenuEntryType.EventBased,\r\n            entryEvent: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].addDataToEvent(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, eventOnSelection, eventEndsTurn), {\r\n                powerData: {\r\n                    power: swapPowerWith ? swapPowerWith : pow\r\n                }\r\n            }),\r\n            entryDescription: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Glossary\"].getPowerDesc(pow)\r\n        };\r\n        if (swapPowerWith) {\r\n            entry.entryEvent.swapPowerData = {\r\n                power: pow\r\n            };\r\n        }\r\n        power_entries.push(entry);\r\n    });\r\n    return power_entries;\r\n}\r\n//////////////////////////////////////////////////\r\n// HUD\r\n//////////////////////////////////////////////////\r\nfunction showHeadsUpDisplay(gm, brEvent) {\r\n    gm.input_handler = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].InputHandler.HeadsUpDisplay;\r\n    let current_page = brEvent.headsUpData.selected_index;\r\n    let notes = brEvent.headsUpData.headsUpDisplayNotePages[current_page];\r\n    gm.display.headsUpDisplayDraw(notes);\r\n    gm.endEvent(brEvent);\r\n}\r\n//////////////////////////////////////////////////\r\n// generic menu system\r\n//////////////////////////////////////////////////\r\nfunction showGenericMenu(gm, brEvent) {\r\n    let menu_entries = brEvent.genericMenuData.menuEntriesList;\r\n    gm.input_handler = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].InputHandler.GenericMenu;\r\n    gm.display.genericMenuDraw(brEvent.genericMenuData.menuTitle, brEvent.genericMenuData.menuDescription, menu_entries, 0);\r\n    brEvent.genericMenuData.selected_index = 0;\r\n    gm.endEvent(brEvent);\r\n}\r\nfunction stopShowingGenericMenu(gm, data) {\r\n    resetHUDToGame(gm);\r\n    gm.endEvent(data);\r\n}\r\nfunction getEntryName(entry) {\r\n    let entry_text;\r\n    if (entry.entryName) {\r\n        entry_text = entry.entryName;\r\n    }\r\n    else if (entry.entryType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].GenericMenuEntryType.EventBased) {\r\n        entry_text = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType[entry.entryEvent.eventType];\r\n    }\r\n    else if (entry.entryType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].GenericMenuEntryType.InventoryItem) {\r\n        entry_text = entry.entryEvent.contextMenuData.item.getName();\r\n    }\r\n    else if (entry.entryType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].GenericMenuEntryType.ItemContextAction) {\r\n        entry_text = entry.entryEvent.itemData.item.getName();\r\n    }\r\n    else {\r\n        entry_text = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].GenericMenuEntryType[entry.entryType];\r\n    }\r\n    return entry_text;\r\n}\r\nfunction updateGenericMenu(gm, brEvent) {\r\n    let cycle_dir = brEvent.genericMenuData.direction;\r\n    let lastEventMenuData = gm.getLastEvent().genericMenuData;\r\n    let current_index = lastEventMenuData.selected_index;\r\n    let entries = lastEventMenuData.menuEntriesList;\r\n    let new_index = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].mod(current_index + cycle_dir, entries.length);\r\n    gm.display.genericMenuDraw(lastEventMenuData.menuTitle, lastEventMenuData.menuDescription, entries, new_index);\r\n    // make sure data carries over during the subsequent event\r\n    brEvent.genericMenuData.menuEntriesList = entries;\r\n    brEvent.genericMenuData.selected_index = new_index;\r\n    gm.endEvent(brEvent);\r\n}\r\nfunction selectFromGenericMenu(gm, brEvent) {\r\n    let current_index = gm.getLastEvent().genericMenuData.selected_index;\r\n    let entries = gm.getLastEvent().genericMenuData.menuEntriesList;\r\n    let activeEntry = entries[current_index];\r\n    resetHUDToGame(gm);\r\n    // grab the event attached to this entry and load it to run next\r\n    // console.log(\"finished menu, inserting this event\", activeEntry.entryEvent)\r\n    gm.insertEvent(activeEntry.entryEvent);\r\n    gm.endEvent(brEvent);\r\n}\r\n//////////////////////////////////////////////////\r\n// Confirm Paths Menu\r\n//////////////////////////////////////////////////\r\nfunction showConfirmPaths(gm, brEvent) {\r\n    // draw the highlights\r\n    gm.display.highlights.clearAll();\r\n    for (let highlight_pair of brEvent.confirmPathsData.highlights) {\r\n        // gm.display.highlights.setAt(highlight_pair.xy\r\n        gm.display.highlights.setAt(highlight_pair.xy, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].terrainFactory(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].TerrainType.Highlight, { color: highlight_pair.color }));\r\n        gm.displayList(brEvent.confirmPathsData.highlights.map((pair, index, array) => {\r\n            return pair.xy;\r\n        }));\r\n    }\r\n    gm.input_handler = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].InputHandler.ConfirmPaths;\r\n    gm.endEvent(brEvent);\r\n}\r\nfunction stopConfirmPaths(gm, highlighted_path) {\r\n    gm.display.highlights.clearAll();\r\n    gm.displayList(highlighted_path.map((pair, index, array) => {\r\n        return pair.xy;\r\n    }));\r\n    gm.input_handler = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].InputHandler.Main;\r\n}\r\nfunction finalizeConfirmPaths(gm, brEvent) {\r\n    let last_event = gm.getLastEvent();\r\n    stopConfirmPaths(gm, last_event.confirmPathsData.highlights);\r\n    gm.insertEvent(last_event.confirmPathsData.follow_event);\r\n    gm.endEvent(brEvent);\r\n}\r\nfunction cancelConfirmPaths(gm, brEvent) {\r\n    let last_event = gm.getLastEvent();\r\n    stopConfirmPaths(gm, last_event.confirmPathsData.highlights);\r\n    gm.endEvent(brEvent);\r\n}\r\nfunction getWarpBeaconMenuEvent(gm, level, terrain) {\r\n    // return a menu event for a given warp pod location\r\n    let player = gm.getPlayer();\r\n    let menuEvent = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.GenericMenuOn);\r\n    let entry;\r\n    menuEvent.genericMenuData = {\r\n        menuTitle: \"Warp Pod\",\r\n        menuDescription: \"Using a warp crystal, home base can transmit items and other upgrades to your systems. Be mindful, warp crystals are only good for one use.\",\r\n        allowCancel: true,\r\n        menuEntriesList: []\r\n    };\r\n    menuEvent.genericMenuData.menuEntriesList.push({\r\n        entryName: \"Heal\",\r\n        entryDescription: \"Restore health to maximum\",\r\n        entryType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].GenericMenuEntryType.EventBased,\r\n        entryEvent: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.WarpBeaconHeal)\r\n    });\r\n    menuEvent.genericMenuData.menuEntriesList.push({\r\n        entryName: \"Reinforcements\",\r\n        entryDescription: \"Warp in an allied marine squad\",\r\n        entryType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].GenericMenuEntryType.EventBased,\r\n        entryEvent: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.WarpBeaconAllyDrop)\r\n    });\r\n    player.getPowers().listOfPowers.forEach((pow, index, array) => {\r\n        if ((pow.canBeRecharged) && (pow.charge_stat.getCurrentLevel() < pow.charge_stat.getMaxLevel())) {\r\n            menuEvent.genericMenuData.menuEntriesList.push({\r\n                entryName: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Glossary\"].getPowerShortName(pow) + \" RECHARGE\",\r\n                entryDescription: \"Restore this power to the maximum number of charges\",\r\n                entryType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].GenericMenuEntryType.EventBased,\r\n                entryEvent: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].addDataToEvent(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.WarpBeaconRechargePower, false), {\r\n                    powerData: {\r\n                        power: pow\r\n                    }\r\n                })\r\n            });\r\n        }\r\n        if (_brew__WEBPACK_IMPORTED_MODULE_0__[\"Powers\"].canUpgradePowerCharges(pow)) {\r\n            menuEvent.genericMenuData.menuEntriesList.push({\r\n                entryName: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Glossary\"].getPowerShortName(pow) + \" INCREASE\",\r\n                entryDescription: \"Permanently increase the number of charges for this power. Also adds 1 charge.\",\r\n                entryType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].GenericMenuEntryType.EventBased,\r\n                entryEvent: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].addDataToEvent(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.WarpBeaconIncreasePower, false), {\r\n                    powerData: {\r\n                        power: pow\r\n                    }\r\n                })\r\n            });\r\n        }\r\n        if (_brew__WEBPACK_IMPORTED_MODULE_0__[\"Powers\"].canUpgradePowerStrength(pow)) {\r\n            menuEvent.genericMenuData.menuEntriesList.push({\r\n                entryName: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Glossary\"].getPowerShortName(pow) + \" UPGRADE\",\r\n                entryDescription: \"Permanently increase the STRENGTH this power. Does not add new charges.\",\r\n                entryType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].GenericMenuEntryType.EventBased,\r\n                entryEvent: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].addDataToEvent(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.WarpBeaconUpgradePower, false), {\r\n                    powerData: {\r\n                        power: pow\r\n                    }\r\n                })\r\n            });\r\n        }\r\n    });\r\n    return menuEvent;\r\n}\r\n//////////////////////////////////////////////////\r\n// HELP\r\n//////////////////////////////////////////////////\r\nfunction showHelpMenu(gm, brEvent) {\r\n    gm.input_handler = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].InputHandler.HelpMenu;\r\n    let current_index = brEvent.helpData.selected_index;\r\n    // let notes = brEvent.headsUpData.headsUpDisplayNotePages[current_page]\r\n    gm.display.drawHelpMenu(current_index);\r\n    gm.endEvent(brEvent);\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/brew_game/menus.ts\n");

/***/ }),

/***/ "./src/brew_game/movement.ts":
/*!***********************************!*\
  !*** ./src/brew_game/movement.ts ***!
  \***********************************/
/*! exports provided: move, checkForImpactOfNewParts, isDoor, checkForAmbientEffects, canMoveToLocation, knockback, calculateKnockbackDistance, triggerPortalUse, rest */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"move\", function() { return move; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"checkForImpactOfNewParts\", function() { return checkForImpactOfNewParts; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isDoor\", function() { return isDoor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"checkForAmbientEffects\", function() { return checkForAmbientEffects; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"canMoveToLocation\", function() { return canMoveToLocation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"knockback\", function() { return knockback; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"calculateKnockbackDistance\", function() { return calculateKnockbackDistance; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"triggerPortalUse\", function() { return triggerPortalUse; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rest\", function() { return rest; });\n/* harmony import */ var _brew__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../brew */ \"./src/brew.ts\");\n\r\nlet turn_history = [];\r\nlet last_step;\r\nfunction updateTurns(from_xy, to_xy) {\r\n    let step_direction_xy = to_xy.subtract(from_xy);\r\n    if (last_step) {\r\n        let turn_angle = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Turning\"].getAngleBetween(last_step, step_direction_xy);\r\n        turn_history.push(turn_angle);\r\n        if (turn_history.length > 4) {\r\n            let first = turn_history.shift();\r\n        }\r\n    }\r\n    // console.log(turn_history)\r\n    last_step = step_direction_xy;\r\n}\r\nfunction checkForFancySteps() {\r\n    let fancy_footwork = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].FancyStepType.None;\r\n    if (checkForSquareStep()) {\r\n        fancy_footwork = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].FancyStepType.Squarestep;\r\n    }\r\n    else if (checkForLunge()) {\r\n        fancy_footwork = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].FancyStepType.Lunge;\r\n    }\r\n    return fancy_footwork;\r\n}\r\nfunction checkForLunge() {\r\n    if (turn_history.length == 0) {\r\n        return false;\r\n    }\r\n    let last_turn = turn_history[turn_history.length - 1];\r\n    return Math.abs(last_turn) == Math.PI;\r\n}\r\nfunction checkForSquareStep() {\r\n    let half_pi = Math.PI / 2;\r\n    if (turn_history.length < 4) {\r\n        return false;\r\n    }\r\n    let qtr_turn_indicators = turn_history.map((angle_rads) => {\r\n        if (Math.abs(angle_rads) == half_pi) {\r\n            return Math.sign(angle_rads);\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    });\r\n    let sum_of_turns = qtr_turn_indicators.reduce((prev_val, current_val) => {\r\n        return prev_val + current_val;\r\n    }, 0);\r\n    let is_circle_step = Math.abs(sum_of_turns) == 4;\r\n    return is_circle_step;\r\n}\r\nfunction move(gm, data) {\r\n    let level = gm.getCurrentLevel();\r\n    // debug: check if location is full of a monster already\r\n    let m_at = level.monsters.getAt(data.moveData.to_xy);\r\n    if (m_at) {\r\n        console.error(`${data.actor.name} trying to move onto an occupied grid, ${data.moveData.from_xy} -> ${data.moveData.to_xy}`);\r\n    }\r\n    _brew__WEBPACK_IMPORTED_MODULE_0__[\"Parts\"].removeMonsterPartsFromGrid(gm, data.actor);\r\n    level.monsters.removeAt(data.moveData.from_xy);\r\n    level.monsters.setAt(data.moveData.to_xy, data.actor);\r\n    _brew__WEBPACK_IMPORTED_MODULE_0__[\"Parts\"].updateMonsterParts(gm, data.actor);\r\n    _brew__WEBPACK_IMPORTED_MODULE_0__[\"Parts\"].placeMonsterPartsOnGrid(gm, data.actor);\r\n    // check for trigger events\r\n    let didTrigger = checkForTriggerOnStep(gm, data.actor, data.moveData.to_xy, data.moveData.from_xy);\r\n    let ambientTrigger = checkForAmbientEffects(gm, data.actor);\r\n    // if (Brew.Intel.isPlayer(gm, data.actor)) {\r\n    //     updateTurns(data.moveData.from_xy, data.moveData.to_xy)\r\n    // }\r\n    // turn off target locks when someone moves\r\n    _brew__WEBPACK_IMPORTED_MODULE_0__[\"Targeting\"].clearTargetLocksBy(data.actor);\r\n    gm.displayList([data.moveData.from_xy, data.moveData.to_xy]);\r\n    gm.endEvent(data);\r\n}\r\nfunction checkForImpactOfNewParts(gm, actor, component_parts) {\r\n    let level = gm.getCurrentLevel();\r\n    let terrain_at;\r\n    let num_changes = 0;\r\n    for (let part of component_parts) {\r\n        if (level.isValid(part.location)) {\r\n            terrain_at = level.terrain.getAt(part.location);\r\n            if ((terrain_at.isType(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].TerrainType.Rock)) || (terrain_at.isType(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].TerrainType.Broken_Wall))) {\r\n                level.terrain.removeAt(part.location);\r\n                level.terrain.setAt(part.location, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].terrainFactory(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].TerrainType.Rubble));\r\n                num_changes += 1;\r\n            }\r\n        }\r\n    }\r\n    return num_changes > 0;\r\n}\r\nfunction checkForTriggerOnStep(gm, actor, location_xy, previous_xy) {\r\n    let level = gm.getCurrentLevel();\r\n    let triggerEvent;\r\n    let num_events = 0;\r\n    // \r\n    let terrain_at = level.terrain.getAt(location_xy);\r\n    let terrain_from = level.terrain.getAt(previous_xy);\r\n    let door_change;\r\n    if (isDoor(terrain_at)) {\r\n        door_change = holdTheDoor(gm, terrain_at);\r\n        if (door_change) {\r\n            gm.displayAt(location_xy);\r\n        }\r\n    }\r\n    if (isDoor(terrain_from)) {\r\n        door_change = holdTheDoor(gm, terrain_from);\r\n        if (door_change) {\r\n            gm.displayAt(previous_xy);\r\n        }\r\n    }\r\n    return (num_events > 0);\r\n}\r\nfunction isDoor(terrain) {\r\n    return ((terrain.isType(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].TerrainType.Door) || terrain.isType(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].TerrainType.DoorOpen)));\r\n}\r\nfunction holdTheDoor(gm, the_door) {\r\n    let level = gm.getCurrentLevel();\r\n    let xy = the_door.location.clone();\r\n    let monster_on_it = level.monsters.getAt(xy);\r\n    let item_on_it = level.items.getAt(xy);\r\n    let something_on_it = monster_on_it || item_on_it;\r\n    // if its closed\r\n    if (the_door.isType(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].TerrainType.Door)) {\r\n        // and someone is standing on it, make it open\r\n        if (something_on_it) {\r\n            level.terrain.removeAt(xy);\r\n            level.terrain.setAt(xy, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].terrainFactory(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].TerrainType.DoorOpen));\r\n            return true;\r\n        }\r\n    }\r\n    // if its open\r\n    if (the_door.isType(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].TerrainType.DoorOpen)) {\r\n        // and no one is standing on it, close it\r\n        if (!(something_on_it)) {\r\n            level.terrain.removeAt(xy);\r\n            level.terrain.setAt(xy, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].terrainFactory(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].TerrainType.Door));\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction checkForAmbientEffects(gm, actor) {\r\n    let level = gm.getCurrentLevel();\r\n    let triggerEvent;\r\n    let num_events = 0;\r\n    let location_xy = actor.location;\r\n    // check for part/components of other monsters\r\n    let part_at = level.parts.getAt(location_xy);\r\n    if (part_at) {\r\n        if (part_at.isType(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].FeatureType.TankPart) && (!(part_at.getParent().isSameThing(actor)))) {\r\n            // smooshed by a tank\r\n            triggerEvent = {\r\n                eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.Attack,\r\n                actor: actor,\r\n                playerInitiated: false,\r\n                endsTurn: false,\r\n                attackData: {\r\n                    from_xy: location_xy,\r\n                    to_xy: location_xy,\r\n                    target: actor,\r\n                    isMelee: true,\r\n                    damage: 1,\r\n                    effects: [],\r\n                }\r\n            };\r\n            gm.insertEvent(triggerEvent);\r\n            num_events += 1;\r\n        }\r\n    }\r\n    // check for interactive features\r\n    let feature_at = level.features.getAt(location_xy);\r\n    if (feature_at) {\r\n        if (feature_at.isType(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].FeatureType.RepairGoo)) {\r\n            actor.hp.increment(1);\r\n            console.log(`${actor.name} health is now ${actor.hp}`);\r\n            level.features.removeAt(location_xy);\r\n        }\r\n        else if (feature_at.isType(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].FeatureType.CorrosiveAcid)) {\r\n            level.features.removeAt(location_xy);\r\n            triggerEvent = {\r\n                eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.Attack,\r\n                actor: actor,\r\n                playerInitiated: false,\r\n                endsTurn: false,\r\n                attackData: {\r\n                    from_xy: location_xy,\r\n                    to_xy: location_xy,\r\n                    target: actor,\r\n                    isMelee: true,\r\n                    damage: 0,\r\n                    effects: [_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].Flag.CausesWeak],\r\n                }\r\n            };\r\n            gm.insertEvent(triggerEvent);\r\n            num_events += 1;\r\n        }\r\n        else if (feature_at.isType(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].FeatureType.ProtectiveGoo)) {\r\n            level.features.removeAt(location_xy);\r\n            triggerEvent = {\r\n                eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.Attack,\r\n                actor: actor,\r\n                playerInitiated: false,\r\n                endsTurn: false,\r\n                attackData: {\r\n                    from_xy: location_xy,\r\n                    to_xy: location_xy,\r\n                    target: actor,\r\n                    isMelee: true,\r\n                    damage: 0,\r\n                    effects: [_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].Flag.CausesInvulnerable],\r\n                }\r\n            };\r\n            gm.insertEvent(triggerEvent);\r\n            num_events += 1;\r\n        }\r\n    }\r\n    // console.log(`${num_events} ambient events inserted`)\r\n    return (num_events > 0);\r\n}\r\nfunction canMoveToLocation(gm, actor, location_xy) {\r\n    let level = gm.getCurrentLevel();\r\n    if (!(level.isValid(location_xy))) {\r\n        return false;\r\n    }\r\n    let t = level.terrain.getAt(location_xy);\r\n    return ((!(t.blocks_walking)) ||\r\n        (t.blocks_walking && (actor.hasFlag(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].Flag.PhaseWalk))) ||\r\n        ((!(t.blocks_flying)) && (actor.hasFlag(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].Flag.Flying))));\r\n}\r\nfunction knockback(gm, brEvent) {\r\n    let knockbackData = brEvent.knockbackData;\r\n    let knockback_path = calculateKnockbackPath(gm, knockbackData.origin_xy, knockbackData.magnitude, knockbackData.target);\r\n    if (knockback_path.length < 2) {\r\n        gm.endEvent(brEvent);\r\n        return;\r\n    }\r\n    let final_xy = knockback_path[knockback_path.length - 1];\r\n    // check if something else exists that that location\r\n    let level = gm.getCurrentLevel();\r\n    let mob_at = level.monsters.getAt(final_xy);\r\n    let attackEvent;\r\n    if (mob_at) {\r\n        final_xy = knockback_path[knockback_path.length - 2]; // todo: is this safe or do we need to check for knockback path distances < 2?\r\n    }\r\n    console.log(\"knockpath\", knockback_path);\r\n    let animationEvent = {\r\n        eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.RunAnimation,\r\n        actor: knockbackData.target,\r\n        playerInitiated: false,\r\n        endsTurn: false,\r\n        animationData: {\r\n            animationType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewAnimationType.OverPath,\r\n            code: knockbackData.target.code,\r\n            color: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].red,\r\n            from_xy: knockbackData.target.location,\r\n            to_xy: final_xy,\r\n            path: knockback_path\r\n        }\r\n    };\r\n    let moveEvent = {\r\n        eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.Move,\r\n        actor: knockbackData.target,\r\n        playerInitiated: false,\r\n        endsTurn: false,\r\n        moveData: {\r\n            from_xy: knockbackData.target.location,\r\n            to_xy: final_xy,\r\n        }\r\n    };\r\n    // gm.insertEvent(moveEvent)\r\n    // gm.insertEvent(animationEvent)\r\n    gm.insertEvent_Next(moveEvent);\r\n    gm.insertEvent_Next(animationEvent);\r\n    gm.endEvent(brEvent);\r\n}\r\nfunction calculateKnockbackPath(gm, origin_xy, distance, target) {\r\n    let target_xy = target.location.clone();\r\n    // let offset_xy = target_xy.subtract(origin_xy).toUnit()\r\n    // // todo: calculate slope and use that instead of this method which will only give straights/diagonals\r\n    // let flyaway_xy = offset_xy.multiplyScalar(distance)\r\n    // let final_xy = target_xy.add(flyaway_xy)\r\n    let final_xy = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].getTradjectoryCoordinate(origin_xy, target_xy, distance);\r\n    let full_path = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].getLineBetweenPoints(target_xy, final_xy);\r\n    let actual_path = [];\r\n    let level = gm.getCurrentLevel();\r\n    let terrain_at;\r\n    let mob_at;\r\n    let xy;\r\n    for (let i = 0; i < full_path.length; i++) {\r\n        xy = full_path[i];\r\n        if (!(level.isValid(xy))) {\r\n            break;\r\n        }\r\n        terrain_at = level.terrain.getAt(xy);\r\n        if ((terrain_at.blocks_flying) || (terrain_at.is_solid)) {\r\n            break;\r\n        }\r\n        mob_at = level.monsters.getAt(xy);\r\n        if ((mob_at) && (i > 0)) {\r\n            break;\r\n        }\r\n        actual_path.push(xy);\r\n    }\r\n    return actual_path;\r\n}\r\nfunction calculateKnockbackDistance(gm, origin_xy, magnitude, target) {\r\n    let target_xy = target.location.clone();\r\n    let dist = Math.floor(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].dist2d(origin_xy, target_xy));\r\n    return Math.max(0, magnitude - dist);\r\n}\r\nfunction triggerPortalUse(gm, brEvent) {\r\n    let portal = brEvent.portalData.portal_used;\r\n    // is this the escape portal?\r\n    let level = gm.getCurrentLevel();\r\n    // figure out if we're going somewhere in the same level or new level\r\n    if (portal.dest_level_id != gm.getCurrentLevel().id) {\r\n        // going to a new level\r\n        // make new levels on the fly!!\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"LevelGenerator\"].buildAndAttachNewLevel(gm, level, portal);\r\n        let changeLevelEvent = Object.assign({}, brEvent);\r\n        changeLevelEvent.eventType = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.ChangeLevel;\r\n        gm.insertEvent(changeLevelEvent);\r\n    }\r\n    // maybe it was an item\r\n    let portal_thing;\r\n    if (brEvent.itemData) {\r\n        portal_thing = brEvent.itemData.item;\r\n    }\r\n    else {\r\n        portal_thing = brEvent.actor;\r\n    }\r\n    gm.endEvent(brEvent);\r\n}\r\n// let movementDirectionCache \r\nfunction rest(gm, brEvent) {\r\n    // updateTurns(brEvent.actor.location, brEvent.actor.location)\r\n    if (brEvent.actor.isSameThing(gm.getPlayer())) {\r\n        resetStepTurns();\r\n    }\r\n    gm.endEvent(brEvent);\r\n}\r\nfunction resetStepTurns() {\r\n    last_step = null;\r\n    turn_history = [];\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/brew_game/movement.ts\n");

/***/ }),

/***/ "./src/brew_game/powers.ts":
/*!*********************************!*\
  !*** ./src/brew_game/powers.ts ***!
  \*********************************/
/*! exports provided: Power, PowerSuite, getEmptyPower, createBasicPowerOfType, createItemFromPower, createPowerFromItem, createPowerItemOfType, uninstallPower, installPower, swapPower, triggerPower, safelyEndPhaseWalk, rocketPunch, throw_axe, recall_axe, getPowerMaxDistance, canUpgradePowerStrength, canUpgradePowerCharges */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Power\", function() { return Power; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PowerSuite\", function() { return PowerSuite; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getEmptyPower\", function() { return getEmptyPower; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createBasicPowerOfType\", function() { return createBasicPowerOfType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createItemFromPower\", function() { return createItemFromPower; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createPowerFromItem\", function() { return createPowerFromItem; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createPowerItemOfType\", function() { return createPowerItemOfType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"uninstallPower\", function() { return uninstallPower; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"installPower\", function() { return installPower; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"swapPower\", function() { return swapPower; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"triggerPower\", function() { return triggerPower; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"safelyEndPhaseWalk\", function() { return safelyEndPhaseWalk; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rocketPunch\", function() { return rocketPunch; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"throw_axe\", function() { return throw_axe; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"recall_axe\", function() { return recall_axe; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getPowerMaxDistance\", function() { return getPowerMaxDistance; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"canUpgradePowerStrength\", function() { return canUpgradePowerStrength; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"canUpgradePowerCharges\", function() { return canUpgradePowerCharges; });\n/* harmony import */ var _brew__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../brew */ \"./src/brew.ts\");\n\r\nclass Power {\r\n    constructor(power_def) {\r\n        this.activated = false;\r\n        this.firing_arc = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].FiringArc.FullArc;\r\n        this.id = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].generateID();\r\n        this.powerType = power_def.powerType;\r\n        this.canBeRecharged = power_def.canBeRecharged;\r\n        this.charge_stat = new _brew__WEBPACK_IMPORTED_MODULE_0__[\"Stat\"](_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].StatName.PowerCharge, power_def.startingCharges);\r\n        this.charge_stat.setCurrentLevel(power_def.startingCharges);\r\n        this.strength = new _brew__WEBPACK_IMPORTED_MODULE_0__[\"Stat\"](_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].StatName.StrengthRank, power_def.maxStrength);\r\n        this.strength.setCurrentLevel(1);\r\n        this.color = power_def.color;\r\n        if (power_def.conveys_flags) {\r\n            this.conveys_flags = [].concat(power_def.conveys_flags);\r\n        }\r\n        else {\r\n            this.conveys_flags = [];\r\n        }\r\n        this.facing_direction = new _brew__WEBPACK_IMPORTED_MODULE_0__[\"Coordinate\"](0, 0);\r\n    }\r\n}\r\nclass PowerSuite {\r\n    constructor(max_capacity) {\r\n        // array of powers\r\n        this.listOfPowers = [];\r\n        this.current_capacity = 0;\r\n        this.max_capacity = max_capacity;\r\n    }\r\n    addPower(power) {\r\n        // returns true if we successfully added this power\r\n        if (this.current_capacity == this.max_capacity) {\r\n            return false;\r\n        }\r\n        else {\r\n            this.listOfPowers.push(power);\r\n            return true;\r\n        }\r\n    }\r\n    removePower(selected_power) {\r\n        let remove_index = this.listOfPowers.findIndex((pow, index, array) => {\r\n            return pow.id == selected_power.id;\r\n        });\r\n        if (remove_index == -1) {\r\n            return false;\r\n        }\r\n        else {\r\n            this.listOfPowers.splice(remove_index, 1);\r\n            return true;\r\n        }\r\n    }\r\n    hasPowerOfType(given_powertype) {\r\n        // returns true if we have at least one power of a given type\r\n        let gotIt = false;\r\n        this.listOfPowers.forEach((pow, index, array) => {\r\n            if (pow.powerType == given_powertype) {\r\n                gotIt = true;\r\n            }\r\n        });\r\n        return gotIt;\r\n    }\r\n    getPowerOfType(given_powertype, defaultToMostCharged = true) {\r\n        // returns the power object associated with a given type\r\n        // if multiple powers are found, it returns the one with the\r\n        // most charge by default, but this behavior can be reversed \r\n        let candidate_list = [];\r\n        for (let i = 0; i < this.listOfPowers.length; i++) {\r\n            let pow = this.listOfPowers[i];\r\n            if (pow.powerType == given_powertype) {\r\n                candidate_list.push(pow);\r\n            }\r\n        }\r\n        if (candidate_list.length == 0) {\r\n            return null;\r\n        }\r\n        else if (candidate_list.length == 1) {\r\n            return candidate_list[0];\r\n        }\r\n        else {\r\n            // multiple\r\n            candidate_list.sort((aPow, bPow) => {\r\n                if (defaultToMostCharged) {\r\n                    return bPow.charge_stat.getCurrentLevel() - aPow.charge_stat.getCurrentLevel();\r\n                }\r\n                else {\r\n                    return aPow.charge_stat.getCurrentLevel() - bPow.charge_stat.getCurrentLevel();\r\n                }\r\n            });\r\n            return candidate_list[0];\r\n        }\r\n    }\r\n    getPowerByIndex(index) {\r\n        if ((index < 0) || (index >= this.listOfPowers.length) || (index >= this.max_capacity)) {\r\n            return null;\r\n        }\r\n        return this.listOfPowers[index];\r\n    }\r\n    hasPowerByID(given_power) {\r\n        return this.listOfPowers.findIndex((pow, index, obj) => {\r\n            return given_power.id == pow.id;\r\n        }) > -1;\r\n    }\r\n    getIndexFromPower(given_power) {\r\n        if (this.hasPowerByID(given_power)) {\r\n            let found_index = this.listOfPowers.findIndex((pow, index, obj) => { return given_power.id == pow.id; });\r\n            return found_index;\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n} // end class\r\nlet power_defaults = {\r\n    \"TurretCannon\": {\r\n        powerType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewPowerType.TurretCannon,\r\n        canBeRecharged: true,\r\n        startingCharges: 3,\r\n        maxStrength: 1,\r\n        color: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].black,\r\n    },\r\n    \"MachineGun\": {\r\n        powerType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewPowerType.MachineGun,\r\n        canBeRecharged: true,\r\n        startingCharges: 3,\r\n        maxStrength: 1,\r\n        color: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].black,\r\n    },\r\n    \"Scanner\": {\r\n        powerType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewPowerType.Scanner,\r\n        canBeRecharged: true,\r\n        startingCharges: 3,\r\n        maxStrength: 1,\r\n        color: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].black,\r\n    },\r\n};\r\nfunction getEmptyPower() {\r\n    let empty_def = {\r\n        powerType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewPowerType.EmptyNone,\r\n        canBeRecharged: false,\r\n        maxStrength: 1,\r\n        startingCharges: 0,\r\n        color: null,\r\n    };\r\n    let empty_power = new Power(empty_def);\r\n    return empty_power;\r\n}\r\nfunction createBasicPowerOfType(powerType) {\r\n    let power_def = power_defaults[_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewPowerType[powerType]];\r\n    let new_power = new Power(power_def);\r\n    if (powerType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewPowerType.TurretCannon) {\r\n        new_power.associated_item = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].itemFactory(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemType.PowerRelatedItem, { subtype: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemSubtype.PowerItem_Gun, damage: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Config\"].turret_damage, flags: [_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].Flag.CausesExplosion] });\r\n    }\r\n    else if (powerType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewPowerType.MachineGun) {\r\n        new_power.associated_item = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].itemFactory(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemType.PowerRelatedItem, { subtype: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemSubtype.PowerItem_Gun, damage: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Config\"].machinegun_damage, flags: [] });\r\n    }\r\n    return new_power;\r\n}\r\nfunction createItemFromPower(pow) {\r\n    let power_item = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].itemFactory(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemType.PowerSystem, { power: pow, color: pow.color });\r\n    return power_item;\r\n}\r\nfunction createPowerFromItem(power_item) {\r\n    let power = power_item.power;\r\n    return power;\r\n}\r\nfunction createPowerItemOfType(powerType) {\r\n    let pow = createBasicPowerOfType(powerType);\r\n    let item = createItemFromPower(pow);\r\n    return item;\r\n}\r\nfunction uninstallPower(gm, brEvent) {\r\n    let player = gm.getPlayer();\r\n    let level = gm.getCurrentLevel();\r\n    let selected_power = brEvent.powerData.power;\r\n    let item_exists = level.items.hasAt(player.location);\r\n    if (selected_power.powerType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewPowerType.EmptyNone) {\r\n        gm.endEvent(brEvent);\r\n        return;\r\n    }\r\n    if (item_exists) {\r\n        gm.endEvent(brEvent);\r\n    }\r\n    else {\r\n        let power_item = createItemFromPower(selected_power);\r\n        level.items.setAt(player.location, power_item);\r\n        let selected_index = player.getPowers().getIndexFromPower(selected_power);\r\n        player.getPowers().listOfPowers[selected_index] = getEmptyPower();\r\n        // player.getPowers().removePower(selected_power)\r\n        // player.getPowers().addPower(getEmptyPower())\r\n        // return true\r\n        gm.endEvent(brEvent);\r\n    }\r\n}\r\nfunction installPower(gm, brEvent) {\r\n    let player = gm.getPlayer();\r\n    let level = gm.getCurrentLevel();\r\n    let selected_power = brEvent.powerData.power;\r\n    let swapwith_power = brEvent.swapPowerData.power;\r\n    let swapwith_index = player.getPowers().getIndexFromPower(swapwith_power);\r\n    // place new power in the old power slot\r\n    player.getPowers().listOfPowers[swapwith_index] = selected_power;\r\n    // take the power off the floor\r\n    level.items.removeAt(player.location);\r\n    // dump the old power if it's not an empty slot holder\r\n    if (selected_power.powerType != _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewPowerType.EmptyNone) {\r\n        let power_item = createItemFromPower(swapwith_power); // Brew.Definitions.itemFactory(Definitions.ItemType.PowerSystem, { power: swapwith_power})\r\n        level.items.setAt(player.location, power_item);\r\n    }\r\n    gm.endEvent(brEvent);\r\n}\r\nfunction swapPower(gm, brEvent) {\r\n    let player = gm.getPlayer();\r\n    let level = gm.getCurrentLevel();\r\n    let selected_power = brEvent.powerData.power;\r\n    let swapwith_power = brEvent.swapPowerData.power;\r\n    let selected_index = player.getPowers().getIndexFromPower(selected_power);\r\n    let swapwith_index = player.getPowers().getIndexFromPower(swapwith_power);\r\n    player.getPowers().listOfPowers[swapwith_index] = selected_power;\r\n    player.getPowers().listOfPowers[selected_index] = swapwith_power;\r\n    // return true\r\n    // gm.insertEvent(Events.createGenericEventOfType(gm, Brew.Enums.BrewEventType.GenericMenuOff))\r\n    gm.endEvent(brEvent);\r\n}\r\nfunction triggerPower(gm, actor, givenPower) {\r\n    let powerEvent;\r\n    if ((givenPower.powerType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewPowerType.TurretCannon) || (givenPower.powerType == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewPowerType.MachineGun)) {\r\n        let weapon_arc_range = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Tank\"].getFiringArcRange(gm, actor.location, givenPower);\r\n        powerEvent = {\r\n            eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.TargetingOn,\r\n            actor: gm.getPlayer(),\r\n            playerInitiated: true,\r\n            endsTurn: false,\r\n            powerData: {\r\n                power: givenPower\r\n            },\r\n            startTargetingData: {\r\n                from_xy: gm.getPlayer().location,\r\n                to_xy: gm.getPlayer().location,\r\n                targetingAction: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewTargetingAction.RangedAttack,\r\n                minimumArc: weapon_arc_range.minAngle,\r\n                maximumArc: weapon_arc_range.maxAngle,\r\n                midpointArc: weapon_arc_range.midpointAngle,\r\n            }\r\n        };\r\n        // } else if (givenPower.powerType == Brew.Enums.BrewPowerType.MachineGun) {\r\n        //         powerEvent = {\r\n        //             eventType: Brew.Enums.BrewEventType.TargetingOn,\r\n        //             actor: gm.getPlayer(),\r\n        //             playerInitiated: true,\r\n        //             endsTurn: false,\r\n        //             powerData: {\r\n        //                 power: givenPower\r\n        //             },\r\n        //             startTargetingData: {\r\n        //                 from_xy: gm.getPlayer().location,\r\n        //                 to_xy: gm.getPlayer().location,\r\n        //                 targetingAction: Brew.Enums.BrewTargetingAction.RangedAttack\r\n        //             }\r\n        //         }\r\n    }\r\n    else {\r\n        console.error(\"unknown power type\");\r\n    }\r\n    return powerEvent;\r\n}\r\nfunction safelyEndPhaseWalk(gm, actor) {\r\n    // if we ended phasewalk, make sure we arent stuck in some rocks\r\n    let t_at = gm.getCurrentLevel().terrain.getAt(actor.location);\r\n    if (t_at.blocks_walking) {\r\n        // todo: take some damage / attack / die by rock stuck\r\n        let player = gm.getPlayer();\r\n        let level = gm.getCurrentLevel();\r\n        let safe_xy = level.getSafeLocationNear(player.location);\r\n        let old_xy = player.location.clone();\r\n        level.monsters.setAt(safe_xy, player);\r\n        level.monsters.removeAt(old_xy);\r\n        gm.displayList([old_xy, safe_xy]);\r\n    }\r\n}\r\nfunction rocketPunch(gm, data) {\r\n    // decrement power charge on success\r\n    data.powerData.power.charge_stat.decrement(1);\r\n    let moveEvent = {\r\n        eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.Move,\r\n        actor: data.actor,\r\n        playerInitiated: data.playerInitiated,\r\n        endsTurn: data.endsTurn,\r\n        moveData: {\r\n            from_xy: data.actor.location.clone(),\r\n            to_xy: data.targetingData.path[data.targetingData.path.length - 2]\r\n        }\r\n    };\r\n    let victim = gm.getCurrentLevel().monsters.getAt(data.targetingData.to_xy);\r\n    if (!(victim)) {\r\n        console.error(\"should have been a monster at the end of this rainbow\");\r\n    }\r\n    let rpDamage = 1;\r\n    let attack_type = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.Attack;\r\n    let attackEvent = {\r\n        eventType: attack_type,\r\n        actor: data.actor,\r\n        playerInitiated: data.playerInitiated,\r\n        endsTurn: data.endsTurn,\r\n        attackData: {\r\n            from_xy: data.actor.location.clone(),\r\n            to_xy: victim.location.clone(),\r\n            target: victim,\r\n            isMelee: true,\r\n            damage: rpDamage\r\n        }\r\n    };\r\n    attackEvent = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Combat\"].possiblyConvertAttackToSmashAttack(gm, attackEvent);\r\n    let animationEvent = {\r\n        eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.RunAnimation,\r\n        actor: data.actor,\r\n        playerInitiated: data.playerInitiated,\r\n        endsTurn: data.endsTurn,\r\n        animationData: {\r\n            animationType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewAnimationType.OverPath,\r\n            code: data.actor.code,\r\n            color: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].red,\r\n            from_xy: moveEvent.moveData.from_xy,\r\n            to_xy: moveEvent.moveData.to_xy\r\n        }\r\n    };\r\n    gm.insertEvent(animationEvent);\r\n    gm.insertEvent(moveEvent);\r\n    gm.insertEvent(attackEvent);\r\n    // Brew.Animations.animateRocketPunch(gm, data)\r\n    gm.endEvent(data);\r\n}\r\nfunction damageAllInAxePath(gm, axe_path, axe_power, recall) {\r\n    // if (recall) {\r\n    //     axe_path.splice(axe_path.length-1,1)\r\n    // }\r\n    if (recall) {\r\n        // cut off the end when recalling (dont hit player)\r\n        axe_path.splice(axe_path.length - 1, 1);\r\n    }\r\n    else {\r\n        // cut off the front when throwing\r\n        axe_path.splice(0, 1);\r\n    }\r\n    let dmg_amount = axe_power.associated_item.damage;\r\n    let massDamageEvent = {\r\n        eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.MassDamage,\r\n        actor: gm.getPlayer(),\r\n        playerInitiated: true,\r\n        endsTurn: false,\r\n        attackData: {\r\n            isMelee: true,\r\n            damage: dmg_amount,\r\n            from_xy: null,\r\n            to_xy: null,\r\n            target: null,\r\n            effects: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Combat\"].filterDamageEffects(axe_power.associated_item.flags)\r\n        },\r\n        pathsData: {\r\n            from_xy: axe_path[0],\r\n            to_xy: axe_path[axe_path.length - 1],\r\n            path: axe_path\r\n        }\r\n    };\r\n    gm.insertEvent(massDamageEvent);\r\n}\r\nfunction throw_axe(gm, brEvent) {\r\n    // put the axe down where it lands        \r\n    let level = gm.getCurrentLevel();\r\n    let final_xy = brEvent.pathsData.to_xy;\r\n    brEvent.powerData.power.charge_stat.decrement(1);\r\n    // todo: really need a way to move items around\r\n    let axe_item = brEvent.powerData.power.associated_item;\r\n    level.items.removeAt(final_xy);\r\n    level.items.setAt(final_xy, axe_item);\r\n    gm.displayAt(final_xy);\r\n    // update the power to say the axe is activated and do a link\r\n    let power = brEvent.powerData.power;\r\n    power.activated = true;\r\n    damageAllInAxePath(gm, brEvent.pathsData.path, power, false);\r\n    gm.endEvent(brEvent);\r\n}\r\nfunction recall_axe(gm, brEvent) {\r\n    // todo: how to handle - or restrict - multiple axe powers\r\n    // find the axe\r\n    let power = brEvent.powerData.power;\r\n    let axe_item = power.associated_item;\r\n    let level = gm.getCurrentLevel();\r\n    let axe_xy = axe_item.location;\r\n    level.items.removeAt(axe_xy);\r\n    gm.displayAt(axe_xy);\r\n    let animationEvent = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].createGenericEventOfType(gm, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.RunAnimation, false);\r\n    animationEvent.animationData = {\r\n        animationType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewAnimationType.OverPath,\r\n        code: axe_item.code,\r\n        color: axe_item.color,\r\n        from_xy: brEvent.pathsData.from_xy,\r\n        to_xy: brEvent.pathsData.to_xy,\r\n        path: brEvent.pathsData.path\r\n    };\r\n    gm.insertEvent(animationEvent);\r\n    // deactivate\r\n    brEvent.powerData.power.activated = false;\r\n    damageAllInAxePath(gm, brEvent.pathsData.path, brEvent.powerData.power, true);\r\n    gm.endEvent(brEvent);\r\n}\r\n// export function warp_power(gm: Brew.GameMaster, brEvent: Brew.Enums.IBrewEvent) {\r\n//     let new_loc_xy = gm.getCurrentLevel().getSafeLocation()\r\n//     let warpEvent : Brew.Enums.IBrewEvent = {\r\n//         eventType: Brew.Enums.BrewEventType.Move,\r\n//         actor: brEvent.actor,\r\n//         playerInitiated: true,\r\n//         endsTurn: true,\r\n//         moveData: {\r\n//             from_xy: brEvent.actor.location.clone(),\r\n//             to_xy: new_loc_xy\r\n//         }\r\n//     }\r\n//     gm.endEvent(warpEvent)\r\n// }\r\n// export function stun_power(gm: Brew.GameMaster, brEvent: Brew.Enums.IBrewEvent) {\r\n//     let stunEvent : Brew.Enums.IBrewEvent = {\r\n//         eventType: Brew.Enums.BrewEventType.MassDamage,\r\n//         actor: brEvent.actor,\r\n//         playerInitiated: true,\r\n//         endsTurn: true,\r\n//         attackData: {\r\n//             from_xy: gm.ac\r\n//         },\r\n//         pathsData: {\r\n//         },\r\n//     }\r\n//     gm.endEvent(brEvent)\r\n// }\r\nfunction getPowerMaxDistance(for_power) {\r\n    return 4 + (for_power.strength.getCurrentLevel() * 2);\r\n}\r\nfunction canUpgradePowerStrength(given_power) {\r\n    return (given_power.strength.getCurrentLevel() < given_power.strength.getMaxLevel());\r\n}\r\nfunction canUpgradePowerCharges(given_power) {\r\n    return ((given_power.canBeRecharged) && (given_power.charge_stat.getMaxLevel() < _brew__WEBPACK_IMPORTED_MODULE_0__[\"Config\"].max_power_charges));\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/brew_game/powers.ts\n");

/***/ }),

/***/ "./src/brew_game/targeting.ts":
/*!************************************!*\
  !*** ./src/brew_game/targeting.ts ***!
  \************************************/
/*! exports provided: clearTargetLocks, hasTargetLock, clearTargetLocksBy, clearTargetLocksOn, aquireTargetLockEvent, targetingOn, targetingCancel, targetingFinish, showTargetingHighlights, clearTargetingHighlights, targetingMove, checkTargetingPath, getTargetingDataByType, getClosestTargets, getClosestTarget, isRangedAttackThreat, createTestTargetingEvent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clearTargetLocks\", function() { return clearTargetLocks; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hasTargetLock\", function() { return hasTargetLock; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clearTargetLocksBy\", function() { return clearTargetLocksBy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clearTargetLocksOn\", function() { return clearTargetLocksOn; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"aquireTargetLockEvent\", function() { return aquireTargetLockEvent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"targetingOn\", function() { return targetingOn; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"targetingCancel\", function() { return targetingCancel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"targetingFinish\", function() { return targetingFinish; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"showTargetingHighlights\", function() { return showTargetingHighlights; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clearTargetingHighlights\", function() { return clearTargetingHighlights; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"targetingMove\", function() { return targetingMove; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"checkTargetingPath\", function() { return checkTargetingPath; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getTargetingDataByType\", function() { return getTargetingDataByType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getClosestTargets\", function() { return getClosestTargets; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getClosestTarget\", function() { return getClosestTarget; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isRangedAttackThreat\", function() { return isRangedAttackThreat; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createTestTargetingEvent\", function() { return createTestTargetingEvent; });\n/* harmony import */ var _brew__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../brew */ \"./src/brew.ts\");\n\r\nvar TargetingError;\r\n(function (TargetingError) {\r\n    TargetingError[TargetingError[\"TargetNotViewable\"] = 1] = \"TargetNotViewable\";\r\n    TargetingError[TargetingError[\"TargetNotWalkable\"] = 2] = \"TargetNotWalkable\";\r\n    TargetingError[TargetingError[\"PathBlockedByTerrain\"] = 3] = \"PathBlockedByTerrain\";\r\n    TargetingError[TargetingError[\"PathBlockedByMob\"] = 4] = \"PathBlockedByMob\";\r\n    TargetingError[TargetingError[\"TargetMonsterRequired\"] = 5] = \"TargetMonsterRequired\";\r\n    TargetingError[TargetingError[\"LessThanMinimumDistance\"] = 6] = \"LessThanMinimumDistance\";\r\n    TargetingError[TargetingError[\"MoreThanMaximumDistance\"] = 7] = \"MoreThanMaximumDistance\";\r\n    TargetingError[TargetingError[\"LandingNotWalkable\"] = 8] = \"LandingNotWalkable\";\r\n    TargetingError[TargetingError[\"TargetNotWithinFiringArc\"] = 9] = \"TargetNotWithinFiringArc\";\r\n})(TargetingError || (TargetingError = {}));\r\nlet targetLockList = [];\r\nfunction clearTargetLocks() {\r\n    targetLockList = [];\r\n}\r\nfunction matchTargetLock(attacker, target, given_targetlock) {\r\n    return ((attacker.getID() == given_targetlock.from) &&\r\n        (target.getID() == given_targetlock.to));\r\n}\r\nfunction hasTargetLock(attacker, target) {\r\n    let attacker_id = attacker.getID();\r\n    let target_id = target.getID();\r\n    let found_list = targetLockList.filter((targetlock) => {\r\n        return matchTargetLock(attacker, target, targetlock);\r\n    });\r\n    return found_list.length > 0;\r\n}\r\nfunction addTargetLock(attacker, target) {\r\n    if (hasTargetLock(attacker, target)) {\r\n        // no need to ask twice\r\n        return;\r\n    }\r\n    let new_lock = {\r\n        from: attacker.getID(),\r\n        to: target.getID()\r\n    };\r\n    targetLockList.push(new_lock);\r\n}\r\nfunction clearTargetLocksBy(attacker) {\r\n    let had_locks_on = [];\r\n    targetLockList = targetLockList.filter((targetlock) => {\r\n        if (targetlock.from == attacker.getID()) {\r\n            had_locks_on.push(targetlock.to);\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    });\r\n    return had_locks_on;\r\n}\r\nfunction clearTargetLocksOn(target) {\r\n    let had_locks_by = [];\r\n    targetLockList = targetLockList.filter((targetlock) => {\r\n        if (targetlock.to == target.getID()) {\r\n            had_locks_by.push(targetlock.from);\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    });\r\n    return had_locks_by;\r\n}\r\n// export function getTargetLocksOn(target: Brew.GridThings.Monster) : Array<ITargetLock> {\r\n//     //\r\n//     return targetLockList.filter((targetlock) => {\r\n//         return targetlock.to == target.getID()\r\n//     })\r\n// }\r\nfunction aquireTargetLockEvent(gm, brEvent) {\r\n    // send in what would otherwise be an attack event\r\n    let target = brEvent.attackData.target;\r\n    let attacker = brEvent.actor;\r\n    addTargetLock(attacker, target);\r\n    // console.log(\"target locked\")\r\n    // flash when locking\r\n    gm.insertEvent({\r\n        eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.RunAnimation,\r\n        actor: brEvent.actor,\r\n        endsTurn: false,\r\n        playerInitiated: false,\r\n        animationData: {\r\n            animationType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewAnimationType.Flash,\r\n            color: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].orange,\r\n            from_xy: attacker.location.clone(),\r\n            to_xy: attacker.location.clone(),\r\n        }\r\n    });\r\n    gm.endEvent(brEvent);\r\n}\r\n//////////////////// targeting\r\nfunction targetingOn(gm, data) {\r\n    // set up targeting data depending on type\r\n    data.targetingData = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Targeting\"].getTargetingDataByType(gm, data);\r\n    // guess initial target\r\n    let good_guess = false;\r\n    let guess_mob = getClosestTarget(gm, data.actor);\r\n    if (guess_mob) {\r\n        data.targetingData.to_xy = guess_mob.location;\r\n        // check new targeting and show the results\r\n        let resp = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Targeting\"].checkTargetingPath(gm, data);\r\n        if (resp.is_valid) {\r\n            showTargetingHighlights(gm, data, resp);\r\n            good_guess = true;\r\n        }\r\n    }\r\n    // if we dont have a good guess or path is invalid then start from scratch\r\n    if (!(good_guess)) {\r\n        let tgtHighlight = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].terrainFactory(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].TerrainType.Highlight);\r\n        tgtHighlight.color = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].target_cursor;\r\n        gm.display.highlights.setAt(gm.getPlayer().location, tgtHighlight);\r\n        gm.displayAt(gm.getPlayer().location);\r\n    }\r\n    // examine is a special case\r\n    if (data.targetingData.action == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewTargetingAction.Examine) {\r\n        gm.display.updateDescriptionFooterForPoint(data.targetingData.to_xy);\r\n    }\r\n    gm.input_handler = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].InputHandler.Targeting;\r\n    gm.endEvent(data);\r\n}\r\nfunction targetingCancel(gm, data) {\r\n    console.log(\"cancelling targeting\");\r\n    clearTargetingHighlights(gm);\r\n    gm.display.drawFooter();\r\n    gm.input_handler = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].InputHandler.Main;\r\n    gm.endEvent(data);\r\n}\r\nfunction targetingFinish(gm, data) {\r\n    // make sure we didn't error out first\r\n    let resp = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Targeting\"].checkTargetingPath(gm, data);\r\n    if (!(resp.is_valid)) {\r\n        targetingCancel(gm, data);\r\n        return;\r\n    }\r\n    // console.log(\"target gotten: \", data.targetingData.action)\r\n    clearTargetingHighlights(gm);\r\n    gm.input_handler = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].InputHandler.Main;\r\n    gm.copyEventDataFromLastEvent(data);\r\n    data.targetingData.path = resp.path;\r\n    let nextEventAfterTargeting;\r\n    if (data.targetingData.action == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewTargetingAction.ThrowItem) {\r\n        nextEventAfterTargeting = {\r\n            // todo: change this to some kind of 'landing' event\r\n            eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.Land,\r\n            actor: data.actor,\r\n            playerInitiated: true,\r\n            endsTurn: true,\r\n            itemData: {\r\n                item: data.itemData.item,\r\n                invkey: data.itemData.invkey,\r\n                to_xy: data.targetingData.to_xy.clone()\r\n            }\r\n        };\r\n        let animationEvent = {\r\n            eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.RunAnimation,\r\n            actor: data.actor,\r\n            playerInitiated: true,\r\n            endsTurn: false,\r\n            animationData: {\r\n                animationType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewAnimationType.OverPath,\r\n                code: data.itemData.item.code,\r\n                color: data.itemData.item.color,\r\n                from_xy: data.actor.location.clone(),\r\n                to_xy: data.targetingData.to_xy.clone()\r\n            }\r\n        };\r\n        gm.insertEvent(animationEvent);\r\n    }\r\n    else if (data.targetingData.action == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewTargetingAction.HeaveItem) {\r\n        nextEventAfterTargeting = {\r\n            // todo: change this to some kind of 'landing' event\r\n            eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.Heave,\r\n            actor: data.actor,\r\n            playerInitiated: true,\r\n            endsTurn: true,\r\n            itemData: {\r\n                item: data.itemData.item,\r\n                // invkey: data.itemData.invkey,\r\n                to_xy: data.targetingData.to_xy.clone(),\r\n            }\r\n        };\r\n        let animationEvent = {\r\n            eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.RunAnimation,\r\n            actor: data.actor,\r\n            playerInitiated: true,\r\n            endsTurn: false,\r\n            animationData: {\r\n                animationType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewAnimationType.OverPath,\r\n                code: data.itemData.item.code,\r\n                color: data.itemData.item.color,\r\n                from_xy: data.actor.location.clone(),\r\n                to_xy: data.targetingData.to_xy.clone()\r\n            }\r\n        };\r\n        gm.insertEvent(animationEvent);\r\n    }\r\n    else if (data.targetingData.action == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewTargetingAction.ThrowHeavyAxe) {\r\n        nextEventAfterTargeting = {\r\n            eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.HeavyAxeThrow,\r\n            actor: data.actor,\r\n            playerInitiated: true,\r\n            endsTurn: true,\r\n            pathsData: {\r\n                from_xy: data.targetingData.from_xy.clone(),\r\n                to_xy: data.targetingData.to_xy.clone(),\r\n                path: data.targetingData.path\r\n            },\r\n            powerData: Object.assign({}, data.powerData)\r\n        };\r\n        let animationEvent = {\r\n            eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.RunAnimation,\r\n            actor: data.actor,\r\n            playerInitiated: true,\r\n            endsTurn: false,\r\n            animationData: {\r\n                animationType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewAnimationType.OverPath,\r\n                code: data.powerData.power.associated_item.code,\r\n                color: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].power_axe,\r\n                from_xy: data.actor.location.clone(),\r\n                to_xy: data.targetingData.to_xy.clone()\r\n            }\r\n        };\r\n        gm.insertEvent(animationEvent);\r\n    }\r\n    else if (data.targetingData.action == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewTargetingAction.Hack) {\r\n        nextEventAfterTargeting = {\r\n            eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.Hack,\r\n            actor: data.actor,\r\n            playerInitiated: true,\r\n            endsTurn: true,\r\n            powerData: data.powerData,\r\n            moveData: {\r\n                to_xy: data.targetingData.to_xy.clone(),\r\n                from_xy: data.targetingData.from_xy.clone()\r\n            }\r\n        };\r\n    }\r\n    else if (data.targetingData.action == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewTargetingAction.RocketPunch) {\r\n        nextEventAfterTargeting = {\r\n            eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.RocketPunch,\r\n            actor: data.actor,\r\n            playerInitiated: true,\r\n            endsTurn: true,\r\n            powerData: data.powerData,\r\n            moveData: {\r\n                to_xy: data.targetingData.to_xy.clone(),\r\n                from_xy: data.targetingData.from_xy.clone()\r\n            },\r\n            targetingData: Object.assign({}, data.targetingData)\r\n        };\r\n    }\r\n    else if (data.targetingData.action == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewTargetingAction.Examine) {\r\n        nextEventAfterTargeting = {\r\n            eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.Info,\r\n            actor: data.actor,\r\n            playerInitiated: true,\r\n            endsTurn: false,\r\n            moveData: {\r\n                from_xy: data.targetingData.from_xy,\r\n                to_xy: data.targetingData.to_xy\r\n            }\r\n        };\r\n    }\r\n    else if (data.targetingData.action == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewTargetingAction.DebugSummonMob) {\r\n        nextEventAfterTargeting = {\r\n            eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.DebugCreateMobAt,\r\n            actor: data.actor,\r\n            playerInitiated: true,\r\n            endsTurn: false,\r\n            moveData: {\r\n                from_xy: data.targetingData.from_xy,\r\n                to_xy: data.targetingData.to_xy\r\n            },\r\n            debugMenuData: Object.assign({}, data.debugMenuData)\r\n        };\r\n    }\r\n    else if (data.targetingData.action == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewTargetingAction.DebugMakeFeature) {\r\n        nextEventAfterTargeting = {\r\n            eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.DebugCreateFeatureAt,\r\n            actor: data.actor,\r\n            playerInitiated: true,\r\n            endsTurn: false,\r\n            moveData: {\r\n                from_xy: data.targetingData.from_xy,\r\n                to_xy: data.targetingData.to_xy\r\n            },\r\n            debugMenuData: Object.assign({}, data.debugMenuData)\r\n        };\r\n    }\r\n    else if (data.targetingData.action == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewTargetingAction.DebugMakeTerrain) {\r\n        nextEventAfterTargeting = {\r\n            eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.DebugCreateTerrainAt,\r\n            actor: data.actor,\r\n            playerInitiated: true,\r\n            endsTurn: false,\r\n            moveData: {\r\n                from_xy: data.targetingData.from_xy,\r\n                to_xy: data.targetingData.to_xy\r\n            },\r\n            debugMenuData: Object.assign({}, data.debugMenuData)\r\n        };\r\n    }\r\n    else if (data.targetingData.action == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewTargetingAction.RangedAttack) {\r\n        let attack_target = gm.getCurrentLevel().monsters.getAt(data.targetingData.to_xy);\r\n        nextEventAfterTargeting = {\r\n            eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.Attack,\r\n            actor: data.actor,\r\n            playerInitiated: true,\r\n            endsTurn: true,\r\n            powerData: data.powerData,\r\n            attackData: {\r\n                from_xy: data.targetingData.from_xy,\r\n                to_xy: data.targetingData.to_xy,\r\n                target: attack_target,\r\n                isMelee: false,\r\n                damage: data.powerData.power.associated_item.damage,\r\n                effects: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Combat\"].filterDamageEffects(data.powerData.power.associated_item.flags)\r\n            }\r\n        };\r\n    }\r\n    else {\r\n        throw new Error(`unknown or unhandled type of targeting action ${data.targetingData.action}`);\r\n    }\r\n    gm.insertEvent_Next(nextEventAfterTargeting);\r\n    gm.endEvent(data);\r\n}\r\nfunction showTargetingHighlights(gm, data, targetingResponse) {\r\n    // clear the old highlights\r\n    clearTargetingHighlights(gm);\r\n    // setup our highlight colors\r\n    let tHighlight = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].terrainFactory(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].TerrainType.Highlight);\r\n    tHighlight.color = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].target_path;\r\n    let tCursor = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].terrainFactory(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].TerrainType.Highlight);\r\n    // set highlights across the path and show them\r\n    targetingResponse.path.forEach((xy, index, array) => {\r\n        gm.display.highlights.setAt(xy, tHighlight);\r\n    });\r\n    // change cursor color depending on the outcome\r\n    if (targetingResponse.is_valid) {\r\n        tCursor.color = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].target_cursor;\r\n    }\r\n    else {\r\n        tCursor.color = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Color\"].target_error;\r\n    }\r\n    // set the cursor by itself\r\n    gm.display.highlights.removeAt(data.targetingData.to_xy);\r\n    gm.display.highlights.setAt(data.targetingData.to_xy, tCursor);\r\n    // tell the display to redraw all these new highlighted squares\r\n    gm.displayList(targetingResponse.path.concat(data.targetingData.to_xy));\r\n    // gm.displayAt(data.targetingData.to_xy)\r\n}\r\nfunction clearTargetingHighlights(gm) {\r\n    // actually just clear all highlights\r\n    let copyList = gm.display.highlights.getAllCoordinates();\r\n    copyList.forEach((value, index, array) => {\r\n        gm.display.highlights.removeAt(value);\r\n    });\r\n    gm.displayList(copyList);\r\n}\r\nfunction targetingMove(gm, data) {\r\n    // modify event, so we can grab last event next time.. keep updating target location as we move\r\n    // move target\r\n    let offset_xy = data.offsetData.offset_xy;\r\n    let current_target_xy = data.targetingData.to_xy;\r\n    let new_target_xy = current_target_xy.add(offset_xy);\r\n    // twp: copy event data from last event, so we keep track of our item/target thing/etc\r\n    // let lastEventData = gm.getLastEvent().itemData\r\n    // data.itemData = {...lastEventData}\r\n    gm.copyEventDataFromLastEvent(data);\r\n    // set new target\r\n    data.targetingData.to_xy = new_target_xy;\r\n    // check new targeting and show the results\r\n    let resp = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Targeting\"].checkTargetingPath(gm, data);\r\n    showTargetingHighlights(gm, data, resp);\r\n    // examine is a special case - apply this code as we go\r\n    if (data.targetingData.action == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewTargetingAction.Examine) {\r\n        gm.display.updateDescriptionFooterForPoint(data.targetingData.to_xy);\r\n    }\r\n    gm.endEvent(data);\r\n}\r\nfunction checkTargetingPath(gm, data) {\r\n    let level = gm.getCurrentLevel();\r\n    let target_xy = data.targetingData.to_xy;\r\n    let in_fov = data.actor.fov.hasAt(target_xy); //data.actor.inFOV(t)\r\n    // initial response\r\n    let response = {\r\n        is_valid: false,\r\n        path: []\r\n    };\r\n    // check target first, easier than checking the entire path\r\n    if ((!in_fov) && data.targetingData.destinationMustBeVisible) {\r\n        response.error_reason = TargetingError.TargetNotViewable;\r\n        return response;\r\n    }\r\n    let terrain_at = level.terrain.getAt(target_xy);\r\n    if (terrain_at.blocks_walking && data.targetingData.destinationMustBeWalkable) {\r\n        response.error_reason = TargetingError.TargetNotWalkable;\r\n        return response;\r\n    }\r\n    if (data.targetingData.method == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewTargetingMethod.PointOnly) {\r\n        response.path = [target_xy];\r\n        response.is_valid = true;\r\n    }\r\n    else if (data.targetingData.method == _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewTargetingMethod.StraightLine) {\r\n        // draw new path\r\n        let path_lst = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].getLineBetweenPoints(data.targetingData.from_xy, data.targetingData.to_xy);\r\n        // check for minimum distance\r\n        if (path_lst.length < data.targetingData.minimumDistance) {\r\n            response.is_valid = false;\r\n            response.error_reason = TargetingError.LessThanMinimumDistance;\r\n            return response;\r\n        }\r\n        // check for max distance\r\n        if (data.targetingData.maximumDistance && (path_lst.length > data.targetingData.maximumDistance)) {\r\n            response.is_valid = false;\r\n            response.error_reason = TargetingError.MoreThanMaximumDistance;\r\n            return response;\r\n        }\r\n        // check for within arc\r\n        if (data.targetingData.minimumArc) {\r\n            let target_offset_polar = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].xyToPolar(target_xy, data.targetingData.from_xy);\r\n            let target_angle = target_offset_polar.angle_theta;\r\n            if ((Math.abs(data.targetingData.midpointArc) == Math.PI) && (target_offset_polar.angle_theta < 0)) {\r\n                target_angle = Math.PI + (Math.PI - Math.abs(target_angle));\r\n            }\r\n            let in_arc1 = (target_angle >= data.targetingData.minimumArc) && (target_angle <= data.targetingData.midpointArc);\r\n            let in_arc2 = (target_angle >= data.targetingData.midpointArc) && (target_angle <= data.targetingData.maximumArc);\r\n            if (!(in_arc1 || in_arc2)) {\r\n                response.is_valid = false;\r\n                response.error_reason = TargetingError.TargetNotWithinFiringArc;\r\n                return response;\r\n            }\r\n        }\r\n        // assume path is true unless we run into something\r\n        response.is_valid = true;\r\n        let real_path_lst = [];\r\n        for (let i = 0; i < path_lst.length; i++) {\r\n            let xy = path_lst[i];\r\n            let t = level.terrain.getAt(xy);\r\n            in_fov = data.actor.fov.hasAt(xy); //data.actor.inFOV(t)\r\n            if (data.targetingData.destinationMustBeVisible && (!(in_fov))) {\r\n                response.is_valid = false;\r\n                response.error_reason = TargetingError.TargetNotViewable;\r\n                break;\r\n            }\r\n            if (data.targetingData.pathBlockedByNonWalkable && t.blocks_walking) {\r\n                response.is_valid = false;\r\n                response.error_reason = TargetingError.PathBlockedByTerrain;\r\n                break;\r\n            }\r\n            if (data.targetingData.pathBlockedByNonFlyable && t.blocks_flying) {\r\n                response.is_valid = false;\r\n                response.error_reason = TargetingError.PathBlockedByTerrain;\r\n                break;\r\n            }\r\n            let m = level.monsters.getAt(xy);\r\n            let last_element = i == (path_lst.length - 1);\r\n            if (!(last_element)) {\r\n                // not the last coord, but mob is in the way\r\n                if (data.targetingData.pathBlockedByMobs && (m) && (!(i == 0))) {\r\n                    real_path_lst.push(xy);\r\n                    response.is_valid = false;\r\n                    response.error_reason = TargetingError.PathBlockedByMob;\r\n                    response.actual_xy = xy.clone();\r\n                    break;\r\n                }\r\n            }\r\n            else {\r\n                // is the last element, check if we need to have a mob target\r\n                // todo: maybe some kind of good / bad indicator for the path\r\n            }\r\n            real_path_lst.push(xy);\r\n        } // end path for loop\r\n        response.path = real_path_lst;\r\n    } // end if\r\n    // see if we need a target at the end of everything\r\n    if (response.is_valid && data.targetingData.destinationMustHaveMob) {\r\n        let check_m = level.monsters.getAt(target_xy);\r\n        if (!(check_m)) {\r\n            response.is_valid = false;\r\n            response.error_reason = TargetingError.TargetMonsterRequired;\r\n        }\r\n        else if (!(data.actor.hasKnowledgeOf(check_m))) {\r\n            response.is_valid = false;\r\n            response.error_reason = TargetingError.TargetMonsterRequired;\r\n        }\r\n    }\r\n    // special check for 'actual' landing spot\r\n    if (response.actual_xy) {\r\n        let terrain_at = level.terrain.getAt(response.actual_xy);\r\n        if (data.targetingData.destinationMustBeWalkable && terrain_at.blocks_walking) {\r\n            response.is_valid = false;\r\n            response.error_reason = TargetingError.LandingNotWalkable;\r\n        }\r\n    }\r\n    return response;\r\n}\r\nfunction getTargetingDataByType(gm, data) {\r\n    let tgtAction = data.startTargetingData.targetingAction;\r\n    let result;\r\n    let power;\r\n    if ([_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewTargetingAction.RangedAttack].indexOf(tgtAction) > -1) {\r\n        // let firing_range = Brew.Tank.getFiringArcRange(gm, data.actor.location, )\r\n        let mob_target_required = (data.powerData.power.powerType != _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewPowerType.TurretCannon);\r\n        result = {\r\n            action: data.startTargetingData.targetingAction,\r\n            origin_xy: gm.getPlayer().location.clone(),\r\n            from_xy: gm.getPlayer().location.clone(),\r\n            to_xy: gm.getPlayer().location.clone(),\r\n            method: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewTargetingMethod.StraightLine,\r\n            destinationMustBeVisible: true,\r\n            destinationMustBeWalkable: false,\r\n            destinationMustHaveMob: mob_target_required,\r\n            pathBlockedByNonFlyable: true,\r\n            pathBlockedByNonWalkable: false,\r\n            pathBlockedByMobs: true,\r\n            minimumDistance: 0,\r\n            minimumArc: data.startTargetingData.minimumArc,\r\n            maximumArc: data.startTargetingData.maximumArc,\r\n            midpointArc: data.startTargetingData.midpointArc,\r\n        };\r\n    }\r\n    else if ([_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewTargetingAction.Examine, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewTargetingAction.DebugSummonMob, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewTargetingAction.DebugMakeFeature, _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewTargetingAction.DebugMakeTerrain].indexOf(tgtAction) > -1) {\r\n        result = {\r\n            action: data.startTargetingData.targetingAction,\r\n            origin_xy: gm.getPlayer().location.clone(),\r\n            from_xy: gm.getPlayer().location.clone(),\r\n            to_xy: gm.getPlayer().location.clone(),\r\n            method: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewTargetingMethod.PointOnly,\r\n            destinationMustBeVisible: false,\r\n            destinationMustBeWalkable: false,\r\n            destinationMustHaveMob: false,\r\n            pathBlockedByNonFlyable: false,\r\n            pathBlockedByNonWalkable: false,\r\n            pathBlockedByMobs: false,\r\n            minimumDistance: 0,\r\n        };\r\n    }\r\n    else {\r\n        // default case\r\n        result = {\r\n            action: data.startTargetingData.targetingAction,\r\n            origin_xy: gm.getPlayer().location.clone(),\r\n            from_xy: gm.getPlayer().location.clone(),\r\n            to_xy: gm.getPlayer().location.clone(),\r\n            method: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewTargetingMethod.StraightLine,\r\n            destinationMustBeVisible: true,\r\n            destinationMustBeWalkable: true,\r\n            destinationMustHaveMob: false,\r\n            pathBlockedByNonFlyable: true,\r\n            pathBlockedByNonWalkable: false,\r\n            pathBlockedByMobs: true,\r\n            minimumDistance: 0,\r\n        };\r\n    }\r\n    return result;\r\n}\r\nfunction getClosestTargets(gm, actor) {\r\n    // return closest target within attack range\r\n    let level = gm.getCurrentLevel();\r\n    let distMap = {};\r\n    for (let m of level.monsters.getAllThings()) {\r\n        let dist2d = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].dist2d(actor.location, m.location);\r\n        distMap[m.getID()] = dist2d;\r\n    }\r\n    let monsters = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Intel\"].getMonstersKnownBy(gm, actor).filter((m, index, array) => {\r\n        // let dist2d = Math.floor(Utils.dist2d(actor.location, m.location))\r\n        return (_brew__WEBPACK_IMPORTED_MODULE_0__[\"Intel\"].isEnemy(actor, m)); //&& \r\n        // (dist2d <= actor.attack_range)\r\n    }).sort((aMob, bMob) => {\r\n        return distMap[aMob.getID()] - distMap[bMob.getID()];\r\n    });\r\n    return monsters;\r\n}\r\nfunction getClosestTarget(gm, actor) {\r\n    let targets = getClosestTargets(gm, actor);\r\n    if (targets.length == 0) {\r\n        return null;\r\n    }\r\n    else {\r\n        return targets[0];\r\n    }\r\n}\r\nfunction isRangedAttackThreat(gm, potential_attacker, target) {\r\n    // friends should not be threats\r\n    if (!(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Intel\"].isEnemy(target, potential_attacker))) {\r\n        return false;\r\n    }\r\n    // if they have a lock then they've already been through all the algorithms\r\n    if (hasTargetLock(potential_attacker, target)) {\r\n        return true;\r\n    }\r\n    // melee-only bad guys shouldnt ever be ranged threats\r\n    if (potential_attacker.attack_range == 1) {\r\n        return false;\r\n    }\r\n    // if they need a lock but don't have one then obviously they fail this test\r\n    if (potential_attacker.hasFlag(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].Flag.NeedsTargetLock)) {\r\n        return false;\r\n    }\r\n    // otherwise check if they have a clear shot\r\n    let testTargetEvent = createTestTargetingEvent(potential_attacker, target, 0, 2);\r\n    let targeting_check = checkTargetingPath(gm, testTargetEvent);\r\n    return targeting_check.is_valid;\r\n}\r\nfunction createTestTargetingEvent(potential_attacker, target, damage, min_distance) {\r\n    let testTargetEvent;\r\n    testTargetEvent = {\r\n        eventType: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewEventType.Attack,\r\n        actor: potential_attacker,\r\n        playerInitiated: false,\r\n        endsTurn: true,\r\n        attackData: {\r\n            from_xy: potential_attacker.location.clone(),\r\n            to_xy: target.location.clone(),\r\n            target: target,\r\n            isMelee: false,\r\n            damage: damage\r\n        }\r\n    };\r\n    testTargetEvent.targetingData = {\r\n        action: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewTargetingAction.RangedAttack,\r\n        method: _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewTargetingMethod.StraightLine,\r\n        destinationMustBeVisible: true,\r\n        destinationMustHaveMob: true,\r\n        destinationMustBeWalkable: false,\r\n        origin_xy: testTargetEvent.attackData.from_xy,\r\n        from_xy: testTargetEvent.attackData.from_xy,\r\n        to_xy: testTargetEvent.attackData.to_xy,\r\n        minimumDistance: min_distance,\r\n        pathBlockedByMobs: true,\r\n        pathBlockedByNonWalkable: false,\r\n        pathBlockedByNonFlyable: true,\r\n    };\r\n    return testTargetEvent;\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/brew_game/targeting.ts\n");

/***/ }),

/***/ "./src/grid_things/above.ts":
/*!**********************************!*\
  !*** ./src/grid_things/above.ts ***!
  \**********************************/
/*! exports provided: Above */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Above\", function() { return Above; });\n/* harmony import */ var _brew__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../brew */ \"./src/brew.ts\");\n/* harmony import */ var _grid_things_thing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grid_things/thing */ \"./src/grid_things/thing.ts\");\n\r\n\r\nclass Above extends _grid_things_thing__WEBPACK_IMPORTED_MODULE_1__[\"Thing\"] {\r\n    constructor(definition) {\r\n        super(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewObjectType.Above, definition);\r\n    }\r\n    getName() {\r\n        return _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].AboveType[this.definition];\r\n    }\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZ3JpZF90aGluZ3MvYWJvdmUudHM/NDE0YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQStCO0FBQ2E7QUFFdEMsV0FBYSxTQUFRLHdEQUFLO0lBRTVCLFlBQWEsVUFBc0M7UUFDL0MsS0FBSyxDQUFDLDJDQUFVLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUM7SUFDdEQsQ0FBQztJQUVNLE9BQU87UUFDVixNQUFNLENBQUMsaURBQWdCLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDdEQsQ0FBQztDQUNKIiwiZmlsZSI6Ii4vc3JjL2dyaWRfdGhpbmdzL2Fib3ZlLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgQnJldyBmcm9tIFwiLi4vYnJld1wiXHJcbmltcG9ydCB7IFRoaW5nIH0gZnJvbSAnLi4vZ3JpZF90aGluZ3MvdGhpbmcnXHJcblxyXG5leHBvcnQgY2xhc3MgQWJvdmUgZXh0ZW5kcyBUaGluZyB7XHJcblxyXG4gICAgY29uc3RydWN0b3IgKGRlZmluaXRpb246IEJyZXcuRGVmaW5pdGlvbnMuQWJvdmVUeXBlKSB7XHJcbiAgICAgICAgc3VwZXIoQnJldy5FbnVtcy5CcmV3T2JqZWN0VHlwZS5BYm92ZSwgZGVmaW5pdGlvbilcclxuICAgIH1cclxuICAgIFxyXG4gICAgcHVibGljIGdldE5hbWUoKSA6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIEJyZXcuRGVmaW5pdGlvbnMuQWJvdmVUeXBlW3RoaXMuZGVmaW5pdGlvbl1cclxuICAgIH1cclxufVxyXG5cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/grid_things/above.ts\n");

/***/ }),

/***/ "./src/grid_things/definitions.ts":
/*!****************************************!*\
  !*** ./src/grid_things/definitions.ts ***!
  \****************************************/
/*! exports provided: TerrainType, terrainFactory, AboveType, aboveFactory, FeatureType, featureFactory, ItemType, ItemSubtype, itemFactory, MonsterType, monsterFactory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TerrainType\", function() { return TerrainType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"terrainFactory\", function() { return terrainFactory; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AboveType\", function() { return AboveType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"aboveFactory\", function() { return aboveFactory; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FeatureType\", function() { return FeatureType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"featureFactory\", function() { return featureFactory; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ItemType\", function() { return ItemType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ItemSubtype\", function() { return ItemSubtype; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"itemFactory\", function() { return itemFactory; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MonsterType\", function() { return MonsterType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"monsterFactory\", function() { return monsterFactory; });\n/* harmony import */ var rot_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rot-js */ \"./node_modules/rot-js/lib/rot.js\");\n/* harmony import */ var rot_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(rot_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _brew__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../brew */ \"./src/brew.ts\");\n/* harmony import */ var _above__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./above */ \"./src/grid_things/above.ts\");\n/* harmony import */ var _features__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./features */ \"./src/grid_things/features.ts\");\n/* harmony import */ var _item__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./item */ \"./src/grid_things/item.ts\");\n/* harmony import */ var _terrain__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./terrain */ \"./src/grid_things/terrain.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\nvar TerrainType;\r\n(function (TerrainType) {\r\n    TerrainType[TerrainType[\"Rock\"] = 0] = \"Rock\";\r\n    TerrainType[TerrainType[\"Broken_Wall\"] = 1] = \"Broken_Wall\";\r\n    TerrainType[TerrainType[\"Sand\"] = 2] = \"Sand\";\r\n    TerrainType[TerrainType[\"Grass\"] = 3] = \"Grass\";\r\n    TerrainType[TerrainType[\"Rubble\"] = 4] = \"Rubble\";\r\n    TerrainType[TerrainType[\"Chasm\"] = 5] = \"Chasm\";\r\n    TerrainType[TerrainType[\"Highlight\"] = 6] = \"Highlight\";\r\n    TerrainType[TerrainType[\"LevelCheckPoint\"] = 7] = \"LevelCheckPoint\";\r\n    TerrainType[TerrainType[\"UpStairs\"] = 8] = \"UpStairs\";\r\n    TerrainType[TerrainType[\"Door\"] = 9] = \"Door\";\r\n    TerrainType[TerrainType[\"DoorOpen\"] = 10] = \"DoorOpen\";\r\n    TerrainType[TerrainType[\"DoorBroken\"] = 11] = \"DoorBroken\";\r\n    TerrainType[TerrainType[\"WarpBeacon\"] = 12] = \"WarpBeacon\";\r\n})(TerrainType || (TerrainType = {}));\r\nlet terrain_defaults = {\r\n    code: \" \",\r\n    color: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].normal,\r\n    bg_color: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].dark_gray,\r\n    blocks_walking: false,\r\n    blocks_vision: false,\r\n    blocks_flying: false,\r\n    is_solid: false,\r\n    alwaysOnTop: false,\r\n};\r\nlet terrain_definitions = {\r\n    \"Rock\": {\r\n        code: \"#\",\r\n        color: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].normal,\r\n        bg_color: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].dark_gray,\r\n        // randomize_bgcolor: [0, 0, 10],\r\n        blocks_vision: true,\r\n        blocks_walking: true,\r\n        blocks_flying: true\r\n    },\r\n    \"Broken_Wall\": {\r\n        code: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Symbols\"].half_block_lower,\r\n        color: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].light_slate_gray,\r\n        bg_color: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].dark_gray,\r\n        // randomize_bgcolor: [0, 0, 10],\r\n        blocks_vision: false,\r\n        blocks_walking: true,\r\n        blocks_flying: true\r\n    },\r\n    \"Sand\": {\r\n        code: \".\",\r\n        color: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].primary_shade_2,\r\n        bg_color: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].dark_gray,\r\n        // randomize_bgcolor: [0, 0, 10],\r\n        blocks_vision: false,\r\n        blocks_walking: false,\r\n        blocks_flying: false\r\n    },\r\n    \"Grass\": {\r\n        code: '\"',\r\n        color: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].secondary_green_shade_2,\r\n        bg_color: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].dark_gray,\r\n        // randomize_bgcolor: [0, 0, 10],\r\n        blocks_vision: false,\r\n        blocks_walking: false,\r\n        blocks_flying: false\r\n    },\r\n    \"Rubble\": {\r\n        code: \",\",\r\n        color: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].primary_shade_0,\r\n        bg_color: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].dark_gray,\r\n        // randomize_bgcolor: [0, 0, 10],\r\n        blocks_vision: false,\r\n        blocks_walking: false,\r\n        blocks_flying: false\r\n    },\r\n    \"Chasm\": {\r\n        code: \":\",\r\n        color: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].light_slate_gray,\r\n        bg_color: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].midnight_blue,\r\n        blocks_vision: false,\r\n        blocks_walking: true,\r\n        blocks_flying: false\r\n    },\r\n    \"Highlight\": {\r\n        code: \" \"\r\n    },\r\n    \"LevelCheckPoint\": {\r\n        code: \"X\",\r\n        color: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].red,\r\n        blocks_vision: false,\r\n        blocks_walking: false,\r\n        blocks_flying: false\r\n    },\r\n    \"UpStairs\": {\r\n        code: \"<\",\r\n        blocks_vision: false,\r\n        blocks_walking: false,\r\n        blocks_flying: false\r\n    },\r\n    \"Door\": {\r\n        code: \"+\",\r\n        color: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].yellow,\r\n        blocks_vision: true,\r\n        blocks_walking: false,\r\n        blocks_flying: false,\r\n        alwaysOnTop: true,\r\n        is_solid: true,\r\n    },\r\n    \"DoorOpen\": {\r\n        code: \"-\",\r\n        blocks_vision: false,\r\n        blocks_walking: false,\r\n        blocks_flying: false,\r\n        alwaysOnTop: true,\r\n    },\r\n    \"DoorBroken\": {\r\n        code: \"/\",\r\n        blocks_vision: false,\r\n        blocks_walking: false,\r\n        blocks_flying: false,\r\n        alwaysOnTop: true,\r\n    },\r\n    \"WarpBeacon\": {\r\n        code: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Symbols\"].quad_diamond,\r\n        blocks_vision: false,\r\n        blocks_walking: false,\r\n        blocks_flying: false,\r\n        alwaysOnTop: true,\r\n    }\r\n};\r\nfunction terrainFactory(terrain_type, options = {}) {\r\n    let t = new _terrain__WEBPACK_IMPORTED_MODULE_5__[\"Terrain\"](terrain_type);\r\n    // build up definition with 3 layers: default, given def, options\r\n    // 1. default\r\n    let def = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Utils\"].clone(terrain_defaults);\r\n    // 2. given definition\r\n    let type_name = TerrainType[terrain_type];\r\n    let type_def = terrain_definitions[type_name];\r\n    for (let prop in type_def) {\r\n        // console.log(\"typedef\", prop, type_def[prop])\r\n        def[prop] = type_def[prop];\r\n    }\r\n    // 3. options\r\n    for (let prop in options) {\r\n        // console.log(\"options\", prop, options[prop])\r\n        def[prop] = options[prop];\r\n    }\r\n    // 4. set all properties\r\n    for (let prop in def) {\r\n        if (prop.startsWith(\"randomize_\")) {\r\n            continue;\r\n        }\r\n        t[prop] = def[prop];\r\n    }\r\n    //terrain dont have flags yet \r\n    //t.flags = [].concat(def.flags).concat(options.flags)\r\n    // 5. randomize\r\n    let random_rgb;\r\n    if (def.randomize_color) {\r\n        random_rgb = def.randomize_color.map((c, index) => {\r\n            return def.color[index] + rot_js__WEBPACK_IMPORTED_MODULE_0__[\"RNG\"].getNormal(0, c);\r\n        });\r\n        t.color = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Utils\"].safe_color(random_rgb);\r\n    }\r\n    if (def.randomize_bgcolor) {\r\n        random_rgb = def.randomize_bgcolor.map((c, index) => {\r\n            return def.bg_color[index] + rot_js__WEBPACK_IMPORTED_MODULE_0__[\"RNG\"].getNormal(0, c);\r\n        });\r\n        t.bg_color = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Utils\"].safe_color(random_rgb);\r\n    }\r\n    return t;\r\n}\r\nvar AboveType;\r\n(function (AboveType) {\r\n    AboveType[AboveType[\"Smoke\"] = 1] = \"Smoke\";\r\n    AboveType[AboveType[\"Projectile\"] = 2] = \"Projectile\";\r\n    AboveType[AboveType[\"Flash\"] = 3] = \"Flash\";\r\n})(AboveType || (AboveType = {}));\r\nlet above_defaults = {\r\n    code: \"?\",\r\n    color: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].black\r\n};\r\nlet above_definitions = {\r\n    \"Smoke\": {\r\n        code: \"^\",\r\n        color: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].red\r\n    },\r\n    \"Projectile\": {\r\n        code: \"*\",\r\n        color: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].black\r\n    },\r\n    \"Flash\": {\r\n        code: \"\\u2588\",\r\n        color: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].blue\r\n    },\r\n};\r\nfunction aboveFactory(above_type, options = {}) {\r\n    let a = new _above__WEBPACK_IMPORTED_MODULE_2__[\"Above\"](above_type);\r\n    // build up definition with 3 layers: default, given def, options\r\n    // 1. default\r\n    let def = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Utils\"].clone(above_defaults);\r\n    // 2. given definition\r\n    let type_name = AboveType[above_type];\r\n    let type_def = above_definitions[type_name];\r\n    for (let prop in type_def) {\r\n        // console.log(\"typedef\", prop, type_def[prop])\r\n        def[prop] = type_def[prop];\r\n    }\r\n    // 3. options\r\n    for (let prop in options) {\r\n        // console.log(\"options\", prop, options[prop])\r\n        def[prop] = options[prop];\r\n    }\r\n    // 4. set all properties\r\n    for (let prop in def) {\r\n        a[prop] = def[prop];\r\n    }\r\n    return a;\r\n}\r\nvar FeatureType;\r\n(function (FeatureType) {\r\n    FeatureType[FeatureType[\"RepairGoo\"] = 0] = \"RepairGoo\";\r\n    FeatureType[FeatureType[\"CorrosiveAcid\"] = 1] = \"CorrosiveAcid\";\r\n    FeatureType[FeatureType[\"ProtectiveGoo\"] = 2] = \"ProtectiveGoo\";\r\n    // Rocks,\r\n    FeatureType[FeatureType[\"Scrap\"] = 3] = \"Scrap\";\r\n    FeatureType[FeatureType[\"Fire\"] = 4] = \"Fire\";\r\n    FeatureType[FeatureType[\"TankPart\"] = 5] = \"TankPart\";\r\n    // TankTread,\r\n    // TankTurret,\r\n    // TankHelm,\r\n    // Radiation,\r\n})(FeatureType || (FeatureType = {}));\r\nlet feature_defaults = {\r\n    code: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Symbols\"].fourdots,\r\n    color: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].black,\r\n    randomize_code: [],\r\n    flags: [],\r\n};\r\nlet feature_definitions = {\r\n    \"Fire\": {\r\n        code: '^',\r\n        color: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].orange,\r\n    },\r\n    \"Scrap\": {\r\n        code: ',',\r\n        randomize_code: [\"\\u2574\", \"\\u2575\", \"\\u2576\", \"\\u2577\"],\r\n        color: null\r\n    },\r\n    \"TankPart\": {\r\n        code: \"x\",\r\n        color: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].hero_blue,\r\n    },\r\n};\r\nfunction featureFactory(feature_type, options = {}) {\r\n    let f = new _features__WEBPACK_IMPORTED_MODULE_3__[\"Feature\"](feature_type);\r\n    // build up definition with 3 layers: default, given def, options\r\n    // 1. default\r\n    let def = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Utils\"].clone(feature_defaults);\r\n    // 2. given definition\r\n    let type_name = FeatureType[feature_type];\r\n    let type_def = feature_definitions[type_name];\r\n    for (let prop in type_def) {\r\n        // console.log(\"typedef\", prop, type_def[prop])\r\n        def[prop] = type_def[prop];\r\n    }\r\n    // 3. options\r\n    for (let prop in options) {\r\n        // console.log(\"options\", prop, options[prop])\r\n        def[prop] = options[prop];\r\n    }\r\n    // 4. set all properties\r\n    for (let prop in def) {\r\n        if (prop.startsWith(\"randomize_\")) {\r\n            continue;\r\n        }\r\n        f[prop] = def[prop];\r\n    }\r\n    f.flags = [].concat(def.flags).concat(options.flags);\r\n    // 5. randomize\r\n    if (def.randomize_code.length > 0) {\r\n        let c = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Utils\"].randomOf(def.randomize_code);\r\n        f.code = c;\r\n    }\r\n    return f;\r\n}\r\nvar ItemType;\r\n(function (ItemType) {\r\n    ItemType[ItemType[\"Grenade\"] = 0] = \"Grenade\";\r\n    ItemType[ItemType[\"Nanotech\"] = 1] = \"Nanotech\";\r\n    // SuitModule,\r\n    // WarpCrystal,\r\n    // KeyCard,\r\n    ItemType[ItemType[\"PowerRelatedItem\"] = 2] = \"PowerRelatedItem\";\r\n    ItemType[ItemType[\"PowerSystem\"] = 3] = \"PowerSystem\";\r\n    // Wreckage,\r\n    // MacGuffin,\r\n    ItemType[ItemType[\"Civilian\"] = 4] = \"Civilian\";\r\n    ItemType[ItemType[\"Supplies\"] = 5] = \"Supplies\";\r\n    ItemType[ItemType[\"Bullets\"] = 6] = \"Bullets\";\r\n    ItemType[ItemType[\"Shells\"] = 7] = \"Shells\";\r\n})(ItemType || (ItemType = {}));\r\nvar ItemSubtype;\r\n(function (ItemSubtype) {\r\n    ItemSubtype[ItemSubtype[\"NonSpecific\"] = 0] = \"NonSpecific\";\r\n    ItemSubtype[ItemSubtype[\"PowerItem_Axe\"] = 1] = \"PowerItem_Axe\";\r\n    ItemSubtype[ItemSubtype[\"PowerItem_Gun\"] = 2] = \"PowerItem_Gun\";\r\n    ItemSubtype[ItemSubtype[\"G_Explosive\"] = 3] = \"G_Explosive\";\r\n    ItemSubtype[ItemSubtype[\"G_Concusive\"] = 4] = \"G_Concusive\";\r\n    ItemSubtype[ItemSubtype[\"G_Stun\"] = 5] = \"G_Stun\";\r\n    ItemSubtype[ItemSubtype[\"N_Acid\"] = 6] = \"N_Acid\";\r\n    // N_Barrier,\r\n    // N_Might,\r\n    ItemSubtype[ItemSubtype[\"N_Health\"] = 7] = \"N_Health\";\r\n    ItemSubtype[ItemSubtype[\"N_Armor\"] = 8] = \"N_Armor\";\r\n    // N_Sticky,\r\n})(ItemSubtype || (ItemSubtype = {}));\r\nlet item_defaults = {\r\n    code: \"?\",\r\n    color: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].black,\r\n    subtype: ItemSubtype.NonSpecific,\r\n    canPickup: true,\r\n    canUse: true,\r\n    canHeave: false,\r\n    damage: 0,\r\n    flags: [],\r\n};\r\nlet item_definitions = {\r\n    \"PowerRelatedItem\": {\r\n        code: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Symbols\"].arrow_up,\r\n        color: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].power_axe,\r\n        canPickup: false,\r\n        canUse: false,\r\n    },\r\n    \"PowerSystem\": {\r\n        code: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Symbols\"].power_sys,\r\n        color: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].orange,\r\n        canPickup: false,\r\n        canUse: false,\r\n    },\r\n    \"Grenade\": {\r\n        code: '!',\r\n        color: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].goldenrod,\r\n    },\r\n    \"NanotechCore\": {\r\n        code: '=',\r\n        color: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].goldenrod,\r\n    },\r\n    // \"SuitModule\": {\r\n    //     code: '?',\r\n    //     color: Brew.Color.goldenrod,\r\n    // },\r\n    // \"WarpCrystal\": {\r\n    //     code: Brew.Symbols.diamond_full,\r\n    //     color: Brew.Color.goldenrod,\r\n    //     canUse: false,\r\n    // },\r\n    // \"KeyCard\": {\r\n    //     code: '-',\r\n    //     color: Brew.Color.goldenrod,\r\n    //     canUse: false,\r\n    // },\r\n    // \"Wreckage\": {\r\n    //     code: '%',\r\n    //     color: Brew.Color.white,\r\n    //     canUse: false,\r\n    //     canPickup: false,\r\n    //     canHeave: true,\r\n    // },\r\n    // \"MacGuffin\": {\r\n    //     code: '(',\r\n    //     color: Brew.Color.goldenrod,\r\n    //     canUse: false,\r\n    //     canPickup: true,\r\n    //     canHeave: false,\r\n    // }\r\n    \"Civilian\": {\r\n        code: '@',\r\n        color: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].goldenrod,\r\n        canUse: false,\r\n        canPickup: true,\r\n        canHeave: false,\r\n    },\r\n    \"Supplies\": {\r\n        code: '%',\r\n        color: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].goldenrod,\r\n        canUse: false,\r\n        canPickup: true,\r\n        canHeave: false,\r\n    },\r\n    \"Bullets\": {\r\n        code: '=',\r\n        color: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].goldenrod,\r\n        canUse: false,\r\n        canPickup: true,\r\n        canHeave: false,\r\n    },\r\n    \"Shells\": {\r\n        code: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Symbols\"].power_sys,\r\n        color: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].goldenrod,\r\n        canUse: false,\r\n        canPickup: true,\r\n        canHeave: false,\r\n    },\r\n};\r\n//     Grenade,\r\n// Nanotech,\r\n// SuitModule,\r\n// WarpCrystal,\r\n// KeyCard,\r\nfunction itemFactory(item_type, options = {}) {\r\n    let i = new _item__WEBPACK_IMPORTED_MODULE_4__[\"Item\"](item_type);\r\n    // build up definition with 3 layers: default, given def, options\r\n    // 1. default\r\n    let def = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Utils\"].clone(item_defaults);\r\n    // 2. given definition\r\n    let type_name = ItemType[item_type];\r\n    let type_def = item_definitions[type_name];\r\n    for (let prop in type_def) {\r\n        // console.log(\"typedef\", prop, type_def[prop])\r\n        def[prop] = type_def[prop];\r\n    }\r\n    // 3. options\r\n    for (let prop in options) {\r\n        // console.log(\"options\", prop, options[prop])\r\n        def[prop] = options[prop];\r\n    }\r\n    // 4. set all properties\r\n    for (let prop in def) {\r\n        i[prop] = def[prop];\r\n    }\r\n    i.flags = [].concat(def.flags).concat(options.flags);\r\n    return i;\r\n}\r\nvar MonsterType;\r\n(function (MonsterType) {\r\n    MonsterType[MonsterType[\"Hero\"] = 0] = \"Hero\";\r\n    MonsterType[MonsterType[\"Architect\"] = 1] = \"Architect\";\r\n    MonsterType[MonsterType[\"Mercenary\"] = 2] = \"Mercenary\";\r\n    MonsterType[MonsterType[\"Soldier\"] = 3] = \"Soldier\";\r\n    MonsterType[MonsterType[\"Grenadier\"] = 4] = \"Grenadier\";\r\n    MonsterType[MonsterType[\"Jeep\"] = 5] = \"Jeep\";\r\n})(MonsterType || (MonsterType = {}));\r\nlet monster_defaults = {\r\n    code: '1',\r\n    color: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].normal,\r\n    attack_range: 1,\r\n    monster_status: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].MonsterStatus.Sleep,\r\n    speed: 12,\r\n    sight_range: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].default_monster_sight_range,\r\n    flags: [],\r\n    hp_number: 1,\r\n    shield_number: 0,\r\n};\r\nlet monster_definitions = {\r\n    \"Hero\": {\r\n        code: \"@\",\r\n        color: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].hero_blue,\r\n        attack_range: 1,\r\n        sight_range: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].default_player_sight_range,\r\n        hp_number: 12,\r\n    },\r\n    \"Architect\": {},\r\n    \"Mercenary\": {\r\n        code: \"m\",\r\n        color: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].monster_color,\r\n        attack_range: 4,\r\n        flags: [_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].Flag.KeepsDistance, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].Flag.NeedsTargetLock],\r\n        hp_number: 1,\r\n    },\r\n    \"Soldier\": {\r\n        code: \"s\",\r\n        color: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].monster_color,\r\n        attack_range: 6,\r\n        flags: [_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].Flag.NeedsTargetLock],\r\n        hp_number: 1,\r\n    },\r\n    \"Grenadier\": {\r\n        code: \"G\",\r\n        color: _brew__WEBPACK_IMPORTED_MODULE_1__[\"Color\"].monster_color,\r\n        attack_range: 6,\r\n        hp_number: 2,\r\n        flags: [],\r\n    },\r\n};\r\nfunction monsterFactory(gm, monster_type, options = {}) {\r\n    let m = new _brew__WEBPACK_IMPORTED_MODULE_1__[\"GridThings\"].Monster(monster_type);\r\n    // build up definition with 3 layers: default, given def, options\r\n    // 1. default\r\n    let def = _brew__WEBPACK_IMPORTED_MODULE_1__[\"Utils\"].clone(monster_defaults);\r\n    // 2. given definition\r\n    let type_name = MonsterType[monster_type];\r\n    let type_def = monster_definitions[type_name];\r\n    for (let prop in type_def) {\r\n        // console.log(\"typedef\", prop, type_def[prop])\r\n        def[prop] = type_def[prop];\r\n    }\r\n    // 3. options\r\n    for (let prop in options) {\r\n        // console.log(\"options\", prop, options[prop])\r\n        def[prop] = options[prop];\r\n    }\r\n    // 4. set all properties\r\n    for (let prop in def) {\r\n        m[prop] = def[prop];\r\n    }\r\n    // 5. initiate stats\r\n    m.hp = new _brew__WEBPACK_IMPORTED_MODULE_1__[\"Stat\"](_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].StatName.Health, def.hp_number);\r\n    m.shields = new _brew__WEBPACK_IMPORTED_MODULE_1__[\"Stat\"](_brew__WEBPACK_IMPORTED_MODULE_1__[\"Enums\"].StatName.Shields, def.shield_number);\r\n    m.flags = [].concat(def.flags);\r\n    if (options.flags) {\r\n        m.flags = m.flags.concat(options.flags);\r\n    }\r\n    // act for ROT.js engine\r\n    m.act = () => {\r\n        gm.channel_turn.publish(\"turn.start\", { actor: m });\r\n        // game.monsterAct(m)\r\n    };\r\n    return m;\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/grid_things/definitions.ts\n");

/***/ }),

/***/ "./src/grid_things/features.ts":
/*!*************************************!*\
  !*** ./src/grid_things/features.ts ***!
  \*************************************/
/*! exports provided: Feature */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Feature\", function() { return Feature; });\n/* harmony import */ var _brew__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../brew */ \"./src/brew.ts\");\n/* harmony import */ var _grid_things_thing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grid_things/thing */ \"./src/grid_things/thing.ts\");\n\r\n\r\nclass Feature extends _grid_things_thing__WEBPACK_IMPORTED_MODULE_1__[\"Thing\"] {\r\n    constructor(definition) {\r\n        super(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewObjectType.Feature, definition);\r\n        this.parent = null;\r\n    }\r\n    getName() {\r\n        return _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].FeatureType[this.definition];\r\n    }\r\n    getParent() {\r\n        return this.parent;\r\n    }\r\n    // public isRoot() : boolean {\r\n    //     return (this.parent) ? false : true\r\n    // }\r\n    setParent(p) {\r\n        this.parent = p;\r\n    }\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZ3JpZF90aGluZ3MvZmVhdHVyZXMudHM/M2UxNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQStCO0FBQ2E7QUFFdEMsYUFBZSxTQUFRLHdEQUFLO0lBRzlCLFlBQWEsVUFBd0M7UUFDakQsS0FBSyxDQUFDLDJDQUFVLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUM7UUFDcEQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJO0lBQ3RCLENBQUM7SUFFTSxPQUFPO1FBQ1YsTUFBTSxDQUFDLGlEQUFnQixDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQ3hELENBQUM7SUFFTSxTQUFTO1FBQ1osTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNO0lBQ3RCLENBQUM7SUFFRCw4QkFBOEI7SUFDOUIsMENBQTBDO0lBQzFDLElBQUk7SUFFRyxTQUFTLENBQUMsQ0FBUTtRQUNyQixJQUFJLENBQUMsTUFBTSxHQUFHLENBQUM7SUFDbkIsQ0FBQztDQVNKIiwiZmlsZSI6Ii4vc3JjL2dyaWRfdGhpbmdzL2ZlYXR1cmVzLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgQnJldyBmcm9tIFwiLi4vYnJld1wiXHJcbmltcG9ydCB7IFRoaW5nIH0gZnJvbSAnLi4vZ3JpZF90aGluZ3MvdGhpbmcnXHJcblxyXG5leHBvcnQgY2xhc3MgRmVhdHVyZSBleHRlbmRzIFRoaW5nICB7XHJcbiAgICBwcml2YXRlIHBhcmVudCA6IFRoaW5nXHJcblxyXG4gICAgY29uc3RydWN0b3IgKGRlZmluaXRpb246IEJyZXcuRGVmaW5pdGlvbnMuRmVhdHVyZVR5cGUpIHtcclxuICAgICAgICBzdXBlcihCcmV3LkVudW1zLkJyZXdPYmplY3RUeXBlLkZlYXR1cmUsIGRlZmluaXRpb24pXHJcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBudWxsXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldE5hbWUoKSA6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIEJyZXcuRGVmaW5pdGlvbnMuRmVhdHVyZVR5cGVbdGhpcy5kZWZpbml0aW9uXVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRQYXJlbnQoKSA6IFRoaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnRcclxuICAgIH1cclxuXHJcbiAgICAvLyBwdWJsaWMgaXNSb290KCkgOiBib29sZWFuIHtcclxuICAgIC8vICAgICByZXR1cm4gKHRoaXMucGFyZW50KSA/IGZhbHNlIDogdHJ1ZVxyXG4gICAgLy8gfVxyXG5cclxuICAgIHB1YmxpYyBzZXRQYXJlbnQocDogVGhpbmcpIHtcclxuICAgICAgICB0aGlzLnBhcmVudCA9IHBcclxuICAgIH1cclxuXHJcbiAgICAvLyBwdWJsaWMgZ2V0Um9vdCgpIDogRmVhdHVyZSB7XHJcbiAgICAvLyAgICAgaWYgKHRoaXMuaXNSb290KCkpIHtcclxuICAgIC8vICAgICAgICAgcmV0dXJuIHRoaXNcclxuICAgIC8vICAgICB9IGVsc2Uge1xyXG4gICAgLy8gICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQuZ2V0Um9vdCgpXHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gfVxyXG59XHJcblxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/grid_things/features.ts\n");

/***/ }),

/***/ "./src/grid_things/index.ts":
/*!**********************************!*\
  !*** ./src/grid_things/index.ts ***!
  \**********************************/
/*! exports provided: Thing, Item, Monster, Above, Feature, Terrain */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _thing__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./thing */ \"./src/grid_things/thing.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Thing\", function() { return _thing__WEBPACK_IMPORTED_MODULE_0__[\"Thing\"]; });\n\n/* harmony import */ var _item__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./item */ \"./src/grid_things/item.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Item\", function() { return _item__WEBPACK_IMPORTED_MODULE_1__[\"Item\"]; });\n\n/* harmony import */ var _monster__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./monster */ \"./src/grid_things/monster.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Monster\", function() { return _monster__WEBPACK_IMPORTED_MODULE_2__[\"Monster\"]; });\n\n/* harmony import */ var _above__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./above */ \"./src/grid_things/above.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Above\", function() { return _above__WEBPACK_IMPORTED_MODULE_3__[\"Above\"]; });\n\n/* harmony import */ var _features__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./features */ \"./src/grid_things/features.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Feature\", function() { return _features__WEBPACK_IMPORTED_MODULE_4__[\"Feature\"]; });\n\n/* harmony import */ var _terrain__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./terrain */ \"./src/grid_things/terrain.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Terrain\", function() { return _terrain__WEBPACK_IMPORTED_MODULE_5__[\"Terrain\"]; });\n\n\r\n\r\n\r\n\r\n\r\n\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZ3JpZF90aGluZ3MvaW5kZXgudHM/YWE3OSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQStCO0FBQ0Y7QUFDTTtBQUNKO0FBQ0s7QUFDRCIsImZpbGUiOiIuL3NyYy9ncmlkX3RoaW5ncy9pbmRleC50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IFRoaW5nIH0gZnJvbSAnLi90aGluZydcclxuZXhwb3J0IHsgSXRlbSB9IGZyb20gJy4vaXRlbSdcclxuZXhwb3J0IHsgTW9uc3RlciB9IGZyb20gJy4vbW9uc3RlcidcclxuZXhwb3J0IHsgQWJvdmUgfSBmcm9tICcuL2Fib3ZlJ1xyXG5leHBvcnQgeyBGZWF0dXJlIH0gZnJvbSAnLi9mZWF0dXJlcydcclxuZXhwb3J0IHsgVGVycmFpbiB9IGZyb20gJy4vdGVycmFpbidcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/grid_things/index.ts\n");

/***/ }),

/***/ "./src/grid_things/item.ts":
/*!*********************************!*\
  !*** ./src/grid_things/item.ts ***!
  \*********************************/
/*! exports provided: Item */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Item\", function() { return Item; });\n/* harmony import */ var _brew__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../brew */ \"./src/brew.ts\");\n/* harmony import */ var _grid_things_thing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grid_things/thing */ \"./src/grid_things/thing.ts\");\n\r\n\r\nclass Item extends _grid_things_thing__WEBPACK_IMPORTED_MODULE_1__[\"Thing\"] {\r\n    constructor(definition, subtype = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].ItemSubtype.NonSpecific) {\r\n        super(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewObjectType.Item, definition);\r\n        this.subtype = subtype;\r\n    }\r\n    getName() {\r\n        return _brew__WEBPACK_IMPORTED_MODULE_0__[\"Glossary\"].getItemName(this);\r\n    }\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZ3JpZF90aGluZ3MvaXRlbS50cz85M2EwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBK0I7QUFDYTtBQUV0QyxVQUFZLFNBQVEsd0RBQUs7SUFPM0IsWUFBYSxVQUFxQyxFQUFFLFVBQXdDLGlEQUFnQixDQUFDLFdBQVcsQ0FBQyxXQUFXO1FBQ2hJLEtBQUssQ0FBQywyQ0FBVSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDO1FBQ2pELElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTztJQUMxQixDQUFDO0lBRUQsT0FBTztRQUNILE1BQU0sQ0FBQyw4Q0FBYSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7SUFDMUMsQ0FBQztDQUNKIiwiZmlsZSI6Ii4vc3JjL2dyaWRfdGhpbmdzL2l0ZW0udHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBCcmV3IGZyb20gXCIuLi9icmV3XCJcclxuaW1wb3J0IHsgVGhpbmcgfSBmcm9tICcuLi9ncmlkX3RoaW5ncy90aGluZydcclxuXHJcbmV4cG9ydCBjbGFzcyBJdGVtIGV4dGVuZHMgVGhpbmcgIHtcclxuICAgIHBvd2VyIDogQnJldy5Qb3dlcnMuUG93ZXIgLy8gdG9kbzogZmlndXJlIG91dCBpbXBsZW1lbnRhdGlvbiB2cyBleHRlbmRpbmcgVGhpbmcsIG1heWJlIFRoaW5nIGlzIGFsc28gYW4gaW50ZXJmYWNlXHJcbiAgICBjYW5QaWNrdXA6IGJvb2xlYW5cclxuICAgIGNhbkhlYXZlOiBib29sZWFuXHJcbiAgICBkYW1hZ2U6IG51bWJlclxyXG4gICAgc3VidHlwZTogQnJldy5EZWZpbml0aW9ucy5JdGVtU3VidHlwZVxyXG5cclxuICAgIGNvbnN0cnVjdG9yIChkZWZpbml0aW9uOiBCcmV3LkRlZmluaXRpb25zLkl0ZW1UeXBlLCBzdWJ0eXBlOiBCcmV3LkRlZmluaXRpb25zLkl0ZW1TdWJ0eXBlID0gQnJldy5EZWZpbml0aW9ucy5JdGVtU3VidHlwZS5Ob25TcGVjaWZpYykge1xyXG4gICAgICAgIHN1cGVyKEJyZXcuRW51bXMuQnJld09iamVjdFR5cGUuSXRlbSwgZGVmaW5pdGlvbilcclxuICAgICAgICB0aGlzLnN1YnR5cGUgPSBzdWJ0eXBlXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TmFtZSgpIDogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gQnJldy5HbG9zc2FyeS5nZXRJdGVtTmFtZSh0aGlzKVxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/grid_things/item.ts\n");

/***/ }),

/***/ "./src/grid_things/monster.ts":
/*!************************************!*\
  !*** ./src/grid_things/monster.ts ***!
  \************************************/
/*! exports provided: Monster */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Monster\", function() { return Monster; });\n/* harmony import */ var _brew__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../brew */ \"./src/brew.ts\");\n/* harmony import */ var _thing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./thing */ \"./src/grid_things/thing.ts\");\n\r\n\r\nclass MemoryPalace {\r\n    constructor() {\r\n        this.memory_dict = {};\r\n    }\r\n    saveLevelMemory(level_id, memory) {\r\n        this.memory_dict[level_id] = memory.clone();\r\n    }\r\n    hasLevelMemory(level_id) {\r\n        return level_id in this.memory_dict;\r\n    }\r\n    getLevelMemory(level_id) {\r\n        if (this.hasLevelMemory(level_id)) {\r\n            return this.memory_dict[level_id];\r\n        }\r\n        else {\r\n            console.error(\"missing memory archive for given level id:\", level_id);\r\n            return null;\r\n        }\r\n    }\r\n}\r\nclass Monster extends _thing__WEBPACK_IMPORTED_MODULE_1__[\"Thing\"] {\r\n    constructor(definition) {\r\n        super(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewObjectType.Monster, definition);\r\n        this.team = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].Team.Enemy;\r\n        this.parts = [];\r\n        this.building_type = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].ComponentPartsBuildingType.None;\r\n        this.fov = new _brew__WEBPACK_IMPORTED_MODULE_0__[\"GridOfThings\"]();\r\n        this.knowledge = new _brew__WEBPACK_IMPORTED_MODULE_0__[\"GridOfThings\"]();\r\n        this.memory = new _brew__WEBPACK_IMPORTED_MODULE_0__[\"GridOfThings\"]();\r\n        this.memory_archive = new MemoryPalace();\r\n        this.power_suite = new _brew__WEBPACK_IMPORTED_MODULE_0__[\"Powers\"].PowerSuite(0);\r\n        this.facing_direction = new _brew__WEBPACK_IMPORTED_MODULE_0__[\"Coordinate\"](0, 0);\r\n        // this.flags = []\r\n        this.score = new _brew__WEBPACK_IMPORTED_MODULE_0__[\"Stat\"](_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].StatName.Score, 0);\r\n    }\r\n    setFacing(new_direction) {\r\n        this.facing_direction = new_direction;\r\n    }\r\n    clearParts() {\r\n        this.parts = [];\r\n    }\r\n    getParts() {\r\n        return this.parts;\r\n    }\r\n    setParts(new_parts) {\r\n        this.parts = new_parts;\r\n    }\r\n    getSpeed() {\r\n        return this.speed;\r\n    }\r\n    act() { } // gets overridden by factory creation \r\n    clearFov() {\r\n        this.fov = new _brew__WEBPACK_IMPORTED_MODULE_0__[\"GridOfThings\"]();\r\n    }\r\n    clearKnowledge() {\r\n        this.knowledge = new _brew__WEBPACK_IMPORTED_MODULE_0__[\"GridOfThings\"]();\r\n    }\r\n    hasKnowledgeOf(other_thing) {\r\n        for (let thing of this.knowledge.getAllThings()) {\r\n            if (thing.isSameThing(other_thing)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    inFOV(target) {\r\n        return (this.fov.hasAt(target.location));\r\n    }\r\n    getPowers() {\r\n        return this.power_suite;\r\n    }\r\n    getName() {\r\n        return _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].MonsterType[this.definition];\r\n    }\r\n    // override default Thing get Brew.Enums.Flags\r\n    getFlags() {\r\n        let my_flags = this.flags.concat([]);\r\n        for (let pow of this.power_suite.listOfPowers) {\r\n            my_flags = my_flags.concat(pow.conveys_flags);\r\n        }\r\n        return my_flags;\r\n    }\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/grid_things/monster.ts\n");

/***/ }),

/***/ "./src/grid_things/terrain.ts":
/*!************************************!*\
  !*** ./src/grid_things/terrain.ts ***!
  \************************************/
/*! exports provided: Terrain */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Terrain\", function() { return Terrain; });\n/* harmony import */ var _brew__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../brew */ \"./src/brew.ts\");\n/* harmony import */ var _grid_things_thing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grid_things/thing */ \"./src/grid_things/thing.ts\");\n\r\n\r\nclass Terrain extends _grid_things_thing__WEBPACK_IMPORTED_MODULE_1__[\"Thing\"] {\r\n    constructor(definition) {\r\n        super(_brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewObjectType.Terrain, definition);\r\n    }\r\n    getName() {\r\n        return _brew__WEBPACK_IMPORTED_MODULE_0__[\"Definitions\"].TerrainType[this.definition];\r\n    }\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZ3JpZF90aGluZ3MvdGVycmFpbi50cz9iMGUxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBK0I7QUFDYTtBQUV0QyxhQUFlLFNBQVEsd0RBQUs7SUFPOUIsWUFBYSxVQUF3QztRQUNqRCxLQUFLLENBQUMsMkNBQVUsQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQztJQUN4RCxDQUFDO0lBRU0sT0FBTztRQUNWLE1BQU0sQ0FBQyxpREFBZ0IsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUN4RCxDQUFDO0NBQ0oiLCJmaWxlIjoiLi9zcmMvZ3JpZF90aGluZ3MvdGVycmFpbi50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEJyZXcgZnJvbSBcIi4uL2JyZXdcIlxyXG5pbXBvcnQgeyBUaGluZyB9IGZyb20gJy4uL2dyaWRfdGhpbmdzL3RoaW5nJ1xyXG5cclxuZXhwb3J0IGNsYXNzIFRlcnJhaW4gZXh0ZW5kcyBUaGluZyB7XHJcbiAgICBibG9ja3Nfd2Fsa2luZzogYm9vbGVhblxyXG4gICAgYmxvY2tzX3Zpc2lvbjogYm9vbGVhblxyXG4gICAgYmxvY2tzX2ZseWluZzogYm9vbGVhbiAgLy8gdG9kbzogbmVlZCBhIGNsZWFuZXIgY29ubmVjdGlvbiB0byB0aGUgdGVycmFpbiBJbnRlcmZhY2UgKG5vIG5lZWQgdG8gZGVmaW5lIHRoZXNlIG11bHRpcGxlIHRpbWVzKVxyXG4gICAgaXNfc29saWQ6IGJvb2xlYW5cclxuICAgIGFsd2F5c09uVG9wOiBib29sZWFuXHJcblxyXG4gICAgY29uc3RydWN0b3IgKGRlZmluaXRpb246IEJyZXcuRGVmaW5pdGlvbnMuVGVycmFpblR5cGUpIHtcclxuICAgICAgICBzdXBlcihCcmV3LkVudW1zLkJyZXdPYmplY3RUeXBlLlRlcnJhaW4sIGRlZmluaXRpb24pXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldE5hbWUoKSA6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIEJyZXcuRGVmaW5pdGlvbnMuVGVycmFpblR5cGVbdGhpcy5kZWZpbml0aW9uXVxyXG4gICAgfVxyXG59XHJcblxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/grid_things/terrain.ts\n");

/***/ }),

/***/ "./src/grid_things/thing.ts":
/*!**********************************!*\
  !*** ./src/grid_things/thing.ts ***!
  \**********************************/
/*! exports provided: Thing */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Thing\", function() { return Thing; });\n/* harmony import */ var _brew__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../brew */ \"./src/brew.ts\");\n\r\nclass Thing {\r\n    constructor(objtype, definition) {\r\n        // public id: number\r\n        this.objtype = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Enums\"].BrewObjectType.Thing;\r\n        this.name = \"unnamed_thing\";\r\n        this.code = \"0\";\r\n        this.flags = [];\r\n        this.objtype = objtype;\r\n        this.definition = definition;\r\n        this.id = _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].generateID();\r\n    }\r\n    setLocation(xyNew) {\r\n        this.location = xyNew;\r\n    }\r\n    getDefinition() {\r\n        return this.definition;\r\n    }\r\n    isType(other_definition) {\r\n        return other_definition == this.definition;\r\n    }\r\n    getID() {\r\n        return this.id;\r\n    }\r\n    isSameThing(other_thing) {\r\n        return this.getID() === other_thing.getID();\r\n    }\r\n    getName() {\r\n        // override this\r\n        throw new Error(\"Thing subclass missing getName override\");\r\n    }\r\n    setFlag(flag) {\r\n        _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].remove(this.flags, flag);\r\n        this.flags.push(flag);\r\n    }\r\n    removeFlag(flag) {\r\n        // returns true if we had this flag, false if not\r\n        if (this.flags.indexOf(flag) > -1) {\r\n            _brew__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].remove(this.flags, flag);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    hasFlag(flag) {\r\n        // return (this.flags.indexOf(flag) > -1) \r\n        return (this.getFlags().indexOf(flag) > -1);\r\n    }\r\n    getFlags() {\r\n        return this.flags;\r\n    }\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZ3JpZF90aGluZ3MvdGhpbmcudHM/YWY0OCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDK0I7QUFFekI7SUFjRixZQUFhLE9BQWtDLEVBQUUsVUFBZTtRQWJoRSxvQkFBb0I7UUFDVixZQUFPLEdBQThCLDJDQUFVLENBQUMsY0FBYyxDQUFDLEtBQUs7UUFJdkUsU0FBSSxHQUFXLGVBQWU7UUFDOUIsU0FBSSxHQUFXLEdBQUc7UUFLekIsVUFBSyxHQUEyQixFQUFFO1FBRzlCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTztRQUN0QixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVU7UUFDNUIsSUFBSSxDQUFDLEVBQUUsR0FBRywyQ0FBVSxDQUFDLFVBQVUsRUFBRTtJQUNyQyxDQUFDO0lBRU0sV0FBVyxDQUFDLEtBQXNCO1FBQ3JDLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSztJQUN6QixDQUFDO0lBRU0sYUFBYTtRQUNoQixNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVU7SUFDMUIsQ0FBQztJQUVNLE1BQU0sQ0FBQyxnQkFBcUI7UUFDL0IsTUFBTSxDQUFDLGdCQUFnQixJQUFJLElBQUksQ0FBQyxVQUFVO0lBQzlDLENBQUM7SUFFTSxLQUFLO1FBQ1IsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFO0lBQ2xCLENBQUM7SUFFTSxXQUFXLENBQUMsV0FBa0I7UUFDakMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsS0FBSyxXQUFXLENBQUMsS0FBSyxFQUFFO0lBQy9DLENBQUM7SUFFTSxPQUFPO1FBQ1YsZ0JBQWdCO1FBQ2hCLE1BQU0sSUFBSSxLQUFLLENBQUMseUNBQXlDLENBQUM7SUFDOUQsQ0FBQztJQUVELE9BQU8sQ0FBQyxJQUFxQjtRQUN6QiwyQ0FBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQztRQUNuQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDekIsQ0FBQztJQUVELFVBQVUsQ0FBQyxJQUFxQjtRQUM1QixpREFBaUQ7UUFDakQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2hDLDJDQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDO1lBQ25DLE1BQU0sQ0FBQyxJQUFJO1FBQ2YsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osTUFBTSxDQUFDLEtBQUs7UUFDaEIsQ0FBQztJQUNMLENBQUM7SUFFRCxPQUFPLENBQUMsSUFBcUI7UUFDekIsMENBQTBDO1FBQzFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVELFFBQVE7UUFDSixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUs7SUFDckIsQ0FBQztDQUNKIiwiZmlsZSI6Ii4vc3JjL2dyaWRfdGhpbmdzL3RoaW5nLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUk9UIGZyb20gJ3JvdC1qcydcclxuaW1wb3J0ICogYXMgQnJldyBmcm9tIFwiLi4vYnJld1wiXHJcblxyXG5leHBvcnQgY2xhc3MgVGhpbmcge1xyXG4gICAgLy8gcHVibGljIGlkOiBudW1iZXJcclxuICAgIHByb3RlY3RlZCBvYmp0eXBlOiBCcmV3LkVudW1zLkJyZXdPYmplY3RUeXBlID0gQnJldy5FbnVtcy5CcmV3T2JqZWN0VHlwZS5UaGluZ1xyXG4gICAgcHJvdGVjdGVkIGRlZmluaXRpb246IGFueVxyXG4gICAgcHJvdGVjdGVkIGlkIDogbnVtYmVyXHJcbiAgICBcclxuICAgIHB1YmxpYyBuYW1lOiBzdHJpbmcgPSBcInVubmFtZWRfdGhpbmdcIlxyXG4gICAgcHVibGljIGNvZGU6IHN0cmluZyA9IFwiMFwiXHJcbiAgICBwdWJsaWMgY29sb3I6IG51bWJlcltdXHJcbiAgICBwdWJsaWMgYmdfY29sb3I6IG51bWJlcltdXHJcbiAgICBwdWJsaWMgbG9jYXRpb246IEJyZXcuQ29vcmRpbmF0ZVxyXG4gICAgXHJcbiAgICBmbGFnczogQXJyYXk8QnJldy5FbnVtcy5GbGFnPiA9IFtdXHJcblxyXG4gICAgY29uc3RydWN0b3IgKG9ianR5cGU6IEJyZXcuRW51bXMuQnJld09iamVjdFR5cGUsIGRlZmluaXRpb246IGFueSkge1xyXG4gICAgICAgIHRoaXMub2JqdHlwZSA9IG9ianR5cGVcclxuICAgICAgICB0aGlzLmRlZmluaXRpb24gPSBkZWZpbml0aW9uXHJcbiAgICAgICAgdGhpcy5pZCA9IEJyZXcuVXRpbHMuZ2VuZXJhdGVJRCgpXHJcbiAgICB9XHJcbiAgICBcclxuICAgIHB1YmxpYyBzZXRMb2NhdGlvbih4eU5ldzogQnJldy5Db29yZGluYXRlKSA6IHZvaWQge1xyXG4gICAgICAgIHRoaXMubG9jYXRpb24gPSB4eU5ld1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwdWJsaWMgZ2V0RGVmaW5pdGlvbigpIDogYW55IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kZWZpbml0aW9uXHJcbiAgICB9XHJcbiAgICBcclxuICAgIHB1YmxpYyBpc1R5cGUob3RoZXJfZGVmaW5pdGlvbjogYW55KSA6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiBvdGhlcl9kZWZpbml0aW9uID09IHRoaXMuZGVmaW5pdGlvblxyXG4gICAgfSBcclxuICAgIFxyXG4gICAgcHVibGljIGdldElEKCkgOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmlkXHJcbiAgICB9XHJcbiAgICBcclxuICAgIHB1YmxpYyBpc1NhbWVUaGluZyhvdGhlcl90aGluZzogVGhpbmcpIDogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0SUQoKSA9PT0gb3RoZXJfdGhpbmcuZ2V0SUQoKVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXROYW1lKCkgOiBzdHJpbmcge1xyXG4gICAgICAgIC8vIG92ZXJyaWRlIHRoaXNcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGluZyBzdWJjbGFzcyBtaXNzaW5nIGdldE5hbWUgb3ZlcnJpZGVcIilcclxuICAgIH1cclxuXHJcbiAgICBzZXRGbGFnKGZsYWc6IEJyZXcuRW51bXMuRmxhZykge1xyXG4gICAgICAgIEJyZXcuVXRpbHMucmVtb3ZlKHRoaXMuZmxhZ3MsIGZsYWcpXHJcbiAgICAgICAgdGhpcy5mbGFncy5wdXNoKGZsYWcpXHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJlbW92ZUZsYWcoZmxhZzogQnJldy5FbnVtcy5GbGFnKSA6IGJvb2xlYW4ge1xyXG4gICAgICAgIC8vIHJldHVybnMgdHJ1ZSBpZiB3ZSBoYWQgdGhpcyBmbGFnLCBmYWxzZSBpZiBub3RcclxuICAgICAgICBpZiAodGhpcy5mbGFncy5pbmRleE9mKGZsYWcpID4gLTEpIHtcclxuICAgICAgICAgICAgQnJldy5VdGlscy5yZW1vdmUodGhpcy5mbGFncywgZmxhZylcclxuICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGhhc0ZsYWcoZmxhZzogQnJldy5FbnVtcy5GbGFnKSA6IGJvb2xlYW4ge1xyXG4gICAgICAgIC8vIHJldHVybiAodGhpcy5mbGFncy5pbmRleE9mKGZsYWcpID4gLTEpIFxyXG4gICAgICAgIHJldHVybiAodGhpcy5nZXRGbGFncygpLmluZGV4T2YoZmxhZykgPiAtMSkgXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RmxhZ3MoKSA6IEFycmF5PEJyZXcuRW51bXMuRmxhZz4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmZsYWdzXHJcbiAgICB9XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/grid_things/thing.ts\n");

/***/ }),

/***/ "./src/level_generator/rooms.ts":
/*!**************************************!*\
  !*** ./src/level_generator/rooms.ts ***!
  \**************************************/
/*! exports provided: Rectangle, Room, RectangleRoom, CrossRoom, OvalRoom, CorridorRoom */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Rectangle\", function() { return Rectangle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Room\", function() { return Room; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RectangleRoom\", function() { return RectangleRoom; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CrossRoom\", function() { return CrossRoom; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"OvalRoom\", function() { return OvalRoom; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CorridorRoom\", function() { return CorridorRoom; });\n/* harmony import */ var rot_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rot-js */ \"./node_modules/rot-js/lib/rot.js\");\n/* harmony import */ var rot_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(rot_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _brew_components_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../brew_components/utils */ \"./src/brew_components/utils.ts\");\n/* harmony import */ var _brew_components_coordinate__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../brew_components/coordinate */ \"./src/brew_components/coordinate.ts\");\n\r\n// let _id = Math.floor(ROT.RNG.getUniform()*9999)\r\n// function idGenerator() : number {\r\n//     _id += 1\r\n//     return _id\r\n// }\r\n\r\n\r\nclass Rectangle {\r\n    constructor(x, y, width, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.id = Object(_brew_components_utils__WEBPACK_IMPORTED_MODULE_1__[\"generateID\"])();\r\n    }\r\n    right() {\r\n        return this.x + this.width - 1;\r\n    }\r\n    bottom() {\r\n        return this.y + this.height - 1;\r\n    }\r\n    left() { return this.x; }\r\n    top() { return this.y; }\r\n    area() { return this.width * this.height; }\r\n    isPointInside(xy) {\r\n        return ((xy.x > this.x) && (xy.x < this.right()) && (xy.y > this.y) && (xy.y < this.bottom()));\r\n    }\r\n    // isPointInside(xy: Coordinate) : boolean {\r\n    //     return ((xy.x >= this.x) && (xy.x <= this.right()) && (xy.y >= this.y) && (xy.y <= this.bottom()))\r\n    // }\r\n    checkIntersection_Strict(other_rect) {\r\n        if ((this.right() < other_rect.left()) ||\r\n            (other_rect.right() < this.left()) ||\r\n            (this.bottom() < other_rect.top()) ||\r\n            (other_rect.bottom() < this.top())) {\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n    checkIntersection_AllowPerimeter(other_rect) {\r\n        if ((this.right() <= other_rect.left()) ||\r\n            (other_rect.right() <= this.left()) ||\r\n            (this.bottom() <= other_rect.top()) ||\r\n            (other_rect.bottom() <= this.top())) {\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n    // checkOverlap(other_rect : Rectangle) : boolean {\r\n    //     return this.getCorners().some((xy) => {\r\n    //         return other_rect.isPointInside(xy)\r\n    //     })\r\n    // }\r\n    contains(other_rect) {\r\n        return other_rect.getCorners().every((xy) => {\r\n            return this.isPointInside(xy);\r\n        });\r\n    }\r\n    getPerimeter() {\r\n        let walls = [];\r\n        for (let x = 0; x < this.width; x++) {\r\n            walls.push(new _brew_components_coordinate__WEBPACK_IMPORTED_MODULE_2__[\"Coordinate\"](x + this.x, this.y));\r\n            walls.push(new _brew_components_coordinate__WEBPACK_IMPORTED_MODULE_2__[\"Coordinate\"](x + this.x, this.bottom()));\r\n        }\r\n        for (let y = 1; y < this.height - 1; y++) {\r\n            walls.push(new _brew_components_coordinate__WEBPACK_IMPORTED_MODULE_2__[\"Coordinate\"](this.x, y + this.y));\r\n            walls.push(new _brew_components_coordinate__WEBPACK_IMPORTED_MODULE_2__[\"Coordinate\"](this.right(), y + this.y));\r\n        }\r\n        return walls;\r\n    }\r\n    getInterior() {\r\n        let floors = [];\r\n        for (let x = this.x + 1; x < this.right(); x++) {\r\n            for (let y = this.y + 1; y < this.bottom(); y++) {\r\n                floors.push(new _brew_components_coordinate__WEBPACK_IMPORTED_MODULE_2__[\"Coordinate\"](x, y));\r\n            }\r\n        }\r\n        return floors;\r\n    }\r\n    getCorners() {\r\n        return [\r\n            new _brew_components_coordinate__WEBPACK_IMPORTED_MODULE_2__[\"Coordinate\"](this.x, this.y),\r\n            new _brew_components_coordinate__WEBPACK_IMPORTED_MODULE_2__[\"Coordinate\"](this.x, this.bottom()),\r\n            new _brew_components_coordinate__WEBPACK_IMPORTED_MODULE_2__[\"Coordinate\"](this.right(), this.y),\r\n            new _brew_components_coordinate__WEBPACK_IMPORTED_MODULE_2__[\"Coordinate\"](this.right(), this.bottom()),\r\n        ];\r\n    }\r\n    isCorner(xy) {\r\n        let corners = this.getCorners();\r\n        return corners.some((corner_xy) => {\r\n            return (corner_xy.compare(xy));\r\n        });\r\n    }\r\n    getPerimeter_NoCorners() {\r\n        return this.getPerimeter().filter((xy) => {\r\n            return (!(this.isCorner(xy)));\r\n        });\r\n    }\r\n}\r\nclass Room {\r\n    constructor(bounding_rectangle) {\r\n        this.bounding_rectangle = bounding_rectangle;\r\n        this.id = Object(_brew_components_utils__WEBPACK_IMPORTED_MODULE_1__[\"generateID\"])();\r\n        this.doors = [];\r\n    }\r\n    addDoor(door) {\r\n        this.doors.push(door);\r\n    }\r\n    getFloors() {\r\n        throw new Error(\"does not implement getFloors\");\r\n    }\r\n    getWalls() {\r\n        throw new Error(\"does not implement getFloors\");\r\n    }\r\n    getCorners() {\r\n        throw new Error(\"does not implement getFloors\");\r\n    }\r\n    isCorner(xy) {\r\n        let corners = this.getCorners();\r\n        return corners.some((corner_xy) => {\r\n            return (corner_xy.compare(xy));\r\n        });\r\n    }\r\n    getWallsOnly() {\r\n        return this.getWalls().filter((xy) => {\r\n            return (!(this.isCorner(xy)));\r\n        });\r\n    }\r\n}\r\nclass RectangleRoom extends Room {\r\n    getFloors() {\r\n        return this.bounding_rectangle.getInterior();\r\n    }\r\n    getWalls() {\r\n        return this.bounding_rectangle.getPerimeter();\r\n    }\r\n    getCorners() {\r\n        return this.bounding_rectangle.getCorners();\r\n    }\r\n    isCorner(xy) {\r\n        return this.bounding_rectangle.isCorner(xy);\r\n    }\r\n}\r\nclass CrossRoom extends Room {\r\n    constructor(bounding_rectangle, rect_tall, rect_wide) {\r\n        super(bounding_rectangle);\r\n        this.bounding_rectangle = bounding_rectangle;\r\n        this.rect_tall = rect_tall;\r\n        this.rect_wide = rect_wide;\r\n    }\r\n    getFloors() {\r\n        let floor_keys = this.rect_wide.getInterior().map((xy) => {\r\n            return Object(_brew_components_utils__WEBPACK_IMPORTED_MODULE_1__[\"xyToKey\"])(xy);\r\n        });\r\n        let tall_keys = this.rect_tall.getInterior().map((xy) => {\r\n            return Object(_brew_components_utils__WEBPACK_IMPORTED_MODULE_1__[\"xyToKey\"])(xy);\r\n        });\r\n        for (let tall_key of tall_keys) {\r\n            if (floor_keys.indexOf(tall_key) == -1) {\r\n                floor_keys.push(tall_key);\r\n            }\r\n        }\r\n        return floor_keys.map((key) => { return Object(_brew_components_utils__WEBPACK_IMPORTED_MODULE_1__[\"keyToXY\"])(key); });\r\n    }\r\n    getWalls() {\r\n        let walls = [];\r\n        let wide_walls = this.rect_wide.getPerimeter();\r\n        let tall_walls = this.rect_tall.getPerimeter();\r\n        for (let xy of wide_walls) {\r\n            if (!(this.rect_tall.isPointInside(xy))) {\r\n                walls.push(xy);\r\n            }\r\n        }\r\n        let wall_keys = walls.map((xy) => { return Object(_brew_components_utils__WEBPACK_IMPORTED_MODULE_1__[\"xyToKey\"])(xy); });\r\n        for (let xy of tall_walls) {\r\n            if ((!(this.rect_wide.isPointInside(xy))) && (wall_keys.indexOf(Object(_brew_components_utils__WEBPACK_IMPORTED_MODULE_1__[\"xyToKey\"])(xy)) == -1)) {\r\n                walls.push(xy);\r\n            }\r\n        }\r\n        return walls;\r\n        // return wide_walls.concat(tall_walls)\r\n    }\r\n    getCorners() {\r\n        let corners = [];\r\n        corners = corners.concat(this.rect_tall.getCorners()).concat(this.rect_wide.getCorners());\r\n        return corners;\r\n    }\r\n}\r\n// export class CircleRoom extends Room {\r\n//     radius: number\r\n//     center_x: number\r\n//     center_y: number\r\n//     private walls: Array<Coordinate>\r\n//     constructor(public bounding_rectangle: Rectangle) {\r\n//         super(bounding_rectangle)\r\n//         let r = Math.floor(Math.min(bounding_rectangle.height, bounding_rectangle.width) / 2)\r\n//         this.radius = r\r\n//         this.center_x = bounding_rectangle.x + r\r\n//         this.center_y = bounding_rectangle.y + r\r\n//         this.walls = []\r\n//     }\r\n//     getCorners() : Array<Coordinate> { return [] }\r\n//     getWalls() : Array<Coordinate> {\r\n//         if (this.walls.length == 0) {\r\n//             this.walls = getBresenhamCirclePoints(this.center_x, this.center_y, this.radius)\r\n//         }\r\n//         return this.walls\r\n//     }\r\n//     // getFloors() : Array<Coordinate> {\r\n//     // }\r\n// }\r\n// function getBresenhamCirclePoints (x0, y0, radius) : Array<Coordinate> {\r\n//     // return an array of [x, y] integer coordinate pairs that describe an ellipse\r\n//     // http://en.wikipedia.org/wiki/Midpoint_circle_algorithm\r\n//     let x = radius\r\n//     let y = 0\r\n//     let radiusError = 1 - x\r\n//     let points : Array<Coordinate> = []\r\n//     while (x >= y) {\r\n//         points.push(new Coordinate(x + x0, y + y0))\r\n//         points.push(new Coordinate(y + x0, x + y0))\r\n//         points.push(new Coordinate(-x + x0, y + y0))\r\n//         points.push(new Coordinate(-y + x0, x + y0))\r\n//         points.push(new Coordinate(-x + x0, -y + y0))\r\n//         points.push(new Coordinate(-y + x0, -x + y0))\r\n//         points.push(new Coordinate(x + x0, -y + y0))\r\n//         points.push(new Coordinate(y + x0, -x + y0))\r\n//         y += 1\r\n//         if (radiusError < 0) {\r\n//             radiusError += 2 * y + 1\r\n//         } else {\r\n//             x--\r\n//             radiusError += 2 * (y - x + 1)\r\n//         }\r\n//     }\r\n//     return points\r\n// }\r\nclass OvalRoom extends Room {\r\n    constructor(bounding_rectangle) {\r\n        super(bounding_rectangle);\r\n        this.bounding_rectangle = bounding_rectangle;\r\n        this.radius_a = Math.floor((bounding_rectangle.width / 2.0) - 0.5);\r\n        this.radius_b = Math.floor((bounding_rectangle.height / 2.0) - 0.5);\r\n        this.center_x = bounding_rectangle.left() + this.radius_a;\r\n        this.center_y = bounding_rectangle.top() + this.radius_b;\r\n        this.walls = [];\r\n        this.floors = [];\r\n    }\r\n    getCorners() { return []; }\r\n    getWalls() {\r\n        if (this.walls.length == 0) {\r\n            this.walls = getMcIlroyEllipsePoints(this.center_x, this.center_y, this.radius_a, this.radius_b);\r\n        }\r\n        return this.walls;\r\n    }\r\n    getFloors() {\r\n        if (this.floors.length == 0) {\r\n            this.floors = floodFillFloors(new _brew_components_coordinate__WEBPACK_IMPORTED_MODULE_2__[\"Coordinate\"](this.center_x, this.center_y), this.getWalls());\r\n        }\r\n        return this.floors;\r\n    }\r\n}\r\nfunction floodFillFloors(start_xy, walls) {\r\n    let floors = [];\r\n    // let floor_keys : Array<number> = []\r\n    // let wall_keys : Array<number> = walls.map((xy) => { return xyToKey(xy) })\r\n    // let \r\n    let flood_fn = (xy) => {\r\n        // stop condition: already visited\r\n        if (Object(_brew_components_utils__WEBPACK_IMPORTED_MODULE_1__[\"isCoordinateInListOfCoordinates\"])(xy, floors)) {\r\n            return;\r\n        }\r\n        // stop condition: wall\r\n        if (Object(_brew_components_utils__WEBPACK_IMPORTED_MODULE_1__[\"isCoordinateInListOfCoordinates\"])(xy, walls)) {\r\n            return;\r\n        }\r\n        // otherwise, record it\r\n        floors.push(xy);\r\n        // move on\r\n        for (let neighbor_xy of xy.getAdjacent()) {\r\n            flood_fn(neighbor_xy);\r\n        }\r\n    };\r\n    flood_fn(start_xy);\r\n    return floors;\r\n}\r\nfunction getMcIlroyEllipsePoints(xc, yc, a, b) {\r\n    // return an array of [x, y] integer coordinate pairs that describe an ellipse\r\n    // http://enchantia.com/graphapp/doc/tech/ellipses.html\r\n    let x = 0;\r\n    let y = b;\r\n    let a2 = a * a;\r\n    let b2 = b * b;\r\n    let crit1 = -(a2 / 4 + a % 2 + b2);\r\n    let crit2 = -(b2 / 4 + b % 2 + a2);\r\n    let crit3 = -(b2 / 4 + b % 2);\r\n    let t = -a2 * y;\r\n    let dxt = 2 * b2 * x;\r\n    let dyt = -2 * a2 * y;\r\n    let d2xt = 2 * b2;\r\n    let d2yt = 2 * a2;\r\n    let points = [];\r\n    while ((y >= 0) && (x <= a)) {\r\n        points.push(new _brew_components_coordinate__WEBPACK_IMPORTED_MODULE_2__[\"Coordinate\"](xc + x, yc + y));\r\n        if ((x != 0) || (y != 0)) {\r\n            points.push(new _brew_components_coordinate__WEBPACK_IMPORTED_MODULE_2__[\"Coordinate\"](xc - x, yc - y));\r\n        }\r\n        if ((x != 0) && (y != 0)) {\r\n            points.push(new _brew_components_coordinate__WEBPACK_IMPORTED_MODULE_2__[\"Coordinate\"](xc + x, yc - y));\r\n            points.push(new _brew_components_coordinate__WEBPACK_IMPORTED_MODULE_2__[\"Coordinate\"](xc - x, yc + y));\r\n        }\r\n        if ((t + b2 * x <= crit1) || (t + a2 * y <= crit3)) {\r\n            // incx()\r\n            x += 1;\r\n            dxt += d2xt;\r\n            t += dxt;\r\n        }\r\n        else if (t - a2 * y > crit2) {\r\n            // incy()\r\n            y -= 1;\r\n            dyt += d2yt;\r\n            t += dyt;\r\n        }\r\n        else {\r\n            // incx()\r\n            x += 1;\r\n            dxt += d2xt;\r\n            t += dxt;\r\n            // incy()\r\n            y -= 1;\r\n            dyt += d2yt;\r\n            t += dyt;\r\n        }\r\n    }\r\n    return points;\r\n}\r\nclass CorridorRoom extends Room {\r\n    constructor(bounding_rectangle, openings_xy_list) {\r\n        super(bounding_rectangle);\r\n        this.bounding_rectangle = bounding_rectangle;\r\n        this.openings_xy_list = openings_xy_list;\r\n        // this.blocks = []\r\n        this.floors = [];\r\n        this.initCorridors();\r\n    }\r\n    getCorners() { return []; }\r\n    getWalls() {\r\n        return this.bounding_rectangle.getPerimeter();\r\n    }\r\n    getFloors() {\r\n        return this.floors;\r\n    }\r\n    initCorridors() {\r\n        let fn_passable = (x, y) => {\r\n            // if (ROT.RNG.getUniform() < 0.125) {\r\n            //     return false\r\n            // }\r\n            let xy = new _brew_components_coordinate__WEBPACK_IMPORTED_MODULE_2__[\"Coordinate\"](x, y);\r\n            if (Object(_brew_components_utils__WEBPACK_IMPORTED_MODULE_1__[\"isCoordinateInListOfCoordinates\"])(xy, this.openings_xy_list)) {\r\n                return true;\r\n            }\r\n            if ((x <= this.bounding_rectangle.x) || (y <= this.bounding_rectangle.y) || (x >= this.bounding_rectangle.right()) || (y >= this.bounding_rectangle.bottom())) {\r\n                return false;\r\n            }\r\n            // let xy = new Coordinate(x, y)\r\n            return true;\r\n        };\r\n        let all_paths = [];\r\n        let local_path;\r\n        let fn_update_path = (x, y) => {\r\n            let xy = new _brew_components_coordinate__WEBPACK_IMPORTED_MODULE_2__[\"Coordinate\"](x, y);\r\n            if (!(Object(_brew_components_utils__WEBPACK_IMPORTED_MODULE_1__[\"isCoordinateInListOfCoordinates\"])(xy, local_path))) {\r\n                local_path.push(xy);\r\n            }\r\n        };\r\n        for (let from_xy of this.openings_xy_list) {\r\n            let other_openings = this.openings_xy_list.filter((xy) => { return (!(xy.compare(from_xy))); });\r\n            for (let to_xy of other_openings) {\r\n                let fwd_path = [];\r\n                let is_valid = false;\r\n                while (!(is_valid)) {\r\n                    is_valid = true;\r\n                    let random_x = Math.floor(rot_js__WEBPACK_IMPORTED_MODULE_0__[\"RNG\"].getUniform() * this.bounding_rectangle.right()) + this.bounding_rectangle.x;\r\n                    let random_y = Math.floor(rot_js__WEBPACK_IMPORTED_MODULE_0__[\"RNG\"].getUniform() * this.bounding_rectangle.bottom()) + this.bounding_rectangle.y;\r\n                    // let random_xy = new Coordinate(random_x, random_y)\r\n                    local_path = [];\r\n                    let astar = new rot_js__WEBPACK_IMPORTED_MODULE_0__[\"Path\"].AStar(from_xy.x, from_xy.y, fn_passable, { topology: 4 });\r\n                    astar.compute(random_x, random_y, fn_update_path);\r\n                    if (local_path.length == 0) {\r\n                        is_valid = false;\r\n                        continue;\r\n                    }\r\n                    fwd_path = [].concat(local_path);\r\n                    local_path = [];\r\n                    astar = new rot_js__WEBPACK_IMPORTED_MODULE_0__[\"Path\"].AStar(random_x, random_y, fn_passable, { topology: 4 });\r\n                    astar.compute(to_xy.x, to_xy.y, fn_update_path);\r\n                    if (local_path.length == 0) {\r\n                        is_valid = false;\r\n                        continue;\r\n                    }\r\n                    all_paths = all_paths.concat(local_path).concat(fwd_path);\r\n                }\r\n            }\r\n        }\r\n        this.floors = all_paths;\r\n    }\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/level_generator/rooms.ts\n");

/***/ }),

/***/ "./src/start.ts":
/*!**********************!*\
  !*** ./src/start.ts ***!
  \**********************/
/*! exports provided: startGame */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"startGame\", function() { return startGame; });\n/* harmony import */ var postal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! postal */ \"./node_modules/postal/lib/postal.js\");\n/* harmony import */ var postal__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(postal__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _brew__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./brew */ \"./src/brew.ts\");\n\r\n\r\nvar gm;\r\nvar BREW_FIRST_STARTUP = true;\r\n// var BREW_START_SEED : number = null\r\nfunction startGame(given_seed = 202) {\r\n    postal__WEBPACK_IMPORTED_MODULE_0__[\"reset\"]();\r\n    let divGame = (document.getElementById(\"id_div_game\"));\r\n    // given_seed = 168\r\n    // unconnected seed with broken pathmaps = 4258\r\n    gm = new _brew__WEBPACK_IMPORTED_MODULE_1__[\"GameMaster\"](given_seed, divGame, _brew__WEBPACK_IMPORTED_MODULE_1__[\"Input\"].handleAllInput, // input\r\n    _brew__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].mainEventhandler, // event\r\n    _brew__WEBPACK_IMPORTED_MODULE_1__[\"Intel\"].mainAiHandler, // ai\r\n    _brew__WEBPACK_IMPORTED_MODULE_1__[\"Intel\"].runBeforePlayerTurn, // pre-player\r\n    _brew__WEBPACK_IMPORTED_MODULE_1__[\"Intel\"].runAfterPlayerTurn);\r\n    if (BREW_FIRST_STARTUP) {\r\n        gm.initEventListener(divGame);\r\n    }\r\n    BREW_FIRST_STARTUP = false;\r\n    test_sandbox();\r\n}\r\nfunction test_sandbox() {\r\n    // let a_set = new Brew.CoordinateArea()\r\n    // a_set.addCoordinate(new Brew.Coordinate(2, 2))\r\n    // a_set.addCoordinates(new Brew.Coordinate(2, 2).getAdjacent())\r\n    // console.log(\"A\", a_set.getCoordinates())\r\n    // console.log(\"A except 0,0\", a_set.getCoordinatesExcept([new Brew.Coordinate(0, 0)]))\r\n    // let b_set = new Brew.CoordinateArea()\r\n    // b_set.addCoordinates([new Brew.Coordinate(2, 2), new Brew.Coordinate(3, 2), new Brew.Coordinate(1, 2), new Brew.Coordinate(5, 5)])\r\n    // debugger\r\n    // console.log(\"B\", b_set)\r\n    // console.log(\"A+B union\", b_set.getUnion(a_set))\r\n    // console.log(\"A diff B\", a_set.getDiff(b_set))\r\n    // console.log(\"B diff A\", b_set.getDiff(a_set))\r\n    // console.log(\"A B symm diff\", a_set.getSymmetricDiff(b_set))\r\n}\r\n// window.onload = startGame\r\n// window.onload = function (event) {\r\n//   someFunction(someArg, someOtherArg)\r\n// }\r\n// http://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript/901144#901144\r\nfunction getParameterByName(name) {\r\n    var match = RegExp('[?&]' + name + '=([^&]*)').exec(window.location.search);\r\n    return match && decodeURIComponent(match[1].replace(/\\+/g, ' '));\r\n}\r\nvar gseed = getParameterByName(\"seed\");\r\nvar use_boss_mode = Boolean(getParameterByName(\"boss\"));\r\nif (use_boss_mode) {\r\n    _brew__WEBPACK_IMPORTED_MODULE_1__[\"Debug\"].toggleBossMode(true);\r\n    let background_img_src = 'https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png';\r\n    let param_img = getParameterByName(\"img\");\r\n    if (param_img) {\r\n        background_img_src = param_img;\r\n    }\r\n    let imgBackground = (document.getElementById(\"id_img_backgroundcover\"));\r\n    imgBackground.src = background_img_src;\r\n}\r\nstartGame(Number(gseed));\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc3RhcnQudHM/ODNlMSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFnQztBQUNGO0FBRTlCLElBQUksRUFBb0I7QUFFeEIsSUFBSSxrQkFBa0IsR0FBYSxJQUFJO0FBQ3ZDLHNDQUFzQztBQUVoQyxtQkFBb0IsYUFBcUIsR0FBRztJQUU5Qyw0Q0FBWSxFQUFFO0lBQ2QsSUFBSSxPQUFPLEdBQW9CLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUV2RSxtQkFBbUI7SUFDbkIsK0NBQStDO0lBQy9DLEVBQUUsR0FBRyxJQUFJLGdEQUFlLENBQ3BCLFVBQVUsRUFDVixPQUFPLEVBQ1AsMkNBQVUsQ0FBQyxjQUFjLEVBQUUsUUFBUTtJQUNuQyw0Q0FBVyxDQUFDLGdCQUFnQixFQUFDLFFBQVE7SUFDckMsMkNBQVUsQ0FBQyxhQUFhLEVBQUUsS0FBSztJQUMvQiwyQ0FBVSxDQUFDLG1CQUFtQixFQUFFLGFBQWE7SUFDN0MsMkNBQVUsQ0FBQyxrQkFBa0IsQ0FDaEM7SUFFRCxFQUFFLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUM7UUFDckIsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQztJQUNqQyxDQUFDO0lBRUQsa0JBQWtCLEdBQUcsS0FBSztJQUMxQixZQUFZLEVBQUU7QUFDbEIsQ0FBQztBQUVEO0lBQ0ksd0NBQXdDO0lBQ3hDLGlEQUFpRDtJQUNqRCxnRUFBZ0U7SUFDaEUsMkNBQTJDO0lBRTNDLHVGQUF1RjtJQUV2Rix3Q0FBd0M7SUFDeEMscUlBQXFJO0lBQ3JJLFdBQVc7SUFDWCwwQkFBMEI7SUFDMUIsa0RBQWtEO0lBQ2xELGdEQUFnRDtJQUNoRCxnREFBZ0Q7SUFDaEQsOERBQThEO0FBRWxFLENBQUM7QUFFRCw0QkFBNEI7QUFFNUIscUNBQXFDO0FBQ3JDLHdDQUF3QztBQUN4QyxJQUFJO0FBRUosMEdBQTBHO0FBQzFHLDRCQUE0QixJQUFZO0lBQ3BDLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEdBQUcsSUFBSSxHQUFHLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzVFLE1BQU0sQ0FBQyxLQUFLLElBQUksa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNyRSxDQUFDO0FBRUQsSUFBSSxLQUFLLEdBQUcsa0JBQWtCLENBQUMsTUFBTSxDQUFDO0FBQ3RDLElBQUksYUFBYSxHQUFHLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUV2RCxFQUFFLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO0lBQ2hCLDJDQUFVLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQztJQUcvQixJQUFJLGtCQUFrQixHQUFHLG9GQUFvRjtJQUM3RyxJQUFJLFNBQVMsR0FBRyxrQkFBa0IsQ0FBQyxLQUFLLENBQUM7SUFFekMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUNaLGtCQUFrQixHQUFHLFNBQVM7SUFDbEMsQ0FBQztJQUNELElBQUksYUFBYSxHQUFxQixDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsd0JBQXdCLENBQUMsQ0FBQztJQUN6RixhQUFhLENBQUMsR0FBRyxHQUFHLGtCQUFrQjtBQUUxQyxDQUFDO0FBR0QsU0FBUyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyIsImZpbGUiOiIuL3NyYy9zdGFydC50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHBvc3RhbCBmcm9tICdwb3N0YWwnXHJcbmltcG9ydCAqIGFzIEJyZXcgZnJvbSBcIi4vYnJld1wiXHJcblxyXG52YXIgZ20gOiBCcmV3LkdhbWVNYXN0ZXJcclxuXHJcbnZhciBCUkVXX0ZJUlNUX1NUQVJUVVAgOiBib29sZWFuID0gdHJ1ZVxyXG4vLyB2YXIgQlJFV19TVEFSVF9TRUVEIDogbnVtYmVyID0gbnVsbFxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0R2FtZShnaXZlbl9zZWVkOiBudW1iZXIgPSAyMDIpIHtcclxuXHJcbiAgICBwb3N0YWwucmVzZXQoKVxyXG4gICAgbGV0IGRpdkdhbWUgPSA8SFRNTERpdkVsZW1lbnQ+IChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImlkX2Rpdl9nYW1lXCIpKVxyXG4gICAgXHJcbiAgICAvLyBnaXZlbl9zZWVkID0gMTY4XHJcbiAgICAvLyB1bmNvbm5lY3RlZCBzZWVkIHdpdGggYnJva2VuIHBhdGhtYXBzID0gNDI1OFxyXG4gICAgZ20gPSBuZXcgQnJldy5HYW1lTWFzdGVyKFxyXG4gICAgICAgIGdpdmVuX3NlZWQsXHJcbiAgICAgICAgZGl2R2FtZSxcclxuICAgICAgICBCcmV3LklucHV0LmhhbmRsZUFsbElucHV0LCAvLyBpbnB1dFxyXG4gICAgICAgIEJyZXcuRXZlbnRzLm1haW5FdmVudGhhbmRsZXIsLy8gZXZlbnRcclxuICAgICAgICBCcmV3LkludGVsLm1haW5BaUhhbmRsZXIsIC8vIGFpXHJcbiAgICAgICAgQnJldy5JbnRlbC5ydW5CZWZvcmVQbGF5ZXJUdXJuLCAvLyBwcmUtcGxheWVyXHJcbiAgICAgICAgQnJldy5JbnRlbC5ydW5BZnRlclBsYXllclR1cm4sIC8vIHBvc3QtcGxheWVyLFxyXG4gICAgKVxyXG4gICAgXHJcbiAgICBpZiAoQlJFV19GSVJTVF9TVEFSVFVQKSB7XHJcbiAgICAgICAgZ20uaW5pdEV2ZW50TGlzdGVuZXIoZGl2R2FtZSlcclxuICAgIH1cclxuXHJcbiAgICBCUkVXX0ZJUlNUX1NUQVJUVVAgPSBmYWxzZVxyXG4gICAgdGVzdF9zYW5kYm94KClcclxufVxyXG5cclxuZnVuY3Rpb24gdGVzdF9zYW5kYm94KCkge1xyXG4gICAgLy8gbGV0IGFfc2V0ID0gbmV3IEJyZXcuQ29vcmRpbmF0ZUFyZWEoKVxyXG4gICAgLy8gYV9zZXQuYWRkQ29vcmRpbmF0ZShuZXcgQnJldy5Db29yZGluYXRlKDIsIDIpKVxyXG4gICAgLy8gYV9zZXQuYWRkQ29vcmRpbmF0ZXMobmV3IEJyZXcuQ29vcmRpbmF0ZSgyLCAyKS5nZXRBZGphY2VudCgpKVxyXG4gICAgLy8gY29uc29sZS5sb2coXCJBXCIsIGFfc2V0LmdldENvb3JkaW5hdGVzKCkpXHJcblxyXG4gICAgLy8gY29uc29sZS5sb2coXCJBIGV4Y2VwdCAwLDBcIiwgYV9zZXQuZ2V0Q29vcmRpbmF0ZXNFeGNlcHQoW25ldyBCcmV3LkNvb3JkaW5hdGUoMCwgMCldKSlcclxuXHJcbiAgICAvLyBsZXQgYl9zZXQgPSBuZXcgQnJldy5Db29yZGluYXRlQXJlYSgpXHJcbiAgICAvLyBiX3NldC5hZGRDb29yZGluYXRlcyhbbmV3IEJyZXcuQ29vcmRpbmF0ZSgyLCAyKSwgbmV3IEJyZXcuQ29vcmRpbmF0ZSgzLCAyKSwgbmV3IEJyZXcuQ29vcmRpbmF0ZSgxLCAyKSwgbmV3IEJyZXcuQ29vcmRpbmF0ZSg1LCA1KV0pXHJcbiAgICAvLyBkZWJ1Z2dlclxyXG4gICAgLy8gY29uc29sZS5sb2coXCJCXCIsIGJfc2V0KVxyXG4gICAgLy8gY29uc29sZS5sb2coXCJBK0IgdW5pb25cIiwgYl9zZXQuZ2V0VW5pb24oYV9zZXQpKVxyXG4gICAgLy8gY29uc29sZS5sb2coXCJBIGRpZmYgQlwiLCBhX3NldC5nZXREaWZmKGJfc2V0KSlcclxuICAgIC8vIGNvbnNvbGUubG9nKFwiQiBkaWZmIEFcIiwgYl9zZXQuZ2V0RGlmZihhX3NldCkpXHJcbiAgICAvLyBjb25zb2xlLmxvZyhcIkEgQiBzeW1tIGRpZmZcIiwgYV9zZXQuZ2V0U3ltbWV0cmljRGlmZihiX3NldCkpXHJcblxyXG59XHJcblxyXG4vLyB3aW5kb3cub25sb2FkID0gc3RhcnRHYW1lXHJcblxyXG4vLyB3aW5kb3cub25sb2FkID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbi8vICAgc29tZUZ1bmN0aW9uKHNvbWVBcmcsIHNvbWVPdGhlckFyZylcclxuLy8gfVxyXG5cclxuLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy85MDExMTUvaG93LWNhbi1pLWdldC1xdWVyeS1zdHJpbmctdmFsdWVzLWluLWphdmFzY3JpcHQvOTAxMTQ0IzkwMTE0NFxyXG5mdW5jdGlvbiBnZXRQYXJhbWV0ZXJCeU5hbWUobmFtZTogc3RyaW5nKSB7XHJcbiAgICB2YXIgbWF0Y2ggPSBSZWdFeHAoJ1s/Jl0nICsgbmFtZSArICc9KFteJl0qKScpLmV4ZWMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XHJcbiAgICByZXR1cm4gbWF0Y2ggJiYgZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzFdLnJlcGxhY2UoL1xcKy9nLCAnICcpKTtcclxufVxyXG5cclxudmFyIGdzZWVkID0gZ2V0UGFyYW1ldGVyQnlOYW1lKFwic2VlZFwiKVxyXG52YXIgdXNlX2Jvc3NfbW9kZSA9IEJvb2xlYW4oZ2V0UGFyYW1ldGVyQnlOYW1lKFwiYm9zc1wiKSlcclxuXHJcbmlmICh1c2VfYm9zc19tb2RlKSB7XHJcbiAgICBCcmV3LkRlYnVnLnRvZ2dsZUJvc3NNb2RlKHRydWUpXHJcblxyXG4gICAgXHJcbiAgICBsZXQgYmFja2dyb3VuZF9pbWdfc3JjID0gJ2h0dHBzOi8vd3d3Lmdvb2dsZS5jb20vaW1hZ2VzL2JyYW5kaW5nL2dvb2dsZWxvZ28vMXgvZ29vZ2xlbG9nb19jb2xvcl8yNzJ4OTJkcC5wbmcnXHJcbiAgICBsZXQgcGFyYW1faW1nID0gZ2V0UGFyYW1ldGVyQnlOYW1lKFwiaW1nXCIpXHJcblxyXG4gICAgaWYgKHBhcmFtX2ltZykge1xyXG4gICAgICAgIGJhY2tncm91bmRfaW1nX3NyYyA9IHBhcmFtX2ltZ1xyXG4gICAgfVxyXG4gICAgbGV0IGltZ0JhY2tncm91bmQgPSA8SFRNTEltYWdlRWxlbWVudD4oZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJpZF9pbWdfYmFja2dyb3VuZGNvdmVyXCIpKVxyXG4gICAgaW1nQmFja2dyb3VuZC5zcmMgPSBiYWNrZ3JvdW5kX2ltZ19zcmNcclxuXHJcbn1cclxuXHJcblxyXG5zdGFydEdhbWUoTnVtYmVyKGdzZWVkKSlcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/start.ts\n");

/***/ })

/******/ });